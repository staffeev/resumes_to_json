,Filename,Blocks,Text
0,source/Renat Ivanov.pdf,"['Renat IVANOV\\n', 'Senior Software Engineer\\n', 'Moscow\\n', '+7-999-000-4786\\nrenat@gmail.com\\nlinkedin.com/in/renat\\n', 'Experience\\n', 'Sberbank PJSC\\nJune 2018 – present\\n', 'Senior Software Engineer\\nMoscow, Russia\\n', '• Addressed a number of legal issues by developing from scratch and launching a service to control actions with various types of\\n', 'user consents. Designed the service to be usable from other company’s microservices and front-end widgets.\\n', '• Increased the speed of the sensitive mortgage cases by 50% by implementing, shipping and supporting the services that\\n', 'automate the process. Utilised message-driven architecture to provide high availability and reliability.\\n', '• Prototyped, organized, and led the development of an ETL-based advisory system to track skills of engineers in the company,\\n', 'bus factor of their teams, and other metrics. The system improved involvement of engineers, dev leads and CTO in the\\ndevelopment process.\\n', '• Created a performance testing process from scratch. It is used to simulate the expected load and thus to keep our services 99.99%\\n', 'available during peak load. Successfully combined jMeter, APM, cloud and monitoring tools to reach the goal.\\n', '• Curated development of the corporate portal Java team, applied microservices approach to deliver new features faster and\\n', 'safer. Mentored 2 back-end developers.\\n', '• Collaborated with back-end & front-end developers of other teams to design REST API contracts. Communicated directly with\\n', 'CTO and Team Leaders, worked with feedback. Applied clean code/architecture best practices on work.\\n', 'Sberbank-Technologies JSC\\nOctober 2015 – June 2018\\n', 'Leading Software Engineer\\nMoscow, Russia\\n', '• Eliminated possibilities of fraud and saved company millions of rubles by introducing blockage of working from two\\n', 'windows. Fixed security issues by updating the encryption library.\\n', '• Implemented individual currency conversion and interest rates features, that attracted hundreds of new customers and\\n', 'increased loyalty of existing ones. Gained experience with Enterprise Serial Bus architecture for integration with other systems.\\n', '• Boosted overall development productivity by extracting a service from the monolithic application with support of a\\n', 'dedicated DB and distributed transactions support.\\n', '• Successfully migrated functionality of the Deposit subsystem of the Bank Offices and Online Banking systems to\\n', 'microservices achieving 30% faster feature delivery. Analyzed, and fixed bugs and incidents on both front-end and\\nback-end.\\n', '• Sped up the development lifecycle by at least 20% and decreased the number of bugs by introducing git-flow with\\n', 'mandatory code review and Kotlin into the project. Co-authored, supported, and advocated the team agreement of\\narchitecture, API designing, and code style.\\n', '• Interviewed over 30 candidates for Java developer position. Onboarded, and mentored 3 new hires.\\n', 'AVP-Technology LLC\\nOctober 2014 – June 2015\\n', 'Software Engineer\\nMoscow, Russia\\n', '• Added new features, found and fixed bugs, refactored more than 200000 lines of unstructured and difficult-to-maintain legacy\\n', 'code. Updated and structured the project documentation.\\n', 'Open-Retail LLC\\nJune 2013 – March 2014\\n', 'Web Developer\\nMoscow, Russia\\n', '• Developed and launched 3 Internet shopping websites.\\n', '• Created a package solution for a CMS e-commerce websites consisted of cross-platform mobile app and its back-end.\\n', 'Education\\n', 'Peoples’ Friendship University Of Russia\\nSeptember 2011 – July 2013\\n', 'Master’s Degree in Control in Technical Systems\\nMoscow, Russia\\n', '• A 3rd-degree diploma was received for winning the contest with a paper called ”Cloud computing for solving control\\n', 'problems with the help of network operator method”\\n', 'Peoples’ Friendship University Of Russia\\nSeptember 2007 – July 2011\\n', 'Bachelor’s Degree in Automation and Control\\nMoscow, Russia\\n', 'Technical Skills\\n', 'Languages, frameworks: Java, Kotlin, Spring, Micronaut, MERN\\nMonitoring:\\nGrafana,\\nInfluxDB,\\nPrometheus\\n', 'Persistence: PostgreSQL, MySQL, MongoDB, JOOQ, JPA, JDBC\\nBuild,\\ntools:\\nMaven,\\nGradle;\\nGit,\\nIntelliJ\\nIDEA\\n', 'Integration: Feign, RestTemplate, RabbitMQ, IBM MQ\\nCI/CD, Testing: Jenkins, Docker, K8S; JUnit, Mockito\\n']","Renat IVANOV

Senior Software Engineer

Moscow

+7-999-000-4786
renat@gmail.com
linkedin.com/in/renat

Experience

Sberbank PJSC
June 2018 – present

Senior Software Engineer
Moscow, Russia

• Addressed a number of legal issues by developing from scratch and launching a service to control actions with various types of

user consents. Designed the service to be usable from other company’s microservices and front-end widgets.

• Increased the speed of the sensitive mortgage cases by 50% by implementing, shipping and supporting the services that

automate the process. Utilised message-driven architecture to provide high availability and reliability.

• Prototyped, organized, and led the development of an ETL-based advisory system to track skills of engineers in the company,

bus factor of their teams, and other metrics. The system improved involvement of engineers, dev leads and CTO in the
development process.

• Created a performance testing process from scratch. It is used to simulate the expected load and thus to keep our services 99.99%

available during peak load. Successfully combined jMeter, APM, cloud and monitoring tools to reach the goal.

• Curated development of the corporate portal Java team, applied microservices approach to deliver new features faster and

safer. Mentored 2 back-end developers.

• Collaborated with back-end & front-end developers of other teams to design REST API contracts. Communicated directly with

CTO and Team Leaders, worked with feedback. Applied clean code/architecture best practices on work.

Sberbank-Technologies JSC
October 2015 – June 2018

Leading Software Engineer
Moscow, Russia

• Eliminated possibilities of fraud and saved company millions of rubles by introducing blockage of working from two

windows. Fixed security issues by updating the encryption library.

• Implemented individual currency conversion and interest rates features, that attracted hundreds of new customers and

increased loyalty of existing ones. Gained experience with Enterprise Serial Bus architecture for integration with other systems.

• Boosted overall development productivity by extracting a service from the monolithic application with support of a

dedicated DB and distributed transactions support.

• Successfully migrated functionality of the Deposit subsystem of the Bank Offices and Online Banking systems to

microservices achieving 30% faster feature delivery. Analyzed, and fixed bugs and incidents on both front-end and
back-end.

• Sped up the development lifecycle by at least 20% and decreased the number of bugs by introducing git-flow with

mandatory code review and Kotlin into the project. Co-authored, supported, and advocated the team agreement of
architecture, API designing, and code style.

• Interviewed over 30 candidates for Java developer position. Onboarded, and mentored 3 new hires.

AVP-Technology LLC
October 2014 – June 2015

Software Engineer
Moscow, Russia

• Added new features, found and fixed bugs, refactored more than 200000 lines of unstructured and difficult-to-maintain legacy

code. Updated and structured the project documentation.

Open-Retail LLC
June 2013 – March 2014

Web Developer
Moscow, Russia

• Developed and launched 3 Internet shopping websites.

• Created a package solution for a CMS e-commerce websites consisted of cross-platform mobile app and its back-end.

Education

Peoples’ Friendship University Of Russia
September 2011 – July 2013

Master’s Degree in Control in Technical Systems
Moscow, Russia

• A 3rd-degree diploma was received for winning the contest with a paper called ”Cloud computing for solving control

problems with the help of network operator method”

Peoples’ Friendship University Of Russia
September 2007 – July 2011

Bachelor’s Degree in Automation and Control
Moscow, Russia

Technical Skills

Languages, frameworks: Java, Kotlin, Spring, Micronaut, MERN
Monitoring:
Grafana,
InfluxDB,
Prometheus

Persistence: PostgreSQL, MySQL, MongoDB, JOOQ, JPA, JDBC
Build,
tools:
Maven,
Gradle;
Git,
IntelliJ
IDEA

Integration: Feign, RestTemplate, RabbitMQ, IBM MQ
CI/CD, Testing: Jenkins, Docker, K8S; JUnit, Mockito

"
1,source/Eshi Juraev.pdf,"['SUMMARY\\n', 'Eshi Juraev\\n', 'Email: baaahayotoff@gmail.com\\n', 'LinkedIn: aaakhayot\\n', 'GitHub: aaakhayot\\n', 'Software engineer with 3+ years of experience in back-end development with designing and implementing scalable, cloud appli-\\ncations and microservice-based distributed systems using various technologies.\\n', 'EXPERIENCE\\n', 'Neulpum Maru — e-commerce platform in South Korea\\nRemote, Seoul - South Korea\\n', '•\\nSoftware Developer at Development Team\\nMar 2023 — Present\\n', '◦ Developed data scraping mechanisms using Python and web scraping tools for data collecting and analysing\\n◦ Built a secure back-end API integration for custom order service, enabling real-time data fetching and processing\\n◦ Implemented CRM system by distributing multiple services and integrating background workers using Celery and Redis\\n', 'Digital Entertainment\\nRemote, Daegu - South Korea\\n', '•\\nBackend Developer at Development Team\\nMar 2023 — Jul 2023\\n', '◦ Developed an AI chat bot application using the OpenAI Chat GPT API\\n◦ Customized the GPT model to respond as various famous characters, providing engaging and immersive interactions\\n◦ Integrated the application as part of a metaverse app, enhancing user experience within the virtual world\\n', 'Dirilis Group INC — Innovative IT Solutions Provider\\nRemote, Chicago - USA\\n', '•\\nBackend Developer at Development Team\\nJan 2023 — Mar 2023\\n', '◦ Implemented API integration using Python AWS Lambda functions (Serverless) by storing Data to DynamoDB on AWS\\n◦ Serviced Cron based jobs by scheduling tasks form AWS lambda functions\\n◦ Worked with Frontend Team to connect API callbacks from AWS API-Gateways from integrated data\\n', 'Papamarket — e-commerce platform in South Korea\\nSeoul, South Korea\\n', '•\\nSoftware Engineer at IT Development Team\\nJun 2022 — Mar 2023\\n', '◦ Implemented a scalable Demand Forecasting system using forecasting models and order datasets by enhancing accuracy\\n◦ Developed Warehouse System with real-time product quantity tracking service that reduced Fresh Team workload by 30%\\n◦ Built internal services for automation, data fetching, web scraping and data parsing using Python and JavaScript\\n◦ Implemented CI/CD pipeline for auto deployment using Jenkins and Github actions\\n', 'Keimyung University, Daegu — Outsourcing for Tech Companies\\nDaegu, South Korea\\n', '•\\nBackend Developer at Development Team\\nMar 2021 — May 2022\\n', '◦ Developed (HelpMeUp) Social Platform by bringing several services to solve problems of students during their semesters\\n◦ Implemented and maintained 10+ web applications by using Python and Go programming languages\\n◦ Created CRUD based RESTful APIs with JWT authentication methods by using Gin Framework of Golang\\n', 'SKILLS\\n', 'Languages:\\nPython, JavaScript, Go, C#, SQL\\n', 'Frameworks: Django, FastAPI, Flask, NodeJS, EspressJS, ES6, JQuery, SpringBoot, Gin, PostgreSQL, MySQL, SQLite3\\nOthers:\\nDocker, Kafka, Celery, Redis, Jenkins, Linux, AWS, Unity Game Engine\\n', 'EDUCATION\\n', '◦ Bachelor of Engineering in Game Mobile Engineering, Keimyung University\\nMar 2020 — Jul 2023\\n', 'Relevant courses: Operating Systems, AI in Game Development, Distributed Systems, Databases, Web Development,\\nAlgorithms, Data Structures, Data Communication, Object Oriented Programming, Networks\\n', 'ADDITIONAL\\n', '◦ Languages: English, Russian, Korean, Uzbek\\n◦ Volunteering: Mentored and reviewed homework assignments at Coding School (KMU) programming for beginners\\n◦ Awards: Best English Translator and Guide of IT Development Team (Papamarket)\\n']","SUMMARY

Eshi Juraev

Email: baaahayotoff@gmail.com

LinkedIn: aaakhayot

GitHub: aaakhayot

Software engineer with 3+ years of experience in back-end development with designing and implementing scalable, cloud appli-
cations and microservice-based distributed systems using various technologies.

EXPERIENCE

Neulpum Maru — e-commerce platform in South Korea
Remote, Seoul - South Korea

•
Software Developer at Development Team
Mar 2023 — Present

◦ Developed data scraping mechanisms using Python and web scraping tools for data collecting and analysing
◦ Built a secure back-end API integration for custom order service, enabling real-time data fetching and processing
◦ Implemented CRM system by distributing multiple services and integrating background workers using Celery and Redis

Digital Entertainment
Remote, Daegu - South Korea

•
Backend Developer at Development Team
Mar 2023 — Jul 2023

◦ Developed an AI chat bot application using the OpenAI Chat GPT API
◦ Customized the GPT model to respond as various famous characters, providing engaging and immersive interactions
◦ Integrated the application as part of a metaverse app, enhancing user experience within the virtual world

Dirilis Group INC — Innovative IT Solutions Provider
Remote, Chicago - USA

•
Backend Developer at Development Team
Jan 2023 — Mar 2023

◦ Implemented API integration using Python AWS Lambda functions (Serverless) by storing Data to DynamoDB on AWS
◦ Serviced Cron based jobs by scheduling tasks form AWS lambda functions
◦ Worked with Frontend Team to connect API callbacks from AWS API-Gateways from integrated data

Papamarket — e-commerce platform in South Korea
Seoul, South Korea

•
Software Engineer at IT Development Team
Jun 2022 — Mar 2023

◦ Implemented a scalable Demand Forecasting system using forecasting models and order datasets by enhancing accuracy
◦ Developed Warehouse System with real-time product quantity tracking service that reduced Fresh Team workload by 30%
◦ Built internal services for automation, data fetching, web scraping and data parsing using Python and JavaScript
◦ Implemented CI/CD pipeline for auto deployment using Jenkins and Github actions

Keimyung University, Daegu — Outsourcing for Tech Companies
Daegu, South Korea

•
Backend Developer at Development Team
Mar 2021 — May 2022

◦ Developed (HelpMeUp) Social Platform by bringing several services to solve problems of students during their semesters
◦ Implemented and maintained 10+ web applications by using Python and Go programming languages
◦ Created CRUD based RESTful APIs with JWT authentication methods by using Gin Framework of Golang

SKILLS

Languages:
Python, JavaScript, Go, C#, SQL

Frameworks: Django, FastAPI, Flask, NodeJS, EspressJS, ES6, JQuery, SpringBoot, Gin, PostgreSQL, MySQL, SQLite3
Others:
Docker, Kafka, Celery, Redis, Jenkins, Linux, AWS, Unity Game Engine

EDUCATION

◦ Bachelor of Engineering in Game Mobile Engineering, Keimyung University
Mar 2020 — Jul 2023

Relevant courses: Operating Systems, AI in Game Development, Distributed Systems, Databases, Web Development,
Algorithms, Data Structures, Data Communication, Object Oriented Programming, Networks

ADDITIONAL

◦ Languages: English, Russian, Korean, Uzbek
◦ Volunteering: Mentored and reviewed homework assignments at Coding School (KMU) programming for beginners
◦ Awards: Best English Translator and Guide of IT Development Team (Papamarket)

"
2,source/Alexandr Burakov.pdf,"['Alexandr Burakov\\n', '(+38) 097-000-81-95 | buaaaov.r@gmail.com | linkedin.com/in/alex-burakov/ | github.com/Anvaaandre\\n', 'EDUCATION\\n', 'MFTI\\nSep 2019 – June 2023\\n', 'Bachelor of Computer Science\\nMoscow\\n', '• Relevant coursework: algorithms and data structures, OOP, calculus, linear algebra, advanced graph theory\\n', '• GPA – 4.20 out of 5\\n', 'EXPERIENCE\\n', 'Data Scientist\\nMar 2021 – Present\\n', 'Fozzy Group\\nMoscow\\n', '• Conducted research and implemented embedding models that helped with cold-start forecasting\\n', '• Reviewed and refactored project codebase, which led to much faster iteration and onboarding process\\n', '• Performed multiple feature engineering & selection cycles, leading to higher and much cleaner scores\\n', '• Participated in early-stage project evaluation: from interpreting business task as ML problem to first MVPs\\n', '• Contributed to establishing pipeline standards and documentation\\n', 'Machine Learning Engineer\\nJan 2021 – Mar 2021\\n', 'Computer Vision startup under NDA\\nMoscow\\n', '• Carried out error analysis and engineered several features which lead to 15% increase in model’s performance\\n', '• Developed visualization and evaluation tools that lead to a better understanding of model’s error\\n', '• Optimized post-processing pipeline for real-time visualizations\\n', 'Researcher\\nNov 2020 – May 2021\\n', 'Fido.ai, NaUKMA\\nMoscow\\n', '• Performed code and PR reviews\\n', '• Established question answering baseline\\n', '• Implemented LSTM model for ethnicity classification\\n', '• Made Linear Regression tutorial for newbees\\n', 'Math and Computer Science tutor\\nJune 2020 – Aug 2020\\n', 'Self-employed\\nMoscow\\n', '• 6 students of different age (from 12 to 17)\\n', '• 100% positive feedback rate\\n', 'PROJECTS\\n', 'OpenCV demos | Python, OpenCV\\nAug 2020\\n', '• Substituting sheet of paper with a honey badger image in real-time\\n', '• Detection of AruCo markers and figuring out their angles of rotation in real-time\\n', '• Telegram bot that substitutes all faces in picture with a pre-made face mask\\n', 'Siamese neural network | Python, Keras\\nJan 2019\\n', '• Performed data collection and augmentation\\n', '• Implemented and trained a Siamese neural network with skip-gram technique\\n', '• Achieved 95% accuracy on predicting whether two chords are used in same context\\n', '• Published a research paper on this project\\n', 'ACHIEVEMENTS\\n', '1% of 100.000 (estimated) participants in Junior Academy of Sciences of Ukraine contest\\nMar 2019\\n', 'Published a research paper on deep similarity learning of piano chords with a Siamese Neural Network\\nOct 2018\\n', 'SKILLS\\n', 'Programming Languages: Python, Java, SQL (Postgres, MS SQL), C++ and Haskell (beginner)\\nFrameworks: PyTorch (preffered), Keras, LightGBM, Dask\\n', 'Tools: Anaconda, Git, Linux, Jupyter, Streamlit, MLFlow\\nLibraries: scientific Python kit (numpy, pandas, matplotlib, etc.), Flask\\nLanguages: English (advanced), Russian (native)\\n']","Alexandr Burakov

(+38) 097-000-81-95 | buaaaov.r@gmail.com | linkedin.com/in/alex-burakov/ | github.com/Anvaaandre

EDUCATION

MFTI
Sep 2019 – June 2023

Bachelor of Computer Science
Moscow

• Relevant coursework: algorithms and data structures, OOP, calculus, linear algebra, advanced graph theory

• GPA – 4.20 out of 5

EXPERIENCE

Data Scientist
Mar 2021 – Present

Fozzy Group
Moscow

• Conducted research and implemented embedding models that helped with cold-start forecasting

• Reviewed and refactored project codebase, which led to much faster iteration and onboarding process

• Performed multiple feature engineering & selection cycles, leading to higher and much cleaner scores

• Participated in early-stage project evaluation: from interpreting business task as ML problem to first MVPs

• Contributed to establishing pipeline standards and documentation

Machine Learning Engineer
Jan 2021 – Mar 2021

Computer Vision startup under NDA
Moscow

• Carried out error analysis and engineered several features which lead to 15% increase in model’s performance

• Developed visualization and evaluation tools that lead to a better understanding of model’s error

• Optimized post-processing pipeline for real-time visualizations

Researcher
Nov 2020 – May 2021

Fido.ai, NaUKMA
Moscow

• Performed code and PR reviews

• Established question answering baseline

• Implemented LSTM model for ethnicity classification

• Made Linear Regression tutorial for newbees

Math and Computer Science tutor
June 2020 – Aug 2020

Self-employed
Moscow

• 6 students of different age (from 12 to 17)

• 100% positive feedback rate

PROJECTS

OpenCV demos | Python, OpenCV
Aug 2020

• Substituting sheet of paper with a honey badger image in real-time

• Detection of AruCo markers and figuring out their angles of rotation in real-time

• Telegram bot that substitutes all faces in picture with a pre-made face mask

Siamese neural network | Python, Keras
Jan 2019

• Performed data collection and augmentation

• Implemented and trained a Siamese neural network with skip-gram technique

• Achieved 95% accuracy on predicting whether two chords are used in same context

• Published a research paper on this project

ACHIEVEMENTS

1% of 100.000 (estimated) participants in Junior Academy of Sciences of Ukraine contest
Mar 2019

Published a research paper on deep similarity learning of piano chords with a Siamese Neural Network
Oct 2018

SKILLS

Programming Languages: Python, Java, SQL (Postgres, MS SQL), C++ and Haskell (beginner)
Frameworks: PyTorch (preffered), Keras, LightGBM, Dask

Tools: Anaconda, Git, Linux, Jupyter, Streamlit, MLFlow
Libraries: scientific Python kit (numpy, pandas, matplotlib, etc.), Flask
Languages: English (advanced), Russian (native)

"
3,source/Yan Doe.pdf,"['Yan.doe@gmail.com\\n', 'Senior Backend Developer\\nhttps://www.linkedin.com/in/Yan-doe\\n', 'Yan Doe\\n', 'Professional Experience\\n', '123 Technology Services\\nSome town1\\n', 'Senior Java Developer, online advertising platform\\nSep 2020 ‑ present\\n', '• Within a team, designed and developed an online advertising platform for the Belgian media company.\\n• Implemented integration with a payment provider and internal financial system.\\n• Reduced production deployment cycle from 2 month to 2 weeks.\\n• Was involved in interviewing, mentoring, and onboarding activities.\\nPrimary technologies: Java 11, AWS, Quarkus, Postgres, Terraform\\n', '345 company\\nSome town2\\n', 'Java Developer, risk management solution for car loans\\nMar 2019 ‑ Aug 2020\\n', '• Designed and implemented online service for one of top 20 world bank that is using by car dealers in Germany. The product automates the\\n', 'process of getting credits for cars and has all necessary services within one platform for car dealers and bank managers.\\n', '• Implemented push notifications system sending tens of types of notifications to internal and external users. The system increased user engagement.\\n• Implemented integration with the archive system. The integration reduced the time of loan application processing by 10%\\nPrimary technologies: Java 11, Spring, ActiveMQ, Postgres, Kubernetes\\n', '789 Systems\\nSome town3\\n', 'Java Developer, financial risk analysis solution\\nSep 2017 ‑ Mar 2019\\n', '• Developed a solution for getting information about the ultimate beneficial owners of the business. The product became a part of the financial risk\\n', 'analysis platform.\\n', '• Production environment configuration and deployment.\\n• Implemented integration with an external system for getting information about company owners.\\nPrimary technologies: Java 8, Guice, AWS, Jenkins\\n', 'Super company\\nSome town4\\n', 'Java Developer, ERP implementation project\\nSep 2016 ‑ Dec 2017\\n', '• Integrated ERP system with internal logistic services.\\n• Developed an online dashboard for predicting the number of parcels that will come to the logistic hub in the time range.\\n• General debugging, bug fixing, and refactoring.\\n', 'Education\\n', 'Sometown National Technical Univeristy\\nSome town5, country\\n', 'Master’s degree, Economic cybernetics\\n2008 ‑ 2013\\n', 'AWS Certified Solutions Architect – Associate\\nOracle Certified Associate, Java SE 8 Programmer\\n']","Yan.doe@gmail.com

Senior Backend Developer
https://www.linkedin.com/in/Yan-doe

Yan Doe

Professional Experience

123 Technology Services
Some town1

Senior Java Developer, online advertising platform
Sep 2020 ‑ present

• Within a team, designed and developed an online advertising platform for the Belgian media company.
• Implemented integration with a payment provider and internal financial system.
• Reduced production deployment cycle from 2 month to 2 weeks.
• Was involved in interviewing, mentoring, and onboarding activities.
Primary technologies: Java 11, AWS, Quarkus, Postgres, Terraform

345 company
Some town2

Java Developer, risk management solution for car loans
Mar 2019 ‑ Aug 2020

• Designed and implemented online service for one of top 20 world bank that is using by car dealers in Germany. The product automates the

process of getting credits for cars and has all necessary services within one platform for car dealers and bank managers.

• Implemented push notifications system sending tens of types of notifications to internal and external users. The system increased user engagement.
• Implemented integration with the archive system. The integration reduced the time of loan application processing by 10%
Primary technologies: Java 11, Spring, ActiveMQ, Postgres, Kubernetes

789 Systems
Some town3

Java Developer, financial risk analysis solution
Sep 2017 ‑ Mar 2019

• Developed a solution for getting information about the ultimate beneficial owners of the business. The product became a part of the financial risk

analysis platform.

• Production environment configuration and deployment.
• Implemented integration with an external system for getting information about company owners.
Primary technologies: Java 8, Guice, AWS, Jenkins

Super company
Some town4

Java Developer, ERP implementation project
Sep 2016 ‑ Dec 2017

• Integrated ERP system with internal logistic services.
• Developed an online dashboard for predicting the number of parcels that will come to the logistic hub in the time range.
• General debugging, bug fixing, and refactoring.

Education

Sometown National Technical Univeristy
Some town5, country

Master’s degree, Economic cybernetics
2008 ‑ 2013

AWS Certified Solutions Architect – Associate
Oracle Certified Associate, Java SE 8 Programmer

"
4,source/Marat Dolya.pdf,"['Marat Dolya\\n', 'aaaam.dolya@gmail.com\\n', '+14000075075\\nlinkedin.com/in/aaaaolya\\n', 'Summary\\n', '• 19+ years of experience in building various software solutions (.NET/.NET Core as a main Stack)\\n• In my previous company I went from team lead to .NET Software Architect managing team 16\\n•\\nCurrently I’m a solutions architect helping teams to adopt services at AWS, and improving SaaS\\n', 'platform sales attractiveness and standardization\\n', 'Experience\\n', 'Software Architect\\n', 'Itera\\n', 'Jul 2023 - Aug 2023 (2 months)\\n• Requirements gathering\\n• Presales\\n', 'Cloud Solutions Architect\\n', 'Itera\\n', 'Nov 2021 - Jun 2023 (1 year 8 months)\\n• Supported teams in migrating and adapting services from on-premise to the cloud.\\n• Consulted teams for developing cloud-native applications.\\n• Introduced an open-source API management tool after conducting market research.\\n• Provided Requirements Analysis in communication with UX and Frontend team for proof of concept.\\n•\\nPresented other scenarios of API management tool used to improve the software\\n', 'development process.\\n', '• Designed architecture solutions and contributed to overall strategic planning.\\n• Actively participated in knowledge-sharing activities within the team.\\n', 'Software Architect\\nNamecheap, Inc\\n', 'Apr 2018 - Oct 2021 (3 years 7 months)\\n• Provided interviews and code reviews.\\n• Led the integration of a child product with the main one.\\n• Led migration of company products from on-premises to AWS cloud.\\n', 'Technical Lead\\nNamecheap, Inc\\n', 'Mar 2016 - Mar 2018 (2 years 1 month)\\n', '• Led the development of a multifunctional team of developers, QA, and product owners.\\n• Managed team of 16\\nIntroduced Software Development Life Cycle for existing WCF application and introduced database\\nmigrations for Microsoft SQL Server to Windows servers.\\n• Designed solution architecture for key systems.\\n•\\nDecoupled a monolithic product to a service-oriented, Linux-friendly, cloud-agnostic\\n', 'system, and migrated\\nthe database from on-premise to AWS Postgres.\\n• Designed highly-available web services.\\n• Improved customer support effectiveness by providing training and demos.\\n• Implemented IdentityServer4 as the main security tool at the company-wide level.\\n', 'Technical Lead\\nDev.Pro\\n', 'Jul 2015 - Mar 2016 (9 months)\\n• Improved communication and collaboration between the development team and QA.\\n• Introduced best practices from Agile Methodologies to the team.\\n• Conducted interviews and code reviews for efficient resource allocation.\\n• Developed integrations with Microsoft Exchange to enhance functionality.\\n• Automated deployment processes and initiated the migration from Bugzilla and SVN to TFS.\\n• Provided support to other teams for backend integration.\\n• Actively involved in software development and gathering requirements.\\n', 'Team Lead\\n', 'TEAM International\\n', 'Sep 2014 - Jun 2015 (10 months)\\n• Gathered requirements and facilitated effective communication with stakeholders.\\n• Conducted code reviews and interviews to ensure code quality and team productivity.\\n• Developed software for CMS systems.\\n• Designed services based on best practices from Agile methodologies.\\n• Introduced and implemented Agile practices within the team\\n', 'Senior .NET Developer\\nAntarasoft Ltd\\n', 'Jan 2009 - Oct 2009 (10 months)\\n•\\nActively participated in the development of desktop and web applications, ensuring the\\n', 'delivery of high-quality solutions.\\n• Conducted code reviews to maintain code quality and adherence to best practices.\\n• Led the design and development of applications from scratch, meeting client requirements.\\n• Gathered requirements and maintained effective communication with customers\\n', 'Developer\\nTerrapoint Canada (Ambercore)\\n', 'Sep 2004 - Dec 2008 (4 years 4 months)\\n• Developed software solutions for desktop applications, meeting client requirements.\\n• Conducted code reviews to ensure adherence to coding standards and maintain code quality.\\n• Gathered requirements and actively participated in communication with customers.\\n', 'Education\\n', 'National Technical University ""Kharkiv Polytechnic Institute""\\nEngineer – System Analyst, Information Management Systems and Technologies\\n', 'Sep 1998 - Feb 2004\\n']","Marat Dolya

aaaam.dolya@gmail.com

+14000075075
linkedin.com/in/aaaaolya

Summary

• 19+ years of experience in building various software solutions (.NET/.NET Core as a main Stack)
• In my previous company I went from team lead to .NET Software Architect managing team 16
•
Currently I’m a solutions architect helping teams to adopt services at AWS, and improving SaaS

platform sales attractiveness and standardization

Experience

Software Architect

Itera

Jul 2023 - Aug 2023 (2 months)
• Requirements gathering
• Presales

Cloud Solutions Architect

Itera

Nov 2021 - Jun 2023 (1 year 8 months)
• Supported teams in migrating and adapting services from on-premise to the cloud.
• Consulted teams for developing cloud-native applications.
• Introduced an open-source API management tool after conducting market research.
• Provided Requirements Analysis in communication with UX and Frontend team for proof of concept.
•
Presented other scenarios of API management tool used to improve the software

development process.

• Designed architecture solutions and contributed to overall strategic planning.
• Actively participated in knowledge-sharing activities within the team.

Software Architect
Namecheap, Inc

Apr 2018 - Oct 2021 (3 years 7 months)
• Provided interviews and code reviews.
• Led the integration of a child product with the main one.
• Led migration of company products from on-premises to AWS cloud.

Technical Lead
Namecheap, Inc

Mar 2016 - Mar 2018 (2 years 1 month)

• Led the development of a multifunctional team of developers, QA, and product owners.
• Managed team of 16
Introduced Software Development Life Cycle for existing WCF application and introduced database
migrations for Microsoft SQL Server to Windows servers.
• Designed solution architecture for key systems.
•
Decoupled a monolithic product to a service-oriented, Linux-friendly, cloud-agnostic

system, and migrated
the database from on-premise to AWS Postgres.
• Designed highly-available web services.
• Improved customer support effectiveness by providing training and demos.
• Implemented IdentityServer4 as the main security tool at the company-wide level.

Technical Lead
Dev.Pro

Jul 2015 - Mar 2016 (9 months)
• Improved communication and collaboration between the development team and QA.
• Introduced best practices from Agile Methodologies to the team.
• Conducted interviews and code reviews for efficient resource allocation.
• Developed integrations with Microsoft Exchange to enhance functionality.
• Automated deployment processes and initiated the migration from Bugzilla and SVN to TFS.
• Provided support to other teams for backend integration.
• Actively involved in software development and gathering requirements.

Team Lead

TEAM International

Sep 2014 - Jun 2015 (10 months)
• Gathered requirements and facilitated effective communication with stakeholders.
• Conducted code reviews and interviews to ensure code quality and team productivity.
• Developed software for CMS systems.
• Designed services based on best practices from Agile methodologies.
• Introduced and implemented Agile practices within the team

Senior .NET Developer
Antarasoft Ltd

Jan 2009 - Oct 2009 (10 months)
•
Actively participated in the development of desktop and web applications, ensuring the

delivery of high-quality solutions.
• Conducted code reviews to maintain code quality and adherence to best practices.
• Led the design and development of applications from scratch, meeting client requirements.
• Gathered requirements and maintained effective communication with customers

Developer
Terrapoint Canada (Ambercore)

Sep 2004 - Dec 2008 (4 years 4 months)
• Developed software solutions for desktop applications, meeting client requirements.
• Conducted code reviews to ensure adherence to coding standards and maintain code quality.
• Gathered requirements and actively participated in communication with customers.

Education

National Technical University ""Kharkiv Polytechnic Institute""
Engineer – System Analyst, Information Management Systems and Technologies

Sep 1998 - Feb 2004

"
5,source/Albert SERIAKOV.pdf,"['Albert SERIAKOV\\n', 'Moscow, Russia • +7(968) 000-5611 • saaakov@gmail.com\\n', 'Position of Interest:\\n', 'Consultant, Information Technology (IT)\\n', 'Offer the following qualifications:\\n', '●\\nEstablish procedures and implement policies; Consult and advise clients; Confer with clients to identify and\\ndocument requirements; Provide advice on information systems strategy, policy, management and service\\ndelivery; Develop and implement policies and procedures throughout the software development life cycle;\\n', ""●\\nAnalyze test results and instrument readings; Analyze clients' financial records; Analyze data and prepare\\nreports.\\n"", '●\\nManage distributed teams, project management, coaching; maintain excellent interpersonal\\ncommunications, time management, and problem resolution skills.\\n', 'Languages: ABAP, SQL\\n', 'Software: Windows 7/10, Microsoft Office, Project, Visio, Power Point, ARIS, Jira, Confluence and SAP\\n', 'HCM/SD/MM\\n', 'Relevant Experience\\n', 'Head of HCM Department,\\n10.2016 - Present\\n', 'HCM Department, SAP ERP Division, AT Consulting, Moscow\\n', '●\\nPre-sale and sale, both within the framework of its direction, and in other areas of SAP practice;\\n', '●\\nOrganization and coordination of the work of SAP HCM;\\n', '●\\nOrganization of work of project teams on projects;\\n', '●\\nCoordination of work with the Customer, negotiation and coordination of deadlines and tasks;\\n', '●\\nPreparation and conduct of tenders, project evaluation, preparation of commercial proposals;\\n', '●\\nIOT projects design.\\n', 'Achievements:\\n• SAP HCM practice created;\\n• Developing the direction of customer experience;\\n• All projects were finished with positive profitability.\\n', 'Leading Consultant,\\n12.2015 – 10.2016\\n', 'HCM practice, Implementation Division, MOLGA Consulting, Moscow\\n', '●\\nPre-sale, project appraisal and planning, preparation of indicative and commercial proposals;\\n', '●\\nProjects for the implementation of SAP HCM;\\n', '●\\nMeetings with the customer on the development of design solutions. The solution of methodological issues.\\nDevelopment of design solutions.\\n', 'Team Leader,\\n02.2015 – 12.2015\\n', 'HCM practice, ERP Division, Science IT University, Moscow\\n', '●\\nManagement of consultants of the PY-center;\\n', '●\\nNegotiation with the customers;\\n', '●\\nDevelopment of design solutions, graphic models for describing business processes;\\n', '●\\nSupervising the work of consultants from a subcontractor\\n', 'Senior Consultant,\\n08.2012 – 02.2015\\n', 'SAP HCM Department, HR Division, METRO Cash&Carry, Moscow\\n', '●\\nDevelopment and support of the SAP HCM (PA, OM, PT, PY);\\n', '●\\nABAP development.\\n', 'Consultant,\\n03.2011 – 08.2012\\n', 'SAP HCM Department, ERP Division, BDO Consulting, Moscow\\n', '●\\nDevelopment and implementation of the PW module - piecework pay (Z);\\n', '●\\nSettings of PY changes.\\n', 'Achievements:\\n• Developed the concept of the Z-module ""Calculation of piecework wages."";\\n• Successfully integrated the module into the SAP HCM.\\n', 'Consultant,\\n04.2010 – 03.2011\\n', 'IT Develop Department, IT Division, Adidas, Moscow\\n', '●\\nDevelopment and support of the SAP HCM (PA, OM, PT, PY).\\n', 'Consultant,\\n04.2009 – 03.2011\\n', 'IT Support Department, IT Division, Kopeyka, Moscow\\n', '●\\nSupport for business processes based on SAP ERP, SD / MM modules.\\n', 'Achievements:\\n•\\nSuccessful implementation of a parallelization project for inventory accounting and sales\\n', 'analysis on servers.\\n', 'Education\\n', 'Bachelor of Engineering – Electronic Systems Engineering, 2012\\n', 'BMSTU Bauman Moscow State Technical University\\n', 'Bachelor of Economy – Electronic Systems Engineering, 2016\\n', 'Financial University under the Government of the Russian Federation (Diploma with Honor)\\n', 'SAP CIS, SAP Certified Application Associate - SAP HCM ERP 6.0 EHP7, 2018\\n']","Albert SERIAKOV

Moscow, Russia • +7(968) 000-5611 • saaakov@gmail.com

Position of Interest:

Consultant, Information Technology (IT)

Offer the following qualifications:

●
Establish procedures and implement policies; Consult and advise clients; Confer with clients to identify and
document requirements; Provide advice on information systems strategy, policy, management and service
delivery; Develop and implement policies and procedures throughout the software development life cycle;

●
Analyze test results and instrument readings; Analyze clients' financial records; Analyze data and prepare
reports.

●
Manage distributed teams, project management, coaching; maintain excellent interpersonal
communications, time management, and problem resolution skills.

Languages: ABAP, SQL

Software: Windows 7/10, Microsoft Office, Project, Visio, Power Point, ARIS, Jira, Confluence and SAP

HCM/SD/MM

Relevant Experience

Head of HCM Department,
10.2016 - Present

HCM Department, SAP ERP Division, AT Consulting, Moscow

●
Pre-sale and sale, both within the framework of its direction, and in other areas of SAP practice;

●
Organization and coordination of the work of SAP HCM;

●
Organization of work of project teams on projects;

●
Coordination of work with the Customer, negotiation and coordination of deadlines and tasks;

●
Preparation and conduct of tenders, project evaluation, preparation of commercial proposals;

●
IOT projects design.

Achievements:
• SAP HCM practice created;
• Developing the direction of customer experience;
• All projects were finished with positive profitability.

Leading Consultant,
12.2015 – 10.2016

HCM practice, Implementation Division, MOLGA Consulting, Moscow

●
Pre-sale, project appraisal and planning, preparation of indicative and commercial proposals;

●
Projects for the implementation of SAP HCM;

●
Meetings with the customer on the development of design solutions. The solution of methodological issues.
Development of design solutions.

Team Leader,
02.2015 – 12.2015

HCM practice, ERP Division, Science IT University, Moscow

●
Management of consultants of the PY-center;

●
Negotiation with the customers;

●
Development of design solutions, graphic models for describing business processes;

●
Supervising the work of consultants from a subcontractor

Senior Consultant,
08.2012 – 02.2015

SAP HCM Department, HR Division, METRO Cash&Carry, Moscow

●
Development and support of the SAP HCM (PA, OM, PT, PY);

●
ABAP development.

Consultant,
03.2011 – 08.2012

SAP HCM Department, ERP Division, BDO Consulting, Moscow

●
Development and implementation of the PW module - piecework pay (Z);

●
Settings of PY changes.

Achievements:
• Developed the concept of the Z-module ""Calculation of piecework wages."";
• Successfully integrated the module into the SAP HCM.

Consultant,
04.2010 – 03.2011

IT Develop Department, IT Division, Adidas, Moscow

●
Development and support of the SAP HCM (PA, OM, PT, PY).

Consultant,
04.2009 – 03.2011

IT Support Department, IT Division, Kopeyka, Moscow

●
Support for business processes based on SAP ERP, SD / MM modules.

Achievements:
•
Successful implementation of a parallelization project for inventory accounting and sales

analysis on servers.

Education

Bachelor of Engineering – Electronic Systems Engineering, 2012

BMSTU Bauman Moscow State Technical University

Bachelor of Economy – Electronic Systems Engineering, 2016

Financial University under the Government of the Russian Federation (Diploma with Honor)

SAP CIS, SAP Certified Application Associate - SAP HCM ERP 6.0 EHP7, 2018

"
6,source/DANIIL BULYGA.pdf,"['Igor Korniltsev \\n', 'Data Scientist Team Leader \\nSaint Petersburg, Russian Federation \\n+79226039000 \\nkornilaaaa@yandex.ru \\n', ' \\n \\n', 'SUMMARY \\n', ' \\n', 'Data Scientist with 5+ years of experience in using predictive modeling, data processing and data mining algorithms to \\nsolve challenging business problems. Involved in Python open source community and passionate about deep learning. \\nCompetencies include leading teams and large portfolios of data science projects, representing the company at \\nconferences through public speaking, working with diverse ML-technologies: NLP, NN, Recommender Systems, ensuring \\ngood communication between the parties to optimize strategies. \\n', ' \\n', 'WORK EXPERIENCE \\n', ' \\n', 'Sberbank. Data Scientist Team Leader \\n', 'Jul 2017 – Present \\n', '/ Led 2 teams of 5 data scientists working on 10 different projects in the banking sphere \\n/ Built a scalable PySpark pipeline for data processing from scratch which increased the overall productivity by 40% \\n/ Built a model based on a payments graph, using embedding outputs from several models such as collaborative \\n', 'filtering, content-based factorisation, word2vec, LDA, to identify the company’s business industry. It earned the bank \\n$100M \\n', '/ Used 2B+ documents to train spark word2vec embeddings to improve 20+ bank’s models \\n/ Collaborated with DevOps and Data Engineers that increased team’s productivity and speeded up the time to market \\n/ Deployed into production 8 models in one year using Python, Spark, Jenkins. The result was marked as the highest \\n', 'across 15 DS teams \\n', '/ Created a model capable of predicting the annual revenue of 4 million companies. The model was widely covered in \\n', 'mass media and presented at the main national conference \\n', '/ Ensured good communication between CEOs and engineers to optimize strategies \\n/ Represented the company in AI/ML research at conferences through public speaking \\n', ' \\n', 'Mobile Telesystem (MBT). Data Scientist \\n', 'Jul 2015 – Jun 2017 \\n', '/ Designed and created an anomaly detection system from start to finish (from data mining and modelling to creating the \\n', 'report in Tableau for data analysts) which saved the company more than $2M per year \\n', '/ Implemented a technique based on sARIMA and time series classification to identify suspicious patterns in network \\n', 'traffic \\n', '/ Established Tableau BI report for highlighting risk zone, e.g. fraude events, equipment breaks, which decreased \\n', 'the time-to-insights by 148% and saved more than 30% of data analysis time \\n', '/ Used 10000M+ transactions in an ETL-process via SAS EG and Teradata \\n/ Built strong communication across parties to successfully launch the project \\n', ' \\n', 'SKILLS \\n', ' \\n', 'Languages \\n', 'Python \\nSQL \\nScala \\n', 'ML \\n', 'Classification \\nRegression \\nRecSys \\nTime \\nSeries \\n', 'Databases \\n', 'Hadoop/Spark \\nOracle \\nPL/SQL \\nTeradata \\n', 'BI \\n', 'Tableau \\nPower \\nBI Excel \\n', ' \\n', 'EDUCATION \\n', ' \\n', '/ Ural Federal University. Bachelor’s degree of Program engineering, 6/2021 \\n/ Ural Federal University. Master’s degree of Financial markets and investments, 6/2014 \\n/ Ural State Mining University. Master’s degree of Underground construction, 5/2012 \\n']","Igor Korniltsev 

Data Scientist Team Leader 
Saint Petersburg, Russian Federation 
+79226039000 
kornilaaaa@yandex.ru 

 
 

SUMMARY 

 

Data Scientist with 5+ years of experience in using predictive modeling, data processing and data mining algorithms to 
solve challenging business problems. Involved in Python open source community and passionate about deep learning. 
Competencies include leading teams and large portfolios of data science projects, representing the company at 
conferences through public speaking, working with diverse ML-technologies: NLP, NN, Recommender Systems, ensuring 
good communication between the parties to optimize strategies. 

 

WORK EXPERIENCE 

 

Sberbank. Data Scientist Team Leader 

Jul 2017 – Present 

/ Led 2 teams of 5 data scientists working on 10 different projects in the banking sphere 
/ Built a scalable PySpark pipeline for data processing from scratch which increased the overall productivity by 40% 
/ Built a model based on a payments graph, using embedding outputs from several models such as collaborative 

filtering, content-based factorisation, word2vec, LDA, to identify the company’s business industry. It earned the bank 
$100M 

/ Used 2B+ documents to train spark word2vec embeddings to improve 20+ bank’s models 
/ Collaborated with DevOps and Data Engineers that increased team’s productivity and speeded up the time to market 
/ Deployed into production 8 models in one year using Python, Spark, Jenkins. The result was marked as the highest 

across 15 DS teams 

/ Created a model capable of predicting the annual revenue of 4 million companies. The model was widely covered in 

mass media and presented at the main national conference 

/ Ensured good communication between CEOs and engineers to optimize strategies 
/ Represented the company in AI/ML research at conferences through public speaking 

 

Mobile Telesystem (MBT). Data Scientist 

Jul 2015 – Jun 2017 

/ Designed and created an anomaly detection system from start to finish (from data mining and modelling to creating the 

report in Tableau for data analysts) which saved the company more than $2M per year 

/ Implemented a technique based on sARIMA and time series classification to identify suspicious patterns in network 

traffic 

/ Established Tableau BI report for highlighting risk zone, e.g. fraude events, equipment breaks, which decreased 

the time-to-insights by 148% and saved more than 30% of data analysis time 

/ Used 10000M+ transactions in an ETL-process via SAS EG and Teradata 
/ Built strong communication across parties to successfully launch the project 

 

SKILLS 

 

Languages 

Python 
SQL 
Scala 

ML 

Classification 
Regression 
RecSys 
Time 
Series 

Databases 

Hadoop/Spark 
Oracle 
PL/SQL 
Teradata 

BI 

Tableau 
Power 
BI Excel 

 

EDUCATION 

 

/ Ural Federal University. Bachelor’s degree of Program engineering, 6/2021 
/ Ural Federal University. Master’s degree of Financial markets and investments, 6/2014 
/ Ural State Mining University. Master’s degree of Underground construction, 5/2012 

"
7,source/Kirill Piaternev.pdf,"['Kirill Piaternev\\n', 'DATA SCiENTiST · MACHiNE LEARNiNG ENGiNEER\\n', '+7 915-000-2003 |\\naaaternev@gmail.com |\\npyataaaev\\n', 'Education\\n', 'Higher School of Economics\\nMoscow, Russia\\n', 'BACHELOR OF MATHEMATiCS\\nSeptember 2015 ‑ June 2020\\n', '• studied deep learning and reinforcement learning courses from Computer Science department\\n', 'Skills\\n', 'Programming Python, SQL, C++\\n', 'ML/DL frameworks sklearn, nltk, pytorch\\n', 'Databases PostgreSQL, Spark, Greenplum, Teradata, MongoDB, MySQL\\n', 'DevOps Docker, Kubernetes, Jenkins, GitlabCI\\n', 'Back‑end Flask, fastapi\\n', 'Languages English, Russian\\n', 'Experience\\n', 'Sberbank\\nMoscow, Russia\\n', 'DATA SCiENTiST\\nMay 2020 ‑ present\\n', '• improved the quality of promotions, conversion was increased from from 3% to 9% via recommendation model\\n', 'based on 17 prediction models for 9 bank partners\\n', '• reduced time of creation prototype of binary classification model from 8 to 4 hours via adding dask support in\\n', 'model creation pipeline\\n', 'CROC\\nMoscow, Russia\\n', 'DATA SCiENTiST\\nJune 2018 ‑ April 2020\\n', '• created prototype of recommendation model that can reduce the percentage of rejects from 1% to 0.2% via\\n', 'cascade of models based on time series factory data\\n', '• created an MVP to automate a verification of documents in insurance claim process that can shorten it to a few\\n', 'minutes with using computer vision recognition and named entity recognition models\\n', '• designed ML management system that can operate dozens of models in production based on Kubeflow\\n• automation process of making optimal daily routes for more than 100 train conductors with graph‑based model\\n• developed tool for managing resources for rzd cargo train stations with prediction models and special UI\\n', 'Tracktrack\\nMoscow, Russia\\n', 'MACHiNE LEARNiNG ENGiNEER\\nMarch 2018 ‑ June 2018\\n', '• upgrade postitive feedback on MVP of interactive digest for Russian Railway managers to 85% with creation and\\n', 'embedding text classification models\\n', 'Asteros\\nMoscow, Russia\\n', 'JUNiOR DATA SCiENTiST\\nOctober 2017 ‑ March 2018\\n', '• reduced year integral downtime time of isobutane reactor from weeks to days with predictive model\\n• shorten call‑center client waiting time to seconds with MVP of QA recommendation model\\n', 'Research\\n', 'Higher School of Economics\\nMoscow, Russia\\n', 'RESEARCH ENGiNEER\\nSeptember 2020 ‑ present\\n', '• speed up the process of data markup by 10 times with implemented a special web app written with Flask\\n• created a baseline for code classification task (43 classes) with mean accuracy 0.45 with regex‑based models\\n', '1\\n']","Kirill Piaternev

DATA SCiENTiST · MACHiNE LEARNiNG ENGiNEER

+7 915-000-2003 |
aaaternev@gmail.com |
pyataaaev

Education

Higher School of Economics
Moscow, Russia

BACHELOR OF MATHEMATiCS
September 2015 ‑ June 2020

• studied deep learning and reinforcement learning courses from Computer Science department

Skills

Programming Python, SQL, C++

ML/DL frameworks sklearn, nltk, pytorch

Databases PostgreSQL, Spark, Greenplum, Teradata, MongoDB, MySQL

DevOps Docker, Kubernetes, Jenkins, GitlabCI

Back‑end Flask, fastapi

Languages English, Russian

Experience

Sberbank
Moscow, Russia

DATA SCiENTiST
May 2020 ‑ present

• improved the quality of promotions, conversion was increased from from 3% to 9% via recommendation model

based on 17 prediction models for 9 bank partners

• reduced time of creation prototype of binary classification model from 8 to 4 hours via adding dask support in

model creation pipeline

CROC
Moscow, Russia

DATA SCiENTiST
June 2018 ‑ April 2020

• created prototype of recommendation model that can reduce the percentage of rejects from 1% to 0.2% via

cascade of models based on time series factory data

• created an MVP to automate a verification of documents in insurance claim process that can shorten it to a few

minutes with using computer vision recognition and named entity recognition models

• designed ML management system that can operate dozens of models in production based on Kubeflow
• automation process of making optimal daily routes for more than 100 train conductors with graph‑based model
• developed tool for managing resources for rzd cargo train stations with prediction models and special UI

Tracktrack
Moscow, Russia

MACHiNE LEARNiNG ENGiNEER
March 2018 ‑ June 2018

• upgrade postitive feedback on MVP of interactive digest for Russian Railway managers to 85% with creation and

embedding text classification models

Asteros
Moscow, Russia

JUNiOR DATA SCiENTiST
October 2017 ‑ March 2018

• reduced year integral downtime time of isobutane reactor from weeks to days with predictive model
• shorten call‑center client waiting time to seconds with MVP of QA recommendation model

Research

Higher School of Economics
Moscow, Russia

RESEARCH ENGiNEER
September 2020 ‑ present

• speed up the process of data markup by 10 times with implemented a special web app written with Flask
• created a baseline for code classification task (43 classes) with mean accuracy 0.45 with regex‑based models

1

"
8,source/Danila Doroshenko.pdf,"[' \\n \\n \\n \\n', 'Professional Summary \\n', 'Software Engineer who is familiar with helping to create detailed \\napplication codes and design. Extensive collaboration with \\ndevelopers to draft and test programs for in-field rollout. Experience \\nwith Python and Git development environments to standardize and \\ncustomize CI/CD. The ability for generating automation frameworks \\nand procedures like parsing, web scraping, and HTTP requests. \\n', ' \\n', 'Work Experience \\n', ' \\n', 'Make it in Ukraine \\n• Developed an asynchronous telegram chatbot \\n', ' \\n \\n03/2020 - Current \\n', 'Danila \\nDoroshenko \\n', ' \\nContact \\n', ' \\n', '(@MakeItInUkrainebot) for IT talents using parsing with Beautiful \\nSoup, telegram API, aiogram and SQLite database which led to \\nautomatization of Vacancies and Articles notifications depending on \\neach user subscription and interests, that stores in the database. \\n', '• Implemented the quick apply feature by saving user’s data into \\n', 'the database, shortening generated mailto link by web scrape my \\nlink shortener (a pet project that shortens links using NodeJS, \\nMongoDB and Express) and attaching the link to every vacancy \\nwhich led to better UX and makes the application process available \\nin one click. \\n', ' \\n', '+380964647000 \\n', ' \\n', 'Rothem \\n', '10/2019 - 03/2020 \\n', ' \\n \\n', 'ddddanchik@gmail.com \\n', 'Researched a computer vision real-time semantic segmentation \\nmodel in deeplab (mobilenetv2) trained on Cityscape dataset, \\nquantized it for coralTPU, and transformed it to TFlite to run in AWS \\nvia SSH connection to Raspberry pi 3. \\n', ' \\n \\nAdditional Skills \\n \\n', '• Experience in Python \\n', 'development \\n', 'Education \\n', ' \\n', 'KNU, CSC \\n', ' \\n', ' \\n', '09/2020 - 11/2020 \\n', '• Parsing with BS \\n• Web scraping with selenium \\n• HTTP requests \\n• SQLite and PostgreSQL \\n', 'database management \\n', '• Teamwork & collaboration \\n• API design knowledge \\n• Experience building client- \\n', 'server architecture \\n', '• Research models using \\n', 'Tensorflow, Sklearn, Keras \\n', '• Front-end: HTML/CSS/JS, \\n', 'jQuery, Bootstrap \\n', '• Back-end: Django \\n', ""A freshman pursuing a Bachelor's degree in Software engineering \\nand intelligent software systems. \\n"", ' \\n', '01/2013 - 06/2020 \\n', 'Lyceum 142 \\nTechnical high school diploma \\n', ' \\n', ' \\nCertificates and articles \\n', '- Google Code-in 2019 competition \\n- FCE B2 English level \\n- Tutorial on Polynomial regression: https://colab.research.google.co \\nm/drive/1-sY2pAgx1rYEuRXn6Tr_ojfXq7PDGotR \\n']"," 
 
 
 

Professional Summary 

Software Engineer who is familiar with helping to create detailed 
application codes and design. Extensive collaboration with 
developers to draft and test programs for in-field rollout. Experience 
with Python and Git development environments to standardize and 
customize CI/CD. The ability for generating automation frameworks 
and procedures like parsing, web scraping, and HTTP requests. 

 

Work Experience 

 

Make it in Ukraine 
• Developed an asynchronous telegram chatbot 

 
 
03/2020 - Current 

Danila 
Doroshenko 

 
Contact 

 

(@MakeItInUkrainebot) for IT talents using parsing with Beautiful 
Soup, telegram API, aiogram and SQLite database which led to 
automatization of Vacancies and Articles notifications depending on 
each user subscription and interests, that stores in the database. 

• Implemented the quick apply feature by saving user’s data into 

the database, shortening generated mailto link by web scrape my 
link shortener (a pet project that shortens links using NodeJS, 
MongoDB and Express) and attaching the link to every vacancy 
which led to better UX and makes the application process available 
in one click. 

 

+380964647000 

 

Rothem 

10/2019 - 03/2020 

 
 

ddddanchik@gmail.com 

Researched a computer vision real-time semantic segmentation 
model in deeplab (mobilenetv2) trained on Cityscape dataset, 
quantized it for coralTPU, and transformed it to TFlite to run in AWS 
via SSH connection to Raspberry pi 3. 

 
 
Additional Skills 
 

• Experience in Python 

development 

Education 

 

KNU, CSC 

 

 

09/2020 - 11/2020 

• Parsing with BS 
• Web scraping with selenium 
• HTTP requests 
• SQLite and PostgreSQL 

database management 

• Teamwork & collaboration 
• API design knowledge 
• Experience building client- 

server architecture 

• Research models using 

Tensorflow, Sklearn, Keras 

• Front-end: HTML/CSS/JS, 

jQuery, Bootstrap 

• Back-end: Django 

A freshman pursuing a Bachelor's degree in Software engineering 
and intelligent software systems. 

 

01/2013 - 06/2020 

Lyceum 142 
Technical high school diploma 

 

 
Certificates and articles 

- Google Code-in 2019 competition 
- FCE B2 English level 
- Tutorial on Polynomial regression: https://colab.research.google.co 
m/drive/1-sY2pAgx1rYEuRXn6Tr_ojfXq7PDGotR 

"
9,source/Dasha Yavorska.pdf,"['Dasha Yavorska\\n', 'Project Manager / Analyst\\n', 'San Francisco Bay Area, CA,\\n', 'USA\\n', 'yavaaakaya670@gmail.com | (341) 000 3449 |\\n', 'SUMMARY:\\n', 'Project manager with 15+ years of experience, a passion for analysis, and expertise in\\n', 'process design and systems analysis. Goal-oriented leader and collaborative team player with\\ndiverse domain knowledge. Versatile asset to any team committed to achieving goals.\\n', 'EXPERIENCE:\\nZeroAvia\\nHollister, CA, USA | 2022 - 2023 (1yrs 5mos)\\n', 'Project Manager\\nAchievements:\\n', '❖ Led the development and internal launch of a groundbreaking Energy supply monitoring and\\n', 'control system, based on a smart algorithm using AI, for a hydrogen production system.\\n', '❖ Contributed to the building and led a high-performing team of engineers and scientists,\\n', 'fostering a culture of innovation and continuous improvement.\\n', '❖ Collaborated effectively with cross-functional teams to gather requirements, deﬁne scope, and\\n', 'develop project plans, ensuring that the project aligned with overall business goals.\\n', '❖ Successfully tracked progress, identiﬁed and mitigated risks, and oversaw the testing of the\\n', 'system, ensuring its timely and successful delivery.\\n', 'Enel X (eMotorWerks)\\nUSA, Remote | 2019 - 2022 (3yrs 4mos)\\n', 'Project Manager\\nAchievements:\\n', '❖ Successfully delivered 5+ projects on time and within scope, including creating detailed project\\n', 'workﬂows, templates for PMO documentation, and ensuring resource availability and\\nallocation.\\n', '❖ Facilitated collaborative estimation and planning processes, bringing together stakeholders\\n', 'from different teams to ensure alignment on goals and expectations.\\n', '❖ Ensured cross-team cooperation by coordinating communication and activities across multiple\\n', 'teams, leading to successful project outcomes.\\n', 'Change And Release Manager\\nAchievements:\\n', '❖ Improved release eﬃciency by streamlining release processes and implementing a binary\\n', 'delivery approach and shortened release cycle time by 65%, from 40-35 days to 14 days.\\n', 'Tickets Travel Network (Tickets.ua)\\n| 2014 - 2017 (3yrs)\\n', 'Project Manager, Analyst\\nAchievements:\\n', '❖ Implemented and integrated Jira/Conﬂuence tools and corporate portal for 800+ employees,\\n', 'streamlining workﬂows and improving eﬃciency.\\n', '❖ Led the successful delivery of 13+ corporate and 3 external projects, meeting all deadlines and\\n', 'requirements, including an employee 360-degree Feedback system.\\n', 'Training and Development Team Lead\\nAchievements:\\n', '❖ Improved team performance and efficiency by developing and implementing training programs,\\n', 'automating business processes, and running team-building events.\\n', 'JSC ""Teleradiocompany Lux""\\n| 2010 - 2013 (3yrs 2mos)\\n', 'Product/Project Manager, Chief Editor\\nAchievements:\\n', '❖ Launched web portal: from developing a concept, and managing the development team up to\\n', 'content creation and 3 years of support for the project as a Chief editor.\\n', 'International Humanitarian Pedagogical Institute\\n| 2008 - 2010 (2yrs)\\n', 'Head of IT Media library\\nAchievements:\\n', '❖ Launched university website and taught IT classes to students\\n', 'CERTIFICATES:\\n', '❖ 2023 - Advanced Project Management Course | Online Ukrainian School of Project\\n', 'Management by Denys Prylutskyi\\n', '❖ 2021 - PMI Agile Certiﬁed Practitioner (PMI-ACP) preparation course | Tenstep Academy\\n', '❖ 2017 - Arts and Crafts of Business Analysis | SoftServe University & Business Analysis Oﬃce\\n❖ 2017 - Emotional intelligence course | Alena Sysoeva\\n❖ 2016 - Fundamentals of Business Analysis | Lviv BDA School\\n❖ 2016 - Financial management | Lviv Business School\\n❖ 2016 - Development of leadership potential. Management functions | Lviv Business School\\n', ""and Women's leadership program “Leadership. Success. Inspiration” | Lviv Business School\\n"", '❖ 2016 - MS Excel Pro, MS Project courses\\n', '❖ 2014 - 13 steps to a successful SCRUM | Kseniya Kobryn and Kanban System Design,\\n', 'KANBAN Management Professional | Kirill Klimov\\n', 'EDUCATION:\\n', ""❖ Master's degree | Social pedagogue, a practicing psychologist | Crimean\\n"", 'Humanitarian University, Ukraine | 2007 - 2012, Graduated with honors\\n', '❖ Bachelor degree | Elementary School Teacher, Hebrew teacher | Dnipropetrovsk\\n', 'International Humanitarian Pedagogical Institute, Ukraine | 2005 - 2010, Graduated with\\nhonors\\n', 'LANGUAGES:\\n', '❖ English - Professional working proﬁciency | Ukraine/Russian - Native | Hebrew/Polish - Basic\\n']","Dasha Yavorska

Project Manager / Analyst

San Francisco Bay Area, CA,

USA

yavaaakaya670@gmail.com | (341) 000 3449 |

SUMMARY:

Project manager with 15+ years of experience, a passion for analysis, and expertise in

process design and systems analysis. Goal-oriented leader and collaborative team player with
diverse domain knowledge. Versatile asset to any team committed to achieving goals.

EXPERIENCE:
ZeroAvia
Hollister, CA, USA | 2022 - 2023 (1yrs 5mos)

Project Manager
Achievements:

❖ Led the development and internal launch of a groundbreaking Energy supply monitoring and

control system, based on a smart algorithm using AI, for a hydrogen production system.

❖ Contributed to the building and led a high-performing team of engineers and scientists,

fostering a culture of innovation and continuous improvement.

❖ Collaborated effectively with cross-functional teams to gather requirements, deﬁne scope, and

develop project plans, ensuring that the project aligned with overall business goals.

❖ Successfully tracked progress, identiﬁed and mitigated risks, and oversaw the testing of the

system, ensuring its timely and successful delivery.

Enel X (eMotorWerks)
USA, Remote | 2019 - 2022 (3yrs 4mos)

Project Manager
Achievements:

❖ Successfully delivered 5+ projects on time and within scope, including creating detailed project

workﬂows, templates for PMO documentation, and ensuring resource availability and
allocation.

❖ Facilitated collaborative estimation and planning processes, bringing together stakeholders

from different teams to ensure alignment on goals and expectations.

❖ Ensured cross-team cooperation by coordinating communication and activities across multiple

teams, leading to successful project outcomes.

Change And Release Manager
Achievements:

❖ Improved release eﬃciency by streamlining release processes and implementing a binary

delivery approach and shortened release cycle time by 65%, from 40-35 days to 14 days.

Tickets Travel Network (Tickets.ua)
| 2014 - 2017 (3yrs)

Project Manager, Analyst
Achievements:

❖ Implemented and integrated Jira/Conﬂuence tools and corporate portal for 800+ employees,

streamlining workﬂows and improving eﬃciency.

❖ Led the successful delivery of 13+ corporate and 3 external projects, meeting all deadlines and

requirements, including an employee 360-degree Feedback system.

Training and Development Team Lead
Achievements:

❖ Improved team performance and efficiency by developing and implementing training programs,

automating business processes, and running team-building events.

JSC ""Teleradiocompany Lux""
| 2010 - 2013 (3yrs 2mos)

Product/Project Manager, Chief Editor
Achievements:

❖ Launched web portal: from developing a concept, and managing the development team up to

content creation and 3 years of support for the project as a Chief editor.

International Humanitarian Pedagogical Institute
| 2008 - 2010 (2yrs)

Head of IT Media library
Achievements:

❖ Launched university website and taught IT classes to students

CERTIFICATES:

❖ 2023 - Advanced Project Management Course | Online Ukrainian School of Project

Management by Denys Prylutskyi

❖ 2021 - PMI Agile Certiﬁed Practitioner (PMI-ACP) preparation course | Tenstep Academy

❖ 2017 - Arts and Crafts of Business Analysis | SoftServe University & Business Analysis Oﬃce
❖ 2017 - Emotional intelligence course | Alena Sysoeva
❖ 2016 - Fundamentals of Business Analysis | Lviv BDA School
❖ 2016 - Financial management | Lviv Business School
❖ 2016 - Development of leadership potential. Management functions | Lviv Business School

and Women's leadership program “Leadership. Success. Inspiration” | Lviv Business School

❖ 2016 - MS Excel Pro, MS Project courses

❖ 2014 - 13 steps to a successful SCRUM | Kseniya Kobryn and Kanban System Design,

KANBAN Management Professional | Kirill Klimov

EDUCATION:

❖ Master's degree | Social pedagogue, a practicing psychologist | Crimean

Humanitarian University, Ukraine | 2007 - 2012, Graduated with honors

❖ Bachelor degree | Elementary School Teacher, Hebrew teacher | Dnipropetrovsk

International Humanitarian Pedagogical Institute, Ukraine | 2005 - 2010, Graduated with
honors

LANGUAGES:

❖ English - Professional working proﬁciency | Ukraine/Russian - Native | Hebrew/Polish - Basic

"
10,source/Egor Pianykh.pdf,"['Egor Pianykh\\n206-482-7070\\negor.pianykh@gmail.com\\n', 'A decent software engineer is looking to build expertise in distributed software at scale.\\n', 'GlobalLogic Inc\\n2013 - present\\n', 'Backend Engineer, a hospitality company\\nFeb 2021 - Present\\n', '● Developing card payment services for a hospitality company\\n', 'Primary technologies: Azure, C#, Java\\n', 'Software Engineer, medical ECG monitoring\\nMay 2020 - Nov 2020\\n', '●\\nCreated an infrastructure as a code for on-prem Cassandra cluster deployments. This\\nis a part of a system that will enable my client to deploy solutions to military hospitals\\nand hospitals that prefer to manage their infrastructure.\\n', ""●\\nImplemented a metrics agent to monitor the health of the Cassandra cluster. The\\nagent, along with the Kibana dashboard, will allow the ops team to monitor the cluster's\\nhealth and provide appropriate SLA.\\n"", 'Primary technologies: Linux, Docker, Docker swarm mode, Cassandra, Elastic, Kibana\\n', 'Project Coordinator, legacy ECG devices\\nOct 2019 - May 2020\\n', '●\\nProvided technical leadership and direction to 35 software engineers, quality engineers,\\nand\\nbusiness\\nanalysts.\\nFacilitated\\ncollaboration\\nbetween\\nstakeholders\\nand\\n', 'development\\nteams\\nand\\nsaved\\nhundreds\\nof\\nwork\\nhours\\nby\\nminimizing\\nthe\\n', 'communication time gap.\\n', '●\\nRepresented a team on organization meetings, enabled quick issue resolution.\\n', '●\\nConducted cost-benefit analysis for remote customer support tooling. Presented\\nthe findings to a team of executives. The decision that was made saved a company\\nhundreds of thousands of dollars per year.\\n', '●\\nLed an effort to adjust APIs with a third-party vendor. Fast problem solving led to\\nthe timely release and avoided reputation losses to my client.\\n', 'Primary technologies: communication, PowerPoint, Excel\\n', 'Senior Software Engineer, medical ultrasound machines\\nJun 2017 - Oct 2019\\n', '●\\nDesigned and implemented a set of tools to reprogram faulty ultrasonic transducers in\\nthe field. This toolset saved over 20M dollars, avoiding the replacement of probes.\\nAnd most importantly prevented ultrasonographers from cancer misdiagnosis.\\n', ""●\\nImplemented a workaround for a bug in the NVIDIA display driver that appears only\\nwith custom display and in out-of-support cards. This workaround could save thousands\\nof hours of field engineers' work and millions of company losses.\\n"", '●\\nFixed numerous hard to reproduce issues in legacy systems with over 2M lines of\\ncode and heavily dependent on global variables.\\n', 'Primary technologies: C++, C#, .NET Framework, WPF\\n', 'Tech Lead, semiconductor burn-in oven automation\\nJan 2017 - Mar 2017\\n', '●\\nEstablished the agile process, sprints and enabled my team on every demo.\\n', ""●\\nDesigned a portal for configuring a semiconductor burn-in oven. Improved\\nproduction floor operators' speed of work and reduced the number of defective\\nbatches by 5%.\\n"", '●\\nLed a team to the successful implementation of the project on time. Prevented the\\ndowntime for already installed equipment and enabling the next round of million\\ndollars budgeting for a greater team.\\n', '● Facilitated collaboration between developers and business analysts.\\n', 'Primary technologies: ASP.NET WebApi, Angular, Bootstrap, SQL Server\\n', 'Software Engineer, CRM system\\nJun 2016 - Jan 2017\\n', '●\\nTracked a rare critical bug that was missed by dozens of eyes. Nobody knew how it\\nwas introduced to the system. Spent hundreds of hours researching codebase and\\nexperimenting with the CI/CD system. Successfully unblocked a team on their goal to\\nunbind CRM from SQL Server.\\n', '●\\nMerged an enormous amount of branches in git in a system with around 1500 active\\ndevelopers. Enabled my teammates to move faster and saved hundreds of\\ndevelopment time by using my git expertise.\\n', 'Fullstack Engineer, Private Equity Fund\\nNov 2012 - May 2016\\n', '●\\nImplemented an Excel macro merge tool that could save a team over 96\\nperson-days yearly.\\n', '●\\nOptimized a data ingestion endpoint by using a low-level reading API. This enabled\\naccountants to load ten times bigger documents and decreased processing times by four\\ntimes on average.\\n', 'Primary technologies: ASP.NET WebApi, ExtJS SQL Server\\n', 'EPAM Systems\\nJune 2012 - Nov 2013\\n', 'Software Engineer, market risk calculation platform\\n', '●\\nDeveloped software to migrate config files used across the bank.\\n', ""●\\nEffectively communicated to pull people from the different teams together and migrated\\nconfigs in one release. This enabled the retirement of old services earlier and saved\\nhundreds of man-hours of developers' work.\\n"", 'Other projects that I have done while studying or off work\\n2008 - 2012\\n', '●\\nArchitecture and implementation of automated dispatch GIS system for a trucking\\ncompany\\n', '●\\nDriving the insurance company payroll platform from 0 to completion.\\n', 'Education and certificates\\n', '●\\nBachelor degree in Applied Mathematics in East Ukrainian State University\\n', '●\\nDeep Learning School by Moscow Institute of Physics and Technology (completed\\nthe first-semester study, to be completed in 2021)\\n', '●\\nDeeplearning.ai specialization on coursera.org\\n', '●\\nMachine Learning Scientist with Python on DataCamp.com\\n']","Egor Pianykh
206-482-7070
egor.pianykh@gmail.com

A decent software engineer is looking to build expertise in distributed software at scale.

GlobalLogic Inc
2013 - present

Backend Engineer, a hospitality company
Feb 2021 - Present

● Developing card payment services for a hospitality company

Primary technologies: Azure, C#, Java

Software Engineer, medical ECG monitoring
May 2020 - Nov 2020

●
Created an infrastructure as a code for on-prem Cassandra cluster deployments. This
is a part of a system that will enable my client to deploy solutions to military hospitals
and hospitals that prefer to manage their infrastructure.

●
Implemented a metrics agent to monitor the health of the Cassandra cluster. The
agent, along with the Kibana dashboard, will allow the ops team to monitor the cluster's
health and provide appropriate SLA.

Primary technologies: Linux, Docker, Docker swarm mode, Cassandra, Elastic, Kibana

Project Coordinator, legacy ECG devices
Oct 2019 - May 2020

●
Provided technical leadership and direction to 35 software engineers, quality engineers,
and
business
analysts.
Facilitated
collaboration
between
stakeholders
and

development
teams
and
saved
hundreds
of
work
hours
by
minimizing
the

communication time gap.

●
Represented a team on organization meetings, enabled quick issue resolution.

●
Conducted cost-benefit analysis for remote customer support tooling. Presented
the findings to a team of executives. The decision that was made saved a company
hundreds of thousands of dollars per year.

●
Led an effort to adjust APIs with a third-party vendor. Fast problem solving led to
the timely release and avoided reputation losses to my client.

Primary technologies: communication, PowerPoint, Excel

Senior Software Engineer, medical ultrasound machines
Jun 2017 - Oct 2019

●
Designed and implemented a set of tools to reprogram faulty ultrasonic transducers in
the field. This toolset saved over 20M dollars, avoiding the replacement of probes.
And most importantly prevented ultrasonographers from cancer misdiagnosis.

●
Implemented a workaround for a bug in the NVIDIA display driver that appears only
with custom display and in out-of-support cards. This workaround could save thousands
of hours of field engineers' work and millions of company losses.

●
Fixed numerous hard to reproduce issues in legacy systems with over 2M lines of
code and heavily dependent on global variables.

Primary technologies: C++, C#, .NET Framework, WPF

Tech Lead, semiconductor burn-in oven automation
Jan 2017 - Mar 2017

●
Established the agile process, sprints and enabled my team on every demo.

●
Designed a portal for configuring a semiconductor burn-in oven. Improved
production floor operators' speed of work and reduced the number of defective
batches by 5%.

●
Led a team to the successful implementation of the project on time. Prevented the
downtime for already installed equipment and enabling the next round of million
dollars budgeting for a greater team.

● Facilitated collaboration between developers and business analysts.

Primary technologies: ASP.NET WebApi, Angular, Bootstrap, SQL Server

Software Engineer, CRM system
Jun 2016 - Jan 2017

●
Tracked a rare critical bug that was missed by dozens of eyes. Nobody knew how it
was introduced to the system. Spent hundreds of hours researching codebase and
experimenting with the CI/CD system. Successfully unblocked a team on their goal to
unbind CRM from SQL Server.

●
Merged an enormous amount of branches in git in a system with around 1500 active
developers. Enabled my teammates to move faster and saved hundreds of
development time by using my git expertise.

Fullstack Engineer, Private Equity Fund
Nov 2012 - May 2016

●
Implemented an Excel macro merge tool that could save a team over 96
person-days yearly.

●
Optimized a data ingestion endpoint by using a low-level reading API. This enabled
accountants to load ten times bigger documents and decreased processing times by four
times on average.

Primary technologies: ASP.NET WebApi, ExtJS SQL Server

EPAM Systems
June 2012 - Nov 2013

Software Engineer, market risk calculation platform

●
Developed software to migrate config files used across the bank.

●
Effectively communicated to pull people from the different teams together and migrated
configs in one release. This enabled the retirement of old services earlier and saved
hundreds of man-hours of developers' work.

Other projects that I have done while studying or off work
2008 - 2012

●
Architecture and implementation of automated dispatch GIS system for a trucking
company

●
Driving the insurance company payroll platform from 0 to completion.

Education and certificates

●
Bachelor degree in Applied Mathematics in East Ukrainian State University

●
Deep Learning School by Moscow Institute of Physics and Technology (completed
the first-semester study, to be completed in 2021)

●
Deeplearning.ai specialization on coursera.org

●
Machine Learning Scientist with Python on DataCamp.com

"
11,source/Danil Kikvadze.pdf,"['Danil Kikvadze\\n', 'Python Developer\\n', 'Enthusiastic 3th grade student eager to contribute to team success\\nthrough hard work, attention to detail and excellent organization\\nskills. Clear understanding of Python zen and REST concept and\\n', 'training in web frameworks.\\n', ""I've been learning stack of technologies for web development since\\n2019. Motivated to learn, grow and excel in Web Industry.\\n"", 'CONTACT\\nAddress\\nMoscow\\nPhone number\\n+79140989765\\nE-mail kikvadze673@lll.kpi.ua\\nLinkedIn\\nhttps://www.linkedin.com/in/yar-gty/\\n', 'GitHub\\nhttps://github.com/yar-rfk\\n', 'SKILLS\\nFrontend\\nHTML, CSS, JS, jQuery, React.js\\nBackend\\nPython,\\nFlask/Django,\\nSQL,\\nnoSQL,\\n', 'REST API, Celery\\nOther\\nDocker, Linux, Git, Unit testing, CI/CD\\n', ""EDUCATION\\nNational Technical University of Ukraine\\n«Kyiv Polytechnic Institute»\\nBachelor's degree, Biomedical engineering\\n2018 – 2022\\n"", 'LANGUAGES\\nRussian\\nEnglish\\n', 'EXPERIENCE\\n', 'Flask Bookshop, 2021-04 – 2021-06\\n', '● Created a RESTful API application\\n', 'using Flask. JWT token was used for\\nauthentication and role-based access.\\n', '● PostgreSQL was used as a database,\\n', 'Redis was used for caching and task\\nqueue.\\n', '● Celery was used for asynchronous tasks\\n', 'such as sending email. Elasticsearch\\nwas used for searching query.\\n', '● Development\\nalso\\nrequired\\nDocker,\\n', 'writing unit-tests and Travis CI.\\n', '● Production version of application uses\\n', 'Gunicorn and NGINX.\\n', 'Django Blog, 2020-07 – 2020-12\\n', '● PostgreSQL was used as a database.\\n● Django-template was used for SSR,\\n', 'jQuery was used for AJAX calls.\\n', '● Added Docker, Travis, logging and\\n', 'unit- tests.\\n', '● Added role-based access.\\n● Production\\nversion\\nof\\napplication\\n', 'uses Gunicorn\\nand\\nNGINX\\n', 'INTERESTS\\nComputer\\nGames Movies\\nProgramming\\n']","Danil Kikvadze

Python Developer

Enthusiastic 3th grade student eager to contribute to team success
through hard work, attention to detail and excellent organization
skills. Clear understanding of Python zen and REST concept and

training in web frameworks.

I've been learning stack of technologies for web development since
2019. Motivated to learn, grow and excel in Web Industry.

CONTACT
Address
Moscow
Phone number
+79140989765
E-mail kikvadze673@lll.kpi.ua
LinkedIn
https://www.linkedin.com/in/yar-gty/

GitHub
https://github.com/yar-rfk

SKILLS
Frontend
HTML, CSS, JS, jQuery, React.js
Backend
Python,
Flask/Django,
SQL,
noSQL,

REST API, Celery
Other
Docker, Linux, Git, Unit testing, CI/CD

EDUCATION
National Technical University of Ukraine
«Kyiv Polytechnic Institute»
Bachelor's degree, Biomedical engineering
2018 – 2022

LANGUAGES
Russian
English

EXPERIENCE

Flask Bookshop, 2021-04 – 2021-06

● Created a RESTful API application

using Flask. JWT token was used for
authentication and role-based access.

● PostgreSQL was used as a database,

Redis was used for caching and task
queue.

● Celery was used for asynchronous tasks

such as sending email. Elasticsearch
was used for searching query.

● Development
also
required
Docker,

writing unit-tests and Travis CI.

● Production version of application uses

Gunicorn and NGINX.

Django Blog, 2020-07 – 2020-12

● PostgreSQL was used as a database.
● Django-template was used for SSR,

jQuery was used for AJAX calls.

● Added Docker, Travis, logging and

unit- tests.

● Added role-based access.
● Production
version
of
application

uses Gunicorn
and
NGINX

INTERESTS
Computer
Games Movies
Programming

"
12,source/Aldar Ulubayev.pdf,"['Aldar Ulubayev\\n', 'aldar.ulubayev@gmail.com |\\naldarulubayev |\\naskar3280 |\\n+7 708 000 38 12\\n', 'Education\\n', 'Suleyman Demirel University\\nAlmaty, Kaskelen district\\n', 'Faculty of Engineering and Natural Sciences\\nAug. 2016 – May 2020\\n', 'Projects\\n', 'Alfa-Bank (App store) | ATFBank (App store) | Altyn-i (App store)|\\n', 'Experience\\n', 'iOS developer\\nFeb 2020 – Ongoing\\n', 'Alfa-Bank Kazakhstan\\n', '• Decreased build time by comparing carthages and pods\\n', '• Explored new technologies and shared findings with the team\\n', 'iOS developer\\nSep – Jan 2020\\n', 'DAR\\n', '• Worked on network layer which can be reused in every project\\n', '• Configured push notifications of the project\\n', 'iOS developer\\nJul 2019 – Sep 2020\\n', 'ATFBank\\n', '• Head of the development iOS team\\n', '• Developed and launched the application from scratch in over 60 k people (Rating: 4.7)\\n', '• Worked closely with product managers and designers to define a rich iOS experience for\\n', 'the user\\n', '• Configured architecture and security of the application\\n', '• Improved product quality through code reviews\\n', '• Performed technical designs and implementation of the application\\n', 'Internship\\nJan 2019 – May 2019\\n', 'Infin-IT Solution\\n', '• Worked on mobile-banking applications\\n', '• Fixed bugs\\n', '• Refactored codes\\n', '• Added new functionalities like filter for dates and custom reusable views\\n', 'Skills\\n', 'Swift, Java, Multi-threading, CI/CD, Fastlane, Dependency Injection, Reactive programming\\npatterns (RX), SOLID, Clean Swift architecture (VIP), VIPER, MVVM\\n']","Aldar Ulubayev

aldar.ulubayev@gmail.com |
aldarulubayev |
askar3280 |
+7 708 000 38 12

Education

Suleyman Demirel University
Almaty, Kaskelen district

Faculty of Engineering and Natural Sciences
Aug. 2016 – May 2020

Projects

Alfa-Bank (App store) | ATFBank (App store) | Altyn-i (App store)|

Experience

iOS developer
Feb 2020 – Ongoing

Alfa-Bank Kazakhstan

• Decreased build time by comparing carthages and pods

• Explored new technologies and shared findings with the team

iOS developer
Sep – Jan 2020

DAR

• Worked on network layer which can be reused in every project

• Configured push notifications of the project

iOS developer
Jul 2019 – Sep 2020

ATFBank

• Head of the development iOS team

• Developed and launched the application from scratch in over 60 k people (Rating: 4.7)

• Worked closely with product managers and designers to define a rich iOS experience for

the user

• Configured architecture and security of the application

• Improved product quality through code reviews

• Performed technical designs and implementation of the application

Internship
Jan 2019 – May 2019

Infin-IT Solution

• Worked on mobile-banking applications

• Fixed bugs

• Refactored codes

• Added new functionalities like filter for dates and custom reusable views

Skills

Swift, Java, Multi-threading, CI/CD, Fastlane, Dependency Injection, Reactive programming
patterns (RX), SOLID, Clean Swift architecture (VIP), VIPER, MVVM

"
13,source/Vsevolod Vinogradov.pdf,"['Vsevolod Vinogradov\\nPreferred role: Machine Learning Engineer\\n', 'Tel: +4571000077 (DK)\\nE-mail: seva.vin@gmail.com\\nEducation: M.Sc. in Communications Engineering (2012)\\nCitizenship: Russia\\nResidence: Copenhagen, DK, ready to relocate\\nLinked IN Blog\\n', 'Background\\n', 'I have 11 years of experience in computer hardware engineering. The key focus were DSP algorithms\\n', 'implementation win an FPGA and ASIC chips.\\n', 'DSP (Digital Signal Processing) is a wide area that uses techniques from the applied math, analyses,\\n', 'statistics and statistical learning to proceed signals, like radio, voice, images, in a digital form. DSP gives\\ntheoretical and practical recipes to develop digital circuits for signal processing. ASIC is small pieces of silicon\\nwith integrated circuits of digital logic, that we often refer as microchip. Your dishwasher controller, GPU and CPU\\nare ASICs. ASIC manufacturing process requires millions of $ of investment, so there’s an option to assemble\\ncustom digital circuit from predefined building blocks “in-filed”. FPGA (Filed Programmable Gate Array) is kind of\\na LEGO blocks set, from which an engineer may assemble digital circuits “in the field” by reconfiguring the\\nfirmware of the FPGA chip. FPGA and ASIC are consist of IP(Intellectual Property) Cores, sort of the functional\\nblock.\\n', 'I switched to a Software Engineering Role to expand my area of the expertise and more widely utilize my\\n', 'theoretical skills\\n', 'Skill Set\\n', 'Machine Learning\\n', '●\\nStrong theoretical background in linear algebra, statistics and numerical methods\\n', '●\\nMatlab, SciPy, RandomForest, XGBoost\\n', '●\\nDeep Learning with TensorFlow, Keras\\n', '●\\nExtensive data exploration and visualization skills\\n', 'Software Engineering:\\n', '●\\nModern C++14/17/20 with for Linux and Windows\\n', '●\\nDevOps: CI/CD, TDD, Jenkins, Gitlab, Doctest, GoogleTest, Bash, CMake\\n', 'Computer Hardware\\n', '●\\nDeep understanding of CPU and GPU architectures, DRAM/SRAM memory controllers, PCIe\\nand network interfaces\\n', 'Work Experience\\nAlipes A/S Denmark\\n', 'Quant Developer,\\n', '●\\nAccelerate decision trees and DNN models on the FPGAs for financial applications\\n', '●\\nThroughput accelerations Vitis Flow, Xilinx software oriented OpenCL-like system for\\nAlveo cards series. For quantized model achieved ~30% performance in prediction/sec\\nagainst GPU\\n', '●\\nLow latency application - full stack system design - HLS kernel development, low latency PCIe\\ndrivers and IP Core, project design in Vivado, Windows/Ubuntu cross-platform library, integration\\nwith existing computational framework. Reduced prediction latency on a 50% in comparison with\\nGPU CUDA implementation\\n', 'Widex A/S, Denmark\\n', 'IC Specialist, Digital Design\\n', '● Design and implementation of ultra-low-power DSP blocks for next-generation hearing aids for ASIC\\n', 'with a strong focus on space and power usage optimization. Maintain and documentation of the\\nexisting legacy IP cores. Functional, integrations and code coverage testing\\n', '● I helped our team with the transition from SVN to Git and from hardware design language VHDL to\\n', 'System Verilog. Prepared training materials and held more than 10 workshops in a small groups for\\ncross-border teams in Germany and Denmark.\\n', '● Working under FDA and EMEA regulation regarding the safety and reliability requirements for\\n', 'medical devices.\\n', 'Cobham Satcom (ex. Thrane&Thrane), Denmark\\nFPGA Development Engineer in Aviator S-team March 2018 — December 2018\\n', '●\\nDesign, support and maintain IP Cores for Zynq SoC in Aviator S Smart Aircraft project\\n', ""●\\nSafety and security requirements writing and implementing, design test cases and specification for\\ncommercial airlines' avionics certification\\n"", 'Huawei Technologies, Russian Research Center, Moscow\\n', 'Algorithm researcher in Nonlinear IRF sector\\n', 'Key projects:\\n', '●\\nDevelop in Matlab and implement in the FPGA complex-arithmetic multilayer non-linear adaptive\\nfiltering system (DPD) for radio frequency applications in 4G+ base stations\\n', '●\\n4x4 MIMO Platform. Developed embedded platform software and Matlab API for communication\\nover 1G Ethernet\\n', 'Awards:\\nOutstanding Contractor award 2016 of Russian R&D\\nCenter Member of Outstanding Team Award 2017\\n', 'Digital Solutions, SPE, LLC Moscow\\n', 'FPGA designer\\nFull-stack electronic design from small IP cores to device production.\\nKey Projects:\\n', '●\\nMember of FPGA team on the Deep packet inspection (DPI) project\\n', '●\\nDevelop Error Correction Code for System-on-Chip ASIC\\n', 'Research Institute of Precision Instruments, Moscow\\n', 'FPGA designer\\n', '-\\nResearch satellite radio channel and develop error correction codes for space applications\\n', '-\\nDevelop FPGA based satellite hardware\\n', 'Awards: Concatenation codes research project took the prize “Youth and future of aviation and space\\nexploration 2012” of Russian Aerospace Agency [ru link]\\n', 'Education\\n', '-\\nM.Sc. in Communications Engineering. National Research University ""MAI""(Aviation Institute)\\n2006-2012, 5.5 years\\n', '-\\nAdvanced specialization, 2 years, Information technology in electronic design - DSP, ARM,\\nPCB design, FPGA, microcontrollers, amplifiers. Certificated, with honors\\n', '-\\nSpecialization “Advanced Machine Learning”[link] by NRE Higher School of Economics, 2020\\n', '○ Introduction to Machine learning 100%\\n○ Introduction to deep learning. 98.2% With Honor\\n○ Bayesian Methods for Machine Learning With Honor\\n○ Practical Reinforcement Learning, With Honors\\n○ Addressing Large Hadron Collider Challenges by Machine Learning\\n○ How to Win a Data Science Competition\\n○ Natural Language Processing\\n○ Deep Learning in Computer vision\\n', '-\\nOnline Courses:\\n', '●\\nEDX\\n:Circuits & Electronics: MITx 6.002x MITx, 2012\\n', '●\\nCoursera: IBM: Databases and SQL for Data Science, 2020\\n', '●\\nUdemy Advanced C++Programming 2020\\n']","Vsevolod Vinogradov
Preferred role: Machine Learning Engineer

Tel: +4571000077 (DK)
E-mail: seva.vin@gmail.com
Education: M.Sc. in Communications Engineering (2012)
Citizenship: Russia
Residence: Copenhagen, DK, ready to relocate
Linked IN Blog

Background

I have 11 years of experience in computer hardware engineering. The key focus were DSP algorithms

implementation win an FPGA and ASIC chips.

DSP (Digital Signal Processing) is a wide area that uses techniques from the applied math, analyses,

statistics and statistical learning to proceed signals, like radio, voice, images, in a digital form. DSP gives
theoretical and practical recipes to develop digital circuits for signal processing. ASIC is small pieces of silicon
with integrated circuits of digital logic, that we often refer as microchip. Your dishwasher controller, GPU and CPU
are ASICs. ASIC manufacturing process requires millions of $ of investment, so there’s an option to assemble
custom digital circuit from predefined building blocks “in-filed”. FPGA (Filed Programmable Gate Array) is kind of
a LEGO blocks set, from which an engineer may assemble digital circuits “in the field” by reconfiguring the
firmware of the FPGA chip. FPGA and ASIC are consist of IP(Intellectual Property) Cores, sort of the functional
block.

I switched to a Software Engineering Role to expand my area of the expertise and more widely utilize my

theoretical skills

Skill Set

Machine Learning

●
Strong theoretical background in linear algebra, statistics and numerical methods

●
Matlab, SciPy, RandomForest, XGBoost

●
Deep Learning with TensorFlow, Keras

●
Extensive data exploration and visualization skills

Software Engineering:

●
Modern C++14/17/20 with for Linux and Windows

●
DevOps: CI/CD, TDD, Jenkins, Gitlab, Doctest, GoogleTest, Bash, CMake

Computer Hardware

●
Deep understanding of CPU and GPU architectures, DRAM/SRAM memory controllers, PCIe
and network interfaces

Work Experience
Alipes A/S Denmark

Quant Developer,

●
Accelerate decision trees and DNN models on the FPGAs for financial applications

●
Throughput accelerations Vitis Flow, Xilinx software oriented OpenCL-like system for
Alveo cards series. For quantized model achieved ~30% performance in prediction/sec
against GPU

●
Low latency application - full stack system design - HLS kernel development, low latency PCIe
drivers and IP Core, project design in Vivado, Windows/Ubuntu cross-platform library, integration
with existing computational framework. Reduced prediction latency on a 50% in comparison with
GPU CUDA implementation

Widex A/S, Denmark

IC Specialist, Digital Design

● Design and implementation of ultra-low-power DSP blocks for next-generation hearing aids for ASIC

with a strong focus on space and power usage optimization. Maintain and documentation of the
existing legacy IP cores. Functional, integrations and code coverage testing

● I helped our team with the transition from SVN to Git and from hardware design language VHDL to

System Verilog. Prepared training materials and held more than 10 workshops in a small groups for
cross-border teams in Germany and Denmark.

● Working under FDA and EMEA regulation regarding the safety and reliability requirements for

medical devices.

Cobham Satcom (ex. Thrane&Thrane), Denmark
FPGA Development Engineer in Aviator S-team March 2018 — December 2018

●
Design, support and maintain IP Cores for Zynq SoC in Aviator S Smart Aircraft project

●
Safety and security requirements writing and implementing, design test cases and specification for
commercial airlines' avionics certification

Huawei Technologies, Russian Research Center, Moscow

Algorithm researcher in Nonlinear IRF sector

Key projects:

●
Develop in Matlab and implement in the FPGA complex-arithmetic multilayer non-linear adaptive
filtering system (DPD) for radio frequency applications in 4G+ base stations

●
4x4 MIMO Platform. Developed embedded platform software and Matlab API for communication
over 1G Ethernet

Awards:
Outstanding Contractor award 2016 of Russian R&D
Center Member of Outstanding Team Award 2017

Digital Solutions, SPE, LLC Moscow

FPGA designer
Full-stack electronic design from small IP cores to device production.
Key Projects:

●
Member of FPGA team on the Deep packet inspection (DPI) project

●
Develop Error Correction Code for System-on-Chip ASIC

Research Institute of Precision Instruments, Moscow

FPGA designer

-
Research satellite radio channel and develop error correction codes for space applications

-
Develop FPGA based satellite hardware

Awards: Concatenation codes research project took the prize “Youth and future of aviation and space
exploration 2012” of Russian Aerospace Agency [ru link]

Education

-
M.Sc. in Communications Engineering. National Research University ""MAI""(Aviation Institute)
2006-2012, 5.5 years

-
Advanced specialization, 2 years, Information technology in electronic design - DSP, ARM,
PCB design, FPGA, microcontrollers, amplifiers. Certificated, with honors

-
Specialization “Advanced Machine Learning”[link] by NRE Higher School of Economics, 2020

○ Introduction to Machine learning 100%
○ Introduction to deep learning. 98.2% With Honor
○ Bayesian Methods for Machine Learning With Honor
○ Practical Reinforcement Learning, With Honors
○ Addressing Large Hadron Collider Challenges by Machine Learning
○ How to Win a Data Science Competition
○ Natural Language Processing
○ Deep Learning in Computer vision

-
Online Courses:

●
EDX
:Circuits & Electronics: MITx 6.002x MITx, 2012

●
Coursera: IBM: Databases and SQL for Data Science, 2020

●
Udemy Advanced C++Programming 2020

"
14,source/Nikolas Evsiukov.pdf,"[' \\n', ' \\n \\n \\nEDUCATION \\n', 'Nikolas Evsiukov \\n', '+7966321-11-22 | Evsiukkkov@phystech.edu | \\n', ' \\n', ' \\n', 'Moscow Institute of Physics and Technology \\nMoscow, Russia \\n', 'Bachelor of Applied Mathematics, Physics and Computer Science \\nSept. 2019 – Aug. 2023 (Expected) \\n', '◦ GPA: 9.2 of 10 \\n', 'PROJECTS \\n• WildHack — strategy game \\n', 'May 2020 \\n', '◦ Taught myself Qt in a month and collaborated with a classmate to develop the cross-platform game. \\n◦ Implemented clear and flexible architecture by learning design patterns. \\n◦ Developed game core on C++ and GUI on Qt. \\n', 'Built a continuous integration pipeline that automates the process of unit testing, GUI testing, documentation generation, and \\ngame distribution. \\n', '• Time-management website \\n', ' \\n', ' \\n', '◦ Taught myself Django framework in 3 weeks and developed backend, launching with PostgreSQL database. \\n◦ Designed frontend using HTML/CSS and Bootstrap library. \\n◦ Learned Docker and built a continuous integration pipeline that automates the process of unit testing and deployment. \\n', '• Self-driving logistic system (Bootcamp) \\n', 'Apr. 2020 \\n \\n \\n \\n \\n', 'July 2018 \\n', '◦ Taught myself Robot Operation System in a week and developed microservices on C++ for robot navigation and communication. \\n◦ Exploring documentation, fixed an unexpected problem with microservice-sensor communication appeared just before the deadline. \\n', '• Universal Bluetooth Controller \\n', 'May 2018 \\n', '◦ Taught myself development for Android in 2 months and developed a mobile app for creating custom Bluetooth controllers. \\n◦ Implemented the GUI system for an easy controllers configuration. \\n◦ Adapted this app for using as a controlling interface for the robotic goat in local museum. \\n', 'ACHIEVEMENTS \\n• 1st place in project competition (Analysis of the load structure of the consumer) \\n', 'Aug. 2018 – Feb. 2019 \\n', 'Working with a team, this began as an education project that I drove to completion so our team take 1st place (of 384) in the \\nAll-Russian project competition ”Energy breakthrough” and get a partnership with the biggest energy transfer company in Russia. \\n', '◦ Designed server’s architecture and implemented it using C++ and PostgreSQL. \\n', 'Fixed the problem with a slow transferring a large amount of data for machine learning algorithm by learning WebSocket protocol \\nfastly and optimized communication with the server. \\n', 'SKILLS \\n• Programming languages: C++, Python, C, basic knowledge of Java. \\n• Technologies: Git, GitHub Action, Django, Qt, Docker. \\n• Knowledge: Algorithms, Data Structures. \\n• Other:  Linux, LATEX. \\nOTHER \\n• Contributed to the faculty website project. \\n• Maintained the faculty git repository of LaTeX lecture notes. \\n• Took part in the All-Russian educational conference ”Digital lesson” for school students as a speaker. \\n', ' \\n', ' \\n', ' \\n', ' \\n', '• \\n', '◦ \\n', '◦ \\n', '◦ \\n']"," 

 
 
 
EDUCATION 

Nikolas Evsiukov 

+7966321-11-22 | Evsiukkkov@phystech.edu | 

 

 

Moscow Institute of Physics and Technology 
Moscow, Russia 

Bachelor of Applied Mathematics, Physics and Computer Science 
Sept. 2019 – Aug. 2023 (Expected) 

◦ GPA: 9.2 of 10 

PROJECTS 
• WildHack — strategy game 

May 2020 

◦ Taught myself Qt in a month and collaborated with a classmate to develop the cross-platform game. 
◦ Implemented clear and flexible architecture by learning design patterns. 
◦ Developed game core on C++ and GUI on Qt. 

Built a continuous integration pipeline that automates the process of unit testing, GUI testing, documentation generation, and 
game distribution. 

• Time-management website 

 

 

◦ Taught myself Django framework in 3 weeks and developed backend, launching with PostgreSQL database. 
◦ Designed frontend using HTML/CSS and Bootstrap library. 
◦ Learned Docker and built a continuous integration pipeline that automates the process of unit testing and deployment. 

• Self-driving logistic system (Bootcamp) 

Apr. 2020 
 
 
 
 

July 2018 

◦ Taught myself Robot Operation System in a week and developed microservices on C++ for robot navigation and communication. 
◦ Exploring documentation, fixed an unexpected problem with microservice-sensor communication appeared just before the deadline. 

• Universal Bluetooth Controller 

May 2018 

◦ Taught myself development for Android in 2 months and developed a mobile app for creating custom Bluetooth controllers. 
◦ Implemented the GUI system for an easy controllers configuration. 
◦ Adapted this app for using as a controlling interface for the robotic goat in local museum. 

ACHIEVEMENTS 
• 1st place in project competition (Analysis of the load structure of the consumer) 

Aug. 2018 – Feb. 2019 

Working with a team, this began as an education project that I drove to completion so our team take 1st place (of 384) in the 
All-Russian project competition ”Energy breakthrough” and get a partnership with the biggest energy transfer company in Russia. 

◦ Designed server’s architecture and implemented it using C++ and PostgreSQL. 

Fixed the problem with a slow transferring a large amount of data for machine learning algorithm by learning WebSocket protocol 
fastly and optimized communication with the server. 

SKILLS 
• Programming languages: C++, Python, C, basic knowledge of Java. 
• Technologies: Git, GitHub Action, Django, Qt, Docker. 
• Knowledge: Algorithms, Data Structures. 
• Other:  Linux, LATEX. 
OTHER 
• Contributed to the faculty website project. 
• Maintained the faculty git repository of LaTeX lecture notes. 
• Took part in the All-Russian educational conference ”Digital lesson” for school students as a speaker. 

 

 

 

 

• 

◦ 

◦ 

◦ 

"
15,source/Резниченко Алексей.pdf,"['Резниченко Алексей \\n', 'Екатеринбург |   +7(912)03-000-00 |  \\n \\n', 'Краткое описание \\n', 'Data Scientist/ML Engineer Имею более года опыта коммерческой работы с глубоким обучением и \\nML. Хочу развиваться в направлении timeseries или ML. \\n', 'Технологический  стек \\n', 'Python: pytorch, pandas, sklearn, xgboost, matplotlib, optuna, plotly, statsmodels, numpy, scipy, etc. \\nВспомогательные инструменты: SQL, pyspark, bash. \\nНейронные сети: CNN, LSTM, GRU, FC, Transformer, etc. \\nМатематический стек: Теория вероятности, статистика, оптимизация, линейная алгебра и другое. \\n', ' \\nОпыт работы \\n', 'Data Scientist/ML Engineer \\nИюнь 2022 - Июнь 2023 \\n', 'AXALIT \\n', '• Разработал пайплайн на sklearn/pytorch/optuna, классифицирующий химические составы в камне для \\n', 'горнодобывающей промышленности. Модель обрабатывала трехмерный тензор спектральных отсчетов. \\nИмплементировал модель в AXALIT. Точность модели составила 0.89 по метрике kappa. Результаты \\nпозволили привлечь инвестиции в проект. \\n', '• Разработка и развертывание SMP/XGBoost системы по обнаружению и классификации отходов оптического \\n', 'сепаратора WingsBee. Обучил модель семантической сегментации с метрикой IoU=0.89. Индексы \\nсоответствующих классов выхода модели SS поступали в модель Xgboost. Cohen Kappa=0.82. Cистема \\nполучила звание: ""Лучшее распознавание и анализ отходов!""на выставке Иннопром (Главная \\nпромышленная выставка страны). \\n', '• Разработал систему по object detection поврежденного тросса на базе YOLOv5. Внедрил квантизированный \\n', 'пайплайн в процессор дрона, с последующим съемом данных с местного жесткого диска и максимизации \\nметрик до IoU=0,892. Это привело к снижению расходов заказчика на 12.8%. \\n', '• Классификация овальнообразных металлов с микроскопа. Организовал детектор контуров на OpenCV-java. \\n', 'Из-за недостатка данных, синтезировал их самостоятельно на Opencv-python. Обучил 3-слойную CNN. \\n', '• Детекция и расчет псевдодиаметров овальнообразного пресса на базе Grabcut OpenCV. \\n', 'Репетитор по теории связи \\nОктябрь 2020 - Апрель 2022 \\n', 'Profi \\n', '• 3 моих учеников сдали экзамен по цифровой обработке сигналов на отлично. 1 ученик сдал курсовую на тему \\n', 'оптимальной линейной фильтрации. 2 Также 1 ученик сдал на отлично диплом на тему “Методы борьбы с \\nмежсимвольной интерференцией на основе оптимального H-infinity управления.” \\n', '• 2 ученика сдали курсовые работы на тему линейных моделей в ML на 5. \\n', 'В рамках потенциального стартапа \\nФевраль 2023 - Август 2023 \\n', ' \\n', '• Разрабатывал модели по прогнозированию движения актива на базе скрытых моделей Маркова, \\n', 'AR/аналогов AR, deep learning и classic ML. Но как Джим Саймонс пока не разбогател:) \\n', '• Исследовал методологию mean reversion trading на базе процессов Орнштейна-Уленбека, AR(1) процессов, \\n', 'Калмановской фильтрации и OLS \\n', 'Научная  деятельность \\n', 'Malygin, A. Loginovskikh and G. Reznichenko, ""The Use of Spread Spectrum Signals to Increase the Noise \\nImmunity of Optical Communication Systems Based on the Effect of LED Reversibility"", 2019 International \\nMulti-Conference on Engineering, Computer and Information Sciences (SIBIRCON), Novosibirsk, Russia, 2019, \\npp. 0069-0072, doi: 10.1109/SIBIRCON48586.2019.8958423 \\n', 'Образование \\n', 'Уральский Федеральный Университет \\nИРИТ - РТФ. Инфокоммуникационные технологии и системы связи \\nСентябрь 2016 - Май 2020 \\n']","Резниченко Алексей 

Екатеринбург |   +7(912)03-000-00 |  
 

Краткое описание 

Data Scientist/ML Engineer Имею более года опыта коммерческой работы с глубоким обучением и 
ML. Хочу развиваться в направлении timeseries или ML. 

Технологический  стек 

Python: pytorch, pandas, sklearn, xgboost, matplotlib, optuna, plotly, statsmodels, numpy, scipy, etc. 
Вспомогательные инструменты: SQL, pyspark, bash. 
Нейронные сети: CNN, LSTM, GRU, FC, Transformer, etc. 
Математический стек: Теория вероятности, статистика, оптимизация, линейная алгебра и другое. 

 
Опыт работы 

Data Scientist/ML Engineer 
Июнь 2022 - Июнь 2023 

AXALIT 

• Разработал пайплайн на sklearn/pytorch/optuna, классифицирующий химические составы в камне для 

горнодобывающей промышленности. Модель обрабатывала трехмерный тензор спектральных отсчетов. 
Имплементировал модель в AXALIT. Точность модели составила 0.89 по метрике kappa. Результаты 
позволили привлечь инвестиции в проект. 

• Разработка и развертывание SMP/XGBoost системы по обнаружению и классификации отходов оптического 

сепаратора WingsBee. Обучил модель семантической сегментации с метрикой IoU=0.89. Индексы 
соответствующих классов выхода модели SS поступали в модель Xgboost. Cohen Kappa=0.82. Cистема 
получила звание: ""Лучшее распознавание и анализ отходов!""на выставке Иннопром (Главная 
промышленная выставка страны). 

• Разработал систему по object detection поврежденного тросса на базе YOLOv5. Внедрил квантизированный 

пайплайн в процессор дрона, с последующим съемом данных с местного жесткого диска и максимизации 
метрик до IoU=0,892. Это привело к снижению расходов заказчика на 12.8%. 

• Классификация овальнообразных металлов с микроскопа. Организовал детектор контуров на OpenCV-java. 

Из-за недостатка данных, синтезировал их самостоятельно на Opencv-python. Обучил 3-слойную CNN. 

• Детекция и расчет псевдодиаметров овальнообразного пресса на базе Grabcut OpenCV. 

Репетитор по теории связи 
Октябрь 2020 - Апрель 2022 

Profi 

• 3 моих учеников сдали экзамен по цифровой обработке сигналов на отлично. 1 ученик сдал курсовую на тему 

оптимальной линейной фильтрации. 2 Также 1 ученик сдал на отлично диплом на тему “Методы борьбы с 
межсимвольной интерференцией на основе оптимального H-infinity управления.” 

• 2 ученика сдали курсовые работы на тему линейных моделей в ML на 5. 

В рамках потенциального стартапа 
Февраль 2023 - Август 2023 

 

• Разрабатывал модели по прогнозированию движения актива на базе скрытых моделей Маркова, 

AR/аналогов AR, deep learning и classic ML. Но как Джим Саймонс пока не разбогател:) 

• Исследовал методологию mean reversion trading на базе процессов Орнштейна-Уленбека, AR(1) процессов, 

Калмановской фильтрации и OLS 

Научная  деятельность 

Malygin, A. Loginovskikh and G. Reznichenko, ""The Use of Spread Spectrum Signals to Increase the Noise 
Immunity of Optical Communication Systems Based on the Effect of LED Reversibility"", 2019 International 
Multi-Conference on Engineering, Computer and Information Sciences (SIBIRCON), Novosibirsk, Russia, 2019, 
pp. 0069-0072, doi: 10.1109/SIBIRCON48586.2019.8958423 

Образование 

Уральский Федеральный Университет 
ИРИТ - РТФ. Инфокоммуникационные технологии и системы связи 
Сентябрь 2016 - Май 2020 

"
16,source/EGOR BALIUK.pdf,"['EGOR BALIUK \\n', '  baliuk.eeee@gmail.com \\n  \\nbaliuuuuu \\n   \\n7 977 111-06-39 \\n', ' \\nEDUCATION \\n', 'Higher School of Economics, Moscow, Russia \\n2019 – 2023 \\n', 'Bachelor of Computer Science, Applied Mathematics and Information Science \\n', ' \\nEXPERIENCE \\n', 'Chatex (a peer-to-peer cryptocurrency marketplace) \\nFeb 2020 – Present \\n', 'As a golang developer: \\n', '• Decreased number of questions and requests from the support team to the developers by 95% by developing \\n', 'an administration tool. \\n', '• Created a RabbitMQ consumer that receives data from various parts of the product, enriches, groups \\n', 'events in batches, and sends to several resources (Google Analytics, etc.) for further analysis. \\n', '• Introduced and developed a mechanism of A/B test integration. Thanks to this development, we have \\n', 'tested new hypotheses and increased the conversion of successful registration by 8%. \\n', '• Wrote a specification for our public API. Added and implemented logic for new endpoints and maintained \\n', 'the old ones. \\n', '• Reduced the 95 percentile response time of several API methods by 2.5 times by optimizing the code and \\n', 'removing redundant remote procedure calls. \\n', ' \\nPERSONAL PROJECTS \\n', 'BDayTracker [Go, Kotlin] \\nA Telegram bot that reminds you about your friends’ birthdays. Users can add new friends manually or ask \\nthe bot to parse the information from VK — the largest CIS-oriented social network. At first, I implemented \\nit in Kotlin, but then rewrote it in Go. On average, the bot sends reminders to nearly 90 users every day. \\n', 'DocumentConverter [Python] \\nIt’s a simple web application that can convert documents from one format to another (e.g., DOCX to PDF). \\nI used Flask (Python framework) to develop it. My fellow students use it regularly for our studies. \\n', ' \\nSKILLS \\n', 'Languages \\nGo (main language), C++, Python \\n', 'Other \\nPostgreSQL, RabbitMQ, Prometheus, k8s, Docker, gRPC, SQL, Bash \\n', ' \\nAWARDS \\n', 'Yandex Championship \\nPrizewinner \\n', 'The competition for backend developers. \\n2019 \\n', 'Belarusian National Olympiad in Informatics \\nSilver medal \\n', 'The largest and most the important competition for Belarusian high school students. \\n2018, 2019 \\n', 'Russian Open Olympiad in Informatics \\nSilver medal \\n', 'Exciting and one of the most valuable olympiad for Russian high school students. \\n2019 \\n', 'International Zhautykov Olympiad \\nBronze medal \\n', 'One of the most prestigious educational events held in Kazakhstan. \\n2019 \\n', 'Hashcode, Google Code Jam, Kotlin Heroes \\nParticipant \\n2018 - 2020 \\n']","EGOR BALIUK 

  baliuk.eeee@gmail.com 
  
baliuuuuu 
   
7 977 111-06-39 

 
EDUCATION 

Higher School of Economics, Moscow, Russia 
2019 – 2023 

Bachelor of Computer Science, Applied Mathematics and Information Science 

 
EXPERIENCE 

Chatex (a peer-to-peer cryptocurrency marketplace) 
Feb 2020 – Present 

As a golang developer: 

• Decreased number of questions and requests from the support team to the developers by 95% by developing 

an administration tool. 

• Created a RabbitMQ consumer that receives data from various parts of the product, enriches, groups 

events in batches, and sends to several resources (Google Analytics, etc.) for further analysis. 

• Introduced and developed a mechanism of A/B test integration. Thanks to this development, we have 

tested new hypotheses and increased the conversion of successful registration by 8%. 

• Wrote a specification for our public API. Added and implemented logic for new endpoints and maintained 

the old ones. 

• Reduced the 95 percentile response time of several API methods by 2.5 times by optimizing the code and 

removing redundant remote procedure calls. 

 
PERSONAL PROJECTS 

BDayTracker [Go, Kotlin] 
A Telegram bot that reminds you about your friends’ birthdays. Users can add new friends manually or ask 
the bot to parse the information from VK — the largest CIS-oriented social network. At first, I implemented 
it in Kotlin, but then rewrote it in Go. On average, the bot sends reminders to nearly 90 users every day. 

DocumentConverter [Python] 
It’s a simple web application that can convert documents from one format to another (e.g., DOCX to PDF). 
I used Flask (Python framework) to develop it. My fellow students use it regularly for our studies. 

 
SKILLS 

Languages 
Go (main language), C++, Python 

Other 
PostgreSQL, RabbitMQ, Prometheus, k8s, Docker, gRPC, SQL, Bash 

 
AWARDS 

Yandex Championship 
Prizewinner 

The competition for backend developers. 
2019 

Belarusian National Olympiad in Informatics 
Silver medal 

The largest and most the important competition for Belarusian high school students. 
2018, 2019 

Russian Open Olympiad in Informatics 
Silver medal 

Exciting and one of the most valuable olympiad for Russian high school students. 
2019 

International Zhautykov Olympiad 
Bronze medal 

One of the most prestigious educational events held in Kazakhstan. 
2019 

Hashcode, Google Code Jam, Kotlin Heroes 
Participant 
2018 - 2020 

"
17,source/Denis Rakitnykh.pdf,"['Denis\\nRakitnykh\\nSoftware Engineer\\n', 'LinkedIn\\n', 'iaaaitnykh@gmail.com\\n', '+7 960 000 364 64\\n', 'Moscow,\\n', 'Russia Visa sponsorship\\n', 'required\\n', 'A highly-skilled software engineer with 9+ years of experience in SDLC/ Programming, Software Architecture and\\nTeam Management. A result-oriented person with effective clean coding practices, including design, unit testing,\\nand peer code-reviews. Strong ability to quickly learn and utilize new technologies.\\n', 'EXPERIENCE\\n', 'Project: Blockchain core. Smart contract programming language.\\n', '●\\nDeveloped a new parser and compiler of the smart contract language.\\n', '●\\nCreated specification of the smart contract web IDE improvements, implemented a backend module that\\nprovides syntax and compiler data and led its integration.\\n', '●\\nProfiled and optimized the code. The improvement increased the speed of the blockchain\\nimporting process by 46% (from 72 to 39 hours).\\n', ""●\\nAnalyzed users' comments, made a requirement list and optimized the language code according to it. The\\nimprovement decreased the smart contract system usage cost and its maintenance by 30%.\\n"", '●\\nLeading a process of release planning which includes creation and gathering ideas, analytics, specification\\ndevelopment and task creation.\\n', '●\\nInitiated optimization of the release planning process and created a set of measures to avoid deadline\\nproblems.\\n', '●\\nLeading a team of 4 software engineers.\\n', 'Project: Online travel agency (tour and lodging search and reservations).\\n', '●\\nDesigned a distributed system for search and aggregation of tours, which replaced the previous monolithic\\napplication. Implemented main modules of the system. It allowed the team to manage the app instance\\namount in a more flexible manner, according to load, and saved around 15% of the server rent budget.\\n', '●\\nDeveloped a subsystem for aggregation of peculiar errors and statistics of backend performance and their\\nvisualization.\\n', '●\\nDeveloped automated hotel names-mapping and photo-tagging modules using machine learning\\ntools: CatBoost, TensorFlow. Reduced handwork for content managers.\\n', '●\\nLed a team of 3 software engineers.\\n', '●\\nInvolved in all full stack development processes on 4 different projects.\\n', '●\\nDeveloped an error prediction system (Healthcare - insurance reports) which included: data preparation,\\ncycles of prototyping and result analysis.\\n', '●\\nTaught myself Scala and rewrote two core modules of an outdated Java project. This revealed the\\nadvantages of the new language to the team and led to rewriting the whole project.\\n', 'TECHNICAL SKILLS\\n', '●\\nJava, Scala, Python, JavaScript, R\\n', '●\\nSpring, Hibernate, Kafka, Jenkins, AWS, Nginx, ElasticSearch, Docker, Kubernetes\\n', 'EDUCATION\\n', 'Tver State University (Tver, Russia)\\n', ""●\\nMaster's degree: Fundamental Informatics and Information Technologies in July 2013\\n"", ""●\\nBachelor's degree: Information Technology in July 2011\\n""]","Denis
Rakitnykh
Software Engineer

LinkedIn

iaaaitnykh@gmail.com

+7 960 000 364 64

Moscow,

Russia Visa sponsorship

required

A highly-skilled software engineer with 9+ years of experience in SDLC/ Programming, Software Architecture and
Team Management. A result-oriented person with effective clean coding practices, including design, unit testing,
and peer code-reviews. Strong ability to quickly learn and utilize new technologies.

EXPERIENCE

Project: Blockchain core. Smart contract programming language.

●
Developed a new parser and compiler of the smart contract language.

●
Created specification of the smart contract web IDE improvements, implemented a backend module that
provides syntax and compiler data and led its integration.

●
Profiled and optimized the code. The improvement increased the speed of the blockchain
importing process by 46% (from 72 to 39 hours).

●
Analyzed users' comments, made a requirement list and optimized the language code according to it. The
improvement decreased the smart contract system usage cost and its maintenance by 30%.

●
Leading a process of release planning which includes creation and gathering ideas, analytics, specification
development and task creation.

●
Initiated optimization of the release planning process and created a set of measures to avoid deadline
problems.

●
Leading a team of 4 software engineers.

Project: Online travel agency (tour and lodging search and reservations).

●
Designed a distributed system for search and aggregation of tours, which replaced the previous monolithic
application. Implemented main modules of the system. It allowed the team to manage the app instance
amount in a more flexible manner, according to load, and saved around 15% of the server rent budget.

●
Developed a subsystem for aggregation of peculiar errors and statistics of backend performance and their
visualization.

●
Developed automated hotel names-mapping and photo-tagging modules using machine learning
tools: CatBoost, TensorFlow. Reduced handwork for content managers.

●
Led a team of 3 software engineers.

●
Involved in all full stack development processes on 4 different projects.

●
Developed an error prediction system (Healthcare - insurance reports) which included: data preparation,
cycles of prototyping and result analysis.

●
Taught myself Scala and rewrote two core modules of an outdated Java project. This revealed the
advantages of the new language to the team and led to rewriting the whole project.

TECHNICAL SKILLS

●
Java, Scala, Python, JavaScript, R

●
Spring, Hibernate, Kafka, Jenkins, AWS, Nginx, ElasticSearch, Docker, Kubernetes

EDUCATION

Tver State University (Tver, Russia)

●
Master's degree: Fundamental Informatics and Information Technologies in July 2013

●
Bachelor's degree: Information Technology in July 2011

"
18,source/SEMEN BOKUN.pdf,"['• \\n', 'Budniak Ivan \\nSoftware Engineer with significant competitive programming experience \\n \\n', 'Email: budniakkkk@yandex.by  \\nMobile: +375 (44) 543-11-11 \\n \\n', ' \\n', 'EDUCATION \\n', 'Belarusian State University in Informatics and Radioelectronics \\nMinsk, Belarus \\n', 'Bachelor’s degree in Computer Science \\nSeptember 2017 — Expected 2021 \\n', 'Yandex School of Data Analysis \\nMoscow, Russia \\n', 'Master’s level program, Machine Learning development track \\nSeptember 2019 — Expected 2021 \\n', 'Relevant courses: Probability and Statistics, Machine Learning, Computer Vision, Natural Language Processing, Deep \\nLearning, Reinforcement Learning, Python, C++, GoLang, Algorithms and Data Structures, BigData, Parallel and \\nDistributed Computations \\n', ' \\n', 'WORK   EXPERIENCE \\n', 'Deltix (Bought by EPAM Systems at january 2020) \\nMinsk, Belarus \\n', 'Software Engineer \\nAugust 2018 – Present \\n', 'Developed a system for integration with various top crypto-custodies for crypto-trading platform used by hundreds of \\nthousands. \\n', '• Created a service for secure interacting with any Ethereum tokens. \\n• Fixed major issues of crypto-trading platform high loaded module. \\n• Built a tool for crypto-trading platform stress-testing. \\n', 'Mogilev State Regional Institute for Education Development \\nMogilev, Belarus \\n', 'Competitive Programming Mentor \\nFebrary, March 2018&2019 \\n', '• Preparing students of Mogilev region for the National Olympiad in Informatics. Many of them were awarded. \\n', 'PROJECTS \\n', 'JPEG decoder: Baseline sequential mode of JPEG decoder, written in C++ using OOP and various algorithms such as \\nHuffman decoding. \\nUkrainian-Russian translator: Written in Python with Sklearn library, using embedding space mapping with optimal \\ntransformation derived from SVD decomposition. Used public dataset with 1M word pairs. \\nLightBulbChan: Student assistant in the form of a multifunctional telegram bot. Uses various APIs to help students \\nprepare for classes. \\n', 'AWARDS \\n', 'ACM ICPC, NEERC ICPC \\nSaint-Petersburg, Russia — December, 2017 \\n', '• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion \\n• III degree award (2017, 81/244 place) \\n', 'ACM ICPC, Belarus and Baltics Regional Contest \\nMinsk, Belarus — October, 2017&2018 \\n', '• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion \\n• III degree award (2019, 18/57 place) \\n• II degree award (2017, 8/57 place) \\n', 'Individual Olympiad in Informatics and Programming \\nSaint-Petersburg, Russia — March 2017 \\n', '• Programming competition among schoolchildren of Belarus, Russia and Kazakhstan \\n• I degree award (10/180 place) \\n', 'Belarusian National Olympiad in Informatics \\nBelarus — March 2015&2016&2017 \\n', '• II degree award (2017, 12/123 place) \\n• II degree award (2016, 12/120 place) \\n• III degree award (2015, 39/118 place) \\n', 'Top 3% on Codeforces — ednotdead \\nTop 2% on Hackerrank — Ed_Os \\n', '• \\n', '• \\n', '• \\n', '• \\n']","• 

Budniak Ivan 
Software Engineer with significant competitive programming experience 
 

Email: budniakkkk@yandex.by  
Mobile: +375 (44) 543-11-11 
 

 

EDUCATION 

Belarusian State University in Informatics and Radioelectronics 
Minsk, Belarus 

Bachelor’s degree in Computer Science 
September 2017 — Expected 2021 

Yandex School of Data Analysis 
Moscow, Russia 

Master’s level program, Machine Learning development track 
September 2019 — Expected 2021 

Relevant courses: Probability and Statistics, Machine Learning, Computer Vision, Natural Language Processing, Deep 
Learning, Reinforcement Learning, Python, C++, GoLang, Algorithms and Data Structures, BigData, Parallel and 
Distributed Computations 

 

WORK   EXPERIENCE 

Deltix (Bought by EPAM Systems at january 2020) 
Minsk, Belarus 

Software Engineer 
August 2018 – Present 

Developed a system for integration with various top crypto-custodies for crypto-trading platform used by hundreds of 
thousands. 

• Created a service for secure interacting with any Ethereum tokens. 
• Fixed major issues of crypto-trading platform high loaded module. 
• Built a tool for crypto-trading platform stress-testing. 

Mogilev State Regional Institute for Education Development 
Mogilev, Belarus 

Competitive Programming Mentor 
Febrary, March 2018&2019 

• Preparing students of Mogilev region for the National Olympiad in Informatics. Many of them were awarded. 

PROJECTS 

JPEG decoder: Baseline sequential mode of JPEG decoder, written in C++ using OOP and various algorithms such as 
Huffman decoding. 
Ukrainian-Russian translator: Written in Python with Sklearn library, using embedding space mapping with optimal 
transformation derived from SVD decomposition. Used public dataset with 1M word pairs. 
LightBulbChan: Student assistant in the form of a multifunctional telegram bot. Uses various APIs to help students 
prepare for classes. 

AWARDS 

ACM ICPC, NEERC ICPC 
Saint-Petersburg, Russia — December, 2017 

• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion 
• III degree award (2017, 81/244 place) 

ACM ICPC, Belarus and Baltics Regional Contest 
Minsk, Belarus — October, 2017&2018 

• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion 
• III degree award (2019, 18/57 place) 
• II degree award (2017, 8/57 place) 

Individual Olympiad in Informatics and Programming 
Saint-Petersburg, Russia — March 2017 

• Programming competition among schoolchildren of Belarus, Russia and Kazakhstan 
• I degree award (10/180 place) 

Belarusian National Olympiad in Informatics 
Belarus — March 2015&2016&2017 

• II degree award (2017, 12/123 place) 
• II degree award (2016, 12/120 place) 
• III degree award (2015, 39/118 place) 

Top 3% on Codeforces — ednotdead 
Top 2% on Hackerrank — Ed_Os 

• 

• 

• 

• 

"
19,source/Alan Iusupov .pdf,"['Alan Iusupov  \\niOS Developer \\n', '+996 (505) 21-11-11 |iusupov.aaaaai@gmail.com  \\n', ' \\nWORK EXPERIENCE \\n', 'OAO Optima Bank iOS Developer Nov 2022 – Present ● Successfully produced 5 releases under my guidance.. \\n● Developed over 8 complex functionalities that facilitated the use of repetitive screens and brought over 1 million \\n', 'KGS to the company, and partnered with over 35 companies. \\n', '● Optimization: Improvement of Git and TestFlight workflows. Experienced in implementing new targeting \\n', 'strategies for developers and optimizing app build times. Successfully improved collaboration, distribution, and \\ntesting processes, significantly reducing app build time from 5-10 minutes to 1-3 minutes \\n', 'Geeks Bishkek, Kyrgyzstan iOS Trainer Dec 2022 – Aug 2023 ● Trained over 100 students in iOS development ● \\nIn the middle of a full course of study, 5% got a job/internship. \\n', ' \\n', 'Mustard Inc. Bishkek, Kyrgyzstan iOS Developer May 2021 – Nov 2022 ● Developed error handling solutions for \\nserver applications, providing efficient and consistent error and exception handling using ""Strategy"" design pattern. \\n● GIF optimization has reduced memory consumption by 40% for smooth playback and minimal resource usage. \\n● Refactored the profile page, which increased its use by 10% more often, made it smoother and more pleasant to \\nuse. \\n', ' \\nEDUCATION \\n', 'International Alatoo University Bishkek, Kyrgyzstan Bachelor of Computer Science June 2023 Relevant \\nCoursework: Software Engineering; Operating Systems; Algorithms; \\n \\n \\n', 'SKILLS \\n', 'Technologies: Swift, UIKit, SwiftUI, Swift Concurrency, Combine, SPM, Cocoapods, KMM \\n', 'Architectures: MVx, VIPER \\n']","Alan Iusupov  
iOS Developer 

+996 (505) 21-11-11 |iusupov.aaaaai@gmail.com  

 
WORK EXPERIENCE 

OAO Optima Bank iOS Developer Nov 2022 – Present ● Successfully produced 5 releases under my guidance.. 
● Developed over 8 complex functionalities that facilitated the use of repetitive screens and brought over 1 million 

KGS to the company, and partnered with over 35 companies. 

● Optimization: Improvement of Git and TestFlight workflows. Experienced in implementing new targeting 

strategies for developers and optimizing app build times. Successfully improved collaboration, distribution, and 
testing processes, significantly reducing app build time from 5-10 minutes to 1-3 minutes 

Geeks Bishkek, Kyrgyzstan iOS Trainer Dec 2022 – Aug 2023 ● Trained over 100 students in iOS development ● 
In the middle of a full course of study, 5% got a job/internship. 

 

Mustard Inc. Bishkek, Kyrgyzstan iOS Developer May 2021 – Nov 2022 ● Developed error handling solutions for 
server applications, providing efficient and consistent error and exception handling using ""Strategy"" design pattern. 
● GIF optimization has reduced memory consumption by 40% for smooth playback and minimal resource usage. 
● Refactored the profile page, which increased its use by 10% more often, made it smoother and more pleasant to 
use. 

 
EDUCATION 

International Alatoo University Bishkek, Kyrgyzstan Bachelor of Computer Science June 2023 Relevant 
Coursework: Software Engineering; Operating Systems; Algorithms; 
 
 

SKILLS 

Technologies: Swift, UIKit, SwiftUI, Swift Concurrency, Combine, SPM, Cocoapods, KMM 

Architectures: MVx, VIPER 

"
20,source/Mitya Brezovsky.pdf,"[' \\n', ' \\n', 'Mitya Brezovsky \\n', ' \\n', 'Java Software Developer \\n', ' \\n', ' \\n', 'Summary \\n', ' \\n', '• \\nExperience in commercial software development - 1 year as Java developer. \\n', '• \\nHave 4 months of remote work experience. \\n', '• \\nPractical work with Python, Bash and SQL. \\n', '• \\nGood work in team. Easy to learn. Admirable analytical skills. \\n', ' \\n', 'Skills \\n', ' \\n', '• \\nJava: Spring Framework (Boot, MVC, Data), Gradle, Maven, Hibernate, JUnit. \\n', '• \\nJavaScript: React, npm. \\n', '• \\nDatabases: SQL (SQLite, PostgreSQL, MS SQL Server). \\n', '• \\nOther skills: Linux (primary OS), Git, AWS, HTML, CSS, Bootstrap, Jenkins, Bash, \\nPython. \\n', ' \\n', 'Employment \\n', ' \\n', '• \\nSTiM (Nov 2019 - Present) \\n◦ Wialon Analytics – analytical system for cars sensors monitoring: \\n', '▪ Designed and implemented the system (both front and backend) from scratch. \\n', 'Technologies: Java, JavaScript, React, SQLite, MS SQL Server. \\n', ' \\n', 'Awards and Initiatives \\n', ' \\n', '• \\nHackathon""#BRESTHACK2018""- 3rd place as a team member of 2 people: \\n◦ Developed product from scratch to MVP in a limited time (only 48h). \\n◦ Prepared and presented our product (experience with public speaking). \\n', '• \\nBrest Python Meetup (Feb 29, 2019) - co-organizer and speaker. \\n', ' \\n', 'Languages \\n', ' \\n', '• \\nEnglish – B1 (Intermediate). \\n', '• \\nRussian – Native. \\n', ' \\n', 'Education \\n', ' \\n', '• \\nBrest State Polytechnic College - Mechanical Technical (2016 – 2020). \\n']"," 

 

Mitya Brezovsky 

 

Java Software Developer 

 

 

Summary 

 

• 
Experience in commercial software development - 1 year as Java developer. 

• 
Have 4 months of remote work experience. 

• 
Practical work with Python, Bash and SQL. 

• 
Good work in team. Easy to learn. Admirable analytical skills. 

 

Skills 

 

• 
Java: Spring Framework (Boot, MVC, Data), Gradle, Maven, Hibernate, JUnit. 

• 
JavaScript: React, npm. 

• 
Databases: SQL (SQLite, PostgreSQL, MS SQL Server). 

• 
Other skills: Linux (primary OS), Git, AWS, HTML, CSS, Bootstrap, Jenkins, Bash, 
Python. 

 

Employment 

 

• 
STiM (Nov 2019 - Present) 
◦ Wialon Analytics – analytical system for cars sensors monitoring: 

▪ Designed and implemented the system (both front and backend) from scratch. 

Technologies: Java, JavaScript, React, SQLite, MS SQL Server. 

 

Awards and Initiatives 

 

• 
Hackathon""#BRESTHACK2018""- 3rd place as a team member of 2 people: 
◦ Developed product from scratch to MVP in a limited time (only 48h). 
◦ Prepared and presented our product (experience with public speaking). 

• 
Brest Python Meetup (Feb 29, 2019) - co-organizer and speaker. 

 

Languages 

 

• 
English – B1 (Intermediate). 

• 
Russian – Native. 

 

Education 

 

• 
Brest State Polytechnic College - Mechanical Technical (2016 – 2020). 

"
21,source/Viktor Shupenka.pdf,"['Personal Information \\n', 'Name and Surname: \\nViktor Shupenka \\n', 'Date of Birth: \\n03.02.1987 \\n', 'Phone number: \\n+37533691122225 \\n', ' \\n \\n', 'Junior frontend developer, React  developer \\n', ' \\n \\n', 'Profile \\n', ' \\n  \\nEducation \\n', '09.2004 - 05.2007 \\n', ' \\n', 'Web developer, at the start of my way, looking for a \\n', 'company in which there will be  an  opportunity to grow \\n', 'as a very good specialist. \\n', ' \\n \\n \\n \\n', 'MGPK, Maladechna, Belarus \\n', 'Electrician  technician \\n', ' \\nExperience \\n', '04.2009 - present \\n', ' \\n \\n \\n \\n \\n', '12.2019 - present \\n', ' \\n \\n \\n', 'Construction and assembly organizations \\n', 'Technical worker, builder \\n', ' \\n \\n', 'The whole range of construction and electrical work \\n', ' \\n', 'Self-education \\n', 'Frontend developer, React developer \\n', 'Create React apps, SPA, functional components, class components, interactions between \\n', 'components, HOC, work with Context API, Fetch, Axios, Redux \\n', ' \\nSkills \\nPersonality \\n', ' \\n', '� HTML, CSS, JS - basic \\n', '�   React, Redux, Context API, Hooks \\n', '�   Figma, Zeplin, Adobe Photoshop - basic \\n', '�   Self- learning \\n', '�  Creativity \\n', '�  Responsibility \\n', '�  Organized \\n', ' \\nLanguages \\nSoftware \\n', ' \\n', 'English - B1 Intermediate \\n', 'Russian - Native \\n', 'Figma - basic \\n', 'Zeplin - basic \\n', 'Adobe Photoshop -    basic \\n', ' \\nHobbies \\n� \\n', 'Technology � \\n', 'Music \\n� \\n', 'Reading \\n', ' \\n \\n \\n \\n \\n', 'I agree that m y personal data will be processed in order to recruit for the position I am applying for. \\n']","Personal Information 

Name and Surname: 
Viktor Shupenka 

Date of Birth: 
03.02.1987 

Phone number: 
+37533691122225 

 
 

Junior frontend developer, React  developer 

 
 

Profile 

 
  
Education 

09.2004 - 05.2007 

 

Web developer, at the start of my way, looking for a 

company in which there will be  an  opportunity to grow 

as a very good specialist. 

 
 
 
 

MGPK, Maladechna, Belarus 

Electrician  technician 

 
Experience 

04.2009 - present 

 
 
 
 
 

12.2019 - present 

 
 
 

Construction and assembly organizations 

Technical worker, builder 

 
 

The whole range of construction and electrical work 

 

Self-education 

Frontend developer, React developer 

Create React apps, SPA, functional components, class components, interactions between 

components, HOC, work with Context API, Fetch, Axios, Redux 

 
Skills 
Personality 

 

� HTML, CSS, JS - basic 

�   React, Redux, Context API, Hooks 

�   Figma, Zeplin, Adobe Photoshop - basic 

�   Self- learning 

�  Creativity 

�  Responsibility 

�  Organized 

 
Languages 
Software 

 

English - B1 Intermediate 

Russian - Native 

Figma - basic 

Zeplin - basic 

Adobe Photoshop -    basic 

 
Hobbies 
� 

Technology � 

Music 
� 

Reading 

 
 
 
 
 

I agree that m y personal data will be processed in order to recruit for the position I am applying for. 

"
22,source/pymupdf.pdf,"['PyMuPDF Documentation\\n', 'Release 1.23.25\\n', 'Artifex\\n', 'Feb 21, 2024\\n', 'ABOUT\\n', '1\\nFeatures Comparison\\n3\\n', '2\\nPerformance\\n5\\n', '3\\nLicense and Copyright\\n7\\n', '4\\nInstallation\\n9\\n', '5\\nThe Basics\\n15\\n', '6\\nTutorial\\n25\\n', '7\\nOpening Files\\n35\\n', '8\\nText\\n37\\n', '9\\nImages\\n55\\n', '10 Annotations\\n71\\n', '11 Drawing and Graphics\\n81\\n', '12 Stories\\n87\\n', '13 Journalling\\n131\\n', '14 Multiprocessing\\n135\\n', '15 Optional Content Support\\n141\\n', '16 Low-Level Interfaces\\n143\\n', '17 Common Issues and their Solutions\\n153\\n', '18 Module fitz\\n161\\n', '19 Classes\\n173\\n', '20 Operator Algebra for Geometry Objects\\n397\\n', '21 Low Level Functions and Classes\\n403\\n', '22 Glossary\\n427\\n', 'i\\n', '23 Constants and Enumerations\\n433\\n', '24 Color Database\\n443\\n', '25 Appendix 1: Details on Text Extraction\\n445\\n', '26 Appendix 2: Considerations on Embedded Files\\n453\\n', '27 Appendix 3: Assorted Technical Information\\n455\\n', '28 Appendix 4: Performance Comparison Methodology\\n465\\n', '29 Change Log\\n471\\n', '30 Deprecated Names\\n519\\n', '31 Find out about PyMuPDF Utilities\\n527\\n', '32 Do you need PDF to DOCX conversion?\\n529\\n', 'Index\\n531\\n', 'ii\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'PyMuPDF is a high-performance Python library for data extraction, analysis, conversion & manipulation of PDF (and\\nother) documents.\\n', 'PyMuPDF is hosted on GitHub and registered on PyPI.\\n', 'This documentation covers all versions up to 1.23.25.\\n', 'ABOUT\\n1\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '2\\nABOUT\\n', 'CHAPTER\\n', 'ONE\\n', 'FEATURES COMPARISON\\n', '1.1 Feature Matrix\\n', 'The following table illustrates how PyMuPDF compares with other typical solutions.\\n', '3\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '4\\nChapter 1. Features Comparison\\n', 'CHAPTER\\n', 'TWO\\n', 'PERFORMANCE\\n', 'To benchmark PyMuPDF performance against a range of tasks a test suite with a fixed set of 8 PDFs with a total of\\n7,031 pages containing text & images is used to obtain performance timings.\\n', 'Here are current results, grouped by task:\\n', 'Note:\\nFor more detail regarding the methodology for these performance timings see: Performance Comparison\\nMethodology.\\n', '5\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '6\\nChapter 2. Performance\\n', 'CHAPTER\\n', 'THREE\\n', 'LICENSE AND COPYRIGHT\\n', 'PyMuPDF and MuPDF are now available under both, open-source AGPL and commercial license agreements. Please\\nread the full text of the AGPL license agreement, available in the distribution material (file COPYING) and here, to\\nensure that your use case complies with the guidelines of the license. If you determine you cannot meet the requirements\\nof the AGPL, please contact Artifex for more information regarding a commercial license.\\n', 'Artifex is the exclusive commercial licensing agent for MuPDF.\\n', 'Artifex, the Artifex logo, MuPDF, and the MuPDF logo are registered trademarks of Artifex Software Inc.\\n', 'This documentation covers PyMuPDF v1.23.25 features as of 2024-02-20 00:00:01.\\n', 'The major and minor versions of PyMuPDF and MuPDF will always be the same. Only the third qualifier (patch\\nlevel) may deviate from that of MuPDF.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '7\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '8\\nChapter 3. License and Copyright\\n', 'CHAPTER\\n', 'FOUR\\n', 'INSTALLATION\\n', '4.1 Requirements\\n', 'All the examples below assume that you are running inside a Python virtual environment. See: https://docs.python.\\norg/3/library/venv.html for details. We also assume that pip is up to date.\\n', 'For example:\\n', '• Windows:\\n', 'py -m venv pymupdf-venv\\n.\\\\pymupdf-venv\\\\Scripts\\\\activate\\npython -m pip install --upgrade pip\\n', '• Linux, MacOS:\\n', 'python -m venv pymupdf-venv\\n. pymupdf-venv/bin/activate\\npython -m pip install --upgrade pip\\n', '4.2 Installation\\n', 'PyMuPDF should be installed using pip with:\\n', 'pip install --upgrade pymupdf\\n', 'This will install from a Python wheel if one is available for your platform.\\n', '4.3 Installation when a suitable wheel is not available\\n', 'If a suitable Python wheel is not available, pip will automatically build from source using a Python sdist.\\n', 'This requires C/C++ development tools to be installed:\\n', '• On Windows:\\n', '– Install Visual Studio 2019.\\nIf not installed in a standard location, set environmental variable\\nPYMUPDF_SETUP_DEVENV to the location of the devenv.com binary.\\n', '– Having other installed versions of Visual Studio, for example Visual Studio 2022, can cause problems\\nbecause one can end up with MuPDF and PyMuPDF code being compiled with different compiler versions.\\n', '9\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'As of PyMuPDF-1.20.0, the required MuPDF source code is already in the sdist and is automatically built into\\nPyMuPDF.\\n', '4.4 Problems after installation\\n', '• On Windows ImportError:\\nDLL load failed while importing _fitz.\\n', 'This has been occasionally seen if MSVCP140.dll is missing, and appears to be caused by a bug in some versions\\n(2015-2017) of Microsoft Visual C++ Redistributables.\\n', 'It is recommended to search for MSVCP140.dll in https://msdn.com to find instructions for how to reinstall\\nit. For example https://learn.microsoft.com/cpp/windows/latest-supported-vc-redist has permalinks to the latest\\nsupported versions.\\n', 'See https://github.com/pymupdf/PyMuPDF/issues/2678 for more details.\\n', '4.5 Notes\\n', 'Wheels are available for Windows (32-bit Intel, 64-bit Intel), Linux (64-bit Intel, 64-bit ARM) and Mac OSX (64-bit\\nIntel, 64-bit ARM), Python versions 3.7 and up.\\n', 'Wheels are not available for Python installed with Chocolatey on Windows. Instead install Python using the Windows\\ninstaller from the python.org website, see: http://www.python.org/downloads\\n', 'PyMuPDF does not support Python versions prior to 3.8. Older wheels can be found in this repository and on PyPI.\\nPlease note that we generally follow the official Python release schedules. For Python versions dropping out of official\\nsupport this means, that generation of wheels will also be ceased for them.\\n', 'There are no mandatory external dependencies. However, some optional feature are available only if additional com-\\nponents are installed:\\n', '• Pillow is required for Pixmap.pil_save() and Pixmap.pil_tobytes().\\n', '• fontTools is required for Document.subset_fonts().\\n', '• pymupdf-fonts is a collection of nice fonts to be used for text output methods.\\n', '• Tesseract-OCR for optical character recognition in images and document pages. Tesseract is separate software,\\nnot a Python package. To enable OCR functions in PyMuPDF, the software must be installed and the system envi-\\nronment variable ""TESSDATA_PREFIX"" must be defined and contain the tessdata folder name of the Tesseract\\ninstallation location. See below.\\n', 'Note: You can install these additional components at any time – before or after installing PyMuPDF. PyMuPDF will\\ndetect their presence during import or when the respective functions are being used.\\n', '10\\nChapter 4. Installation\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '4.6 Build and install from local PyMuPDF checkout and optional local\\nMuPDF checkout\\n', '• Install C/C++ development tools as described above.\\n', '• Enter a Python venv and update pip, as described above.\\n', '• Get a PyMuPDF source tree:\\n', '– Clone the PyMuPDF git repository:\\n', 'git clone https://github.com/pymupdf/PyMuPDF.git\\n', '– Or download and extract a .zip or .tar.gz source release from https://github.com/pymupdf/PyMuPDF/\\nreleases.\\n', '• Build and install PyMuPDF:\\n', 'cd PyMuPDF && pip install .\\n', 'This will automatically download a specific hard-coded MuPDF source release, and build it into PyMuPDF.\\n', 'Build and install PyMuPDF using a local MuPDF source tree:\\n', '• Clone the MuPDF git repository:\\n', 'git clone --recursive https://ghostscript.com:/home/git/mupdf.git\\n', '• Build PyMuPDF, specifying the location of the local MuPDF tree with the environmental variables\\nPYMUPDF_SETUP_MUPDF_BUILD:\\n', 'cd PyMuPDF && PYMUPDF_SETUP_MUPDF_BUILD=../mupdf pip install .\\n', 'Building for different Python versions in same PyMuPDF tree:\\n', '• PyMuPDF will build for the version of Python that is being used to run pip. To run pip with a specific Python\\nversion, use python -m pip instead of pip.\\n', 'So for example on Windows one can build different versions with:\\n', 'cd PyMuPDF && py -3.9 -m pip install .\\n', 'or:\\n', 'cd PyMuPDF && py -3.10-32 -m pip install .\\n', 'Note:\\nWhen running Python scripts that use PyMuPDF, make sure that the current directory is not the PyMuPDF/\\ndirectory.\\n', 'Otherwise, confusingly, Python will attempt to import fitz from the local fitz/ directory, which will fail because it\\nonly contains source files.\\n', '4.6. Build and install from local PyMuPDF checkout and optional local MuPDF checkout\\n11\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '4.7 Running tests\\n', 'Having a PyMuPDF tree available allows one to run PyMuPDF’s pytest test suite:\\n', 'pip install pytest fontTools\\npytest PyMuPDF/tests\\n', '4.7.1 Notes about using a non-default MuPDF\\n', 'Using a non-default build of MuPDF by setting environmental variable PYMUPDF_SETUP_MUPDF_BUILD can cause\\nvarious things to go wrong and so is not generally supported:\\n', '• If MuPDF’s major version number differs from what PyMuPDF uses by default, PyMuPDF can fail to build,\\nbecause MuPDF’s API can change between major versions.\\n', '• Runtime behaviour of PyMuPDF can change because MuPDF’s runtime behaviour changes between different\\nminor releases. This can also break some PyMuPDF tests.\\n', ""• If MuPDF was built with its default config instead of PyMuPDF’s customised config (for example if MuPDF is\\na system install), it is possible that tests/test_textbox.py:test_textbox3() will fail. One can skip this\\nparticular test by adding -k 'not test_textbox3' to the pytest command line.\\n"", '4.8 Packaging\\n', 'See packaging.\\n', '4.9 Enabling Integrated OCR Support\\n', 'If you do not intend to use this feature, skip this step. Otherwise, it is required for both installation paths: from wheels\\nand from sources.\\n', 'PyMuPDF will already contain all the logic to support OCR functions. But it additionally does need Tesseract’s lan-\\nguage support data, so installation of Tesseract-OCR is still required.\\n', 'The language support folder location must be communicated either via storing it in the environment variable\\n""TESSDATA_PREFIX"", or as a parameter in the applicable functions.\\n', 'So for a working OCR functionality, make sure to complete this checklist:\\n', '1. Install Tesseract.\\n', '2. Locate Tesseract’s language support folder. Typically you will find it here:\\n', '• Windows: C:/Program Files/Tesseract-OCR/tessdata\\n', '• Unix systems: /usr/share/tesseract-ocr/4.00/tessdata\\n', '3. Set the environment variable TESSDATA_PREFIX\\n', '• Windows: setx TESSDATA_PREFIX ""C:/Program Files/Tesseract-OCR/tessdata""\\n', '• Unix systems: declare -x TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata\\n', '12\\nChapter 4. Installation\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\nOn Windows systems, this must happen outside Python – before starting your script. Just manipulating os.\\nenviron will not work!\\n', 'This documentation covers all versions up to 1.23.25.\\n', '4.9. Enabling Integrated OCR Support\\n13\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '14\\nChapter 4. Installation\\n', 'CHAPTER\\n', 'FIVE\\n', 'THE BASICS\\n', '5.1 Opening a File\\n', 'To open a file, do the following:\\n', 'Note: Taking it further\\n', 'See the list of supported file types and The How to Guide on Opening Files for more advanced options.\\n', '5.2 Extract text from a PDF\\n', 'To extract all the text from a PDF file, do the following:\\n', 'Note: Taking it further\\n', 'There are many more examples which explain how to extract text from specific areas or how to extract tables from\\ndocuments. Please refer to the How to Guide for Text.\\n', 'API reference\\n', '• Page.get_text()\\n', '5.3 Extract images from a PDF\\n', 'To extract all the images from a PDF file, do the following:\\n', 'Note: Taking it further\\n', 'There are many more examples which explain how to extract text from specific areas or how to extract tables from\\ndocuments. Please refer to the How to Guide for Text.\\n', 'API reference\\n', '• Page.get_images()\\n', '15\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Pixmap\\n', '5.4 Merging PDF files\\n', 'To merge PDF files, do the following:\\n', '5.4.1 Merging PDF files with other types of file\\n', 'With Document.insert_file() you can invoke the method to merge supported files with PDF. For example:\\n', 'Note: Taking it further\\n', 'It is easy to join PDFs with Document.insert_pdf() & Document.insert_file(). Given open PDF documents,\\nyou can copy page ranges from one to the other. You can select the point where the copied pages should be placed, you\\ncan revert the page sequence and also change page rotation. This Wiki article contains a full description.\\n', 'The GUI script join.py uses this method to join a list of files while also joining the respective table of contents segments.\\nIt looks like this:\\n', 'API reference\\n', '• Document.insert_pdf()\\n', '• Document.insert_file()\\n', '16\\nChapter 5. The Basics\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '5.5 Working with Coordinates\\n', 'There is one mathematical term that you should feel comfortable with when using PyMuPDF - “coordinates”. Please\\nhave a quick look at the Coordinates section to understand the coordinate system to help you with positioning objects\\nand understand your document space.\\n', '5.6 Adding a watermark to a PDF\\n', 'To add a watermark to a PDF file, do the following:\\n', 'Note: Taking it further\\n', 'Adding watermarks is essentially as simple as adding an image at the base of each PDF page. You should ensure that\\nthe image has the required opacity and aspect ratio to make it look the way you need it to.\\n', 'In the example above a new image is created from each file reference, but to be more performant (by saving mem-\\nory and file size) this image data should be referenced only once - see the code example and explanation on Page.\\ninsert_image() for the implementation.\\n', 'API reference\\n', '• Page.bound()\\n', '• Page.insert_image()\\n', '5.7 Adding an image to a PDF\\n', 'To add an image to a PDF file, for example a logo, do the following:\\n', 'Note: Taking it further\\n', 'As with the watermark example you should ensure to be more performant by only referencing the image once if possible\\n- see the code example and explanation on Page.insert_image().\\n', 'API reference\\n', '• Rect\\n', '• Page.insert_image()\\n', '5.5. Working with Coordinates\\n17\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '5.8 Rotating a PDF\\n', 'To add a rotation to a page, do the following:\\n', 'Note: API reference\\n', '• Page.set_rotation()\\n', '5.9 Cropping a PDF\\n', 'To crop a page to a defined Rect, do the following:\\n', 'Note: API reference\\n', '• Page.set_cropbox()\\n', '5.10 Attaching Files\\n', 'To attach another file to a page, do the following:\\n', 'Note: Taking it further\\n', 'When adding the file with Page.add_file_annot() note that the third parameter for the filename should include\\nthe actual file extension. Without this the attachment possibly will not be able to be recognized as being something\\nwhich can be opened. For example, if the filename is just “attachment” when view the resulting PDF and attempting\\nto open the attachment you may well get an error. However, with “attachment.pdf” this can be recognized and opened\\nby PDF viewers as a valid file type.\\n', 'The default icon for the attachment is by default a “push pin”, however you can change this by setting the icon param-\\neter.\\n', 'API reference\\n', '• Point\\n', '• Document.tobytes()\\n', '• Page.add_file_annot()\\n', '18\\nChapter 5. The Basics\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '5.11 Embedding Files\\n', 'To embed a file to a document, do the following:\\n', 'Note: Taking it further\\n', 'As with attaching files, when adding the file with Document.embfile_add() note that the first parameter for the\\nfilename should include the actual file extension.\\n', 'API reference\\n', '• Document.tobytes()\\n', '• Document.embfile_add()\\n', '5.12 Deleting Pages\\n', 'To delete a page from a document, do the following:\\n', 'To delete a multiple pages from a document, do the following:\\n', 'Note: Taking it further\\n', 'The page index is zero-based, so to delete page 10 of a document you would do the following doc.delete_page(9).\\n', 'Similarly, doc.delete_pages(from_page=9, to_page=14) will delete pages 10 - 15 inclusive.\\n', 'API reference\\n', '• Document.delete_page()\\n', '• Document.delete_pages()\\n', '5.13 Re-Arranging Pages\\n', 'To re-arrange pages, do the following:\\n', 'Note: API reference\\n', '• Document.move_page()\\n', '5.11. Embedding Files\\n19\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '5.14 Copying Pages\\n', 'To copy pages, do the following:\\n', 'Note: API reference\\n', '• Document.copy_page()\\n', '5.15 Selecting Pages\\n', 'To select pages, do the following:\\n', 'Note: Taking it further\\n', 'With PyMuPDF you have all options to copy, move, delete or re-arrange the pages of a PDF. Intuitive methods exist\\nthat allow you to do this on a page-by-page level, like the Document.copy_page() method.\\n', 'Or you alternatively prepare a complete new page layout in form of a Python sequence, that contains the page numbers\\nyou want, in the sequence you want, and as many times as you want each page. The following may illustrate what can\\nbe done with Document.select()\\n', 'Now let’s prepare a PDF for double-sided printing (on a printer not directly supporting this):\\n', 'The number of pages is given by len(doc) (equal to doc.page_count). The following lists represent the even and\\nthe odd page numbers, respectively:\\n', 'This snippet creates the respective sub documents which can then be used to print the document:\\n', 'For more information also have a look at this Wiki article.\\n', 'The following example will reverse the order of all pages (extremely fast: sub-second time for the 756 pages of the\\nAdobe PDF References):\\n', 'This snippet duplicates the PDF with itself so that it will contain the pages 0, 1, ..., n, 0, 1, ..., n (extremely fast and\\nwithout noticeably increasing the file size!):\\n', 'API reference\\n', '• Document.select()\\n', '5.16 Adding Blank Pages\\n', 'To add a blank page, do the following:\\n', 'Note: Taking it further\\n', 'Use this to create the page with another pre-defined paper format:\\n', '20\\nChapter 5. The Basics\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'The convenience function paper_size() knows over 40 industry standard paper formats to choose from. To see them,\\ninspect dictionary paperSizes. Pass the desired dictionary key to paper_size() to retrieve the paper dimensions.\\nUpper and lower case is supported. If you append “-L” to the format name, the landscape version is returned.\\n', 'Here is a 3-liner that creates a PDF: with one empty page. Its file size is 460 bytes:\\n', 'API reference\\n', '• Document.new_page()\\n', '• paperSizes\\n', '5.17 Inserting Pages with Text Content\\n', 'Using the Document.insert_page() method also inserts a new page and accepts the same width and height\\nparameters. But it lets you also insert arbitrary text into the new page and returns the number of inserted lines.\\n', 'Note: Taking it further\\n', 'The text parameter can be a (sequence of) string (assuming UTF-8 encoding). Insertion will start at Point (50, 72),\\nwhich is one inch below top of page and 50 points from the left. The number of inserted text lines is returned.\\n', 'API reference\\n', '• Document.insert_page()\\n', '5.18 Splitting Single Pages\\n', 'This deals with splitting up pages of a PDF in arbitrary pieces. For example, you may have a PDF with Letter format\\npages which you want to print with a magnification factor of four: each page is split up in 4 pieces which each going\\nto a separate PDF page in Letter format again.\\n', 'Example:\\n', 'Note: API reference\\n', '• Page.cropbox_position()\\n', '• Page.show_pdf_page()\\n', '5.17. Inserting Pages with Text Content\\n21\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '5.19 Combining Single Pages\\n', 'This deals with joining PDF pages to form a new PDF with pages each combining two or four original ones (also\\ncalled “2-up”, “4-up”, etc.). This could be used to create booklets or thumbnail-like overviews.\\n', 'Example:\\n', 'Note: API reference\\n', '• Page.cropbox_position()\\n', '• Page.show_pdf_page()\\n', '5.20 PDF Encryption & Decryption\\n', 'Starting with version 1.16.0, PDF decryption and encryption (using passwords) are fully supported. You can do the\\nfollowing:\\n', '• Check whether a document is password protected / (still) encrypted (Document.needs_pass, Document.\\nis_encrypted).\\n', '• Gain access authorization to a document (Document.authenticate()).\\n', '• Set encryption details for PDF files using Document.save() or Document.write() and\\n', '– decrypt or encrypt the content\\n', '– set password(s)\\n', '– set the encryption method\\n', '– set permission details\\n', 'Note: A PDF document may have two different passwords:\\n', '• The owner password provides full access rights, including changing passwords, encryption method, or permis-\\nsion detail.\\n', '• The user password provides access to document content according to the established permission details. If\\npresent, opening the PDF in a viewer will require providing it.\\n', 'Method Document.authenticate() will automatically establish access rights according to the password used.\\n', '22\\nChapter 5. The Basics\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'The following snippet creates a new PDF and encrypts it with separate user and owner passwords. Permissions are\\ngranted to print, copy and annotate, but no changes are allowed to someone authenticating with the user password.\\n', 'Note: Taking it further\\n', 'Opening this document with some viewer (Nitro Reader 5) reflects these settings:\\n', 'Decrypting will automatically happen on save as before when no encryption parameters are provided.\\n', 'To keep the encryption method of a PDF save it using encryption=fitz.PDF_ENCRYPT_KEEP. If doc.\\ncan_save_incrementally() == True, an incremental save is also possible.\\n', 'To change the encryption method specify the full range of options above (encryption, owner_pw, user_pw,\\npermissions). An incremental save is not possible in this case.\\n', '5.20. PDF Encryption & Decryption\\n23\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'API reference\\n', '• Document.save()\\n', '5.21 Extracting Tables from a Page\\n', 'Tables can be found and extracted from any document Page.\\n', 'Note: API reference\\n', '• Page.find_tables()\\n', 'Important: There is also the pdf2docx extract tables method which is capable of table extraction if you prefer.\\n', '5.22 Getting Page Links\\n', 'Links can be extracted from a Page to return Link objects.\\n', 'Note: API reference\\n', '• Page.first_link()\\n', '5.23 Getting All Annotations from a Document\\n', 'Annotations (Annot) on pages can be retrieved with the page.annots() method.\\n', 'Note: API reference\\n', '• Page.annots()\\n', '5.24 Converting PDF Documents\\n', 'We recommend the pdf2docx library which uses PyMuPDF and the python-docx library to provide simple document\\nconversion from PDF to DOCX format.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '24\\nChapter 5. The Basics\\n', 'CHAPTER\\n', 'SIX\\n', 'TUTORIAL\\n', 'This tutorial will show you the use of PyMuPDF, MuPDF in Python, step by step.\\n', 'Because MuPDF supports not only PDF, but also XPS, OpenXPS, CBZ, CBR, FB2 and EPUB formats, so does\\nPyMuPDF1. Nevertheless, for the sake of brevity we will only talk about PDF files. At places where indeed only\\nPDF files are supported, this will be mentioned explicitly.\\n', '6.1 Importing the Bindings\\n', 'The Python bindings to MuPDF are made available by this import statement. We also show here how your version can\\nbe checked:\\n', '>>> import fitz\\n>>> print(fitz.__doc__)\\nPyMuPDF 1.16.0: Python bindings for the MuPDF 1.16.0 library.\\nVersion date: 2019-07-28 07:30:14.\\nBuilt for Python 3.7 on win32 (64-bit).\\n', '6.1.1 Note on the Name fitz\\n', 'The top level Python import name for this library is “fitz”. This has historical reasons:\\n', 'The original rendering library for MuPDF was called Libart.\\n', '“After Artifex Software acquired the MuPDF project, the development focus shifted on writing a new modern graphics\\nlibrary called “Fitz”. Fitz was originally intended as an R&D project to replace the aging Ghostscript graphics library,\\nbut has instead become the rendering engine powering MuPDF.” (Quoted from Wikipedia).\\n', 'Note: So PyMuPDF cannot coexist with packages named “fitz” in the same Python environment.\\n', '1 PyMuPDF lets you also open several image file types just like normal documents. See section Supported Input Image Formats in chapter\\n', 'Pixmap for more comments.\\n', '25\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '6.2 Opening a Document\\n', 'To access a supported document, it must be opened with the following statement:\\n', 'doc = fitz.open(filename)\\n# or fitz.Document(filename)\\n', 'This creates the Document object doc. filename must be a Python string (or a pathlib.Path) specifying the name of\\nan existing file.\\n', 'It is also possible to open a document from memory data, or to create a new, empty PDF. See Document for details.\\nYou can also use Document as a context manager.\\n', 'A document contains many attributes and functions. Among them are meta information (like “author” or “subject”),\\nnumber of total pages, outline and encryption information.\\n', '6.3 Some Document Methods and Attributes\\n', 'Method / Attribute\\nDescription\\n', 'Document.page_count\\nthe number of pages (int)\\n', 'Document.metadata\\nthe metadata (dict)\\n', 'Document.get_toc()\\nget the table of contents (list)\\n', 'Document.load_page()\\nread a Page\\n', '6.4 Accessing Meta Data\\n', 'PyMuPDF fully supports standard metadata. Document.metadata is a Python dictionary with the following keys. It\\nis available for all document types, though not all entries may always contain data. For details of their meanings and\\nformats consult the respective manuals, e.g. Adobe PDF References for PDF. Further information can also be found in\\nchapter Document. The meta data fields are strings or None if not otherwise indicated. Also be aware that not all of\\nthem always contain meaningful data – even if they are not None.\\n', 'Key\\nValue\\n', 'producer\\nproducer (producing software)\\n', 'format\\nformat: ‘PDF-1.4’, ‘EPUB’, etc.\\n', 'encryption\\nencryption method used if any\\n', 'author\\nauthor\\n', 'modDate\\ndate of last modification\\n', 'keywords\\nkeywords\\n', 'title\\ntitle\\n', 'creationDate\\ndate of creation\\n', 'creator\\ncreating application\\n', 'subject\\nsubject\\n', 'Note: Apart from these standard metadata, PDF documents starting from PDF version 1.4 may also contain so-called\\n“metadata streams” (see also stream). Information in such streams is coded in XML. PyMuPDF deliberately contains\\nno XML components for this purpose (the PyMuPDF Xml class is a helper class intended to access the DOM content\\nof a Story object), so we do not directly support access to information contained therein. But you can extract the stream\\n', '26\\nChapter 6. Tutorial\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'as a whole, inspect or modify it using a package like lxml and then store the result back into the PDF. If you want, you\\ncan also delete this data altogether.\\n', 'Note: There are two utility scripts in the repository that metadata import (PDF only) resp. metadata export metadata\\nfrom resp. to CSV files.\\n', '6.5 Working with Outlines\\n', 'The easiest way to get all outlines (also called “bookmarks”) of a document, is by loading its table of contents:\\n', 'toc = doc.get_toc()\\n', 'This will return a Python list of lists [[lvl, title, page, ...], ...] which looks much like a conventional table of contents\\nfound in books.\\n', 'lvl is the hierarchy level of the entry (starting from 1), title is the entry’s title, and page the page number (1-based!).\\nOther parameters describe details of the bookmark target.\\n', 'Note: There are two utility scripts in the repository that toc import (PDF only) resp. toc export table of contents from\\nresp. to CSV files.\\n', '6.6 Working with Pages\\n', 'Page handling is at the core of MuPDF’s functionality.\\n', '• You can render a page into a raster or vector (SVG) image, optionally zooming, rotating, shifting or shearing it.\\n', '• You can extract a page’s text and images in many formats and search for text strings.\\n', '• For PDF documents many more methods are available to add text or images to pages.\\n', 'First, a Page must be created. This is a method of Document:\\n', ""page = doc.load_page(pno)\\n# loads page number 'pno' of the document (0-based)\\n"", 'page = doc[pno]\\n# the short form\\n', 'Any integer -∞ < pno < page_count is possible here. Negative numbers count backwards from the end, so doc[-1]\\nis the last page, like with Python sequences.\\n', 'Some more advanced way would be using the document as an iterator over its pages:\\n', 'for page in doc:\\n', ""# do something with 'page'\\n"", '# ... or read backwards\\nfor page in reversed(doc):\\n', ""# do something with 'page'\\n"", ""# ... or even use 'slicing'\\n"", '(continues on next page)\\n', '6.5. Working with Outlines\\n27\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'for page in doc.pages(start, stop, step):\\n', ""# do something with 'page'\\n"", 'Once you have your page, here is what you would typically do with it:\\n', '6.6.1 Inspecting the Links, Annotations or Form Fields of a Page\\n', 'Links are shown as “hot areas” when a document is displayed with some viewer software. If you click while your cursor\\nshows a hand symbol, you will usually be taken to the target that is encoded in that hot area. Here is how to get all\\nlinks:\\n', '# get all links on a page\\nlinks = page.get_links()\\n', 'links is a Python list of dictionaries. For details see Page.get_links().\\n', 'You can also use an iterator which emits one link at a time:\\n', 'for link in page.links():\\n', ""# do something with 'link'\\n"", 'If dealing with a PDF document page, there may also exist annotations (Annot) or form fields (Widget), each of which\\nhave their own iterators:\\n', 'for annot in page.annots():\\n', ""# do something with 'annot'\\n"", 'for field in page.widgets():\\n', ""# do something with 'field'\\n"", '6.6.2 Rendering a Page\\n', 'This example creates a raster image of a page’s content:\\n', 'pix = page.get_pixmap()\\n', 'pix is a Pixmap object which (in this case) contains an RGB image of the page, ready to be used for many pur-\\nposes. Method Page.get_pixmap() offers lots of variations for controlling the image: resolution / DPI, colorspace\\n(e.g. to produce a grayscale image or an image with a subtractive color scheme), transparency, rotation, mirroring,\\nshifting, shearing, etc. For example: to create an RGBA image (i.e. containing an alpha channel), specify pix =\\npage.get_pixmap(alpha=True).\\n', 'A Pixmap contains a number of methods and attributes which are referenced below. Among them are the integers\\nwidth, height (each in pixels) and stride (number of bytes of one horizontal image line). Attribute samples represents\\na rectangular area of bytes representing the image data (a Python bytes object).\\n', 'Note: You can also create a vector image of a page by using Page.get_svg_image(). Refer to this Vector Image\\nSupport page for details.\\n', '28\\nChapter 6. Tutorial\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '6.6.3 Saving the Page Image in a File\\n', 'We can simply store the image in a PNG file:\\n', 'pix.save(""page-%i.png"" % page.number)\\n', '6.6.4 Displaying the Image in GUIs\\n', 'We can also use it in GUI dialog managers. Pixmap.samples represents an area of bytes of all the pixels as a Python\\nbytes object. Here are some examples, find more in the examples directory.\\n', 'wxPython\\n', 'Consult their documentation for adjustments to RGB(A) pixmaps and, potentially, specifics for your wxPython release:\\n', 'if pix.alpha:\\nbitmap = wx.Bitmap.FromBufferRGBA(pix.width, pix.height, pix.samples)\\n', 'else:\\nbitmap = wx.Bitmap.FromBuffer(pix.width, pix.height, pix.samples)\\n', 'Tkinter\\n', 'Please also see section 3.19 of the Pillow documentation:\\n', 'from PIL import Image, ImageTk\\n', '# set the mode depending on alpha\\nmode = ""RGBA"" if pix.alpha else ""RGB""\\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\\ntkimg = ImageTk.PhotoImage(img)\\n', 'The following avoids using Pillow:\\n', '# remove alpha if present\\npix1 = fitz.Pixmap(pix, 0) if pix.alpha else pix\\n# PPM does not support transparency\\n', 'imgdata = pix1.tobytes(""ppm"")\\n# extremely fast!\\n', 'tkimg = tkinter.PhotoImage(data = imgdata)\\n', 'If you are looking for a complete Tkinter script paging through any supported document, here it is!. It can also zoom\\ninto pages, and it runs under Python 2 or 3. It requires the extremely handy PySimpleGUI pure Python package.\\n', 'PyQt4, PyQt5, PySide\\n', 'Please also see section 3.16 of the Pillow documentation:\\n', 'from PIL import Image, ImageQt\\n', '# set the mode depending on alpha\\nmode = ""RGBA"" if pix.alpha else ""RGB""\\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\\nqtimg = ImageQt.ImageQt(img)\\n', '6.6. Working with Pages\\n29\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Again, you also can get along without using Pillow. Qt’s QImage luckily supports native Python pointers, so the\\nfollowing is the recommended way to create Qt images:\\n', 'from PyQt5.QtGui import QImage\\n', '# set the correct QImage format depending on alpha\\nfmt = QImage.Format_RGBA8888 if pix.alpha else QImage.Format_RGB888\\nqtimg = QImage(pix.samples_ptr, pix.width, pix.height, fmt)\\n', '6.6.5 Extracting Text and Images\\n', 'We can also extract all text, images and other information of a page in many different forms, and levels of detail:\\n', 'text = page.get_text(opt)\\n', 'Use one of the following strings for opt to obtain different formats2:\\n', '• “text”: (default) plain text with line breaks. No formatting, no text position details, no images.\\n', '• “blocks”: generate a list of text blocks (= paragraphs).\\n', '• “words”: generate a list of words (strings not containing spaces).\\n', '• “html”: creates a full visual version of the page including any images. This can be displayed with your internet\\nbrowser.\\n', '• “dict” / “json”: same information level as HTML, but provided as a Python dictionary or resp. JSON string.\\nSee TextPage.extractDICT() for details of its structure.\\n', '• “rawdict” / “rawjson”: a super-set of “dict” / “json”. It additionally provides character detail information like\\nXML. See TextPage.extractRAWDICT() for details of its structure.\\n', '• “xhtml”: text information level as the TEXT version but includes images. Can also be displayed by internet\\nbrowsers.\\n', '• “xml”: contains no images, but full position and font information down to each single text character. Use an\\nXML module to interpret.\\n', 'To give you an idea about the output of these alternatives, we did text example extracts. See Appendix 2: Considerations\\non Embedded Files.\\n', '6.6.6 Searching for Text\\n', 'You can find out, exactly where on a page a certain text string appears:\\n', 'areas = page.search_for(""mupdf"")\\n', 'This delivers a list of rectangles (see Rect), each of which surrounds one occurrence of the string “mupdf” (case\\ninsensitive). You could use this information to e.g. highlight those areas (PDF only) or create a cross reference of the\\ndocument.\\n', 'Please also do have a look at chapter Working together: DisplayList and TextPage and at demo programs demo.py and\\ndemo-lowlevel.py. Among other things they contain details on how the TextPage, Device and DisplayList classes can\\nbe used for a more direct control, e.g. when performance considerations suggest it.\\n', '2 Page.get_text() is a convenience wrapper for several methods of another PyMuPDF class, TextPage. The names of these methods correspond\\nto the argument string passed to Page.get_text() : Page.get_text(“dict”) is equivalent to TextPage.extractDICT() .\\n', '30\\nChapter 6. Tutorial\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '6.7 Stories: Generating PDF from HTML Source\\n', 'The Story class is a new feature of PyMuPDF version 1.21.0. It represents support for MuPDF’s “story” interface.\\n', 'The following is a quote from the book “MuPDF Explored” by Robin Watts from Artifex:\\n', 'Stories provide a way to easily layout styled content for use with devices, such as those offered by Document Writers\\n(...). The concept of a story comes from desktop publishing, which in turn (...) gets it from newspapers. If you consider\\na traditional newspaper layout, it will consist of various news articles (stories) that are laid out into multiple columns,\\npossibly across multiple pages.\\n', 'Accordingly, MuPDF uses a story to represent a flow of text with styling information. The user of the story can then\\nsupply a sequence of rectangles into which the story will be laid out, and the positioned text can then be drawn to an\\noutput device. This keeps the concept of the text itself (the story) to be separated from the areas into which the text\\nshould be flowed (the layout).\\n', 'Note: A Story works somewhat similar to an internet browser: It faithfully parses and renders HTML hypertext and\\nalso optional stylesheets (CSS). But its output is a PDF – not web pages.\\n', 'When creating a Story, the input from up to three different information sources is taken into account. All these items\\nare optional.\\n', '1. HTML source code, either a Python string or created by the script using methods of Xml.\\n', '2. CSS (Cascaded Style Sheet) source code, provided as a Python string. CSS can be used to provide styling\\ninformation (text font size, color, etc.) like it would happen for web pages. Obviously, this string may also be\\nread from a file.\\n', '3. An Archive must be used whenever the DOM references images, or uses text fonts except the standard PDF Base\\n14 Fonts, CJK fonts and the NOTO fonts generated into the PyMuPDF binary.\\n', 'The API allows creating DOMs completely from scratch, including desired styling information. It can also be used to\\nmodify or extend provided HTML: text can be deleted or replaced, or its styling can be changed. Text – for example\\nextracted from databases – can also be added and fill template-like HTML documents.\\n', 'It is not required to provide syntactically complete HTML documents: snippets like <b>Hello are fully accepted, and\\nmany / most syntax errors are automatically corrected.\\n', 'After the HTML is considered complete, it can be used to create a PDF document. This happens via the new Docu-\\nmentWriter class. The programmer calls its methods to create a new empty page, and passes rectangles to the Story to\\nfill them.\\n', 'The story in turn will return completion codes indicating whether or not more content is waiting to be written. Which\\npart of the content will land in which rectangle or on which page is automatically determined by the story itself – it\\ncannot be influenced other than by providing the rectangles.\\n', 'Please see the Stories recipes for a number of typical use cases.\\n', '6.7. Stories: Generating PDF from HTML Source\\n31\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '6.8 PDF Maintenance\\n', 'PDFs are the only document type that can be modified using PyMuPDF. Other file types are read-only.\\n', 'However, you can convert any document (including images) to a PDF and then apply all PyMuPDF features to the con-\\nversion result. Find out more here Document.convert_to_pdf(), and also look at the demo script pdf-converter.py\\nwhich can convert any supported document to PDF.\\n', 'Document.save() always stores a PDF in its current (potentially modified) state on disk.\\n', 'You normally can choose whether to save to a new file, or just append your modifications to the existing one (“incre-\\nmental save”), which often is very much faster.\\n', 'The following describes ways how you can manipulate PDF documents. This description is by no means complete:\\nmuch more can be found in the following chapters.\\n', '6.8.1 Modifying, Creating, Re-arranging and Deleting Pages\\n', 'There are several ways to manipulate the so-called page tree (a structure describing all the pages) of a PDF:\\n', 'Document.delete_page() and Document.delete_pages() delete pages.\\n', 'Document.copy_page(), Document.fullcopy_page() and Document.move_page() copy or move a page to\\nother locations within the same document.\\n', 'Document.select() shrinks a PDF down to selected pages. Parameter is a sequence3 of the page numbers that you\\nwant to keep. These integers must all be in range 0 <= i < page_count. When executed, all pages missing in this list\\nwill be deleted. Remaining pages will occur in the sequence and as many times (!) as you specify them.\\n', 'So you can easily create new PDFs with\\n', '• the first or last 10 pages,\\n', '• only the odd or only the even pages (for doing double-sided printing),\\n', '• pages that do or don’t contain a given text,\\n', '• reverse the page sequence, ...\\n', '... whatever you can think of.\\n', 'The saved new document will contain links, annotations and bookmarks that are still valid (i.a.w. either pointing to a\\nselected page or to some external resource).\\n', 'Document.insert_page() and Document.new_page() insert new pages.\\n', 'Pages themselves can moreover be modified by a range of methods (e.g. page rotation, annotation and link maintenance,\\ntext and image insertion).\\n', '3 “Sequences” are Python objects conforming to the sequence protocol. These objects implement a method named __getitem__(). Best known\\nexamples are Python tuples and lists. But array.array, numpy.array and PyMuPDF’s “geometry” objects (Operator Algebra for Geometry Objects)\\nare sequences, too. Refer to Using Python Sequences as Arguments in PyMuPDF for details.\\n', '32\\nChapter 6. Tutorial\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '6.8.2 Joining and Splitting PDF Documents\\n', 'Method Document.insert_pdf() copies pages between different PDF documents. Here is a simple joiner example\\n(doc1 and doc2 being opened PDFs):\\n', '# append complete doc2 to the end of doc1\\ndoc1.insert_pdf(doc2)\\n', 'Here is a snippet that splits doc1. It creates a new document of its first and its last 10 pages:\\n', 'doc2 = fitz.open()\\n# new empty PDF\\n', 'doc2.insert_pdf(doc1, to_page = 9)\\n# first 10 pages\\n', 'doc2.insert_pdf(doc1, from_page = len(doc1) - 10) # last 10 pages\\ndoc2.save(""first-and-last-10.pdf"")\\n', 'More can be found in the Document chapter. Also have a look at PDFjoiner.py.\\n', '6.8.3 Embedding Data\\n', 'PDFs can be used as containers for arbitrary data (executables, other PDFs, text or binary files, etc.) much like ZIP\\narchives.\\n', 'PyMuPDF fully supports this feature via Document embfile_* methods and attributes. For some detail read Appendix\\n3, consult the Wiki on dealing with embedding files, or the example scripts embedded-copy.py, embedded-export.py,\\nembedded-import.py, and embedded-list.py.\\n', '6.8.4 Saving\\n', 'As mentioned above, Document.save() will always save the document in its current state.\\n', 'You can write changes back to the original PDF by specifying option incremental=True. This process is (usually)\\nextremely fast, since changes are appended to the original file without completely rewriting it.\\n', 'Document.save() options correspond to options of MuPDF’s command line utility mutool clean, see the following\\ntable.\\n', 'Save Option\\nmutool\\nEffect\\n', 'garbage=1\\ng\\ngarbage collect unused objects\\n', 'garbage=2\\ngg\\nin addition to 1, compact xref tables\\n', 'garbage=3\\nggg\\nin addition to 2, merge duplicate objects\\n', 'garbage=4\\ngggg\\nin addition to 3, merge duplicate stream content\\n', 'clean=True\\ncs\\nclean and sanitize content streams\\n', 'deflate=True\\nz\\ndeflate uncompressed streams\\n', 'deflate_images=True\\ni\\ndeflate image streams\\n', 'deflate_fonts=True\\nf\\ndeflate fontfile streams\\n', 'ascii=True\\na\\nconvert binary data to ASCII format\\n', 'linear=True\\nl\\ncreate a linearized version\\n', 'expand=True\\nd\\ndecompress all streams\\n', 'Note: For an explanation of terms like object, stream, xref consult the Glossary chapter.\\n', '6.8. PDF Maintenance\\n33\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'For example, mutool clean -ggggz file.pdf yields excellent compression results. It corresponds to doc.save(filename,\\ngarbage=4, deflate=True).\\n', '6.9 Closing\\n', 'It is often desirable to “close” a document to relinquish control of the underlying file to the OS, while your program\\ncontinues.\\n', 'This can be achieved by the Document.close() method. Apart from closing the underlying file, buffer areas associated\\nwith the document will be freed.\\n', '6.10 Further Reading\\n', 'Also have a look at PyMuPDF’s Wiki pages. Especially those named in the sidebar under title “Recipes” cover over\\n15 topics written in “How-To” style.\\n', 'This document also contains a FAQ. This chapter has close connection to the aforementioned recipes, and it will be\\nextended with more content over time.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '34\\nChapter 6. Tutorial\\n', 'CHAPTER\\n', 'SEVEN\\n', 'OPENING FILES\\n', '7.1 Supported File Types\\n', 'PyMuPDF supports the following file types:\\n', '7.2 How to Open a File\\n', 'To open a file, do the following:\\n', 'doc = fitz.open(""a.pdf"")\\n', '7.2.1 Opening with a Wrong File Extension\\n', 'If you have a document with a wrong file extension for its type, you can still correctly open it.\\n', 'Assume that “some.file” is actually an XPS. Open it like so:\\n', 'doc = fitz.open(""some.file"", filetype=""xps"")\\n', 'Note: PyMuPDF itself does not try to determine the file type from the file contents. You are responsible for supplying\\nthe file type information in some way – either implicitly, via the file extension, or explicitly as shown with the filetype\\nparameter. There are pure Python packages like filetype that help you doing this. Also consult the Document chapter\\nfor a full description.\\n', 'If PyMuPDF encounters a file with an unknown / missing extension, it will try to open it as a PDF. So in these\\ncases there is no need for additional precautions. Similarly, for memory documents, you can just specify doc=fitz.\\nopen(stream=mem_area) to open it as a PDF document.\\n', 'If you attempt to open an unsupported file then PyMuPDF will throw a file data error.\\n', '35\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '7.3 Opening Files as Text\\n', 'PyMuPDF has the capability to open any plain text file as a document. In order to do this you should provide the\\nfiletype parameter for the fitz.open function as ""txt"".\\n', 'doc = fitz.open(""my_program.py"", filetype=""txt"")\\n', 'In this way you are able to open a variety of file types and perform the typical non-PDF specific features like text\\nsearching, text extracting and page rendering. Obviously, once you have rendered your txt content, then saving as\\nPDF or merging with other PDF files is no problem.\\n', '7.3.1 Examples\\n', 'Opening a C# file\\n', 'doc = fitz.open(""MyClass.cs"", filetype=""txt"")\\n', 'Opening an XML file\\n', 'doc = fitz.open(""my_data.xml"", filetype=""txt"")\\n', 'Opening a JSON file\\n', 'doc = fitz.open(""more_of_my_data.json"", filetype=""txt"")\\n', 'And so on!\\n', 'As you can imagine many text based file formats can be very simply opened and interpreted by PyMuPDF. This can\\nmake data analysis and extraction for a wide range of previously unavailable files suddenly possible.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '36\\nChapter 7. Opening Files\\n', 'CHAPTER\\n', 'EIGHT\\n', 'TEXT\\n', '8.1 How to Extract all Document Text\\n', 'This script will take a document filename and generate a text file from all of its text.\\n', 'The document can be any supported type.\\n', 'The script works as a command line tool which expects the document filename supplied as a parameter. It generates\\none text file named “filename.txt” in the script directory. Text of pages is separated by a form feed character:\\n', 'import sys, pathlib, fitz\\nfname = sys.argv[1]\\n# get document filename\\n', 'with fitz.open(fname) as doc:\\n# open document\\n', 'text = chr(12).join([page.get_text() for page in doc])\\n', '# write as a binary file to support non-ASCII characters\\npathlib.Path(fname + "".txt"").write_bytes(text.encode())\\n', 'The output will be plain text as it is coded in the document. No effort is made to prettify in any way. Specifically for\\nPDF, this may mean output not in usual reading order, unexpected line breaks and so forth.\\n', 'You have many options to rectify this – see chapter Appendix 2: Considerations on Embedded Files. Among them are:\\n', '1. Extract text in HTML format and store it as a HTML document, so it can be viewed in any browser.\\n', '2. Extract text as a list of text blocks via Page.get_text(“blocks”). Each item of this list contains position information\\nfor its text, which can be used to establish a convenient reading order.\\n', '3. Extract a list of single words via Page.get_text(“words”). Its items are words with position information. Use it\\nto determine text contained in a given rectangle – see next section.\\n', 'See the following two sections for examples and further explanations.\\n', '8.2 How to Extract Key-Value Pairs from a Page\\n', 'If the layout of a page is “predictable” in some sense, then there is a simple way to find the values for a given set of\\nkeywords fast and easily – without using regular expressions. Please see this example script.\\n', '“Predictable” in this context means:\\n', '• Every keyword is followed by its value – no other text is present in between them.\\n', '• The bottom of the value’s boundary box is not above the one of the keyword.\\n', '• There are no other restrictions: the page layout may or may not be fixed, and the text may also have been stored\\nas one string. Key and value may have any distance from each other.\\n', '37\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'For example, the following five key-value pairs will be correctly identified:\\n', 'key1\\nvalue1\\nkey2\\nvalue2\\nkey3\\nvalue3 blah, blah, blah key4 value4 some other text key5 value5 ...\\n', '8.3 How to Extract Text from within a Rectangle\\n', 'There is now (v1.18.0) more than one way to achieve this. We therefore have created a folder in the PyMuPDF-Utilities\\nrepository specifically dealing with this topic.\\n', '8.4 How to Extract Text in Natural Reading Order\\n', 'One of the common issues with PDF text extraction is, that text may not appear in any particular reading order.\\n', 'This is the responsibility of the PDF creator (software or a human). For example, page headers may have been inserted\\nin a separate step – after the document had been produced. In such a case, the header text will appear at the end of a\\npage text extraction (although it will be correctly shown by PDF viewer software). For example, the following snippet\\nwill add some header and footer lines to an existing PDF:\\n', 'doc = fitz.open(""some.pdf"")\\nheader = ""Header""\\n# text in header\\n', 'footer = ""Page %i of %i""\\n# text in footer\\n', 'for page in doc:\\npage.insert_text((50, 50), header)\\n# insert header\\n', 'page.insert_text(\\n# insert footer 50 points above page bottom\\n', '(50, page.rect.height - 50),\\nfooter % (page.number + 1, doc.page_count),\\n)\\n', 'The text sequence extracted from a page modified in this way will look like this:\\n', '1. original text\\n', '2. header line\\n', '3. footer line\\n', 'PyMuPDF has several means to re-establish some reading sequence or even to re-generate a layout close to the original:\\n', '1. Use sort parameter of Page.get_text(). It will sort the output from top-left to bottom-right (ignored for\\nXHTML, HTML and XML output).\\n', '2. Use the fitz module in CLI: python -m fitz gettext ..., which produces a text file where text has been\\nre-arranged in layout-preserving mode. Many options are available to control the output.\\n', 'You can also use the above mentioned script with your modifications.\\n', '38\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '8.5 How to Extract Table Content from Documents\\n', 'If you see a table in a document, you are normally not looking at something like an embedded Excel or other identifiable\\nobject. It usually is just normal, standard text, formatted to appear as tabular data.\\n', 'Extracting tabular data from such a page area therefore means that you must find a way to identify the table area\\n(i.e. its boundary box), then (1) graphically indicate table and column borders, and (2) then extract text based on this\\ninformation.\\n', 'This can be a very complex task, depending on details like the presence or absence of lines, rectangles or other sup-\\nporting vector graphics.\\n', 'Method Page.find_tables() does all that for you, with a high table detection precision. Its great advantage is that\\nthere are no external library dependencies, nor the need to employ artificial intelligence or machine learning technolo-\\ngies. It also provides an integrated interface to the well-known Python package for data analysis pandas.\\n', 'Please have a look at example Jupyter notebooks, which cover standard situations like multiple tables on one page or\\njoining table fragments across multiple pages.\\n', '8.6 How to Mark Extracted Text\\n', 'There is a standard search function to search for arbitrary text on a page: Page.search_for(). It returns a list of\\nRect objects which surround a found occurrence. These rectangles can for example be used to automatically insert\\nannotations which visibly mark the found text.\\n', 'This method has advantages and drawbacks. Pros are:\\n', '• The search string can contain blanks and wrap across lines\\n', '• Upper or lower case characters are treated equal\\n', '• Word hyphenation at line ends is detected and resolved\\n', '• Return may also be a list of Quad objects to precisely locate text that is not parallel to either axis – using Quad\\n', 'output is also recommended, when page rotation is not zero.\\n', 'But you also have other options:\\n', 'import sys\\nimport fitz\\n', 'def mark_word(page, text):\\n', '""""""Underline each word that contains \\'text\\'.\\n""""""\\nfound = 0\\nwlist = page.get_text(""words"", delimiters=None)\\n# make the word list\\n', 'for w in wlist:\\n# scan through all words on page\\n', ""if text in w[4]:\\n# w[4] is the word's string\\n"", 'found += 1\\n# count\\n', 'r = fitz.Rect(w[:4])\\n# make rect from word bbox\\n', 'page.add_underline_annot(r)\\n# underline\\n', 'return found\\n', 'fname = sys.argv[1]\\n# filename\\n', '(continues on next page)\\n', '8.5. How to Extract Table Content from Documents\\n39\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'text = sys.argv[2]\\n# search string\\n', 'doc = fitz.open(fname)\\n', 'print(""underlining words containing \\'%s\\' in document \\'%s\\'"" % (word, doc.name))\\n', 'new_doc = False\\n# indicator if anything found at all\\n', 'for page in doc:\\n# scan through the pages\\n', ""found = mark_word(page, text)\\n# mark the page's words\\n"", 'if found:\\n# if anything found ...\\n', 'new_doc = True\\nprint(""found \\'%s\\' %i times on page %i"" % (text, found, page.number + 1))\\n', 'if new_doc:\\ndoc.save(""marked-"" + doc.name)\\n', 'This script uses Page.get_text(""words"") to look for a string, handed in via cli parameter. This method separates a\\npage’s text into “words” using white spaces as delimiters. Further remarks:\\n', '• If found, the complete word containing the string is marked (underlined) – not only the search string.\\n', '• The search string may not contain word delimiters.\\nBy default, word delimiters are white spaces and\\nthe non-breaking space chr(0xA0). If you use extra delimiting characters like page.get_text(""words"",\\ndelimiters=""./,"") then none of these characters should be included in your search string either.\\n', '• As shown here, upper / lower cases are respected. But this can be changed by using the string method lower()\\n(or even regular expressions) in function mark_word.\\n', '• There is no upper limit: all occurrences will be detected.\\n', '• You can use anything to mark the word: ‘Underline’, ‘Highlight’, ‘StrikeThrough’ or ‘Square’ annotations, etc.\\n', '• Here is an example snippet of a page of this manual, where “MuPDF” has been used as the search string. Note\\nthat all strings containing “MuPDF” have been completely underlined (not just the search string).\\n', '40\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '8.7 How to Mark Searched Text\\n', 'This script searches for text and marks it:\\n', '# -*- coding: utf-8 -*-\\nimport fitz\\n', '# the document to annotate\\ndoc = fitz.open(""tilted-text.pdf"")\\n', '# the text to be marked\\nneedle = ""¡La práctica hace el campeón!""\\n', '# work with first page only\\npage = doc[0]\\n', '# get list of text locations\\n# we use ""quads"", not rectangles because text may be tilted!\\nrl = page.search_for(needle, quads=True)\\n', '# mark all found quads with one annotation\\npage.add_squiggly_annot(rl)\\n', '# save to a new PDF\\ndoc.save(""a-squiggly.pdf"")\\n', 'The result looks like this:\\n', '8.7. How to Mark Searched Text\\n41\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '8.8 How to Mark Non-horizontal Text\\n', 'The previous section already shows an example for marking non-horizontal text, that was detected by text searching.\\n', 'But text extraction with the “dict” / “rawdict” options of Page.get_text() may also return text with a non-zero\\nangle to the x-axis. This is indicated by the value of the line dictionary’s ""dir"" key: it is the tuple (cosine, sine)\\nfor that angle. If line[""dir""] != (1, 0), then the text of all its spans is rotated by (the same) angle != 0.\\n', 'The “bboxes” returned by the method however are rectangles only – not quads. So, to mark span text correctly, its quad\\nmust be recovered from the data contained in the line and span dictionary. Do this with the following utility function\\n(new in v1.18.9):\\n', 'span_quad = fitz.recover_quad(line[""dir""], span)\\nannot = page.add_highlight_annot(span_quad)\\n# this will mark the complete span text\\n', 'If you want to mark the complete line or a subset of its spans in one go, use the following snippet (works for v1.18.10\\nor later):\\n', 'line_quad = fitz.recover_line_quad(line, spans=line[""spans""][1:-1])\\npage.add_highlight_annot(line_quad)\\n', 'The spans argument above may specify any sub-list of line[""spans""]. In the example above, the second to second-\\nto-last span are marked. If omitted, the complete line is taken.\\n', '8.9 How to Analyze Font Characteristics\\n', 'To analyze the characteristics of text in a PDF use this elementary script as a starting point:\\n', 'import sys\\n', 'import fitz\\n', 'def flags_decomposer(flags):\\n', '""""""Make font flags human readable.""""""\\nl = []\\nif flags & 2 ** 0:\\nl.append(""superscript"")\\n', '(continues on next page)\\n', '42\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'if flags & 2 ** 1:\\nl.append(""italic"")\\n', 'if flags & 2 ** 2:\\nl.append(""serifed"")\\n', 'else:\\nl.append(""sans"")\\n', 'if flags & 2 ** 3:\\nl.append(""monospaced"")\\n', 'else:\\nl.append(""proportional"")\\n', 'if flags & 2 ** 4:\\nl.append(""bold"")\\n', 'return "", "".join(l)\\n', 'doc = fitz.open(sys.argv[1])\\npage = doc[0]\\n', '# read page text as a dictionary, suppressing extra spaces in CJK fonts\\nblocks = page.get_text(""dict"", flags=11)[""blocks""]\\nfor b in blocks:\\n# iterate through the text blocks\\n', 'for l in b[""lines""]:\\n# iterate through the text lines\\n', 'for s in l[""spans""]:\\n# iterate through the text spans\\n', 'print("""")\\nfont_properties = ""Font: \\'%s\\' (%s), size %g, color #%06x"" % (\\ns[""font""],\\n# font name\\n', 'flags_decomposer(s[""flags""]),\\n# readable font flags\\n', 's[""size""],\\n# font size\\n', 's[""color""],\\n# font color\\n', ')\\nprint(""Text: \\'%s\\'"" % s[""text""])\\n# simple print of text\\n', 'print(font_properties)\\n', 'Here is the PDF page and the script output:\\n', '8.9. How to Analyze Font Characteristics\\n43\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '8.10 How to Insert Text\\n', 'PyMuPDF provides ways to insert text on new or existing PDF pages with the following features:\\n', '• choose the font, including built-in fonts and fonts that are available as files\\n', '• choose text characteristics like bold, italic, font size, font color, etc.\\n', '• position the text in multiple ways:\\n', '– either as simple line-oriented output starting at a certain point,\\n', '– or fitting text in a box provided as a rectangle, in which case text alignment choices are also available,\\n', '– choose whether text should be put in foreground (overlay existing content),\\n', '– all text can be arbitrarily “morphed”, i.e. its appearance can be changed via a Matrix, to achieve effects like\\nscaling, shearing or mirroring,\\n', '– independently from morphing and in addition to that, text can be rotated by integer multiples of 90 degrees.\\n', 'All of the above is provided by three basic Page, resp. Shape methods:\\n', '• Page.insert_font() – install a font for the page for later reference. The result is reflected in the output of\\n', 'Document.get_page_fonts(). The font can be:\\n', '– provided as a file,\\n', '– via Font (then use Font.buffer)\\n', '– already present somewhere in this or another PDF, or\\n', '– be a built-in font.\\n', '44\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Page.insert_text() – write some lines of text. Internally, this uses Shape.insert_text().\\n', '• Page.insert_textbox() – fit text in a given rectangle. Here you can choose text alignment features (left,\\nright, centered, justified) and you keep control as to whether text actually fits. Internally, this uses Shape.\\ninsert_textbox().\\n', 'Note: Both text insertion methods automatically install the font as necessary.\\n', '8.10.1 How to Write Text Lines\\n', 'Output some text lines on a page:\\n', 'import fitz\\ndoc = fitz.open(...)\\n# new or existing PDF\\n', 'page = doc.new_page()\\n# new or existing page via doc[n]\\n', 'p = fitz.Point(50, 72)\\n# start point of 1st line\\n', 'text = ""Some text,\\\\nspread across\\\\nseveral lines.""\\n# the same result is achievable by\\n# text = [""Some text"", ""spread across"", ""several lines.""]\\n', 'rc = page.insert_text(p,\\n# bottom-left of 1st char\\n', ""text,\\n# the text (honors '\\\\n')\\n"", 'fontname = ""helv"",\\n# the default font\\n', 'fontsize = 11,\\n# the default font size\\n', 'rotate = 0,\\n# also available: 90, 180, 270\\n', ')\\n', 'print(""%i lines printed on page %i."" % (rc, page.number))\\n', 'doc.save(""text.pdf"")\\n', 'With this method, only the number of lines will be controlled to not go beyond page height. Surplus lines will not be\\nwritten and the number of actual lines will be returned. The calculation uses a line height calculated from the fontsize\\nand 36 points (0.5 inches) as bottom margin.\\n', 'Line width is ignored. The surplus part of a line will simply be invisible.\\n', 'However, for built-in fonts there are ways to calculate the line width beforehand - see get_text_length().\\n', 'Here is another example. It inserts 4 text strings using the four different rotation options, and thereby explains, how the\\ntext insertion point must be chosen to achieve the desired result:\\n', 'import fitz\\ndoc = fitz.open()\\npage = doc.new_page()\\n# the text strings, each having 3 lines\\ntext1 = ""rotate=0\\\\nLine 2\\\\nLine 3""\\ntext2 = ""rotate=90\\\\nLine 2\\\\nLine 3""\\ntext3 = ""rotate=-90\\\\nLine 2\\\\nLine 3""\\ntext4 = ""rotate=180\\\\nLine 2\\\\nLine 3""\\nred = (1, 0, 0) # the color for the red dots\\n# the insertion points, each with a 25 pix distance from the corners\\np1 = fitz.Point(25, 25)\\n', '(continues on next page)\\n', '8.10. How to Insert Text\\n45\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'p2 = fitz.Point(page.rect.width - 25, 25)\\np3 = fitz.Point(25, page.rect.height - 25)\\np4 = fitz.Point(page.rect.width - 25, page.rect.height - 25)\\n# create a Shape to draw on\\nshape = page.new_shape()\\n', '# draw the insertion points as red, filled dots\\nshape.draw_circle(p1,1)\\nshape.draw_circle(p2,1)\\nshape.draw_circle(p3,1)\\nshape.draw_circle(p4,1)\\nshape.finish(width=0.3, color=red, fill=red)\\n', '# insert the text strings\\nshape.insert_text(p1, text1)\\nshape.insert_text(p3, text2, rotate=90)\\nshape.insert_text(p2, text3, rotate=-90)\\nshape.insert_text(p4, text4, rotate=180)\\n', '# store our work to the page\\nshape.commit()\\ndoc.save(...)\\n', 'This is the result:\\n', '8.10.2 How to Fill a Text Box\\n', 'This script fills 4 different rectangles with text, each time choosing a different rotation value:\\n', 'import fitz\\n', 'doc = fitz.open()\\n# new or existing PDF\\n', 'page = doc.new_page()\\n# new page, or choose doc[n]\\n', '(continues on next page)\\n', '46\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '# write in this overall area\\nrect = fitz.Rect(100, 100, 300, 150)\\n', '# partition the area in 4 equal sub-rectangles\\nCELLS = fitz.make_table(rect, cols=4, rows=1)\\n', 't1 = ""text with rotate = 0.""\\n# these texts we will written\\n', 't2 = ""text with rotate = 90.""\\nt3 = ""text with rotate = 180.""\\nt4 = ""text with rotate = 270.""\\ntext = [t1, t2, t3, t4]\\nred = fitz.pdfcolor[""red""]\\n# some colors\\n', 'gold = fitz.pdfcolor[""gold""]\\nblue = fitz.pdfcolor[""blue""]\\n""""""\\nWe use a Shape object (something like a canvas) to output the text and\\nthe rectangles surrounding it for demonstration.\\n""""""\\nshape = page.new_shape()\\n# create Shape\\n', 'for i in range(len(CELLS[0])):\\nshape.draw_rect(CELLS[0][i])\\n# draw rectangle\\n', 'shape.insert_textbox(\\nCELLS[0][i], text[i], fontname=""hebo"", color=blue, rotate=90 * i\\n)\\n', 'shape.finish(width=0.3, color=red, fill=gold)\\n', 'shape.commit()\\n# write all stuff to the page\\n', 'doc.ez_save(__file__.replace("".py"", "".pdf""))\\n', 'Some default values were used above: font size 11 and text alignment “left”. The result will look like this:\\n', '8.10.3 How to Fill a Box with HTML Text\\n', 'Method Page.insert_htmlbox() offers a much more powerful way to insert text in a rectangle.\\n', 'Instead of simple, plain text, this method accepts HTML source, which may not only contain HTML tags but also\\nstyling instructions to influence things like font, font weight (bold) and style (italic), color and much more.\\n', 'It is also possible to mix multiple fonts and languages, to output HTML tables and to insert images and URI links.\\n', 'For even more styling flexibility, an additional CSS source may also be given.\\n', 'The method is based on the Story class. Therefore, complex script systems like Devanagari, Nepali, Tamil and many\\nare supported and written correctly thanks to using the HarfBuzz library - which provides this so-called “text shaping”\\nfeature.\\n', '8.10. How to Insert Text\\n47\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Any required fonts to output characters are automatically pulled in from the Google NOTO font library - as a fallback\\n(when the – optionally supplied – user font(s) do not contain some glyphs).\\n', 'As a small glimpse into the features offered here, we will output the following HTML-enriched text:\\n', 'import fitz\\n', 'rect = fitz.Rect(100, 100, 400, 300)\\n', 'text = """"""Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\\n', 'eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\\nminim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\\nnisi ut aliquid ex ea commodi consequat. Quis aute iure\\n<span style=""color: #f00;"">reprehenderit</span>\\nin <span style=""color: #0f0;font-weight:bold;"">voluptate</span> velit\\nesse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\\ncupiditat non proident, sunt in culpa qui\\n<a href=""https://www.artifex.com"">officia</a> deserunt mollit anim id\\nest laborum.""""""\\n', 'doc = fitz.Document()\\n', 'page = doc.new_page()\\npage.insert_htmlbox(rect, text, css=""* {font-family: sans-serif;font-size:14px;}"")\\n', 'doc.ez_save(__file__.replace("".py"", "".pdf""))\\n', 'Please note how the “css” parameter is used to globally select the default “sans-serif” font and a font size of 14.\\n', 'The result will look like this:\\n', '48\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'How to output HTML tables and images\\n', 'Here is another example that outputs a table with this method. This time, we are including all the styling in the HTML\\nsource itself. Please also note, how it works to include an image - even within a table cell:\\n', 'import fitz_new as fitz\\nimport os\\n', 'filedir = os.path.dirname(__file__)\\n', 'text = """"""\\n<style>\\nbody {\\n', 'font-family: sans-serif;\\n', '}\\n', 'td,\\nth {\\n', 'border: 1px solid blue;\\nborder-right: none;\\nborder-bottom: none;\\npadding: 5px;\\ntext-align: center;\\n', '}\\n', 'table {\\n', 'border-right: 1px solid blue;\\nborder-bottom: 1px solid blue;\\nborder-spacing: 0;\\n', '}\\n</style>\\n', '<body>\\n<p><b>Some Colors</b></p>\\n<table>\\n', '<tr>\\n<th>Lime</th>\\n<th>Lemon</th>\\n<th>Image</th>\\n<th>Mauve</th>\\n</tr>\\n<tr>\\n<td>Green</td>\\n<td>Yellow</td>\\n<td><img src=""img-cake.png"" width=50></td>\\n<td>Between<br>Gray and Purple</td>\\n</tr>\\n', '</table>\\n</body>\\n""""""\\n', 'doc = fitz.Document()\\n', '(continues on next page)\\n', '8.10. How to Insert Text\\n49\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'page = doc.new_page()\\nrect = page.rect + (36, 36, -36, -36)\\n', '# we must specify an Archive because of the image\\npage.insert_htmlbox(rect, text, archive=fitz.Archive("".""))\\n', 'doc.ez_save(__file__.replace("".py"", "".pdf""))\\n', 'The result will look like this:\\n', 'How to Output Languages of the World\\n', 'Our third example will demonstrate the automatic multi-language support. It includes automatic text shaping for\\ncomplex scripting systems like Devanagari and right-to-left languages:\\n', 'import fitz\\n', 'greetings = (\\n', '""Hello, World!"",\\n# english\\n', '""Hallo, Welt!"",\\n# german\\n', '"" !"",\\n# persian\\n', '"", !"",\\n# tamil\\n', '""!"",\\n# thai\\n', '"" !"",\\n# ucranian\\n', '"" !"",\\n# hebrew\\n', '"" !"",\\n# bengali\\n', '"""",\\n# chinese\\n', '"""",\\n# japanese\\n', '"", !"",\\n# korean\\n', '"",\\n!"",\\n# sanskrit\\n', '"" !"",\\n# hindi\\n', '(continues on next page)\\n', '50\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ')\\ndoc = fitz.open()\\npage = doc.new_page()\\nrect = (50, 50, 200, 500)\\n', '# join greetings into one text string\\ntext = "" ... "".join([t for t in greetings])\\n', '# the output of the above is simple:\\npage.insert_htmlbox(rect, text)\\ndoc.save(__file__.replace("".py"", "".pdf""))\\n', 'And this is the output:\\n', 'How to Specify your Own Fonts\\n', 'Define your font files in CSS syntax using the @font-face statement. You need a separate @font-face for every\\ncombination of font weight and font style (e.g. bold or italic) you want to be supported. The following example uses\\nthe famous MS Comic Sans font in its four variants regular, bold, italic and bold-italic.\\n', 'As these four font files are located in the system’s folder C:/Windows/Fonts the method needs an Archive definition\\nthat points to that folder:\\n', '""""""\\nHow to use your own fonts with method Page.insert_htmlbox().\\n""""""\\nimport fitz_new as fitz\\n', '# Example text\\ntext = """"""Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\\n', '(continues on next page)\\n', '8.10. How to Insert Text\\n51\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\\nminim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\\nnisi ut aliquid ex ea commodi consequat. Quis aute iure\\n<span style=""color: red;"">reprehenderit</span>\\nin <span style=""color: green;font-weight:bold;"">voluptate</span> velit\\nesse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\\ncupiditat non proident, sunt in culpa qui\\n<a href=""https://www.artifex.com"">officia</a> deserunt mollit anim id\\nest laborum.""""""\\n', '""""""\\nWe need an Archive object to show where font files are located.\\nWe intend to use the font family ""MS Comic Sans"".\\n""""""\\narch = fitz.Archive(""C:/Windows/Fonts"")\\n', '# These statements define which font file to use for regular, bold,\\n# italic and bold-italic text.\\n# We assign an arbitary common font-family for all 4 font files.\\n# The Story algorithm will select the right file as required.\\n# We request to use ""comic"" throughout the text.\\ncss = """"""\\n@font-face {font-family: comic; src: url(comic.ttf);}\\n@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}\\n@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style:␣\\n', '˓→italic;}\\n@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}\\n* {font-family: comic;}\\n""""""\\n', 'doc = fitz.Document()\\npage = doc.new_page(width=150, height=150)\\n# make small page\\n', 'page.insert_htmlbox(page.rect, text, css=css, archive=arch)\\n', 'doc.subset_fonts(verbose=True)\\n# build subset fonts to reduce file size\\n', 'doc.ez_save(__file__.replace("".py"", "".pdf""))\\n', '52\\nChapter 8. Text\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'How to Request Text Alignment\\n', 'This example combines multiple requirements:\\n', '• Rotate the text by 90 degrees anti-clockwise.\\n', '• Use a font from package pymupdf-fonts. You will see that the respective CSS definitions are a lot easier in this\\ncase.\\n', '• Align the text with the “justify” option.\\n', '""""""\\nHow to use a pymupdf font with method Page.insert_htmlbox().\\n""""""\\nimport fitz_new as fitz\\n', '# Example text\\ntext = """"""Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\\n', 'eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\\nminim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\\nnisi ut aliquid ex ea commodi consequat. Quis aute iure\\n<span style=""color: red;"">reprehenderit</span>\\nin <span style=""color: green;font-weight:bold;"">voluptate</span> velit\\nesse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\\ncupiditat non proident, sunt in culpa qui\\n<a href=""https://www.artifex.com"">officia</a> deserunt mollit anim id\\nest laborum.""""""\\n', '""""""\\n', '(continues on next page)\\n', '8.10. How to Insert Text\\n53\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'This is similar to font file support. However, we can use a convenience\\nfunction for creating required CSS definitions.\\nWe still need an Archive for finding the font binaries.\\n""""""\\narch = fitz.Archive()\\n', '# We request to use ""myfont"" throughout the text.\\ncss = fitz.css_for_pymupdf_font(""ubuntu"", archive=arch, name=""myfont"")\\ncss += ""* {font-family: myfont;text-align: justify;}""\\n', 'doc = fitz.Document()\\n', 'page = doc.new_page(width=150, height=150)\\n', 'page.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)\\n', 'doc.subset_fonts(verbose=True)\\ndoc.ez_save(__file__.replace("".py"", "".pdf""))\\n', 'This documentation covers all versions up to 1.23.25.\\n', '54\\nChapter 8. Text\\n', 'CHAPTER\\n', 'NINE\\n', 'IMAGES\\n', '9.1 How to Make Images from Document Pages\\n', 'This little script will take a document filename and generate a PNG file from each of its pages.\\n', 'The document can be any supported type.\\n', 'The script works as a command line tool which expects the filename being supplied as a parameter. The generated\\nimage files (1 per page) are stored in the directory of the script:\\n', 'import sys, fitz\\n# import the bindings\\n', 'fname = sys.argv[1]\\n# get filename from command line\\n', 'doc = fitz.open(fname)\\n# open document\\n', 'for page in doc:\\n# iterate through the pages\\n', 'pix = page.get_pixmap()\\n# render page to an image\\n', 'pix.save(""page-%i.png"" % page.number)\\n# store image as a PNG\\n', 'The script directory will now contain PNG image files named page-0.png, page-1.png, etc. Pictures have the dimension\\nof their pages with width and height rounded to integers, e.g. 595 x 842 pixels for an A4 portrait sized page. They will\\nhave a resolution of 96 dpi in x and y dimension and have no transparency. You can change all that – for how to do this,\\nread the next sections.\\n', '9.2 How to Increase Image Resolution\\n', 'The image of a document page is represented by a Pixmap, and the simplest way to create a pixmap is via method\\nPage.get_pixmap().\\n', 'This method has many options to influence the result. The most important among them is the Matrix, which lets you\\nzoom, rotate, distort or mirror the outcome.\\n', 'Page.get_pixmap() by default will use the Identity matrix, which does nothing.\\n', 'In the following, we apply a zoom factor of 2 to each dimension, which will generate an image with a four times better\\nresolution for us (and also about 4 times the size):\\n', 'zoom_x = 2.0\\n# horizontal zoom\\n', 'zoom_y = 2.0\\n# vertical zoom\\n', 'mat = fitz.Matrix(zoom_x, zoom_y)\\n# zoom factor 2 in each dimension\\n', ""pix = page.get_pixmap(matrix=mat)\\n# use 'mat' instead of the identity matrix\\n"", '55\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Since version 1.19.2 there is a more direct way to set the resolution: Parameter ""dpi"" (dots per inch) can be used in\\nplace of ""matrix"". To create a 300 dpi image of a page specify pix = page.get_pixmap(dpi=300). Apart from\\nnotation brevity, this approach has the additional advantage that the dpi value is saved with the image file – which\\ndoes not happen automatically when using the Matrix notation.\\n', '9.3 How to Create Partial Pixmaps (Clips)\\n', 'You do not always need or want the full image of a page. This is the case e.g. when you display the image in a GUI\\nand would like to fill the respective window with a zoomed part of the page.\\n', 'Let’s assume your GUI window has room to display a full document page, but you now want to fill this room with the\\nbottom right quarter of your page, thus using a four times better resolution.\\n', 'To achieve this, define a rectangle equal to the area you want to appear in the GUI and call it “clip”. One way of\\nconstructing rectangles in PyMuPDF is by providing two diagonally opposite corners, which is what we are doing\\nhere.\\n', 'mat = fitz.Matrix(2, 2)\\n# zoom factor 2 in each direction\\n', 'rect = page.rect\\n# the page rectangle\\n', 'mp = (rect.tl + rect.br) / 2\\n# its middle point, becomes top-left of clip\\n', 'clip = fitz.Rect(mp, rect.br)\\n# the area we want\\n', 'pix = page.get_pixmap(matrix=mat, clip=clip)\\n', 'In the above we construct clip by specifying two diagonally opposite points: the middle point mp of the page rectangle,\\nand its bottom right, rect.br.\\n', '56\\nChapter 9. Images\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '9.4 How to Zoom a Clip to a GUI Window\\n', 'Please also read the previous section. This time we want to compute the zoom factor for a clip, such that its image best\\nfits a given GUI window. This means, that the image’s width or height (or both) will equal the window dimension. For\\nthe following code snippet you need to provide the WIDTH and HEIGHT of your GUI’s window that should receive\\nthe page’s clip rectangle.\\n', '# WIDTH: width of the GUI window\\n# HEIGHT: height of the GUI window\\n# clip: a subrectangle of the document page\\n# compare width/height ratios of image and window\\n', 'if clip.width / clip.height < WIDTH / HEIGHT:\\n', '# clip is narrower: zoom to window HEIGHT\\nzoom = HEIGHT / clip.height\\n', 'else:\\n# clip is broader: zoom to window WIDTH\\n', 'zoom = WIDTH / clip.width\\nmat = fitz.Matrix(zoom, zoom)\\npix = page.get_pixmap(matrix=mat, clip=clip)\\n', 'For the other way round, now assume you have the zoom factor and need to compute the fitting clip.\\n', 'In this case we have zoom = HEIGHT/clip.height = WIDTH/clip.width, so we must set clip.height =\\nHEIGHT/zoom and, clip.width = WIDTH/zoom. Choose the top-left point tl of the clip on the page to compute\\nthe right pixmap:\\n', 'width = WIDTH / zoom\\nheight = HEIGHT / zoom\\nclip = fitz.Rect(tl, tl.x + width, tl.y + height)\\n# ensure we still are inside the page\\nclip &= page.rect\\nmat = fitz.Matrix(zoom, zoom)\\npix = fitz.Pixmap(matrix=mat, clip=clip)\\n', '9.5 How to Create or Suppress Annotation Images\\n', 'Normally, the pixmap of a page also shows the page’s annotations. Occasionally, this may not be desirable.\\n', 'To suppress the annotation images on a rendered page, just specify annots=False in Page.get_pixmap().\\n', 'You can also render annotations separately: they have their own Annot.get_pixmap() method. The resulting pixmap\\nhas the same dimensions as the annotation rectangle.\\n', '9.4. How to Zoom a Clip to a GUI Window\\n57\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '9.6 How to Extract Images: Non-PDF Documents\\n', 'In contrast to the previous sections, this section deals with extracting images contained in documents, so they can be\\ndisplayed as part of one or more pages.\\n', 'If you want to recreate the original image in file form or as a memory area, you have basically two options:\\n', '1. Convert your document to a PDF, and then use one of the PDF-only extraction methods. This snippet will convert\\na document to PDF:\\n', '>>> pdfbytes = doc.convert_to_pdf()\\n# this a bytes object\\n', '>>> pdf = fitz.open(""pdf"", pdfbytes)\\n# open it as a PDF document\\n', "">>> # now use 'pdf' like any PDF document\\n"", '2. Use Page.get_text() with the “dict” parameter. This works for all document types. It will extract all text\\nand images shown on the page, formatted as a Python dictionary. Every image will occur in an image block,\\ncontaining meta information and the binary image data. For details of the dictionary’s structure, see TextPage.\\nThe method works equally well for PDF files. This creates a list of all images shown on a page:\\n', '>>> d = page.get_text(""dict"")\\n>>> blocks = d[""blocks""]\\n# the list of block dictionaries\\n', '>>> imgblocks = [b for b in blocks if b[""type""] == 1]\\n>>> pprint(imgblocks[0])\\n{\\'bbox\\': (100.0, 135.8769989013672, 300.0, 364.1230163574219),\\n', ""'bpc': 8,\\n'colorspace': 3,\\n'ext': 'jpeg',\\n'height': 501,\\n'image': b'\\\\xff\\\\xd8\\\\xff\\\\xe0\\\\x00\\\\x10JFIF\\\\...',\\n# CAUTION: LARGE!\\n"", ""'size': 80518,\\n'transform': (200.0, 0.0, -0.0, 228.2460174560547, 100.0, 135.8769989013672),\\n'type': 1,\\n'width': 439,\\n'xres': 96,\\n'yres': 96}\\n"", '9.7 How to Extract Images: PDF Documents\\n', 'Like any other “object” in a PDF, images are identified by a cross reference number (xref, an integer). If you know\\nthis number, you have two ways to access the image’s data:\\n', '1. Create a Pixmap of the image with instruction pix = fitz.Pixmap(doc, xref). This method is very fast (single\\ndigit micro-seconds). The pixmap’s properties (width, height, ...) will reflect the ones of the image. In this case\\nthere is no way to tell which image format the embedded original has.\\n', '2. Extract the image with img = doc.extract_image(xref). This is a dictionary containing the binary image data as\\nimg[“image”]. A number of meta data are also provided – mostly the same as you would find in the pixmap of the\\nimage. The major difference is string img[“ext”], which specifies the image format: apart from “png”, strings like\\n“jpeg”, “bmp”, “tiff”, etc. can also occur. Use this string as the file extension if you want to store to disk. The ex-\\necution speed of this method should be compared to the combined speed of the statements pix = fitz.Pixmap(doc,\\nxref);pix.tobytes(). If the embedded image is in PNG format, the speed of Document.extract_image() is\\nabout the same (and the binary image data are identical). Otherwise, this method is thousands of times faster,\\nand the image data is much smaller.\\n', '58\\nChapter 9. Images\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'The question remains: “How do I know those ‘xref’ numbers of images?”. There are two answers to this:\\n', 'a. “Inspect the page objects:” Loop through the items of Page.get_images(). It is a list of list, and its items\\nlook like [xref, smask, ...], containing the xref of an image. This xref can then be used with one of the above\\nmethods. Use this method for valid (undamaged) documents. Be wary however, that the same image may be\\nreferenced multiple times (by different pages), so you might want to provide a mechanism avoiding multiple\\nextracts.\\n', 'b. “No need to know:” Loop through the list of all xrefs of the document and perform a Document.\\nextract_image() for each one. If the returned dictionary is empty, then continue – this xref is no image.\\nUse this method if the PDF is damaged (unusable pages). Note that a PDF often contains “pseudo-images”\\n(“stencil masks”) with the special purpose of defining the transparency of some other image. You may want to\\nprovide logic to exclude those from extraction. Also have a look at the next section.\\n', 'For both extraction approaches, there exist ready-to-use general purpose scripts:\\n', 'extract-from-pages.py extracts images page by page:\\n', 'and extract-from-xref.py extracts images by xref table:\\n', '9.7. How to Extract Images: PDF Documents\\n59\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '9.8 How to Handle Image Masks\\n', 'Some images in PDFs are accompanied by image masks. In their simplest form, masks represent alpha (transparency)\\nbytes stored as separate images. In order to reconstruct the original of an image, which has a mask, it must be “enriched”\\nwith transparency bytes taken from its mask.\\n', 'Whether an image does have such a mask can be recognized in one of two ways in PyMuPDF:\\n', '1. An item of Document.get_page_images() has the general format (xref, smask, ...), where xref is the\\nimage’s xref and smask, if positive, then it is the xref of a mask.\\n', '2. The (dictionary) results of Document.extract_image() have a key “smask”, which also contains any mask’s\\n', 'xref if positive.\\n', 'If smask == 0 then the image encountered via xref can be processed as it is.\\n', 'To recover the original image using PyMuPDF, the procedure depicted as follows must be executed:\\n', '>>> pix1 = fitz.Pixmap(doc.extract_image(xref)[""image""])\\n# (1) pixmap of image w/o␣\\n', '˓→alpha\\n>>> mask = fitz.Pixmap(doc.extract_image(smask)[""image""])\\n# (2) mask pixmap\\n', '>>> pix = fitz.Pixmap(pix1, mask)\\n# (3) copy of pix1, image␣\\n', '˓→mask added\\n', 'Step (1) creates a pixmap of the basic image. Step (2) does the same with the image mask. Step (3) adds an alpha\\nchannel and fills it with transparency information.\\n', 'The scripts extract-from-pages.py, and extract-from-xref.py above also contain this logic.\\n', '9.9 How to Make one PDF of all your Pictures (or Files)\\n', 'We show here three scripts that take a list of (image and other) files and put them all in one PDF.\\n', 'Method 1: Inserting Images as Pages\\n', 'The first one converts each image to a PDF page with the same dimensions. The result will be a PDF with one page\\nper image. It will only work for supported image file formats:\\n', '60\\nChapter 9. Images\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'import os, fitz\\nimport PySimpleGUI as psg\\n# for showing a progress bar\\n', 'doc = fitz.open()\\n# PDF with the pictures\\n', 'imgdir = ""D:/2012_10_05""\\n# where the pics are\\n', 'imglist = os.listdir(imgdir)\\n# list of them\\n', 'imgcount = len(imglist)\\n# pic count\\n', 'for i, f in enumerate(imglist):\\nimg = fitz.open(os.path.join(imgdir, f))\\n# open pic as document\\n', 'rect = img[0].rect\\n# pic dimension\\n', 'pdfbytes = img.convert_to_pdf()\\n# make a PDF stream\\n', 'img.close()\\n# no longer needed\\n', 'imgPDF = fitz.open(""pdf"", pdfbytes)\\n# open stream as PDF\\n', 'page = doc.new_page(width = rect.width,\\n# new page with ...\\n', 'height = rect.height)\\n# pic dimension\\n', 'page.show_pdf_page(rect, imgPDF, 0)\\n# image fills the page\\n', 'psg.EasyProgressMeter(""Import Images"",\\n# show our progress\\n', 'i+1, imgcount)\\n', 'doc.save(""all-my-pics.pdf"")\\n', 'This will generate a PDF only marginally larger than the combined pictures’ size. Some numbers on performance:\\n', 'The above script needed about 1 minute on my machine for 149 pictures with a total size of 514 MB (and about the\\nsame resulting PDF size).\\n', 'Look here for a more complete source code: it offers a directory selection dialog and skips unsupported files and\\nnon-file entries.\\n', 'Note: We might have used Page.insert_image() instead of Page.show_pdf_page(), and the result would have\\nbeen a similar looking file. However, depending on the image type, it may store images uncompressed. Therefore, the\\nsave option deflate = True must be used to achieve a reasonable file size, which hugely increases the runtime for large\\nnumbers of images. So this alternative cannot be recommended here.\\n', 'Method 2: Embedding Files\\n', 'The second script embeds arbitrary files – not only images. The resulting PDF will have just one (empty) page, required\\nfor technical reasons. To later access the embedded files again, you would need a suitable PDF viewer that can display\\nand / or extract embedded files:\\n', '9.9. How to Make one PDF of all your Pictures (or Files)\\n61\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'import os, fitz\\nimport PySimpleGUI as psg\\n# for showing progress bar\\n', 'doc = fitz.open()\\n# PDF with the pictures\\n', 'imgdir = ""D:/2012_10_05""\\n# where my files are\\n', 'imglist = os.listdir(imgdir)\\n# list of pictures\\n', 'imgcount = len(imglist)\\n# pic count\\n', 'imglist.sort()\\n# nicely sort them\\n', 'for i, f in enumerate(imglist):\\nimg = open(os.path.join(imgdir,f), ""rb"").read()\\n# make pic stream\\n', 'doc.embfile_add(img, f, filename=f,\\n# and embed it\\n', 'ufilename=f, desc=f)\\npsg.EasyProgressMeter(""Embedding Files"",\\n# show our progress\\n', 'i+1, imgcount)\\n', 'page = doc.new_page()\\n# at least 1 page is needed\\n', 'doc.save(""all-my-pics-embedded.pdf"")\\n', 'This is by far the fastest method, and it also produces the smallest possible output file size. The above pictures needed\\n20 seconds on my machine and yielded a PDF size of 510 MB. Look here for a more complete source code: it offers a\\ndirectory selection dialog and skips non-file entries.\\n', 'Method 3: Attaching Files\\n', 'A third way to achieve this task is attaching files via page annotations see here for the complete source code.\\n', 'This has a similar performance as the previous script and it also produces a similar file size. It will produce PDF pages\\nwhich show a ‘FileAttachment’ icon for each attached file.\\n', '62\\nChapter 9. Images\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: Both, the embed and the attach methods can be used for arbitrary files – not just images.\\n', 'Note:\\nWe strongly recommend using the awesome package PySimpleGUI to display a progress meter for tasks that\\nmay run for an extended time span. It’s pure Python, uses Tkinter (no additional GUI package) and requires just one\\nmore line of code!\\n', '9.10 How to Create Vector Images\\n', 'The usual way to create an image from a document page is Page.get_pixmap(). A pixmap represents a raster image,\\nso you must decide on its quality (i.e. resolution) at creation time. It cannot be changed later.\\n', 'PyMuPDF also offers a way to create a vector image of a page in SVG format (scalable vector graphics, defined in\\nXML syntax). SVG images remain precise across zooming levels (of course with the exception of any raster graphic\\nelements embedded therein).\\n', 'Instruction svg = page.get_svg_image(matrix=fitz.Identity) delivers a UTF-8 string svg which can be stored with ex-\\ntension “.svg”.\\n', '9.10. How to Create Vector Images\\n63\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '9.11 How to Convert Images\\n', 'Just as a feature among others, PyMuPDF’s image conversion is easy. It may avoid using other graphics packages like\\nPIL/Pillow in many cases.\\n', 'Notwithstanding that interfacing with Pillow is almost trivial.\\n', 'Input Formats\\nOutput Formats\\nDescription\\n', 'BMP\\n.\\nWindows Bitmap\\n', 'JPEG\\nJPEG\\nJoint Photographic Experts Group\\n', 'JXR\\n.\\nJPEG Extended Range\\n', 'JPX/JP2\\n.\\nJPEG 2000\\n', 'GIF\\n.\\nGraphics Interchange Format\\n', 'TIFF\\n.\\nTagged Image File Format\\n', 'PNG\\nPNG\\nPortable Network Graphics\\n', 'PNM\\nPNM\\nPortable Anymap\\n', 'PGM\\nPGM\\nPortable Graymap\\n', 'PBM\\nPBM\\nPortable Bitmap\\n', 'PPM\\nPPM\\nPortable Pixmap\\n', 'PAM\\nPAM\\nPortable Arbitrary Map\\n', '.\\nPSD\\nAdobe Photoshop Document\\n', '.\\nPS\\nAdobe Postscript\\n', 'The general scheme is just the following two lines:\\n', 'pix = fitz.Pixmap(""input.xxx"")\\n# any supported input format\\n', 'pix.save(""output.yyy"")\\n# any supported output format\\n', 'Remarks\\n', '1. The input argument of fitz.Pixmap(arg) can be a file or a bytes / io.BytesIO object containing an image.\\n', '2. Instead of an output file, you can also create a bytes object via pix.tobytes(“yyy”) and pass this around.\\n', '3. As a matter of course, input and output formats must be compatible in terms of colorspace and transparency. The\\nPixmap class has batteries included if adjustments are needed.\\n', 'Note: Convert JPEG to Photoshop:\\n', 'pix = fitz.Pixmap(""myfamily.jpg"")\\npix.save(""myfamily.psd"")\\n', 'Note:\\nConvert JPEG to Tkinter PhotoImage. Any RGB / no-alpha image works exactly the same. Conversion\\nto one of the Portable Anymap formats (PPM, PGM, etc.) does the trick, because they are supported by all Tkinter\\nversions:\\n', 'import tkinter as tk\\npix = fitz.Pixmap(""input.jpg"")\\n# or any RGB / no-alpha image\\n', 'tkimg = tk.PhotoImage(data=pix.tobytes(""ppm""))\\n', '64\\nChapter 9. Images\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: Convert PNG with alpha to Tkinter PhotoImage. This requires removing the alpha bytes, before we can do\\nthe PPM conversion:\\n', 'import tkinter as tk\\npix = fitz.Pixmap(""input.png"")\\n# may have an alpha channel\\n', 'if pix.alpha:\\n# we have an alpha channel!\\n', 'pix = fitz.Pixmap(pix, 0)\\n# remove it\\n', 'tkimg = tk.PhotoImage(data=pix.tobytes(""ppm""))\\n', '9.12 How to Use Pixmaps: Gluing Images\\n', 'This shows how pixmaps can be used for purely graphical, non-document purposes. The script reads an image file and\\ncreates a new image which consist of 3 * 4 tiles of the original:\\n', 'import fitz\\nsrc = fitz.Pixmap(""img-7edges.png"")\\n# create pixmap from a picture\\n', 'col = 3\\n# tiles per row\\n', 'lin = 4\\n# tiles per column\\n', 'tar_w = src.width * col\\n# width of target\\n', 'tar_h = src.height * lin\\n# height of target\\n', '# create target pixmap\\ntar_pix = fitz.Pixmap(src.colorspace, (0, 0, tar_w, tar_h), src.alpha)\\n', '# now fill target with the tiles\\nfor i in range(col):\\n', 'for j in range(lin):\\nsrc.set_origin(src.width * i, src.height * j)\\ntar_pix.copy(src, src.irect) # copy input to new loc\\n', 'tar_pix.save(""tar.png"")\\n', 'This is the input picture:\\n', 'Here is the output:\\n', '9.12. How to Use Pixmaps: Gluing Images\\n65\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '9.13 How to Use Pixmaps: Making a Fractal\\n', 'Here is another Pixmap example that creates Sierpinski’s Carpet – a fractal generalizing the Cantor Set to two\\ndimensions. Given a square carpet, mark its 9 sub-suqares (3 times 3) and cut out the one in the center. Treat each of\\nthe remaining eight sub-squares in the same way, and continue ad infinitum. The end result is a set with area zero and\\nfractal dimension 1.8928...\\n', 'This script creates an approximate image of it as a PNG, by going down to one-pixel granularity. To increase the image\\nprecision, change the value of n (precision):\\n', 'import fitz, time\\nif not list(map(int, fitz.VersionBind.split("".""))) >= [1, 14, 8]:\\n', 'raise SystemExit(""need PyMuPDF v1.14.8 for this script"")\\nn = 6\\n# depth (precision)\\n', 'd = 3**n\\n# edge length\\n', 't0 = time.perf_counter()\\nir = (0, 0, d, d)\\n# the pixmap rectangle\\n', 'pm = fitz.Pixmap(fitz.csRGB, ir, False)\\npm.set_rect(pm.irect, (255,255,0)) # fill it with some background color\\n', 'color = (0, 0, 255)\\n# color to fill the punch holes\\n', ""# alternatively, define a 'fill' pixmap for the punch holes\\n# this could be anything, e.g. some photo image ...\\nfill = fitz.Pixmap(fitz.csRGB, ir, False) # same size as 'pm'\\nfill.set_rect(fill.irect, (0, 255, 255))\\n# put some color in\\n"", 'def punch(x, y, step):\\n', '""""""Recursively ""punch a hole"" in the central square of a pixmap.\\n', 'Arguments are top-left coords and the step width.\\n', 'Some alternative punching methods are commented out.\\n', '(continues on next page)\\n', '66\\nChapter 9. Images\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '""""""\\ns = step // 3\\n# the new step\\n', '# iterate through the 9 sub-squares\\n# the central one will be filled with the color\\nfor i in range(3):\\n', 'for j in range(3):\\n', 'if i != j or i != 1:\\n# this is not the central cube\\n', 'if s >= 3:\\n# recursing needed?\\n', 'punch(x+i*s, y+j*s, s)\\n# recurse\\n', 'else:\\n# punching alternatives are:\\n', 'pm.set_rect((x+s, y+s, x+2*s, y+2*s), color)\\n# fill with a color\\n', '#pm.copy(fill, (x+s, y+s, x+2*s, y+2*s))\\n# copy from fill\\n', '#pm.invert_irect((x+s, y+s, x+2*s, y+2*s))\\n# invert colors\\n', 'return\\n', '#==============================================================================\\n# main program\\n#==============================================================================\\n# now start punching holes into the pixmap\\npunch(0, 0, d)\\nt1 = time.perf_counter()\\npm.save(""sierpinski-punch.png"")\\nt2 = time.perf_counter()\\nprint (""%g sec to create / fill the pixmap"" % round(t1-t0,3))\\nprint (""%g sec to save the image"" % round(t2-t1,3))\\n', 'The result should look something like this:\\n', '9.13. How to Use Pixmaps: Making a Fractal\\n67\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '9.14 How to Interface with NumPy\\n', 'This shows how to create a PNG file from a numpy array (several times faster than most other methods):\\n', 'import numpy as np\\nimport fitz\\n#==============================================================================\\n# create a fun-colored width * height PNG with fitz and numpy\\n#==============================================================================\\nheight = 150\\nwidth\\n= 100\\n', 'bild = np.ndarray((height, width, 3), dtype=np.uint8)\\n', 'for i in range(height):\\n', 'for j in range(width):\\n', '# one pixel (some fun coloring)\\nbild[i, j] = [(i+j)%256, i%256, j%256]\\n', 'samples = bytearray(bild.tostring())\\n# get plain pixel data from numpy array\\n', 'pix = fitz.Pixmap(fitz.csRGB, width, height, samples, alpha=False)\\npix.save(""test.png"")\\n', '9.15 How to Add Images to a PDF Page\\n', 'There are two methods to add images to a PDF page: Page.insert_image() and Page.show_pdf_page(). Both\\nmethods have things in common, but there are also differences.\\n', 'Criterion\\nPage.\\ninsert_image()\\n', 'Page.show_pdf_page()\\n', 'displayable con-\\ntent\\n', 'image file, image in\\nmemory, pixmap\\n', 'PDF page\\n', 'display\\nresolu-\\ntion\\n', 'image resolution\\nvectorized (except raster page content)\\n', 'rotation\\n0, 90, 180 or 270 de-\\ngrees\\n', 'any angle\\n', 'clipping\\nno (full image only)\\nyes\\n', 'keep aspect ra-\\ntio\\n', 'yes (default option)\\nyes (default option)\\n', 'transparency\\n(water marking)\\n', 'depends on the im-\\nage\\n', 'depends on the page\\n', 'location / place-\\nment\\n', 'scaled to fit target\\nrectangle\\n', 'scaled to fit target rectangle\\n', 'performance\\nautomatic\\npreven-\\ntion of duplicates;\\n', 'automatic prevention of duplicates;\\n', 'multi-page im-\\nage support\\n', 'no\\nyes\\n', 'ease of use\\nsimple, intuitive;\\nsimple, intuitive; usable for all document types (including images!)\\nafter conversion to PDF via Document.convert_to_pdf()\\n', '68\\nChapter 9. Images\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Basic code pattern for Page.insert_image(). Exactly one of the parameters filename / stream / pixmap must be\\ngiven, if not re-inserting an existing image:\\n', 'page.insert_image(\\nrect,\\n# where to place the image (rect-like)\\n', 'filename=None,\\n# image in a file\\n', 'stream=None,\\n# image in memory (bytes)\\n', 'pixmap=None,\\n# image from pixmap\\n', 'mask=None,\\n# specify alpha channel separately\\n', 'rotate=0,\\n# rotate (int, multiple of 90)\\n', 'xref=0,\\n# re-use existing image\\n', 'oc=0,\\n# control visibility via OCG / OCMD\\n', 'keep_proportion=True,\\n# keep aspect ratio\\n', 'overlay=True,\\n# put in foreground\\n', ')\\n', 'Basic code pattern for Page.show_pdf_page(). Source and target PDF must be different Document objects (but may\\nbe opened from the same file):\\n', 'page.show_pdf_page(\\nrect,\\n# where to place the image (rect-like)\\n', 'src,\\n# source PDF\\n', 'pno=0,\\n# page number in source PDF\\n', 'clip=None,\\n# only display this area (rect-like)\\n', 'rotate=0,\\n# rotate (float, any value)\\n', 'oc=0,\\n# control visibility via OCG / OCMD\\n', 'keep_proportion=True,\\n# keep aspect ratio\\n', 'overlay=True,\\n# put in foreground\\n', ')\\n', '9.16 How to Use Pixmaps: Checking Text Visibility\\n', 'Whether or not a given piece of text is actually visible on a page depends on a number of factors:\\n', '1. Text is not covered by another object but may have the same color as the background i.e., white-on-white etc.\\n', '2. Text may be covered by an image or vector graphics. Detecting this is an important capability, for example to\\nuncover badly anonymized legal documents.\\n', '3. Text is created hidden. This technique is usually used by OCR tools to store the recognized text in an invisible\\nlayer on the page.\\n', 'The following shows how to detect situation 1. above, or situation 2. if the covering object is unicolor:\\n', 'pix = page.get_pixmap(dpi=150)\\n# make page image with a decent resolution\\n', '# the following matrix transforms page to pixmap coordinates\\nmat = page.rect.torect(pix.irect)\\n', '# search for some string ""needle""\\nrlist = page.search_for(""needle"")\\n# check the visibility for each hit rectangle\\nfor rect in rlist:\\n', '(continues on next page)\\n', '9.16. How to Use Pixmaps: Checking Text Visibility\\n69\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'if pix.color_topusage(clip=rect * mat)[0] > 0.95:\\n', 'print(""\\'needle\\' is invisible here:"", rect)\\n', 'Method Pixmap.color_topusage() returns a tuple (ratio, pixel) where 0 < ratio <= 1 and pixel is the pixel\\nvalue of the color. Please note that we create a pixmap only once. This can save a lot of processing time if there are\\nmultiple hit rectangles.\\n', ""The logic of the above code is: If the needle’s rectangle is (“almost”: > 95%) unicolor, then the text cannot be visible.\\nA typical result for visible text returns the color of the background (mostly white) and a ratio around 0.7 to 0.8, for\\nexample (0.685, b'xffxffxff').\\n"", 'This documentation covers all versions up to 1.23.25.\\n', '70\\nChapter 9. Images\\n', 'CHAPTER\\n', 'TEN\\n', 'ANNOTATIONS\\n', '10.1 How to Add and Modify Annotations\\n', 'In PyMuPDF, new annotations can be added via Page methods. Once an annotation exists, it can be modified to a large\\nextent using methods of the Annot class.\\n', 'In contrast to many other tools, initial insert of annotations happens with a minimum number of properties. We leave\\nit to the programmer to e.g. set attributes like author, creation date or subject.\\n', 'As an overview for these capabilities, look at the following script that fills a PDF page with most of the available\\nannotations. Look in the next sections for more special situations:\\n', '# -*- coding: utf-8 -*-\\n""""""\\n-------------------------------------------------------------------------------\\nDemo script showing how annotations can be added to a PDF using PyMuPDF.\\n', 'It contains the following annotation types:\\nCaret, Text, FreeText, text markers (underline, strike-out, highlight,\\nsquiggle), Circle, Square, Line, PolyLine, Polygon, FileAttachment, Stamp\\nand Redaction.\\nThere is some effort to vary appearances by adding colors, line ends,\\nopacity, rotation, dashed lines, etc.\\n', 'Dependencies\\n------------\\nPyMuPDF v1.17.0\\n-------------------------------------------------------------------------------\\n""""""\\nfrom __future__ import print_function\\n', 'import gc\\nimport sys\\n', 'import fitz\\n', 'print(fitz.__doc__)\\nif fitz.VersionBind.split(""."") < [""1"", ""17"", ""0""]:\\nsys.exit(""PyMuPDF v1.17.0+ is needed."")\\n', 'gc.set_debug(gc.DEBUG_UNCOLLECTABLE)\\n', '(continues on next page)\\n', '71\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'highlight = ""this text is highlighted""\\nunderline = ""this text is underlined""\\nstrikeout = ""this text is striked out""\\nsquiggled = ""this text is zigzag-underlined""\\nred = (1, 0, 0)\\nblue = (0, 0, 1)\\ngold = (1, 1, 0)\\ngreen = (0, 1, 0)\\n', 'displ = fitz.Rect(0, 50, 0, 50)\\nr = fitz.Rect(72, 72, 220, 100)\\nt1 = u""têxt üsès Lätiñ charß,\\\\nEUR: €, mu: µ, super scripts: 23!""\\n', 'def print_descr(annot):\\n', '""""""Print a short description to the right of each annot rect.""""""\\nannot.parent.insert_text(\\nannot.rect.br + (10, -5), ""%s annotation"" % annot.type[1], color=red\\n)\\n', 'doc = fitz.open()\\npage = doc.new_page()\\n', 'page.set_rotation(0)\\n', 'annot = page.add_caret_annot(r.tl)\\nprint_descr(annot)\\n', 'r = r + displ\\nannot = page.add_freetext_annot(\\nr,\\nt1,\\nfontsize=10,\\nrotate=90,\\ntext_color=blue,\\nfill_color=gold,\\nalign=fitz.TEXT_ALIGN_CENTER,\\n)\\nannot.set_border(width=0.3, dashes=[2])\\nannot.update(text_color=blue, fill_color=gold)\\nprint_descr(annot)\\n', 'r = annot.rect + displ\\nannot = page.add_text_annot(r.tl, t1)\\nprint_descr(annot)\\n', '# Adding text marker annotations:\\n# first insert a unique text, then search for it, then mark it\\npos = annot.rect.tl + displ.tl\\npage.insert_text(\\n', '(continues on next page)\\n', '72\\nChapter 10. Annotations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'pos,\\n# insertion point\\n', 'highlight,\\n# inserted text\\n', 'morph=(pos, fitz.Matrix(-5)),\\n# rotate around insertion point\\n', ')\\nrl = page.search_for(highlight, quads=True)\\n# need a quad b/o tilted text\\n', 'annot = page.add_highlight_annot(rl[0])\\nprint_descr(annot)\\n', 'pos = annot.rect.bl\\n# next insertion point\\n', 'page.insert_text(pos, underline, morph=(pos, fitz.Matrix(-10)))\\nrl = page.search_for(underline, quads=True)\\nannot = page.add_underline_annot(rl[0])\\nprint_descr(annot)\\n', 'pos = annot.rect.bl\\npage.insert_text(pos, strikeout, morph=(pos, fitz.Matrix(-15)))\\nrl = page.search_for(strikeout, quads=True)\\nannot = page.add_strikeout_annot(rl[0])\\nprint_descr(annot)\\n', 'pos = annot.rect.bl\\npage.insert_text(pos, squiggled, morph=(pos, fitz.Matrix(-20)))\\nrl = page.search_for(squiggled, quads=True)\\nannot = page.add_squiggly_annot(rl[0])\\nprint_descr(annot)\\n', ""pos = annot.rect.bl\\nr = fitz.Rect(pos, pos.x + 75, pos.y + 35) + (0, 20, 0, 20)\\nannot = page.add_polyline_annot([r.bl, r.tr, r.br, r.tl])\\n# 'Polyline'\\n"", 'annot.set_border(width=0.3, dashes=[2])\\nannot.set_colors(stroke=blue, fill=green)\\nannot.set_line_ends(fitz.PDF_ANNOT_LE_CLOSED_ARROW, fitz.PDF_ANNOT_LE_R_CLOSED_ARROW)\\nannot.update(fill_color=(1, 1, 0))\\nprint_descr(annot)\\n', ""r += displ\\nannot = page.add_polygon_annot([r.bl, r.tr, r.br, r.tl])\\n# 'Polygon'\\n"", 'annot.set_border(width=0.3, dashes=[2])\\nannot.set_colors(stroke=blue, fill=gold)\\nannot.set_line_ends(fitz.PDF_ANNOT_LE_DIAMOND, fitz.PDF_ANNOT_LE_CIRCLE)\\nannot.update()\\nprint_descr(annot)\\n', ""r += displ\\nannot = page.add_line_annot(r.tr, r.bl)\\n# 'Line'\\n"", 'annot.set_border(width=0.3, dashes=[2])\\nannot.set_colors(stroke=blue, fill=gold)\\nannot.set_line_ends(fitz.PDF_ANNOT_LE_DIAMOND, fitz.PDF_ANNOT_LE_CIRCLE)\\nannot.update()\\nprint_descr(annot)\\n', 'r += displ\\n', '(continues on next page)\\n', '10.1. How to Add and Modify Annotations\\n73\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""annot = page.add_rect_annot(r)\\n# 'Square'\\n"", 'annot.set_border(width=1, dashes=[1, 2])\\nannot.set_colors(stroke=blue, fill=gold)\\nannot.update(opacity=0.5)\\nprint_descr(annot)\\n', ""r += displ\\nannot = page.add_circle_annot(r)\\n# 'Circle'\\n"", 'annot.set_border(width=0.3, dashes=[2])\\nannot.set_colors(stroke=blue, fill=gold)\\nannot.update()\\nprint_descr(annot)\\n', 'r += displ\\nannot = page.add_file_annot(\\nr.tl, b""just anything for testing"", ""testdata.txt""\\n# \\'FileAttachment\\'\\n', ')\\nprint_descr(annot)\\n# annot.rect\\n', ""r += displ\\nannot = page.add_stamp_annot(r, stamp=10)\\n# 'Stamp'\\n"", 'annot.set_colors(stroke=green)\\nannot.update()\\nprint_descr(annot)\\n', 'r += displ + (0, 0, 50, 10)\\nrc = page.insert_textbox(\\nr,\\n""This content will be removed upon applying the redaction."",\\ncolor=blue,\\nalign=fitz.TEXT_ALIGN_CENTER,\\n)\\nannot = page.add_redact_annot(r)\\nprint_descr(annot)\\n', 'doc.save(__file__.replace("".py"", ""-%i.pdf"" % page.rotation), deflate=True)\\n', 'This script should lead to the following output:\\n', '74\\nChapter 10. Annotations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '10.1. How to Add and Modify Annotations\\n75\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '10.2 How to Use FreeText\\n', 'This script shows a couple of ways to deal with ‘FreeText’ annotations:\\n', '# -*- coding: utf-8 -*-\\nimport fitz\\n', '# some colors\\nblue\\n= (0,0,1)\\ngreen = (0,1,0)\\nred\\n= (1,0,0)\\ngold\\n= (1,1,0)\\n', '# a new PDF with 1 page\\ndoc = fitz.open()\\npage = doc.new_page()\\n', '# 3 rectangles, same size, above each other\\nr1 = fitz.Rect(100,100,200,150)\\nr2 = r1 + (0,75,0,75)\\nr3 = r2 + (0,75,0,75)\\n', '# the text, Latin alphabet\\nt = ""¡Un pequeño texto para practicar!""\\n', '# add 3 annots, modify the last one somewhat\\na1 = page.add_freetext_annot(r1, t, color=red)\\na2 = page.add_freetext_annot(r2, t, fontname=""Ti"", color=blue)\\na3 = page.add_freetext_annot(r3, t, fontname=""Co"", color=blue, rotate=90)\\na3.set_border(width=0)\\na3.update(fontsize=8, fill_color=gold)\\n', '# save the PDF\\ndoc.save(""a-freetext.pdf"")\\n', 'The result looks like this:\\n', '76\\nChapter 10. Annotations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '10.3 Using Buttons and JavaScript\\n', 'Since MuPDF v1.16, ‘FreeText’ annotations no longer support bold or italic versions of the Times-Roman, Helvetica\\nor Courier fonts.\\n', 'A big thank you to our user @kurokawaikki, who contributed the following script to circumvent this restriction.\\n', '""""""\\nProblem: Since MuPDF v1.16 a \\'Freetext\\' annotation font is restricted to the\\n""normal"" versions (no bold, no italics) of Times-Roman, Helvetica, Courier.\\nIt is impossible to use PyMuPDF to modify this.\\n', ""Solution: Using Adobe's JavaScript API, it is possible to manipulate properties\\nof Freetext annotations. Check out these references:\\nhttps://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf,\\nor https://www.adobe.com/devnet/acrobat/documentation.html.\\n"", ""Function 'this.getAnnots()'\\nwill return all annotations\\nas an array. We loop\\n"", ""over this array to set the properties of the text through the 'richContents'\\nattribute.\\nThere is no explicit property to set text to bold, but it is possible to set\\nfontWeight=800 (400 is the normal size) of richContents.\\nOther attributes, like color, italics, etc. can also be set via richContents.\\n"", ""If we have 'FreeText' annotations created with PyMuPDF, we can make use of this\\nJavaScript feature to modify the font - thus circumventing the above restriction.\\n"", 'Use PyMuPDF v1.16.12 to create a push button that executes a Javascript\\ncontaining the desired code. This is what this program does.\\nThen open the resulting file with Adobe reader (!).\\nAfter clicking on the button, all Freetext annotations will be bold, and the\\nfile can be saved.\\n', '(continues on next page)\\n', '10.3. Using Buttons and JavaScript\\n77\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'If desired, the button can be removed again, using free tools like PyMuPDF or\\nPDF XChange editor.\\n', 'Note / Caution:\\n---------------\\nThe JavaScript will **only** work if the file is opened with Adobe Acrobat reader!\\nWhen using other PDF viewers, the reaction is unforeseeable.\\n""""""\\nimport sys\\n', 'import fitz\\n', '# this JavaScript will execute when the button is clicked:\\njscript = """"""\\nvar annt = this.getAnnots();\\nannt.forEach(function (item, index) {\\n', 'try {\\n', 'var span = item.richContents;\\nspan.forEach(function (it, dx) {\\n', 'it.fontWeight = 800;\\n', '})\\nitem.richContents = span;\\n', '} catch (err) {}\\n', '});\\napp.alert(\\'Done\\');\\n""""""\\ni_fn = sys.argv[1]\\n# input file name\\n', 'o_fn = ""bold-"" + i_fn\\n# output filename\\n', 'doc = fitz.open(i_fn)\\n# open input\\n', 'page = doc[0]\\n# get desired page\\n', '# ------------------------------------------------\\n# make a push button for invoking the JavaScript\\n# ------------------------------------------------\\n', 'widget = fitz.Widget()\\n# create widget\\n', ""# make it a 'PushButton'\\nwidget.field_type = fitz.PDF_WIDGET_TYPE_BUTTON\\nwidget.field_flags = fitz.PDF_BTN_FIELD_IS_PUSHBUTTON\\n"", 'widget.rect = fitz.Rect(5, 5, 20, 20)\\n# button position\\n', 'widget.script = jscript\\n# fill in JavaScript source text\\n', 'widget.field_name = ""Make bold""\\n# arbitrary name\\n', 'widget.field_value = ""Off""\\n# arbitrary value\\n', 'widget.fill_color = (0, 0, 1)\\n# make button visible\\n', 'annot = page.add_widget(widget)\\n# add the widget to the page\\n', 'doc.save(o_fn)\\n# output the file\\n', '78\\nChapter 10. Annotations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '10.4 How to Use Ink Annotations\\n', 'Ink annotations are used to contain freehand scribbling. A typical example may be an image of your signature consisting\\nof first name and last name. Technically an ink annotation is implemented as a list of lists of points. Each point list\\nis regarded as a continuous line connecting the points. Different point lists represent independent line segments of the\\nannotation.\\n', 'The following script creates an ink annotation with two mathematical curves (sine and cosine function graphs) as line\\nsegments:\\n', 'import math\\nimport fitz\\n', '#------------------------------------------------------------------------------\\n# preliminary stuff: create function value lists for sine and cosine\\n#------------------------------------------------------------------------------\\nw360 = math.pi * 2\\n# go through full circle\\n', 'deg = w360 / 360\\n# 1 degree as radians\\n', 'rect = fitz.Rect(100,200, 300, 300)\\n# use this rectangle\\n', 'first_x = rect.x0\\n# x starts from left\\n', 'first_y = rect.y0 + rect.height / 2.\\n# rect middle means y = 0\\n', 'x_step = rect.width / 360\\n# rect width means 360 degrees\\n', 'y_scale = rect.height / 2.\\n# rect height means 2\\n', 'sin_points = []\\n# sine values go here\\n', 'cos_points = []\\n# cosine values go here\\n', 'for x in range(362):\\n# now fill in the values\\n', 'x_coord = x * x_step + first_x\\n# current x coordinate\\n', 'y = -math.sin(x * deg)\\n# sine\\n', 'p = (x_coord, y * y_scale + first_y)\\n# corresponding point\\n', 'sin_points.append(p)\\n# append\\n', 'y = -math.cos(x * deg)\\n# cosine\\n', 'p = (x_coord, y * y_scale + first_y)\\n# corresponding point\\n', 'cos_points.append(p)\\n# append\\n', '#------------------------------------------------------------------------------\\n# create the document with one page\\n#------------------------------------------------------------------------------\\ndoc = fitz.open()\\n# make new PDF\\n', 'page = doc.new_page()\\n# give it a page\\n', '#------------------------------------------------------------------------------\\n# add the Ink annotation, consisting of 2 curve segments\\n#------------------------------------------------------------------------------\\nannot = page.addInkAnnot((sin_points, cos_points))\\n# let it look a little nicer\\nannot.set_border(width=0.3, dashes=[1,])\\n# line thickness, some dashing\\n', 'annot.set_colors(stroke=(0,0,1))\\n# make the lines blue\\n', 'annot.update()\\n# update the appearance\\n', 'page.draw_rect(rect, width=0.3)\\n# only to demonstrate we did OK\\n', 'doc.save(""a-inktest.pdf"")\\n', 'This is the result:\\n', '10.4. How to Use Ink Annotations\\n79\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'This documentation covers all versions up to 1.23.25.\\n', '80\\nChapter 10. Annotations\\n', 'CHAPTER\\n', 'ELEVEN\\n', 'DRAWING AND GRAPHICS\\n', 'PDF files support elementary drawing operations as part of their syntax. This includes basic geometrical objects like\\nlines, curves, circles, rectangles including specifying colors.\\n', 'The syntax for such operations is defined in “A Operator Summary” on page 643 of the Adobe PDF References. Spec-\\nifying these operators for a PDF page happens in its contents objects.\\n', 'PyMuPDF implements a large part of the available features via its Shape class, which is comparable to notions like\\n“canvas” in other packages (e.g. reportlab).\\n', 'A shape is always created as a child of a page, usually with an instruction like shape = page.new_shape(). The\\nclass defines numerous methods that perform drawing operations on the page’s area. For example, last_point =\\nshape.draw_rect(rect) draws a rectangle along the borders of a suitably defined rect = fitz.Rect(...).\\n', 'The returned last_point always is the Point where drawing operation ended (“last point”). Every such elementary\\ndrawing requires a subsequent Shape.finish() to “close” it, but there may be multiple drawings which have one\\ncommon finish() method.\\n', 'In fact, Shape.finish() defines a group of preceding draw operations to form one – potentially rather complex –\\ngraphics object. PyMuPDF provides several predefined graphics in shapes_and_symbols.py which demonstrate how\\nthis works.\\n', 'If you import this script, you can also directly use its graphics as in the following example:\\n', '# -*- coding: utf-8 -*-\\n""""""\\nCreated on Sun Dec\\n9 08:34:06 2018\\n', '@author: Jorj\\n@license: GNU AFFERO GPL V3\\n', 'Create a list of available symbols defined in shapes_and_symbols.py\\n', 'This also demonstrates an example usage: how these symbols could be used\\nas bullet-point symbols in some text.\\n', '""""""\\n', 'import fitz\\nimport shapes_and_symbols as sas\\n', '# list of available symbol functions and their descriptions\\ntlist = [\\n(sas.arrow, ""arrow (easy)""),\\n', '(continues on next page)\\n', '81\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '(sas.caro, ""caro (easy)""),\\n(sas.clover, ""clover (easy)""),\\n(sas.diamond, ""diamond (easy)""),\\n(sas.dontenter, ""do not enter (medium)""),\\n(sas.frowney, ""frowney (medium)""),\\n(sas.hand, ""hand (complex)""),\\n(sas.heart, ""heart (easy)""),\\n(sas.pencil, ""pencil (very complex)""),\\n(sas.smiley, ""smiley (easy)""),\\n]\\n', 'r = fitz.Rect(50, 50, 100, 100)\\n# first rect to contain a symbol\\n', 'd = fitz.Rect(0, r.height + 10, 0, r.height + 10)\\n# displacement to next rect\\n', 'p = (15, -r.height * 0.2)\\n# starting point of explanation text\\n', 'rlist = [r]\\n# rectangle list\\n', 'for i in range(1, len(tlist)):\\n# fill in all the rectangles\\n', 'rlist.append(rlist[i-1] + d)\\n', 'doc = fitz.open()\\n# create empty PDF\\n', 'page = doc.new_page()\\n# create an empty page\\n', 'shape = page.new_shape()\\n# start a Shape (canvas)\\n', 'for i, r in enumerate(rlist):\\ntlist[i][0](shape, rlist[i])\\n# execute symbol creation\\n', 'shape.insert_text(rlist[i].br + p,\\n# insert description text\\n', 'tlist[i][1], fontsize=r.height/1.2)\\n', ""# store everything to the page's /Contents object\\nshape.commit()\\n"", 'import os\\nscriptdir = os.path.dirname(__file__)\\ndoc.save(os.path.join(scriptdir, ""symbol-list.pdf""))\\n# save the PDF\\n', 'This is the script’s outcome:\\n', '82\\nChapter 11. Drawing and Graphics\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '11.1 How to Extract Drawings\\n', '• New in v1.18.0\\n', 'The drawing commands issued by a page can be extracted. Interestingly, this is possible for all supported document\\ntypes – not just PDF: so you can use it for XPS, EPUB and others as well.\\n', 'Page method, Page.get_drawings() accesses draw commands and converts them into a list of Python dictionaries.\\nEach dictionary – called a “path” – represents a separate drawing – it may be simple like a single line, or a complex\\ncombination of lines and curves representing one of the shapes of the previous section.\\n', 'The path dictionary has been designed such that it can easily be used by the Shape class and its methods. Here is an\\nexample for a page with one path, that draws a red-bordered yellow circle inside rectangle Rect(100, 100, 200,\\n200):\\n', "">>> pprint(page.get_drawings())\\n[{'closePath': True,\\n'color': [1.0, 0.0, 0.0],\\n'dashes': '[] 0',\\n'even_odd': False,\\n'fill': [1.0, 1.0, 0.0],\\n'items': [('c',\\n"", ""Point(100.0, 150.0),\\nPoint(100.0, 177.614013671875),\\nPoint(122.38600158691406, 200.0),\\nPoint(150.0, 200.0)),\\n('c',\\n"", '(continues on next page)\\n', '11.1. How to Extract Drawings\\n83\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""Point(150.0, 200.0),\\nPoint(177.61399841308594, 200.0),\\nPoint(200.0, 177.614013671875),\\nPoint(200.0, 150.0)),\\n('c',\\nPoint(200.0, 150.0),\\nPoint(200.0, 122.385986328125),\\nPoint(177.61399841308594, 100.0),\\nPoint(150.0, 100.0)),\\n('c',\\nPoint(150.0, 100.0),\\nPoint(122.38600158691406, 100.0),\\nPoint(100.0, 122.385986328125),\\nPoint(100.0, 150.0))],\\n"", ""'lineCap': (0, 0, 0),\\n'lineJoin': 0,\\n'opacity': 1.0,\\n'rect': Rect(100.0, 100.0, 200.0, 200.0),\\n'width': 1.0}]\\n>>>\\n"", 'Note: You need (at least) 4 Bézier curves (of 3rd order) to draw a circle with acceptable precision. See this Wikipedia\\narticle for some background.\\n', 'The following is a code snippet which extracts the drawings of a page and re-draws them on a new page:\\n', 'import fitz\\ndoc = fitz.open(""some.file"")\\npage = doc[0]\\npaths = page.get_drawings()\\n# extract existing drawings\\n', '# this is a list of ""paths"", which can directly be drawn again using Shape\\n# -------------------------------------------------------------------------\\n#\\n# define some output page with the same dimensions\\noutpdf = fitz.open()\\noutpage = outpdf.new_page(width=page.rect.width, height=page.rect.height)\\nshape = outpage.new_shape()\\n# make a drawing canvas for the output page\\n', '# --------------------------------------\\n# loop through the paths and draw them\\n# --------------------------------------\\nfor path in paths:\\n', '# ------------------------------------\\n# draw each entry of the \\'items\\' list\\n# ------------------------------------\\nfor item in path[""items""]:\\n# these are the draw commands\\n', 'if item[0] == ""l"":\\n# line\\n', 'shape.draw_line(item[1], item[2])\\n', 'elif item[0] == ""re"":\\n# rectangle\\n', 'shape.draw_rect(item[1])\\n', 'elif item[0] == ""qu"":\\n# quad\\n', 'shape.draw_quad(item[1])\\n', '(continues on next page)\\n', '84\\nChapter 11. Drawing and Graphics\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'elif item[0] == ""c"":\\n# curve\\n', 'shape.draw_bezier(item[1], item[2], item[3], item[4])\\n', 'else:\\n', 'raise ValueError(""unhandled drawing"", item)\\n', '# ------------------------------------------------------\\n# all items are drawn, now apply the common properties\\n# to finish the path\\n# ------------------------------------------------------\\nshape.finish(\\nfill=path[""fill""],\\n# fill color\\n', 'color=path[""color""],\\n# line color\\n', 'dashes=path[""dashes""],\\n# line dashing\\n', 'even_odd=path.get(""even_odd"", True),\\n# control color of overlaps\\n', 'closePath=path[""closePath""],\\n# whether to connect last and first point\\n', 'lineJoin=path[""lineJoin""],\\n# how line joins should look like\\n', 'lineCap=max(path[""lineCap""]),\\n# how line ends should look like\\n', 'width=path[""width""],\\n# line width\\n', 'stroke_opacity=path.get(""stroke_opacity"", 1),\\n# same value for both\\n', 'fill_opacity=path.get(""fill_opacity"", 1),\\n# opacity parameters\\n', ')\\n', '# all paths processed - commit the shape to its page\\nshape.commit()\\noutpdf.save(""drawings-page-0.pdf"")\\n', 'As can be seen, there is a high congruence level with the Shape class. With one exception: For technical reasons\\nlineCap is a tuple of 3 numbers here, whereas it is an integer in Shape (and in PDF). So we simply take the maximum\\nvalue of that tuple.\\n', 'Here is a comparison between input and output of an example page, created by the previous script:\\n', 'Note: The reconstruction of graphics, like shown here, is not perfect. The following aspects will not be reproduced\\nas of this version:\\n', '11.1. How to Extract Drawings\\n85\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Page definitions can be complex and include instructions for not showing / hiding certain areas to keep them\\ninvisible. Things like this are ignored by Page.get_drawings() - it will always return all paths.\\n', 'Note: You can use the path list to make your own lists of e.g. all lines or all rectangles on the page and subselect them\\nby criteria, like color or position on the page etc.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '86\\nChapter 11. Drawing and Graphics\\n', 'CHAPTER\\n', 'TWELVE\\n', 'STORIES\\n', 'This document showcases some typical use cases for Stories.\\n', 'As mentioned in the tutorial, stories may be created using up to three input sources: HTML, CSS and Archives – all\\nof which are optional and which, respectively, can be provided programmatically.\\n', 'The following examples will showcase combinations for using these inputs.\\n', 'Note: Many of these recipe’s source code are included as examples in the docs folder.\\n', '12.1 How to Add a Line of Text with Some Formatting\\n', 'Here is the inevitable “Hello World” example. We will show two variants:\\n', '1. Create using existing HTML source1, that may come from anywhere.\\n', '2. Create using the Python API.\\n', 'Variant using an existing HTML source1 – which in this case is defined as a constant in the script:\\n', 'import fitz\\n', 'HTML = """"""\\n<p style=""font-family: sans-serif;color: blue"">Hello World!</p>\\n""""""\\n', 'MEDIABOX = fitz.paper_rect(""letter"")\\n# output page format: Letter\\n', 'WHERE = MEDIABOX + (36, 36, -36, -36)\\n# leave borders of 0.5 inches\\n', 'story = fitz.Story(html=HTML)\\n# create story from HTML\\n', 'writer = fitz.DocumentWriter(""output.pdf"")\\n# create the writer\\n', '(continues on next page)\\n', '1 HTML & CSS support\\n', 'Note: At the time of writing the HTML engine for Stories is fairly basic and supports a subset of CSS2 attributes.\\n', 'Some important CSS support to consider:\\n', '• The only available layout is relative layout.\\n• background is unavailable, use background-color instead.\\n• float is unavailable.\\n', '87\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'more = 1\\n# will indicate end of input once it is set to 0\\n', 'while more:\\n# loop outputting the story\\n', 'device = writer.begin_page(MEDIABOX)\\n# make new page\\n', 'more, _ = story.place(WHERE)\\n# layout into allowed rectangle\\n', 'story.draw(device)\\n# write on page\\n', 'writer.end_page()\\n# finish page\\n', 'writer.close()\\n# close output file\\n', 'Note: The above effect (sans-serif and blue text) could have been achieved by using a separate CSS source like so:\\n', 'import fitz\\n', 'CSS = """"""\\nbody {\\n', 'font-family: sans-serif;\\ncolor: blue;\\n', '}\\n""""""\\n', 'HTML = """"""\\n<p>Hello World!</p>\\n""""""\\n', '# the story would then be created like this:\\nstory = fitz.Story(html=HTML, user_css=CSS)\\n', 'The Python API variant – everything is created programmatically:\\n', 'import fitz\\n', 'MEDIABOX = fitz.paper_rect(""letter"")\\nWHERE = MEDIABOX + (36, 36, -36, -36)\\n', 'story = fitz.Story()\\n# create an empty story\\n', 'body = story.body\\n# access the body of its DOM\\n', 'with body.add_paragraph() as para:\\n# store desired content\\n', 'para.set_font(""sans-serif"").set_color(""blue"").add_text(""Hello World!"")\\n', 'writer = fitz.DocumentWriter(""output.pdf"")\\n', 'more = 1\\n', 'while more:\\ndevice = writer.begin_page(MEDIABOX)\\nmore, _ = story.place(WHERE)\\nstory.draw(device)\\n', '(continues on next page)\\n', '88\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'writer.end_page()\\n', 'writer.close()\\n', 'Both variants will produce the same output PDF.\\n', '12.2 How to use Images\\n', 'Images can be referenced in the provided HTML source, or the reference to a desired image can also be stored via the\\nPython API. In any case, this requires using an Archive, which refers to the place where the image can be found.\\n', 'Note: Images with the binary content embedded in the HTML source are not supported by stories.\\n', 'We extend our “Hello World” example from above and display an image of our planet right after the text. Assuming\\nthe image has the name “world.jpg” and is present in the script’s folder, then this is the modified version of the above\\nPython API variant:\\n', 'import fitz\\n', 'MEDIABOX = fitz.paper_rect(""letter"")\\nWHERE = MEDIABOX + (36, 36, -36, -36)\\n', '# create story, let it look at script folder for resources\\nstory = fitz.Story(archive=""."")\\nbody = story.body\\n# access the body of its DOM\\n', 'with body.add_paragraph() as para:\\n', '# store desired content\\npara.set_font(""sans-serif"").set_color(""blue"").add_text(""Hello World!"")\\n', '# another paragraph for our image:\\nwith body.add_paragraph() as para:\\n', '# store image in another paragraph\\npara.add_image(""world.jpg"")\\n', 'writer = fitz.DocumentWriter(""output.pdf"")\\n', 'more = 1\\n', 'while more:\\ndevice = writer.begin_page(MEDIABOX)\\nmore, _ = story.place(WHERE)\\nstory.draw(device)\\nwriter.end_page()\\n', 'writer.close()\\n', '12.2. How to use Images\\n89\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '12.3 How to Read External HTML and CSS for a Story\\n', 'These cases are fairly straightforward.\\n', 'As a general recommendation, HTML and CSS sources should be read as binary files and decoded before using them\\nin a story. The Python pathlib.Path provides convenient ways to do this:\\n', 'import pathlib\\nimport fitz\\n', 'htmlpath = pathlib.Path(""myhtml.html"")\\ncsspath = pathlib.Path(""mycss.css"")\\n', 'HTML = htmlpath.read_bytes().decode()\\nCSS = csspath.read_bytes().decode()\\n', 'story = fitz.Story(html=HTML, user_css=CSS)\\n', '12.4 How to Output Database Content with Story Templates\\n', 'This script demonstrates how to report SQL database content using an HTML template.\\n', 'The example SQL database contains two tables:\\n', '1. Table “films” contains one row per film with the fields “title”, “director” and (release) “year”.\\n', '2. Table “actors” contains one row per actor and film title (fields (actor) “name” and (film) “title”).\\n', 'The story DOM consists of a template for one film, which reports film data together with a list of casted actors.\\n', 'Files:\\n', '• docs/samples/filmfestival-sql.py\\n', '• docs/samples/filmfestival-sql.db\\n', '""""""\\nThis is a demo script for using PyMuPDF with its ""Story"" feature.\\n', 'The following aspects are being covered here:\\n', '* The script produces a report of films that are stored in an SQL database\\n* The report format is provided as a HTML template\\n', 'The SQL database contains two tables:\\n1. Table ""films"" which has the columns ""title"" (film title, str), ""director""\\n', '(str) and ""year"" (year of release, int).\\n', '2. Table ""actors"" which has the columns ""name"" (actor name, str) and ""title""\\n', '(the film title where the actor had been casted, str).\\n', 'The script reads all content of the ""films"" table. For each film title it\\nreads all rows from table ""actors"" which took part in that film.\\n', '(continues on next page)\\n', '90\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'Comment 1\\n---------\\nTo keep things easy and free from pesky technical detail, the relevant file\\nnames inherit the name of this script:\\n- the database\\'s filename is the script name with "".py"" extension replaced\\n', 'by "".db"".\\n', '- the output PDF similarly has script file name with extension "".pdf"".\\n', 'Comment 2\\n---------\\nThe SQLITE database has been created using https://sqlitebrowser.org/, a free\\nmulti-platform tool to maintain or manipulate SQLITE databases.\\n""""""\\nimport os\\nimport sqlite3\\n', 'import fitz\\n', '# ----------------------------------------------------------------------\\n# HTML template for the film report\\n# There are four placeholders coded as ""id"" attributes.\\n# One ""id"" allows locating the template part itself, the other three\\n# indicate where database text should be inserted.\\n# ----------------------------------------------------------------------\\nfestival_template = (\\n', '""<html><head><title>Just some arbitrary text</title></head>""\\n\\'<body><h1 style=""text-align:center"">Hook Norton Film Festival</h1>\\'\\n""<ol>""\\n\\'<li id=""filmtemplate"">\\'\\n\\'<b id=""filmtitle""></b>\\'\\n""<dl>""\\n\\'<dt>Director<dd id=""director"">\\'\\n\\'<dt>Release Year<dd id=""filmyear"">\\'\\n\\'<dt>Cast<dd id=""cast"">\\'\\n""</dl>""\\n""</li>""\\n""</ol>""\\n""</body></html""\\n', ')\\n', '# -------------------------------------------------------------------\\n# define database access\\n# -------------------------------------------------------------------\\ndbfilename = __file__.replace("".py"", "".db"")\\n# the SQLITE database file name\\n', ""assert os.path.isfile(dbfilename), f'{dbfilename}'\\ndatabase = sqlite3.connect(dbfilename)\\n# open database\\n"", 'cursor_films = database.cursor()\\n# cursor for selecting the films\\n', 'cursor_casts = database.cursor()\\n# cursor for selecting actors per film\\n', '# select statement for the films - let SQL also sort it for us\\nselect_films = """"""SELECT title, director, year FROM films ORDER BY title""""""\\n', '(continues on next page)\\n', '12.4. How to Output Database Content with Story Templates\\n91\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '# select stament for actors, a skeleton: sub-select by film title\\nselect_casts = """"""SELECT name FROM actors WHERE film = ""%s"" ORDER BY name""""""\\n', '# -------------------------------------------------------------------\\n# define the HTML Story and fill it with database data\\n# -------------------------------------------------------------------\\nstory = fitz.Story(festival_template)\\nbody = story.body\\n# access the HTML body detail\\n', 'template = body.find(None, ""id"", ""filmtemplate"")\\n# find the template part\\n', '# read the films from the database and put them all in one Python list\\n# NOTE: instead we might fetch rows one by one (advisable for large volumes)\\ncursor_films.execute(select_films)\\n# execute cursor, and ...\\n', 'films = cursor_films.fetchall()\\n# read out what was found\\n', 'for title, director, year in films:\\n# iterate through the films\\n', 'film = template.clone()\\n# clone template to report each film\\n', 'film.find(None, ""id"", ""filmtitle"").add_text(title)\\n# put title in templ\\n', 'film.find(None, ""id"", ""director"").add_text(director)\\n# put director\\n', 'film.find(None, ""id"", ""filmyear"").add_text(str(year))\\n# put year\\n', '# the actors reside in their own table - find the ones for this film title\\ncursor_casts.execute(select_casts % title)\\n# execute cursor\\n', 'casts = cursor_casts.fetchall()\\n# read actors for the film\\n', '# each actor name appears in its own tuple, so extract it from there\\nfilm.find(None, ""id"", ""cast"").add_text(""\\\\n"".join([c[0] for c in casts]))\\nbody.append_child(film)\\n', 'template.remove()\\n# remove the template\\n', '# -------------------------------------------------------------------\\n# generate the PDF\\n# -------------------------------------------------------------------\\nwriter = fitz.DocumentWriter(__file__.replace("".py"", "".pdf""), ""compress"")\\nmediabox = fitz.paper_rect(""a4"")\\n# use pages in ISO-A4 format\\n', 'where = mediabox + (72, 36, -36, -72)\\n# leave page borders\\n', 'more = 1\\n# end of output indicator\\n', 'while more:\\ndev = writer.begin_page(mediabox)\\n# make a new page\\n', 'more, filled = story.place(where)\\n# arrange content for this page\\n', 'story.draw(dev, None)\\n# write content to page\\n', 'writer.end_page()\\n# finish the page\\n', 'writer.close()\\n# close the PDF\\n', '92\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '12.5 How to Integrate with Existing PDFs\\n', 'Because a DocumentWriter can only write to a new file, stories cannot be placed on existing pages. This script demon-\\nstrates a circumvention of this restriction.\\n', 'The basic idea is letting DocumentWriter output to a PDF in memory. Once the story has finished, we re-open this\\nmemory PDF and put its pages to desired locations on existing pages via method Page.show_pdf_page().\\n', 'Files:\\n', '• docs/samples/showpdf-page.py\\n', '""""""\\nDemo of Story class in PyMuPDF\\n-------------------------------\\n', 'This script demonstrates how to the results of a fitz.Story output can be\\nplaced in a rectangle of an existing (!) PDF page.\\n', '""""""\\nimport io\\nimport os\\n', 'import fitz\\n', 'def make_pdf(fileptr, text, rect, font=""sans-serif"", archive=None):\\n', '""""""Make a memory DocumentWriter from HTML text and a rect.\\n', 'Args:\\n', 'fileptr: a Python file object. For example an io.BytesIO().\\ntext: the text to output (HTML format)\\nrect: the target rectangle. Will use its width / height as mediabox\\nfont: (str) font family name, default sans-serif\\narchive: fitz.Archive parameter. To be used if e.g. images or special\\n', 'fonts should be used.\\n', 'Returns:\\n', 'The matrix to convert page rectangles of the created PDF back\\nto rectangle coordinates in the parameter ""rect"".\\nNormal use will expect to fit all the text in the given rect.\\nHowever, if an overflow occurs, this function will output multiple\\npages, and the caller may decide to either accept or retry with\\nchanged parameters.\\n', '""""""\\n# use input rectangle as the page dimension\\nmediabox = fitz.Rect(0, 0, rect.width, rect.height)\\n# this matrix converts mediabox back to input rect\\nmatrix = mediabox.torect(rect)\\n', 'story = fitz.Story(text, archive=archive)\\nbody = story.body\\nbody.set_properties(font=font)\\nwriter = fitz.DocumentWriter(fileptr)\\n', '(continues on next page)\\n', '12.5. How to Integrate with Existing PDFs\\n93\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'while True:\\ndevice = writer.begin_page(mediabox)\\nmore, _ = story.place(mediabox)\\nstory.draw(device)\\nwriter.end_page()\\nif not more:\\n', 'break\\n', 'writer.close()\\nreturn matrix\\n', '# -------------------------------------------------------------\\n# We want to put this in a given rectangle of an existing page\\n# -------------------------------------------------------------\\nHTML = """"""\\n<p>PyMuPDF is a great package! And it still improves significantly from one version to␣\\n', '˓→the next one!</p>\\n<p>It is a Python binding for <b>MuPDF</b>, a lightweight PDF, XPS, and E-book viewer,␣\\n', '˓→renderer, and toolkit.<br> Both are maintained and developed by Artifex Software, Inc.\\n', '˓→</p>\\n<p>Via MuPDF it can access files in PDF, XPS, OpenXPS, CBZ, EPUB, MOBI and FB2 (e-books)␣\\n', '˓→formats,<br> and it is known for its top\\n<b><i>performance</i></b> and <b><i>rendering quality.</p>""""""\\n', '# Make a PDF page for demo purposes\\nroot = os.path.abspath( f""{__file__}/.."")\\ndoc = fitz.open(f""{root}/mupdf-title.pdf"")\\npage = doc[0]\\n', 'WHERE = fitz.Rect(50, 100, 250, 500)\\n# target rectangle on existing page\\n', 'fileptr = io.BytesIO()\\n# let DocumentWriter use this as its file\\n', '# -------------------------------------------------------------------\\n# call DocumentWriter and Story to fill our rectangle\\nmatrix = make_pdf(fileptr, HTML, WHERE)\\n# -------------------------------------------------------------------\\nsrc = fitz.open(""pdf"", fileptr)\\n# open DocumentWriter output PDF\\n', 'if src.page_count > 1:\\n# target rect was too small\\n', 'raise ValueError(""target WHERE too small"")\\n', '# its page 0 contains our result\\npage.show_pdf_page(WHERE, src, 0)\\n', 'doc.ez_save(f""{root}/mupdf-title-after.pdf"")\\n', '94\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '12.6 How to Make Multi-Columned Layouts and Access Fonts from\\nPackage pymupdf-fonts\\n', 'This script outputs an article (taken from Wikipedia) that contains text and multiple images and uses a 2-column page\\nlayout.\\n', 'In addition, two “Ubuntu” font families from package pymupdf-fonts are used instead of defaulting to Base-14 fonts.\\n', 'Yet another feature used here is that all data – the images and the article HTML – are jointly stored in a ZIP file.\\n', 'Files:\\n', '• docs/samples/quickfox.py\\n', '• docs/samples/quickfox.zip\\n', '""""""\\nThis is a demo script using PyMuPDF\\'s Story class to output text as a PDF with\\na two-column page layout.\\n', 'The script demonstrates the following features:\\n* How to fill columns or table cells of complex page layouts\\n* How to embed images\\n* How to modify existing, given HTML sources for output (text indent, font size)\\n* How to use fonts defined in package ""pymupdf-fonts""\\n* How to use ZIP files as Archive\\n', '--------------\\nThe example is taken from the somewhat modified Wikipedia article\\nhttps://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.\\n--------------\\n""""""\\n', 'import io\\nimport os\\nimport zipfile\\nimport fitz\\n', 'thisdir = os.path.dirname(os.path.abspath(__file__))\\nmyzip = zipfile.ZipFile(os.path.join(thisdir, ""quickfox.zip""))\\narch = fitz.Archive(myzip)\\n', 'if fitz.fitz_fontdescriptors:\\n', '# we want to use the Ubuntu fonts for sans-serif and for monospace\\nCSS = fitz.css_for_pymupdf_font(""ubuntu"", archive=arch, name=""sans-serif"")\\nCSS = fitz.css_for_pymupdf_font(""ubuntm"", CSS=CSS, archive=arch, name=""monospace"")\\n', 'else:\\n', '# No pymupdf-fonts available.\\nCSS=""""\\n', 'docname = __file__.replace("".py"", "".pdf"")\\n# output PDF file name\\n', '(continues on next page)\\n', '12.6. How to Make Multi-Columned Layouts and Access Fonts from Package pymupdf-fonts\\n95\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'HTML = myzip.read(""quickfox.html"").decode()\\n', '# make the Story object\\nstory = fitz.Story(HTML, user_css=CSS, archive=arch)\\n', '# --------------------------------------------------------------\\n# modify the DOM somewhat\\n# --------------------------------------------------------------\\nbody = story.body\\n# access HTML body\\n', 'body.set_properties(font=""sans-serif"")\\n# and give it our font globally\\n', '# modify certain nodes\\npara = body.find(""p"", None, None)\\n# find relevant nodes (here: paragraphs)\\n', 'while para != None:\\npara.set_properties(\\n# method MUST be used for existing nodes\\n', 'indent=15,\\nfontsize=13,\\n)\\npara = para.find_next(""p"", None, None)\\n', '# choose PDF page size\\nMEDIABOX = fitz.paper_rect(""letter"")\\n# text appears only within this subrectangle\\nWHERE = MEDIABOX + (36, 36, -36, -36)\\n', '# --------------------------------------------------------------\\n# define page layout within the WHERE rectangle\\n# --------------------------------------------------------------\\nCOLS = 2\\n# layout: 2 cols 1 row\\n', 'ROWS = 1\\nTABLE = fitz.make_table(WHERE, cols=COLS, rows=ROWS)\\n# fill the cells of each page in this sequence:\\nCELLS = [TABLE[i][j] for i in range(ROWS) for j in range(COLS)]\\n', 'fileobject = io.BytesIO()\\n# let DocumentWriter write to memory\\n', 'writer = fitz.DocumentWriter(fileobject)\\n# define the writer\\n', 'more = 1\\nwhile more:\\n# loop until all input text has been written out\\n', 'dev = writer.begin_page(MEDIABOX)\\n# prepare a new output page\\n', 'for cell in CELLS:\\n', '# content may be complete after any cell, ...\\nif more:\\n# so check this status first\\n', 'more, _ = story.place(cell)\\nstory.draw(dev)\\nwriter.end_page()\\n# finish the PDF page\\n', 'writer.close()\\n# close DocumentWriter output\\n', '# for housekeeping work re-open from memory\\ndoc = fitz.open(""pdf"", fileobject)\\ndoc.ez_save(docname)\\n', '96\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '12.7 How to Make a Layout which Wraps Around a Predefined “no go\\narea” Layout\\n', 'This is a demo script using PyMuPDF’s Story class to output text as a PDF with a two-column page layout.\\n', 'The script demonstrates the following features:\\n', '• Layout text around images of an existing (“target”) PDF.\\n', '• Based on a few global parameters, areas on each page are identified, that can be used to receive text layouted by\\na Story.\\n', '• These global parameters are not stored anywhere in the target PDF and must therefore be provided in some way:\\n', '– The width of the border(s) on each page.\\n', '– The fontsize to use for text. This value determines whether the provided text will fit in the empty spaces\\nof the (fixed) pages of target PDF. It cannot be predicted in any way. The script ends with an exception if\\ntarget PDF has not enough pages, and prints a warning message if not all pages receive at least some text.\\nIn both cases, the FONTSIZE value can be changed (a float value).\\n', '– Use of a 2-column page layout for the text.\\n', '• The layout creates a temporary (memory) PDF. Its produced page content (the text) is used to overlay the corre-\\nsponding target page. If text requires more pages than are available in target PDF, an exception is raised. If not\\nall target pages receive at least some text, a warning is printed.\\n', '• The script reads “image-no-go.pdf” in its own folder. This is the “target” PDF. It contains 2 pages with each\\n2 images (from the original article), which are positioned at places that create a broad overall test coverage.\\nOtherwise the pages are empty.\\n', '• The script produces “quickfox-image-no-go.pdf” which contains the original pages and image positions, but with\\nthe original article text laid out around them.\\n', 'Files:\\n', '• docs/samples/quickfox-image-no-go.py\\n', '• docs/samples/quickfox-image-no-go.pdf\\n', '• docs/samples/quickfox.zip\\n', '""""""\\nThis is a demo script using PyMuPDF\\'s Story class to output text as a PDF with\\na two-column page layout.\\n', 'The script demonstrates the following features:\\n* Layout text around images of an existing (""target"") PDF.\\n* Based on a few global parameters, areas on each page are identified, that\\n', 'can be used to receive text layouted by a Story.\\n', '* These global parameters are not stored anywhere in the target PDF and\\n', 'must therefore be provided in some way.\\n- The width of the border(s) on each page.\\n', '(continues on next page)\\n', '12.7. How to Make a Layout which Wraps Around a Predefined “no go area” Layout\\n97\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '- The fontsize to use for text. This value determines whether the provided\\n', 'text will fit in the empty spaces of the (fixed) pages of target PDF. It\\ncannot be predicted in any way. The script ends with an exception if\\ntarget PDF has not enough pages, and prints a warning message if not all\\npages receive at least some text. In both cases, the FONTSIZE value\\ncan be changed (a float value).\\n', '- Use of a 2-column page layout for the text.\\n', '* The layout creates a temporary (memory) PDF. Its produced page content\\n', '(the text) is used to overlay the corresponding target page. If text\\nrequires more pages than are available in target PDF, an exception is raised.\\nIf not all target pages receive at least some text, a warning is printed.\\n', '* The script reads ""image-no-go.pdf"" in its own folder. This is the ""target"" PDF.\\n', 'It contains 2 pages with each 2 images (from the original article), which are\\npositioned at places that create a broad overall test coverage. Otherwise the\\npages are empty.\\n', '* The script produces ""quickfox-image-no-go.pdf"" which contains the original pages\\n', 'and image positions, but with the original article text laid out around them.\\n', 'Note:\\n--------------\\nThis script version uses just image positions to derive ""No-Go areas"" for\\nlayouting the text. Other PDF objects types are detectable by PyMuPDF and may\\nbe taken instead or in addition, without influencing the layouting.\\nThe following are candidates for other such ""No-Go areas"". Each can be detected\\nand located by PyMuPDF:\\n* Annotations\\n* Drawings\\n* Existing text\\n', '--------------\\nThe text and images are taken from the somewhat modified Wikipedia article\\nhttps://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.\\n--------------\\n""""""\\n', 'import io\\nimport os\\nimport zipfile\\nimport fitz\\n', 'thisdir = os.path.dirname(os.path.abspath(__file__))\\nmyzip = zipfile.ZipFile(os.path.join(thisdir, ""quickfox.zip""))\\n', 'docname = os.path.join(thisdir, ""image-no-go.pdf"")\\n# ""no go"" input PDF file name\\n', 'outname = os.path.join(thisdir, ""quickfox-image-no-go.pdf"")\\n# output PDF file name\\n', 'BORDER = 36\\n# global parameter\\n', 'FONTSIZE = 12.5\\n# global parameter\\n', 'COLS = 2\\n# number of text columns, global parameter\\n', 'def analyze_page(page):\\n', '(continues on next page)\\n', '98\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '""""""Compute MediaBox and rectangles on page that are free to receive text.\\n', 'Notes:\\n', 'Assume a BORDER around the page, make 2 columns of the resulting\\nsub-rectangle and extract the rectangles of all images on page.\\nFor demo purposes, the image rectangles are taken as ""NO-GO areas""\\non the page when writing text with the Story.\\nThe function returns free areas for each of the columns.\\n', 'Returns:\\n', '(page.number, mediabox, CELLS), where CELLS is a list of free cells.\\n', '""""""\\nprect = page.rect\\n# page rectangle - will be our MEDIABOX later\\n', 'where = prect + (BORDER, BORDER, -BORDER, -BORDER)\\nTABLE = fitz.make_table(where, rows=1, cols=COLS)\\n', '# extract rectangles covered by images on this page\\nIMG_RECTS = sorted(\\n# image rects on page (sort top-left to bottom-right)\\n', '[fitz.Rect(item[""bbox""]) for item in page.get_image_info()],\\nkey=lambda b: (b.y1, b.x0),\\n)\\n', 'def free_cells(column):\\n', '""""""Return free areas in this column.""""""\\nfree_stripes = []\\n# y-value pairs wrapping a free area stripe\\n', '# intersecting images: block complete intersecting column stripe\\ncol_imgs = [(b.y0, b.y1) for b in IMG_RECTS if abs(b & column) > 0]\\ns_y0 = column.y0\\n# top y-value of column\\n', 'for y0, y1 in col_imgs:\\n# an image stripe\\n', 'if y0 > s_y0 + FONTSIZE:\\n# image starts below last free btm value\\n', 'free_stripes.append((s_y0, y0))\\n# store as free stripe\\n', 's_y0 = y1\\n# start of next free stripe\\n', 'if s_y0 + FONTSIZE < column.y1:\\n# enough room to column bottom\\n', 'free_stripes.append((s_y0, column.y1))\\n', 'if free_stripes == []:\\n# covers ""no image in this column""\\n', 'free_stripes.append((column.y0, column.y1))\\n', '# make available cells of this column\\nCELLS = [fitz.Rect(column.x0, y0, column.x1, y1) for (y0, y1) in free_stripes]\\nreturn CELLS\\n', '# collection of available Story rectangles on page\\nCELLS = []\\nfor i in range(COLS):\\nCELLS.extend(free_cells(TABLE[0][i]))\\n', 'return page.number, prect, CELLS\\n', 'HTML = myzip.read(""quickfox.html"").decode()\\n', '(continues on next page)\\n', '12.7. How to Make a Layout which Wraps Around a Predefined “no go area” Layout\\n99\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '# --------------------------------------------------------------\\n# Make the Story object\\n# --------------------------------------------------------------\\nstory = fitz.Story(HTML)\\n', '# modify the DOM somewhat\\nbody = story.body\\n# access HTML body\\n', 'body.set_properties(font=""sans-serif"")\\n# and give it our font globally\\n', '# modify certain nodes\\npara = body.find(""p"", None, None)\\n# find relevant nodes (here: paragraphs)\\n', 'while para != None:\\npara.set_properties(\\n# method MUST be used for existing nodes\\n', 'indent=15,\\nfontsize=FONTSIZE,\\n)\\npara = para.find_next(""p"", None, None)\\n', '# we remove all image references, because the target PDF already has them\\nimg = body.find(""img"", None, None)\\nwhile img != None:\\nnext_img = img.find_next(""img"", None, None)\\nimg.remove()\\nimg = next_img\\n', 'page_info = {}\\n# contains MEDIABOX and free CELLS per page\\n', 'doc = fitz.open(docname)\\nfor page in doc:\\npno, mediabox, cells = analyze_page(page)\\npage_info[pno] = (mediabox, cells)\\ndoc.close()\\n# close target PDF for now - re-open later\\n', 'fileobject = io.BytesIO()\\n# let DocumentWriter write to memory\\n', 'writer = fitz.DocumentWriter(fileobject)\\n# define output writer\\n', 'more = 1\\n# stop if this ever becomes zero\\n', 'pno = 0\\n# count output pages\\n', 'while more:\\n# loop until all HTML text has been written\\n', 'try:\\nMEDIABOX, CELLS = page_info[pno]\\n', 'except KeyError:\\n# too much text space required: reduce fontsize?\\n', 'raise ValueError(""text does not fit on target PDF"")\\ndev = writer.begin_page(MEDIABOX)\\n# prepare a new output page\\n', 'for cell in CELLS:\\n# iterate over free cells on this page\\n', 'if not more:\\n# need to check this for every cell\\n', 'continue\\n', 'more, _ = story.place(cell)\\nstory.draw(dev)\\nwriter.end_page()\\n# finish the PDF page\\n', 'pno += 1\\n', '(continues on next page)\\n', '100\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'writer.close()\\n# close DocumentWriter output\\n', '# Re-open writer output, read its pages and overlay target pages with them.\\n# The generated pages have same dimension as their targets.\\nsrc = fitz.open(""pdf"", fileobject)\\ndoc = fitz.open(doc.name)\\nfor page in doc:\\n# overlay every target page with the prepared text\\n', 'if page.number >= src.page_count:\\n', 'print(f""Text only uses {src.page_count} target pages!"")\\ncontinue\\n# story did not need all target pages?\\n', '# overlay target page\\npage.show_pdf_page(page.rect, src, page.number)\\n', '# DEBUG start --- draw the text rectangles\\n# mb, cells = page_info[page.number]\\n# for cell in cells:\\n#\\npage.draw_rect(cell, color=(1, 0, 0))\\n', '# DEBUG stop ---\\n', 'doc.ez_save(outname)\\n', '12.8 How to Output an HTML Table\\n', 'Outputting HTML tables is supported as follows:\\n', '• Flat table layouts are supported (“rows x columns”), no support of the “colspan” / “rowspan” attributes.\\n', '• Table header tag th supports attribute “scope” with values “row” or “col”. Applicable text will be bold by default.\\n', '• Column widths are computed automatically based on column content. They cannot be directly set.\\n', '• Table cells may contain images which will be considered in the column width calculation magic.\\n', '• Row heights are computed automatically based on row content - leading to multi-line rows where needed.\\n', '• The potentially multiple lines of a table row will always be kept together on one page (respectively “where”\\nrectangle) and not be splitted.\\n', '• Table header rows are only shown on the first page / “where” rectangle.\\n', '• The “style” attribute is ignored when given directly in HTML table elements. Styling for a table and its elements\\nmust happen separately, in CSS source or within the style tag.\\n', '• Styling for tr elements is not supported and ignored. Therefore, a table-wide grid or alternating row background\\ncolors are not supported. One of the following example scripts however shows an easy way to deal with this\\nlimitation.\\n', 'Files:\\n', '• docs/samples/table01.py This script reflects basic features.\\n', '12.8. How to Output an HTML Table\\n101\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '""""""\\nDemo script for basic HTML table support in Story objects\\n', ""Outputs a table with three columns that fits on one Letter page.\\nThe content of each row is filled via the Story's template mechanism.\\nColumn widths and row heights are automatically computed by MuPDF.\\nSome styling via a CSS source is also demonstrated:\\n"", ""- The table header row has a gray background\\n- Each cell shows a border at its top\\n- The Story's body uses the sans-serif font family\\n- The text of one of the columns is set to blue\\n"", 'Dependencies\\n-------------\\nPyMuPDF v1.22.0 or later\\n""""""\\nimport fitz\\n', 'table_text = (\\n# the content of each table row\\n', '(\\n', '""Length"",\\n""integer"",\\n""""""(Required) The number of bytes from the beginning of the line following the␣\\n', '˓→keyword stream to the last byte just before the keyword endstream. (There may be an␣\\n', '˓→additional EOL marker, preceding endstream, that is not included in the count and is␣\\n', '˓→not logically part of the stream data.) See “Stream Extent,” above, for further␣\\n', '˓→discussion."""""",\\n),\\n(\\n', '""Filter"",\\n""name or array"",\\n""""""(Optional) The name of a filter to be applied in processing the stream data␣\\n', '˓→found between the keywords stream and endstream, or an array of such names. Multiple␣\\n', '˓→filters should be specified in the order in which they are to be applied."""""",\\n),\\n(\\n', '""FFilter"",\\n""name or array"",\\n""""""(Optional; PDF 1.2) The name of a filter to be applied in processing the data␣\\n', ""˓→found in the stream's external file, or an array of such names. The same rules apply as␣\\n"", '˓→for Filter."""""",\\n),\\n(\\n', '""FDecodeParms"",\\n""dictionary or array"",\\n""""""(Optional; PDF 1.2) A parameter dictionary, or an array of such dictionaries,␣\\n', '˓→used by the filters specified by FFilter. The same rules apply as for DecodeParms."""""",\\n),\\n(\\n', '""DecodeParms"",\\n""dictionary or array"",\\n""""""(Optional) A parameter dictionary or an array of such dictionaries, used by␣\\n', '(continues on next page)\\n', '102\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '˓→the filters specified by Filter. If there is only one filter and that filter has␣\\n', ""˓→parameters, DecodeParms must be set to the filter's parameter dictionary unless all the␣\\n"", ""˓→filter's parameters have their default values, in which case the DecodeParms entry may␣\\n"", '˓→be omitted. If there are multiple filters and any of the filters has parameters set to␣\\n', '˓→nondefault values, DecodeParms must be an array with one entry for each filter: either␣\\n', '˓→the parameter dictionary for that filter, or the null object if that filter has no␣\\n', '˓→parameters (or if all of its parameters have their default values). If none of the␣\\n', '˓→filters have parameters, or if all their parameters have default values, the␣\\n', '˓→DecodeParms entry may be omitted. (See implementation note 7 in Appendix H.)"""""",\\n),\\n(\\n', '""DL"",\\n""integer"",\\n""""""(Optional; PDF 1.5) A non-negative integer representing the number of bytes␣\\n', '˓→in the decoded (defiltered) stream. It can be used to determine, for example, whether␣\\n', '˓→enough disk space is available to write a stream to a file.\\\\nThis value should be␣\\n', '˓→considered a hint only; for some stream filters, it may not be possible to determine␣\\n', '˓→this value precisely."""""",\\n),\\n(\\n', '""F"",\\n""file specification"",\\n""""""(Optional; PDF 1.2) The file containing the stream data. If this entry is␣\\n', '˓→present, the bytes between stream and endstream are ignored, the filters are specified␣\\n', '˓→by FFilter rather than Filter, and the filter parameters are specified by FDecodeParms␣\\n', '˓→rather than DecodeParms. However, the Length entry should still specify the number of␣\\n', '˓→those bytes. (Usually, there are no bytes and Length is 0.) (See implementation note␣\\n', '˓→46 in Appendix H.)"""""",\\n),\\n)\\n', '# Only a minimal HTML source is required to provide the Story\\'s working\\nHTML = """"""\\n<html>\\n<body><h2>TABLE 3.4 Entries common to all stream dictionaries</h2>\\n<table>\\n', '<tr>\\n', '<th>KEY</th><th>TYPE</th><th>VALUE</th>\\n', '</tr>\\n<tr id=""row"">\\n', '<td id=""col0""></td><td id=""col1""></td><td id=""col2""></td>\\n', '</tr>\\n', '""""""\\n', '""""""\\n---------------------------------------------------------------------\\nJust for demo purposes, set:\\n- header cell background to gray\\n- text color in col1 to blue\\n- a border line at the top of all table cells\\n- all text to the sans-serif font\\n---------------------------------------------------------------------\\n', '(continues on next page)\\n', '12.8. How to Output an HTML Table\\n103\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '""""""\\nCSS = """"""th {\\n', 'background-color: #aaa;\\n', '}\\n', 'td[id=""col1""] {\\n', 'color: blue;\\n', '}\\n', 'td, tr {\\n', 'border: 1px solid black;\\nborder-right-width: 0px;\\nborder-left-width: 0px;\\nborder-bottom-width: 0px;\\n', '}\\nbody {\\n', 'font-family: sans-serif;\\n', '}\\n""""""\\n', 'story = fitz.Story(HTML, user_css=CSS)\\n# define the Story\\n', 'body = story.body\\n# access the HTML <body> of it\\n', 'template = body.find(None, ""id"", ""row"")\\n# find the template with name ""row""\\n', 'parent = template.parent\\n# access its parent i.e., the <table>\\n', 'for col0, col1, col2 in table_text:\\nrow = template.clone()\\n# make a clone of the row template\\n', '# add text to each cell in the duplicated row\\nrow.find(None, ""id"", ""col0"").add_text(col0)\\nrow.find(None, ""id"", ""col1"").add_text(col1)\\nrow.find(None, ""id"", ""col2"").add_text(col2)\\nparent.append_child(row)\\n# add new row to <table>\\n', 'template.remove()\\n# remove the template\\n', '# Story is ready - output it via a writer\\nwriter = fitz.DocumentWriter(__file__.replace("".py"", "".pdf""), ""compress"")\\nmediabox = fitz.paper_rect(""letter"")\\n# size of one output page\\n', 'where = mediabox + (36, 36, -36, -36)\\n# use this sub-area for the content\\n', 'more = True\\n# detects end of output\\n', 'while more:\\ndev = writer.begin_page(mediabox)\\n# start a page, returning a device\\n', 'more, filled = story.place(where)\\n# compute content fitting into ""where""\\n', 'story.draw(dev)\\n# output it to the page\\n', 'writer.end_page()\\n# finalize the page\\n', 'writer.close()\\n# close the output\\n', '• docs/samples/national-capitals.py Advanced script extending table output options using simple addi-\\ntional code:\\n', '– Multi-page output simulating repeating header rows\\n', '104\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Alternating table row background colors\\n', '– Table rows and columns delimited by gridlines\\n', '– Table rows dynamically generated / filled with data from an SQL database\\n', '""""""\\nDemo script using (Py-) MuPDF ""Story"" feature.\\n', 'The following features are implemented:\\n', '* Use of Story ""template"" feature to provide row content\\n* Use database access (SQLITE) to fetch row content\\n* Use ElementPosition feature to locate cell positions on page\\n* Simulate feature ""Table Header Repeat""\\n* Simulate feature ""Cell Grid Lines""\\n', '""""""\\nimport io\\nimport sqlite3\\nimport sys\\n', 'import fitz\\n', '""""""\\nTable data. Used to populate a temporary SQL database, which will be processed by the␣\\n', '˓→script.\\nIts only purpose is to avoid carrying around a separate database file.\\n""""""\\ntable_data = """"""China;Beijing;21542000;1.5%;2018\\nJapan;Tokyo;13921000;11.2%;2019\\nDR Congo;Kinshasa;12691000;13.2%;2017\\nRussia;Moscow;12655050;8.7%;2021\\nIndonesia;Jakarta;10562088;3.9%;2020\\nEgypt;Cairo;10107125;9.3%;2022\\nSouth Korea;Seoul;9508451;18.3%;2022\\nMexico;Mexico City;9209944;7.3%;2020\\nUnited Kingdom;London;9002488;13.4%;2020\\nBangladesh;Dhaka;8906039;5.3%;2011\\nPeru;Lima;8852000;26.3%;2012\\nIran;Tehran;8693706;9.9%;2016\\nThailand;Bangkok;8305218;11.6%;2010\\nVietnam;Hanoi;8053663;8.3%;2019\\nIraq;Baghdad;7682136;17.6%;2021\\nSaudi Arabia;Riyadh;7676654;21.4%;2018\\nHong Kong;Hong Kong;7291600;100%;2022\\nColombia;Bogotá;7181469;13.9%;2011\\nChile;Santiago;6310000;32.4%;2012\\nTurkey;Ankara;5747325;6.8%;2021\\nSingapore;Singapore;5453600;91.8%;2021\\nAfghanistan;Kabul;4601789;11.5%;2021\\nKenya;Nairobi;4397073;8.3%;2019\\nJordan;Amman;4061150;36.4%;2021\\n', '(continues on next page)\\n', '12.8. How to Output an HTML Table\\n105\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'Algeria;Algiers;3915811;8.9%;2011\\nGermany;Berlin;3677472;4.4%;2021\\nSpain;Madrid;3305408;7.0%;2021\\nEthiopia;Addis Ababa;3040740;2.5%;2012\\nKuwait;Kuwait City;2989000;70.3%;2018\\nGuatemala;Guatemala City;2934841;16.7%;2020\\nSouth Africa;Pretoria;2921488;4.9%;2011\\nUkraine;Kyiv;2920873;6.7%;2021\\nArgentina;Buenos Aires;2891082;6.4%;2010\\nNorth Korea;Pyongyang;2870000;11.1%;2016\\nUzbekistan;Tashkent;2860600;8.4%;2022\\nItaly;Rome;2761632;4.7%;2022\\nEcuador;Quito;2800388;15.7%;2020\\nCameroon;Yaoundé;2765568;10.2%;2015\\nZambia;Lusaka;2731696;14.0%;2020\\nSudan;Khartoum;2682431;5.9%;2012\\nBrazil;Brasília;2648532;1.2%;2012\\nTaiwan;Taipei (de facto);2608332;10.9%;2020\\nYemen;Sanaa;2575347;7.8%;2012\\nAngola;Luanda;2571861;7.5%;2020\\nBurkina Faso;Ouagadougou;2453496;11.1%;2019\\nGhana;Accra;2388000;7.3%;2017\\nSomalia;Mogadishu;2388000;14.0%;2021\\nAzerbaijan;Baku;2303100;22.3%;2022\\nCambodia;Phnom Penh;2281951;13.8%;2019\\nVenezuela;Caracas;2245744;8.0%;2016\\nFrance;Paris;2139907;3.3%;2022\\nCuba;Havana;2132183;18.9%;2020\\nZimbabwe;Harare;2123132;13.3%;2012\\nSyria;Damascus;2079000;9.7%;2019\\nBelarus;Minsk;1996553;20.8%;2022\\nAustria;Vienna;1962779;22.0%;2022\\nPoland;Warsaw;1863056;4.9%;2021\\nPhilippines;Manila;1846513;1.6%;2020\\nMali;Bamako;1809106;8.3%;2009\\nMalaysia;Kuala Lumpur;1782500;5.3%;2019\\nRomania;Bucharest;1716983;8.9%;2021\\nHungary;Budapest;1706851;17.6%;2022\\nCongo;Brazzaville;1696392;29.1%;2015\\nSerbia;Belgrade;1688667;23.1%;2021\\nUganda;Kampala;1680600;3.7%;2019\\nGuinea;Conakry;1660973;12.3%;2014\\nMongolia;Ulaanbaatar;1466125;43.8%;2020\\nHonduras;Tegucigalpa;1444085;14.0%;2021\\nSenegal;Dakar;1438725;8.5%;2021\\nNiger;Niamey;1334984;5.3%;2020\\nUruguay;Montevideo;1319108;38.5%;2011\\nBulgaria;Sofia;1307439;19.0%;2021\\nOman;Muscat;1294101;28.6%;2021\\nCzech Republic;Prague;1275406;12.1%;2022\\nMadagascar;Antananarivo;1275207;4.4%;2018\\nKazakhstan;Astana;1239900;6.5%;2022\\n', '(continues on next page)\\n', '106\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""Nigeria;Abuja;1235880;0.6%;2011\\nGeorgia;Tbilisi;1201769;32.0%;2022\\nMauritania;Nouakchott;1195600;25.9%;2019\\nQatar;Doha;1186023;44.1%;2020\\nLibya;Tripoli;1170000;17.4%;2019\\nMyanmar;Naypyidaw;1160242;2.2%;2014\\nRwanda;Kigali;1132686;8.4%;2012\\nMozambique;Maputo;1124988;3.5%;2020\\nDominican Republic;Santo Domingo;1111838;10.0%;2010\\nArmenia;Yerevan;1096100;39.3%;2021\\nKyrgyzstan;Bishkek;1074075;16.5%;2021\\nSierra Leone;Freetown;1055964;12.5%;2015\\nNicaragua;Managua;1055247;15.4%;2020\\nCanada;Ottawa;1017449;2.7%;2021\\nPakistan;Islamabad;1014825;0.4%;2017\\nLiberia;Monrovia;1010970;19.5%;2008\\nUnited Arab Emirates;Abu Dhabi;1010092;10.8%;2020\\nMalawi;Lilongwe;989318;5.0%;2018\\nHaiti;Port-au-Prince;987310;8.6%;2015\\nSweden;Stockholm;978770;9.4%;2021\\nEritrea;Asmara;963000;26.6%;2020\\nIsrael;Jerusalem;936425;10.5%;2019\\nLaos;Vientiane;927724;12.5%;2019\\nChad;N'Djamena;916000;5.3%;2009\\nNetherlands;Amsterdam;905234;5.2%;2022\\nCentral African Republic;Bangui;889231;16.3%;2020\\nPanama;Panama City;880691;20.2%;2013\\nTajikistan;Dushanbe;863400;8.9%;2020\\nNepal;Kathmandu;845767;2.8%;2021\\nTogo;Lomé;837437;9.7%;2010\\nTurkmenistan;Ashgabat;791000;12.5%;2017\\nMoldova;Chişinău;779300;25.5%;2019\\nCroatia;Zagreb;769944;19.0%;2021\\nGabon;Libreville;703904;30.1%;2013\\nNorway;Oslo;697010;12.9%;2021\\nMacau;Macau;671900;97.9%;2022\\nUnited States;Washington D.C.;670050;0.2%;2021\\nJamaica;Kingston;662491;23.4%;2019\\nFinland;Helsinki;658864;11.9%;2021\\nTunisia;Tunis;638845;5.2%;2014\\nDenmark;Copenhagen;638117;10.9%;2021\\nGreece;Athens;637798;6.1%;2021\\nLatvia;Riga;605802;32.3%;2021\\nDjibouti;Djibouti (city);604013;54.6%;2012\\nIreland;Dublin;588233;11.8%;2022\\nMorocco;Rabat;577827;1.6%;2014\\nLithuania;Vilnius;576195;20.7%;2022\\nEl Salvador;San Salvador;570459;9.0%;2019\\nAlbania;Tirana;557422;19.5%;2011\\nNorth Macedonia;Skopje;544086;25.9%;2015\\nSouth Sudan;Juba;525953;4.9%;2017\\nParaguay;Asunción;521559;7.8%;2020\\n"", '(continues on next page)\\n', '12.8. How to Output an HTML Table\\n107\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'Portugal;Lisbon;509614;5.0%;2020\\nGuinea-Bissau;Bissau;492004;23.9%;2015\\nSlovakia;Bratislava;440948;8.1%;2020\\nEstonia;Tallinn;438341;33.0%;2021\\nAustralia;Canberra;431380;1.7%;2020\\nNamibia;Windhoek;431000;17.0%;2020\\nTanzania;Dodoma;410956;0.6%;2012\\nPapua New Guinea;Port Moresby;364145;3.7%;2011\\nIvory Coast;Yamoussoukro;361893;1.3%;2020\\nLebanon;Beirut;361366;6.5%;2014\\nBolivia;Sucre;360544;3.0%;2022\\nPuerto Rico (US);San Juan;342259;10.5%;2020\\nCosta Rica;San José;342188;6.6%;2018\\nLesotho;Maseru;330760;14.5%;2016\\nCyprus;Nicosia;326739;26.3%;2016\\nEquatorial Guinea;Malabo;297000;18.2%;2018\\nSlovenia;Ljubljana;285604;13.5%;2021\\nEast Timor;Dili;277279;21.0%;2015\\nBosnia and Herzegovina;Sarajevo;275524;8.4%;2013\\nBahamas;Nassau;274400;67.3%;2016\\nBotswana;Gaborone;273602;10.6%;2020\\nBenin;Porto-Novo;264320;2.0%;2013\\nSuriname;Paramaribo;240924;39.3%;2012\\nIndia;New Delhi;249998;0.0%;2011\\nSahrawi Arab Democratic Republic;Laayoune (claimed) - Tifariti (de facto);217732 - 3000;\\n', '˓→—;2014\\nNew Zealand;Wellington;217000;4.2%;2021\\nBahrain;Manama;200000;13.7%;2020\\nKosovo;Pristina;198897;12.0%;2011\\nMontenegro;Podgorica;190488;30.3%;2020\\nBelgium;Brussels;187686;1.6%;2022\\nCape Verde;Praia;159050;27.1%;2017\\nMauritius;Port Louis;147066;11.3%;2018\\nCuraçao (Netherlands);Willemstad;136660;71.8%;2011\\nBurundi;Gitega;135467;1.1%;2020\\nSwitzerland;Bern (de facto);134591;1.5%;2020\\nTransnistria;Tiraspol;133807;38.5%;2015\\nMaldives;Malé;133412;25.6%;2014\\nIceland;Reykjavík;133262;36.0%;2021\\nLuxembourg;Luxembourg City;124509;19.5%;2021\\nGuyana;Georgetown;118363;14.7%;2012\\nBhutan;Thimphu;114551;14.7%;2017\\nComoros;Moroni;111326;13.5%;2016\\nBarbados;Bridgetown;110000;39.1%;2014\\nSri Lanka;Sri Jayawardenepura Kotte;107925;0.5%;2012\\nBrunei;Bandar Seri Begawan;100700;22.6%;2007\\nEswatini;Mbabane;94874;8.0%;2010\\nNew Caledonia (France);Nouméa;94285;32.8%;2019\\nFiji;Suva;93970;10.2%;2017\\nSolomon Islands;Honiara;92344;13.0%;2021\\nRepublic of Artsakh;Stepanakert;75000;62.5%;2021\\nGambia;Banjul;73000;2.8%;2013\\n', '(continues on next page)\\n', '108\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""São Tomé and Príncipe;São Tomé;71868;32.2%;2015\\nKiribati;Tarawa;70480;54.7%;2020\\nVanuatu;Port Vila;51437;16.1%;2016\\nNorthern Mariana Islands (USA);Saipan;47565;96.1%;2017\\nSamoa;Apia;41611;19.0%;2021\\nPalestine;Ramallah (de facto);38998;0.8%;2017\\nMonaco;Monaco;38350;104.5%;2020\\nJersey (UK);Saint Helier;37540;34.2%;2018\\nTrinidad and Tobago;Port of Spain;37074;2.4%;2011\\nCayman Islands (UK);George Town;34399;50.5%;2021\\nGibraltar (UK);Gibraltar;34003;104.1%;2020\\nGrenada;St. George's;33734;27.1%;2012\\nAruba (Netherlands);Oranjestad;28294;26.6%;2010\\nIsle of Man (UK);Douglas;27938;33.2%;2011\\nMarshall Islands;Majuro;27797;66.1%;2011\\nTonga;Nukualofa;27600;26.0%;2022\\nSeychelles;Victoria;26450;24.8%;2010\\nFrench Polynesia (France);Papeete;26926;8.9%;2017\\nAndorra;Andorra la Vella;22873;28.9%;2022\\nFaroe Islands (Denmark);Tórshavn;22738;43.0%;2022\\nAntigua and Barbuda;St. John's;22219;23.8%;2011\\nBelize;Belmopan;20621;5.2%;2016\\nSaint Lucia;Castries;20000;11.1%;2013\\nGuernsey (UK);Saint Peter Port;18958;30.1%;2019\\nGreenland (Denmark);Nuuk;18800;33.4%;2021\\nDominica;Roseau;14725;20.3%;2011\\nSaint Kitts and Nevis;Basseterre;14000;29.4%;2018\\nSaint Vincent and the Grenadines;Kingstown;12909;12.4%;2012\\nBritish Virgin Islands (UK);Road Town;12603;40.5%;2012\\nÅland (Finland);Mariehamn;11736;39.0%;2021\\nU.S. Virgin Islands (US);Charlotte Amalie;14477;14.5%;2020\\nMicronesia;Palikir;6647;5.9%;2010\\nTuvalu;Funafuti;6320;56.4%;2017\\nMalta;Valletta;5827;1.1%;2019\\nLiechtenstein;Vaduz;5774;14.8%;2021\\nSaint Pierre and Miquelon (France);Saint-Pierre;5394;91.7%;2019\\nCook Islands (NZ);Avarua;4906;28.9%;2016\\nSan Marino;City of San Marino;4061;12.0%;2021\\nTurks and Caicos Islands (UK);Cockburn Town;3720;8.2%;2016\\nAmerican Samoa (USA);Pago Pago;3656;8.1%;2010\\nSaint Martin (France);Marigot;3229;10.1%;2017\\nSaint Barthélemy (France);Gustavia;2615;24.1%;2010\\nFalkland Islands (UK);Stanley;2460;65.4%;2016\\nSvalbard (Norway);Longyearbyen;2417;82.2%;2020\\nSint Maarten (Netherlands);Philipsburg;1894;4.3%;2011\\nChristmas Island (Australia);Flying Fish Cove;1599;86.8%;2016\\nAnguilla (UK);The Valley;1067;6.8%;2011\\nGuam (US);Hagåtña;1051;0.6%;2010\\nWallis and Futuna (France);Mata Utu;1029;8.9%;2018\\nBermuda (UK);Hamilton;854;1.3%;2016\\nNauru;Yaren (de facto);747;6.0%;2011\\nSaint Helena (UK);Jamestown;629;11.6%;2016\\n"", '(continues on next page)\\n', '12.8. How to Output an HTML Table\\n109\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'Niue (NZ);Alofi;597;30.8%;2017\\nTokelau (NZ);Atafu;541;29.3%;2016\\nVatican City;Vatican City (city-state);453;100%;2019\\nMontserrat (UK);Brades (de facto) - Plymouth (de jure);449 - 0;-;2011\\nNorfolk Island (Australia);Kingston;341;-;2015\\nPalau;Ngerulmud;271;1.5%;2010\\nCocos (Keeling) Islands (Australia);West Island;134;24.6%;2011\\nPitcairn Islands (UK);Adamstown;40;100.0%;2021\\nSouth Georgia and the South Sandwich Islands (UK);King Edward Point;22;73.3%;2018""""""\\n', '# -------------------------------------------------------------------\\n# HTML template for the report. We define no table header <th> items\\n# because this is done in post processing.\\n# The actual template part is the table row, identified by id ""row"".\\n# The content of each cell will be filled using the respective id.\\n# -------------------------------------------------------------------\\nHTML = """"""\\n', '<h1 style=""text-align:center"">World Capital Cities</h1>\\n<p><i>Percent ""%"" is city population as a percentage of the country, as of ""Year"".</\\n', '˓→i>\\n', '</p><p></p>\\n<table>\\n<tr id=""row"">\\n', '<td id=""country""></td>\\n<td id=""capital""></td>\\n<td id=""population""></td>\\n<td id=""percent""></td>\\n<td id=""year""></td>\\n', '</tr>\\n</table>\\n', '""""""\\n', '# -------------------------------------------------------------------\\n# Sets font-family globally to sans-serif, and text-align to right\\n# for the numerical table columns.\\n# -------------------------------------------------------------------\\nCSS = """"""\\nbody {\\n', 'font-family: sans-serif;\\n', '}\\ntd[id=""population""], td[id=""percent""], td[id=""year""] {\\n', 'text-align: right;\\npadding-right: 2px;\\n', '}""""""\\n', '# -------------------------------------------------------------------\\n# recorder function for cell positions\\n# -------------------------------------------------------------------\\ncoords = {}\\n# stores cell gridline coordinates\\n', 'def recorder(elpos):\\n', '(continues on next page)\\n', '110\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '""""""We only record positions of table rows and cells.\\n', 'Information is stored in ""coords"" with page number as key.\\n""""""\\nglobal coords\\n# dictionary of row and cell coordinates per page\\n', 'if elpos.open_close != 2:\\n# only consider coordinates provided at ""close""\\n', 'return\\n', 'if elpos.id not in (""row"", ""country"", ""capital"", ""population"", ""percent"", ""year""):\\n', 'return\\n# only look at row / cell content\\n', 'rect = fitz.Rect(elpos.rect)\\n# cell rectangle\\n', 'if rect.y1 > elpos.filled:\\n# ignore stuff below the filled rectangle\\n', 'return\\n', '# per page, we store the floats top-most y, right-most x, column left\\n# and row bottom borders.\\nx, y, x1, y0 = coords.get(elpos.page, (set(), set(), 0, sys.maxsize))\\n', 'if elpos.id != ""row"":\\nx.add(rect.x0)\\n# add cell left border coordinate\\n', 'if rect.x1 > x1:\\n# store right-most cell border on page\\n', 'x1 = rect.x1\\n', 'else:\\ny.add(rect.y1)\\n# add row bottom border coordinate\\n', 'if rect.y0 < y0:\\n# store top-most cell border per page\\n', 'y0 = rect.y0\\n', 'coords[elpos.page] = (x, y, x1, y0)\\n# write back info per page\\n', 'return\\n', '# -------------------------------------------------------------------\\n# define database access: make an intermediate memory database for\\n# our demo purposes.\\n# -------------------------------------------------------------------\\ndbfilename = "":memory:""\\n# the SQLITE database file name\\n', 'database = sqlite3.connect(dbfilename)\\n# open database\\n', 'cursor = database.cursor()\\n# multi-purpose database cursor\\n', '# Define and fill the SQLITE database\\ncursor.execute(\\n', '""""""CREATE TABLE capitals (Country text, Capital text, Population text, Percent text,␣\\n', '˓→Year text)""""""\\n)\\n', 'for value in table_data.splitlines():\\ncursor.execute(""INSERT INTO capitals VALUES (?,?,?,?,?)"", value.split("";""))\\n', '# select statement for the rows - let SQL also sort it for us\\nselect = """"""SELECT * FROM capitals ORDER BY ""Country"" """"""\\n', '# -------------------------------------------------------------------\\n', '(continues on next page)\\n', '12.8. How to Output an HTML Table\\n111\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '# define the HTML Story and fill it with database data\\n# -------------------------------------------------------------------\\nstory = fitz.Story(HTML, user_css=CSS)\\nbody = story.body\\n# access the HTML body detail\\n', 'template = body.find(None, ""id"", ""row"")\\n# find the template part\\n', 'table = body.find(""table"", None, None)\\n# find start of table\\n', '# read the rows from the database and put them all in one Python list\\n# NOTE: instead, we might fetch rows one by one (advisable for large volumes)\\n', 'cursor.execute(select)\\n# execute cursor, and ...\\n', 'rows = cursor.fetchall()\\n# read out what was found\\n', 'database.close()\\n# no longer needed\\n', 'for country, capital, population, percent, year in rows:\\n# iterate through the row\\n', 'row = template.clone()\\n# clone the template to report each row\\n', 'row.find(None, ""id"", ""country"").add_text(country)\\nrow.find(None, ""id"", ""capital"").add_text(capital)\\nrow.find(None, ""id"", ""population"").add_text(population)\\nrow.find(None, ""id"", ""percent"").add_text(percent)\\nrow.find(None, ""id"", ""year"").add_text(year)\\n', 'table.append_child(row)\\n', 'template.remove()\\n# remove the template\\n', '# -------------------------------------------------------------------\\n# generate the PDF and write it to memory\\n# -------------------------------------------------------------------\\nfp = io.BytesIO()\\nwriter = fitz.DocumentWriter(fp)\\nmediabox = fitz.paper_rect(""letter"")\\n# use pages in Letter format\\n', 'where = mediabox + (36, 36, -36, -72)\\n# leave page borders\\n', 'more = True\\npage = 0\\nwhile more:\\ndev = writer.begin_page(mediabox)\\n# make a new page\\n', 'if page > 0:\\n# leave room above the cells for inserting header row\\n', 'delta = (0, 20, 0, 0)\\n', 'else:\\ndelta = (0, 0, 0, 0)\\nmore, filled = story.place(where + delta)\\n# arrange content on this rectangle\\n', 'story.element_positions(recorder, {""page"": page, ""filled"": where.y1})\\nstory.draw(dev)\\n# write content to page\\n', 'writer.end_page()\\n# finish the page\\n', 'page += 1\\n', 'writer.close()\\n# close the PDF\\n', '# -------------------------------------------------------------------\\n# re-open memory PDF for inserting gridlines and header rows\\n# -------------------------------------------------------------------\\n', '(continues on next page)\\n', '112\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'doc = fitz.open(""pdf"", fp)\\nfor page in doc:\\npage.wrap_contents()\\n# ensure all ""cm"" commands are properly wrapped\\n', 'x, y, x1, y0 = coords[page.number]\\n# read coordinates of the page\\n', 'x = sorted(list(x)) + [x1]\\n# list of cell left-right borders\\n', 'y = [y0] + sorted(list(y))\\n# list of cell top-bottom borders\\n', 'shape = page.new_shape()\\n# make a canvas to draw upon\\n', 'for item in y:\\n# draw horizontal lines (one under each row)\\n', 'shape.draw_line((x[0] - 2, item), (x[-1] + 2, item))\\n', 'for i in range(len(y)):\\n# alternating row coloring\\n', 'if i % 2:\\nrect = (x[0] - 2, y[i - 1], x[-1] + 2, y[i])\\nshape.draw_rect(rect)\\n', 'for i in range(len(x)):\\n# draw vertical lines\\n', 'd = 2 if i == len(x) - 1 else -2\\nshape.draw_line((x[i] + d, y[0]), (x[i] + d, y[-1]))\\n', '# Write header row above table content\\ny0 -= 5\\n# bottom coord for header row text\\n', 'shape.insert_text((x[0], y0), ""Country"", fontname=""hebo"", fontsize=12)\\nshape.insert_text((x[1], y0), ""Capital"", fontname=""hebo"", fontsize=12)\\nshape.insert_text((x[2], y0), ""Population"", fontname=""hebo"", fontsize=12)\\nshape.insert_text((x[3], y0), ""\\n%"", fontname=""hebo"", fontsize=12)\\nshape.insert_text((x[4], y0), ""Year"", fontname=""hebo"", fontsize=12)\\n', '# Write page footer\\ny0 = page.rect.height - 50\\n# top coordinate of footer bbox\\n', 'bbox = fitz.Rect(0, y0, page.rect.width, y0 + 20)\\n# footer bbox\\n', 'page.insert_textbox(\\nbbox,\\nf""World Capital Cities, Page {page.number+1} of {doc.page_count}"",\\nalign=fitz.TEXT_ALIGN_CENTER,\\n)\\nshape.finish(width=0.3, color=0.5, fill=0.9)\\n# rectangles and gray lines\\n', 'shape.commit(overlay=False)\\n# put the drawings in background\\n', 'doc.subset_fonts()\\ndoc.save(__file__.replace("".py"", "".pdf""), deflate=True, garbage=4, pretty=True)\\ndoc.close()\\n', '12.8. How to Output an HTML Table\\n113\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '12.9 How to Create a Simple Grid Layout\\n', 'By creating a sequence of Story objects within a grid created via the make_table function a developer can create grid\\nlayouts as required.\\n', 'Files:\\n', '• docs/samples/simple-grid.py\\n', 'import fitz\\n', 'MEDIABOX = fitz.paper_rect(""letter"")\\n# output page format: Letter\\n', 'GRIDSPACE = fitz.Rect(100, 100, 400, 400)\\nGRID = fitz.make_table(GRIDSPACE, rows=2, cols=2)\\nCELLS = [GRID[i][j] for i in range(2) for j in range(2)]\\ntext_table = (""A"", ""B"", ""C"", ""D"")\\nwriter = fitz.DocumentWriter(__file__.replace("".py"", "".pdf""))\\n# create the writer\\n', 'device = writer.begin_page(MEDIABOX)\\n# make new page\\n', 'for i, text in enumerate(text_table):\\nstory = fitz.Story(em=1)\\nbody = story.body\\nwith body.add_paragraph() as para:\\npara.set_bgcolor(""#ecc"")\\npara.set_pagebreak_after()\\n# fills whole cell with bgcolor\\n', 'para.set_align(""center"")\\npara.set_fontsize(16)\\npara.add_text(f""\\\\n\\\\n\\\\n{text}"")\\nstory.place(CELLS[i])\\nstory.draw(device)\\ndel story\\n', 'writer.end_page()\\n# finish page\\n', 'writer.close()\\n# close output file\\n', '12.10 How to Generate a Table of Contents\\n', 'This script lists the source code of all Python scripts that live in the script’s directory.\\n', 'Files:\\n', '• docs/samples/code-printer.py\\n', '""""""\\nDemo script PyMuPDF Story class\\n-------------------------------\\n', '(continues on next page)\\n', '114\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'Read the Python sources in the script directory and create a PDF of all their\\nsource codes.\\n', 'The following features are included as a specialty:\\n1. HTML source for fitz.Story created via Python API exclusively\\n2. Separate Story objects for page headers and footers\\n3. Use of HTML ""id"" elements for identifying source start pages\\n4. Generate a Table of Contents pointing to source file starts. This\\n', '- uses the new Stoy callback feature\\n- uses Story also for making the TOC page(s)\\n', '""""""\\nimport io\\nimport os\\nimport time\\n', 'import fitz\\n', 'THISDIR = os.path.dirname(os.path.abspath(__file__))\\nTOC = []\\n# this will contain the TOC list items\\n', 'CURRENT_ID = """"\\n# currently processed filename - stored by recorder func\\n', 'MEDIABOX = fitz.paper_rect(""a4-l"")\\n# chosen page size\\n', 'WHERE = MEDIABOX + (36, 50, -36, -36)\\n# sub rectangle for source content\\n', '# location of the header rectangle\\nHDR_WHERE = (36, 5, MEDIABOX.width - 36, 40)\\n# location of the footer rectangle\\nFTR_WHERE = (36, MEDIABOX.height - 36, MEDIABOX.width - 36, MEDIABOX.height)\\n', 'def recorder(elpos):\\n', '""""""Callback function invoked during story.place().\\nThis function generates / collects all TOC items and updates the value of\\nCURRENT_ID - which is used to update the footer line of each page.\\n""""""\\nglobal TOC, CURRENT_ID\\nif not elpos.open_close & 1:\\n# only consider ""open"" items\\n', 'return\\n', 'level = elpos.heading\\ny0 = elpos.rect[1]\\n# top of written rectangle (use for TOC)\\n', 'if level > 0:\\n# this is a header (h1 - h6)\\n', 'pno = elpos.page + 1\\n# the page number\\n', 'TOC.append(\\n(\\nlevel,\\nelpos.text,\\nelpos.page + 1,\\ny0,\\n)\\n)\\nreturn\\n', '(continues on next page)\\n', '12.10. How to Generate a Table of Contents\\n115\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'CURRENT_ID = elpos.id if elpos.id else """"\\n# update for footer line\\n', 'return\\n', 'def header_story(text):\\n', '""""""Make the page header""""""\\nheader = fitz.Story()\\nhdr_body = header.body\\nhdr_body.add_paragraph().set_properties(\\nalign=fitz.fitz.TEXT_ALIGN_CENTER,\\nbgcolor=""#eee"",\\nfont=""sans-serif"",\\nbold=True,\\nfontsize=12,\\ncolor=""green"",\\n).add_text(text)\\nreturn header\\n', 'def footer_story(text):\\n', '""""""Make the page footer""""""\\nfooter = fitz.Story()\\nftr_body = footer.body\\nftr_body.add_paragraph().set_properties(\\nbgcolor=""#eee"",\\nalign=fitz.TEXT_ALIGN_CENTER,\\ncolor=""blue"",\\nfontsize=10,\\nfont=""sans-serif"",\\n).add_text(text)\\nreturn footer\\n', 'def code_printer(outfile):\\n', '""""""Output the generated PDF to outfile.""""""\\nglobal MAX_TITLE_LEN\\nwhere = +WHERE\\nwriter = fitz.DocumentWriter(outfile, """")\\nprint_time = time.strftime(""%Y-%m-%d %H:%M:%S (%z)"")\\nthispath = os.path.abspath(os.curdir)\\nbasename = os.path.basename(thispath)\\n', 'story = fitz.Story()\\nbody = story.body\\nbody.set_properties(font=""sans-serif"")\\n', 'text = f""Python sources in folder \\'{THISDIR}\\'""\\n', 'body.add_header(1).add_text(text)\\n# the only h1 item in the story\\n', 'files = os.listdir(THISDIR)\\n# list / select Python files in our directory\\n', 'i = 1\\n', '(continues on next page)\\n', '116\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'for code_file in files:\\n', 'if not code_file.endswith("".py""):\\n', 'continue\\n', '# read Python file source\\nfileinput = open(os.path.join(THISDIR, code_file), ""rb"")\\ntext = fileinput.read().decode()\\nfileinput.close()\\n', '# make level 2 header\\nhdr = body.add_header(2)\\nif i > 1:\\nhdr.set_pagebreak_before()\\nhdr.add_text(f""{i}. Listing of file \\'{code_file}\\'"")\\n', '# Write the file code\\nbody.add_codeblock().set_bgcolor((240, 255, 210)).set_color(""blue"").set_id(\\ncode_file\\n).set_fontsize(10).add_text(text)\\n', '# Indicate end of a source file\\nbody.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(\\n', 'f""---------- End of File \\'{code_file}\\' ----------""\\n', ')\\ni += 1\\n# update file counter\\n', 'i = 0\\nwhile True:\\ni += 1\\ndevice = writer.begin_page(MEDIABOX)\\n# create Story objects for header, footer and the rest.\\nheader = header_story(f""Python Files in \\'{THISDIR}\\'"")\\nhdr_ok, _ = header.place(HDR_WHERE)\\nif hdr_ok != 0:\\n', 'raise ValueError(""header does not fit"")\\nheader.draw(device, None)\\n', '# --------------------------------------------------------------\\n# Write the file content.\\n# --------------------------------------------------------------\\nmore, filled = story.place(where)\\n# Inform the callback function\\n# Args:\\n#\\nrecorder: the Python function to call\\n', '#\\n{}: dictionary containing anything - we pass the page number\\n', 'story.element_positions(recorder, {""page"": i - 1})\\nstory.draw(device, None)\\n', '# --------------------------------------------------------------\\n# Make / write page footer.\\n# We MUST have a paragraph b/o background color / alignment\\n# --------------------------------------------------------------\\n', '(continues on next page)\\n', '12.10. How to Generate a Table of Contents\\n117\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'if CURRENT_ID:\\ntext = f""File \\'{CURRENT_ID}\\' printed at {print_time}{chr(160)*5}{\\'-\\'*10}\\n', '˓→{chr(160)*5}Page {i}""\\n', 'else:\\ntext = f""Printed at {print_time}{chr(160)*5}{\\'-\\'*10}{chr(160)*5}Page {i}""\\n', 'footer = footer_story(text)\\n# write the page footer\\nftr_ok, _ = footer.place(FTR_WHERE)\\nif ftr_ok != 0:\\n', 'raise ValueError(""footer does not fit"")\\nfooter.draw(device, None)\\n', 'writer.end_page()\\nif more == 0:\\n', 'break\\n', 'writer.close()\\n', 'if __name__ == ""__main__"" or os.environ.get(\\'PYTEST_CURRENT_TEST\\'):\\nfileptr1 = io.BytesIO()\\nt0 = time.perf_counter()\\ncode_printer(fileptr1)\\n# make the PDF\\n', 't1 = time.perf_counter()\\ndoc = fitz.open(""pdf"", fileptr1)\\nold_count = doc.page_count\\n# -----------------------------------------------------------------------------\\n# Post-processing step to make / insert the toc\\n# This also works using fitz.Story:\\n# - make a new PDF in memory which contains pages with the TOC text\\n# - add these TOC pages to the end of the original file\\n# - search item text on the inserted pages and cover each with a PDF link\\n# - move the TOC pages to the front of the document\\n# -----------------------------------------------------------------------------\\nstory = fitz.Story()\\nbody = story.body\\nbody.add_header(1).set_font(""sans-serif"").add_text(""Table of Contents"")\\n# prefix TOC with an entry pointing to this page\\nTOC.insert(0, [1, ""Table of Contents"", old_count + 1, 36])\\n', 'for item in TOC[1:]:\\n# write the file name headers as TOC lines\\n', 'body.add_paragraph().set_font(""sans-serif"").add_text(\\nitem[1] + f"" - ({item[2]})""\\n', ')\\nfileptr2 = io.BytesIO()\\n# put TOC pages to a separate PDF initially\\n', 'writer = fitz.DocumentWriter(fileptr2)\\ni = 1\\nmore = 1\\nwhile more:\\ndevice = writer.begin_page(MEDIABOX)\\nheader = header_story(f""Python Files in \\'{THISDIR}\\'"")\\n# write the page header\\nhdr_ok, _ = header.place(HDR_WHERE)\\n', '(continues on next page)\\n', '118\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'header.draw(device, None)\\n', 'more, filled = story.place(WHERE)\\nstory.draw(device, None)\\n', 'footer = footer_story(f""TOC-{i}"")\\n# separate page numbering scheme\\n', '# write the page footer\\nftr_ok, _ = footer.place(FTR_WHERE)\\nfooter.draw(device, None)\\nwriter.end_page()\\ni += 1\\n', 'writer.close()\\ndoc2 = fitz.open(""pdf"", fileptr2)\\n# open TOC pages as another PDF\\n', 'doc.insert_pdf(doc2)\\n# and append to the main PDF\\n', 'new_range = range(old_count, doc.page_count)\\n# the TOC page numbers\\n', 'pages = [doc[i] for i in new_range]\\n# these are the TOC pages within main PDF\\n', 'for item in TOC:\\n# search for TOC item text to get its rectangle\\n', 'for page in pages:\\nrl = page.search_for(item[1], flags=~(fitz.TEXT_PRESERVE_LIGATURES | fitz.\\n', '˓→TEXT_PRESERVE_SPANS))\\n', 'if rl != []:\\n# this text must be on next page\\n', 'break\\n', 'rect = rl[0]\\n# rectangle of TOC item text\\n', 'link = {\\n# make a link from it\\n', '""kind"": fitz.LINK_GOTO,\\n""from"": rect,\\n""to"": fitz.Point(0, item[3]),\\n""page"": item[2] - 1,\\n}\\npage.insert_link(link)\\n', '# insert the TOC in the main PDF\\ndoc.set_toc(TOC)\\n# move all the TOC pages to the desired place (1st page here)\\nfor i in new_range:\\ndoc.move_page(doc.page_count - 1, 0)\\ndoc.ez_save(__file__.replace("".py"", "".pdf""))\\n', 'It features the following capabilities:\\n', '• Automatic generation of a Table of Contents (TOC) on separately numbered pages at the start of the document -\\nusing a specialized Story.\\n', '• Use of 3 separate Story objects per page: header story, footer story and the story for printing the Python sources.\\n', '– The page footer is automatically changed to show the name of the current Python file.\\n', '• Use of Story.element_positions() to collect the data for the TOC and for the dynamic adjustment of page\\nfooters. This is an example of a bidirectional communication between the story output process and the script.\\n', '• The main PDF with the Python sources is being written to memory by its DocumentWriter. Another Story /\\n', 'DocumentWriter pair is then used to create a (memory) PDF for the TOC pages. Finally, both these PDFs are\\njoined and the result stored to disk.\\n', '12.10. How to Generate a Table of Contents\\n119\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '12.11 How to Display a List from JSON Data\\n', 'This example takes some JSON data input which it uses to populate a Story. It also contains some visual text formatting\\nand shows how to add links.\\n', 'Files:\\n', '• docs/samples/json-example.py\\n', 'import fitz\\nimport json\\n', 'my_json =\\n""""""\\n', '[\\n', '{\\n', '""name"" :\\n""Five-storied Pagoda"",\\n', '""temple"" :\\n""Rurik¯o-ji"",\\n', '""founded"" :\\n""middle Muromachi period, 1442"",\\n', '""region"" :\\n""Yamaguchi, Yamaguchi"",\\n', '""position"" :\\n""34.190181,131.472917""\\n', '},\\n{\\n', '""name"" :\\n""Founder\\'s Hall"",\\n', '""temple"" :\\n""Eih¯o-ji"",\\n', '""founded"" :\\n""early Muromachi period"",\\n', '""region"" :\\n""Tajimi, Gifu"",\\n', '""position"" :\\n""35.346144,137.129189""\\n', '},\\n{\\n', '""name"" :\\n""Fud¯od¯o"",\\n', '""temple"" :\\n""Kong¯obu-ji"",\\n', '""founded"" :\\n""early Kamakura period"",\\n', '""region"" :\\n""K¯oya, Wakayama"",\\n', '""position"" :\\n""34.213103,135.580397""\\n', '},\\n{\\n', '""name"" :\\n""Goeid¯o"",\\n', '""temple"" :\\n""Nishi Honganji"",\\n', '""founded"" :\\n""Edo period, 1636"",\\n', '""region"" :\\n""Kyoto"",\\n', '""position"" :\\n""34.991394,135.751689""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""Mur¯o-ji"",\\n', '""founded"" :\\n""early Heian period"",\\n', '""region"" :\\n""Uda, Nara"",\\n', '""position"" :\\n""34.536586819357986,136.0395548452301""\\n', '},\\n', '(continues on next page)\\n', '120\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""Fud¯o-in"",\\n', '""founded"" :\\n""late Muromachi period, 1540"",\\n', '""region"" :\\n""Hiroshima"",\\n', '""position"" :\\n""34.427014,132.471117""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""Ninna-ji"",\\n', '""founded"" :\\n""Momoyama period, 1613"",\\n', '""region"" :\\n""Kyoto"",\\n', '""position"" :\\n""35.031078,135.713811""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""Mii-dera"",\\n', '""founded"" :\\n""Momoyama period, 1599"",\\n', '""region"" :\\n""¯Otsu, Shiga"",\\n', '""position"" :\\n""35.013403,135.852861""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""T¯osh¯odai-ji"",\\n', '""founded"" :\\n""Nara period, 8th century"",\\n', '""region"" :\\n""Nara, Nara"",\\n', '""position"" :\\n""34.675619,135.784842""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""T¯o-ji"",\\n', '""founded"" :\\n""Momoyama period, 1603"",\\n', '""region"" :\\n""Kyoto"",\\n', '""position"" :\\n""34.980367,135.747686""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""T¯odai-ji"",\\n', '""founded"" :\\n""middle Edo period, 1705"",\\n', '""region"" :\\n""Nara, Nara"",\\n', '""position"" :\\n""34.688992,135.839822""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""H¯ory¯u-ji"",\\n', '""founded"" :\\n""Asuka period, by 693"",\\n', '""region"" :\\n""Ikaruga, Nara"",\\n', '""position"" :\\n""34.614317,135.734458""\\n', '},\\n{\\n', '""name"" :\\n""Golden Hall"",\\n', '""temple"" :\\n""Daigo-ji"",\\n', '(continues on next page)\\n', '12.11. How to Display a List from JSON Data\\n121\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '""founded"" :\\n""late Heian period"",\\n', '""region"" :\\n""Kyoto"",\\n', '""position"" :\\n""34.951481,135.821747""\\n', '},\\n{\\n', '""name"" :\\n""Keig¯u-in Main Hall"",\\n', '""temple"" :\\n""K¯ory¯u-ji"",\\n', '""founded"" :\\n""early Kamakura period, before 1251"",\\n', '""region"" :\\n""Kyoto"",\\n', '""position"" :\\n""35.015028,135.705425""\\n', '},\\n{\\n', '""name"" :\\n""Konpon-ch¯ud¯o"",\\n', '""temple"" :\\n""Enryaku-ji"",\\n', '""founded"" :\\n""early Edo period, 1640"",\\n', '""region"" :\\n""¯Otsu, Shiga"",\\n', '""position"" :\\n""35.070456,135.840942""\\n', '},\\n{\\n', '""name"" :\\n""Kor¯o"",\\n', '""temple"" :\\n""T¯osh¯odai-ji"",\\n', '""founded"" :\\n""early Kamakura period, 1240"",\\n', '""region"" :\\n""Nara, Nara"",\\n', '""position"" :\\n""34.675847,135.785069""\\n', '},\\n{\\n', '""name"" :\\n""K¯of¯uz¯o"",\\n', '""temple"" :\\n""H¯ory¯u-ji"",\\n', '""founded"" :\\n""early Heian period"",\\n', '""region"" :\\n""Ikaruga, Nara"",\\n', '""position"" :\\n""34.614439,135.735428""\\n', '},\\n{\\n', '""name"" :\\n""Large Lecture Hall"",\\n', '""temple"" :\\n""H¯ory¯u-ji"",\\n', '""founded"" :\\n""middle Heian period, 990"",\\n', '""region"" :\\n""Ikaruga, Nara"",\\n', '""position"" :\\n""34.614783,135.734175""\\n', '},\\n{\\n', '""name"" :\\n""Lecture Hall"",\\n', '""temple"" :\\n""Zuiry¯u-ji"",\\n', '""founded"" :\\n""early Edo period, 1655"",\\n', '""region"" :\\n""Takaoka, Toyama"",\\n', '""position"" :\\n""36.735689,137.010019""\\n', '},\\n{\\n', '""name"" :\\n""Lecture Hall"",\\n', '""temple"" :\\n""T¯osh¯odai-ji"",\\n', '""founded"" :\\n""Nara period, 763"",\\n', '""region"" :\\n""Nara, Nara"",\\n', '""position"" :\\n""34.675933,135.784842""\\n', '(continues on next page)\\n', '122\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '},\\n{\\n', '""name"" :\\n""Lotus Flower Gate"",\\n', '""temple"" :\\n""T¯o-ji"",\\n', '""founded"" :\\n""early Kamakura period"",\\n', '""region"" :\\n""Kyoto"",\\n', '""position"" :\\n""34.980678,135.746314""\\n', '},\\n{\\n', '""name"" :\\n""Main Hall"",\\n', '""temple"" :\\n""Akishinodera"",\\n', '""founded"" :\\n""early Kamakura period"",\\n', '""region"" :\\n""Nara, Nara"",\\n', '""position"" :\\n""34.703769,135.776189""\\n', '}\\n', ']\\n', '""""""\\n', '# the result is a Python dictionary:\\nmy_dict = json.loads(my_json)\\n', 'MEDIABOX = fitz.paper_rect(""letter"")\\n# output page format: Letter\\n', 'WHERE = MEDIABOX + (36, 36, -36, -36)\\nwriter = fitz.DocumentWriter(""json-example.pdf"")\\n# create the writer\\n', 'story = fitz.Story()\\nbody = story.body\\n', 'for i, entry in enumerate(my_dict):\\n', 'for attribute, value in entry.items():\\npara = body.add_paragraph()\\n', 'if attribute == ""position"":\\npara.set_fontsize(10)\\npara.add_link(f""www.google.com/maps/@{value},14z"")\\n', 'else:\\npara.add_span()\\npara.set_color(""#990000"")\\npara.set_fontsize(14)\\npara.set_bold()\\npara.add_text(f""{attribute} "")\\npara.add_span()\\npara.set_fontsize(18)\\npara.add_text(f""{value}"")\\n', 'body.add_horizontal_line()\\n', '# This while condition will check a value from the Story `place` method\\n# for whether all content for the story has been written (0), otherwise\\n# more content is waiting to be written (1)\\n', '(continues on next page)\\n', '12.11. How to Display a List from JSON Data\\n123\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'more = 1\\nwhile more:\\ndevice = writer.begin_page(MEDIABOX)\\n# make new page\\n', 'more, _ = story.place(WHERE)\\nstory.draw(device)\\nwriter.end_page()\\n# finish page\\n', 'writer.close()\\n# close output file\\n', 'del story\\n', '12.12 Using the Alternative Story.write*() functions\\n', 'The Story.write*() functions provide a different way to use the Story functionality, removing the need for calling\\ncode to implement a loop that calls Story.place() and Story.draw() etc, at the expense of having to provide at\\nleast a rectfn() callback.\\n', '12.12.1 How to do Basic Layout with Story.write()\\n', 'This script lays out multiple copies of its own source code, into four rectangles per page.\\n', 'Files:\\n', '• docs/samples/story-write.py\\n', '""""""\\nDemo script for PyMuPDF\\'s `Story.write()` method.\\n', 'This is a way of laying out a story into a PDF document, that avoids the need\\nto write a loop that calls `story.place()` and `story.draw()`.\\n', 'Instead just a single function call is required, albeit with a `rectfn()`\\ncallback that returns the rectangles into which the story is placed.\\n""""""\\n', 'import html\\n', 'import fitz\\n', ""# Create html containing multiple copies of our own source code.\\n#\\nwith open(__file__) as f:\\ntext = f.read()\\ntext = html.escape(text)\\nhtml = f'''\\n"", '(continues on next page)\\n', '124\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '<!DOCTYPE html>\\n<body>\\n', '<h1>Contents of {__file__}</h1>\\n', '<h2>Normal</h2>\\n<pre>\\n{text}\\n</pre>\\n', '<h2>Strong</h2>\\n<strong>\\n<pre>\\n{text}\\n</pre>\\n</strong>\\n', '<h2>Em</h2>\\n<em>\\n<pre>\\n{text}\\n</pre>\\n</em>\\n', ""</body>\\n'''\\n"", 'def rectfn(rect_num, filled):\\n', ""'''\\nWe return four rectangles per page in this order:\\n"", '1 3\\n2 4\\n', ""'''\\npage_w = 800\\npage_h = 600\\nmargin = 50\\nrect_w = (page_w - 3*margin) / 2\\nrect_h = (page_h - 3*margin) / 2\\n"", 'if rect_num % 4 == 0:\\n', '# New page.\\nmediabox = fitz.Rect(0, 0, page_w, page_h)\\n', 'else:\\nmediabox = None\\n', ""# Return one of four rects in turn.\\nrect_x = margin + (rect_w+margin) * ((rect_num // 2) % 2)\\nrect_y = margin + (rect_h+margin) * (rect_num % 2)\\nrect = fitz.Rect(rect_x, rect_y, rect_x + rect_w, rect_y + rect_h)\\n#print(f'rectfn(): rect_num={rect_num} filled={filled}. Returning: rect={rect}')\\nreturn mediabox, rect, None\\n"", '(continues on next page)\\n', '12.12. Using the Alternative Story.write*() functions\\n125\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'story = fitz.Story(html, em=8)\\n', ""out_path = __file__.replace('.py', '.pdf')\\nwriter = fitz.DocumentWriter(out_path)\\n"", 'story.write(writer, rectfn)\\nwriter.close()\\n', '12.12.2 How\\nto\\ndo\\nIterative\\nLayout\\nfor\\na\\nTable\\nof\\nContents\\nwith\\nStory.\\nwrite_stabilized()\\n', 'This script creates html content dynamically, adding a contents section based on ElementPosition items that have non-\\nzero .heading values.\\n', 'The contents section is at the start of the document, so modifications to the contents can change page numbers in the\\nrest of the document, which in turn can cause page numbers in the contents section to be incorrect.\\n', 'So the script uses Story.write_stabilized() to repeatedly lay things out until things are stable.\\n', 'Files:\\n', '• docs/samples/story-write-stabilized.py\\n', '""""""\\nDemo script for PyMuPDF\\'s `fitz.Story.write_stabilized()`.\\n', '`fitz.Story.write_stabilized()` is similar to `fitz.Story.write()`,\\nexcept instead of taking a fixed html document, it does iterative layout\\nof dynamically-generated html content (provided by a callback) to a\\n`fitz.DocumentWriter`.\\n', 'For example this allows one to add a dynamically-generated table of contents\\nsection while ensuring that page numbers are patched up until stable.\\n""""""\\n', 'import textwrap\\n', 'import fitz\\n', 'def rectfn(rect_num, filled):\\n', ""'''\\nWe return one rect per page.\\n'''\\nrect = fitz.Rect(10, 20, 290, 380)\\nmediabox = fitz.Rect(0, 0, 300, 400)\\n#print(f'rectfn(): rect_num={rect_num} filled={filled}')\\n"", '(continues on next page)\\n', '126\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'return mediabox, rect, None\\n', 'def contentfn(positions):\\n', ""'''\\nReturns html content, with a table of contents derived from `positions`.\\n'''\\nret = ''\\nret += textwrap.dedent('''\\n"", ""<!DOCTYPE html>\\n<body>\\n<h2>Contents</h2>\\n<ul>\\n''')\\n"", '# Create table of contents with links to all <h1..6> sections in the\\n# document.\\nfor position in positions:\\n', 'if position.heading and (position.open_close & 1):\\ntext = position.text if position.text else \\'\\'\\nif position.id:\\nret += f""\\n<li><a href=\\\\""#{position.id}\\\\"">{text}</a>\\\\n""\\n', 'else:\\nret += f""\\n<li>{text}\\\\n""\\n', 'ret += f""\\n<ul>\\\\n""\\n', 'ret += f""\\n<li>page={position.page_num}\\\\n""\\n', 'ret += f""\\n<li>depth={position.depth}\\\\n""\\n', 'ret += f""\\n<li>heading={position.heading}\\\\n""\\n', 'ret += f""\\n<li>id={position.id!r}\\\\n""\\n', 'ret += f""\\n<li>href={position.href!r}\\\\n""\\n', 'ret += f""\\n<li>rect={position.rect}\\\\n""\\n', 'ret += f""\\n<li>text={text!r}\\\\n""\\n', 'ret += f""\\n<li>open_close={position.open_close}\\\\n""\\n', 'ret += f""\\n</ul>\\\\n""\\n', ""ret += '</ul>\\\\n'\\n"", ""# Main content.\\nret += textwrap.dedent(f'''\\n"", '<h1>First section</h1>\\n<p>Contents of first section.\\n', '<h1>Second section</h1>\\n<p>Contents of second section.\\n<h2>Second section first subsection</h2>\\n', '<p>Contents of second section first subsection.\\n', '<h1>Third section</h1>\\n<p>Contents of third section.\\n', '(continues on next page)\\n', '12.12. Using the Alternative Story.write*() functions\\n127\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""</body>\\n''')\\nret = ret.strip()\\nwith open(__file__.replace('.py', '.html'), 'w') as f:\\nf.write(ret)\\n"", 'return ret;\\n', ""out_path = __file__.replace('.py', '.pdf')\\nwriter = fitz.DocumentWriter(out_path)\\nfitz.Story.write_stabilized(writer, contentfn, rectfn)\\nwriter.close()\\n"", '12.12.3 How\\nto\\ndo\\nIterative\\nLayout\\nand\\nCreate\\nPDF\\nLinks\\nwith\\nStory.\\nwrite_stabilized_links()\\n', 'This script is similar to the one described in “How to use Story.write_stabilized()” above, except that the gen-\\nerated PDF also contains links that correspond to the internal links in the original html.\\n', 'This\\nis\\ndone\\nby\\nusing\\nStory.write_stabilized_links();\\nthis\\nis\\nslightly\\ndifferent\\nfrom\\nStory.\\nwrite_stabilized():\\n', '• It does not take a DocumentWriter writer arg.\\n', '• It returns a PDF Document instance.\\n', '[The reasons for this are a little involved; for example a DocumentWriter is not necessarily a PDF writer, so doesn’t\\nreally work in a PDF-specific API.]\\n', 'Files:\\n', '• docs/samples/story-write-stabilized-links.py\\n', '""""""\\nDemo script for PyMuPDF\\'s `fitz.Story.write_stabilized_with_links()`.\\n', '`fitz.Story.write_stabilized_links()` is similar to\\n`fitz.Story.write_stabilized()` except that it creates a PDF `fitz.Document`\\nthat contains PDF links generated from all internal links in the original html.\\n""""""\\n', 'import textwrap\\n', 'import fitz\\n', 'def rectfn(rect_num, filled):\\n', ""'''\\nWe return one rect per page.\\n"", '(continues on next page)\\n', '128\\nChapter 12. Stories\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""'''\\nrect = fitz.Rect(10, 20, 290, 380)\\nmediabox = fitz.Rect(0, 0, 300, 400)\\n#print(f'rectfn(): rect_num={rect_num} filled={filled}')\\nreturn mediabox, rect, None\\n"", 'def contentfn(positions):\\n', ""'''\\nReturns html content, with a table of contents derived from `positions`.\\n'''\\nret = ''\\nret += textwrap.dedent('''\\n"", ""<!DOCTYPE html>\\n<body>\\n<h2>Contents</h2>\\n<ul>\\n''')\\n"", '# Create table of contents with links to all <h1..6> sections in the\\n# document.\\nfor position in positions:\\n', 'if position.heading and (position.open_close & 1):\\ntext = position.text if position.text else \\'\\'\\nif position.id:\\nret += f""\\n<li><a href=\\\\""#{position.id}\\\\"">{text}</a>\\\\n""\\n', 'else:\\nret += f""\\n<li>{text}\\\\n""\\n', 'ret += f""\\n<ul>\\\\n""\\n', 'ret += f""\\n<li>page={position.page_num}\\\\n""\\n', 'ret += f""\\n<li>depth={position.depth}\\\\n""\\n', 'ret += f""\\n<li>heading={position.heading}\\\\n""\\n', 'ret += f""\\n<li>id={position.id!r}\\\\n""\\n', 'ret += f""\\n<li>href={position.href!r}\\\\n""\\n', 'ret += f""\\n<li>rect={position.rect}\\\\n""\\n', 'ret += f""\\n<li>text={text!r}\\\\n""\\n', 'ret += f""\\n<li>open_close={position.open_close}\\\\n""\\n', 'ret += f""\\n</ul>\\\\n""\\n', ""ret += '</ul>\\\\n'\\n"", ""# Main content.\\nret += textwrap.dedent(f'''\\n"", '<h1>First section</h1>\\n<p>Contents of first section.\\n<ul>\\n<li>External <a href=""https://artifex.com/"">link to https://artifex.com/</a>.\\n<li><a href=""#idtest"">Link to IDTEST</a>.\\n<li><a href=""#nametest"">Link to NAMETEST</a>.\\n</ul>\\n', '(continues on next page)\\n', '12.12. Using the Alternative Story.write*() functions\\n129\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '<h1>Second section</h1>\\n<p>Contents of second section.\\n<h2>Second section first subsection</h2>\\n', '<p>Contents of second section first subsection.\\n<p id=""idtest"">IDTEST\\n', '<h1>Third section</h1>\\n<p>Contents of third section.\\n<p><a name=""nametest"">NAMETEST</a>.\\n', ""</body>\\n''')\\nret = ret.strip()\\nwith open(__file__.replace('.py', '.html'), 'w') as f:\\nf.write(ret)\\n"", 'return ret;\\n', ""out_path = __file__.replace('.py', '.pdf')\\ndocument = fitz.Story.write_stabilized_with_links(contentfn, rectfn)\\ndocument.save(out_path)\\n"", 'This documentation covers all versions up to 1.23.25.\\n', '130\\nChapter 12. Stories\\n', 'CHAPTER\\n', 'THIRTEEN\\n', 'JOURNALLING\\n', 'Starting with version 1.19.0, journalling is possible when updating PDF documents.\\n', 'Journalling is a logging mechanism which permits either reverting or re-applying changes to a PDF. Similar to LUWs\\n“Logical Units of Work” in modern database systems, one can group a set of updates into an “operation”. In MuPDF\\njournalling, an operation plays the role of a LUW.\\n', 'Note: In contrast to LUW implementations found in database systems, MuPDF journalling happens on a per docu-\\nment level. There is no support for simultaneous updates across multiple PDFs: one would have to establish one’s own\\nlogic here.\\n', '• Journalling must be enabled via a document method. Journalling is possible for existing or new documents.\\nJournalling can be disabled only by closing the file.\\n', '• Once enabled, every change must happen inside an operation – otherwise an exception is raised. An operation is\\nstarted and stopped via document methods. Updates happening between these two calls form an LUW and can\\nthus collectively be rolled back or re-applied, or, in MuPDF terminology “undone” resp. “redone”.\\n', '• At any point, the journalling status can be queried: whether journalling is active, how many operations have been\\nrecorded, whether “undo” or “redo” is possible, the current position inside the journal, etc.\\n', '• The journal can be saved to or loaded from a file. These are document methods.\\n', '• When loading a journal file, compatibility with the document is checked and journalling is automatically enabled\\nupon success.\\n', '• For an existing PDF being journalled, a special new save method is available: Document.save_snapshot().\\nThis performs a special incremental save that includes all journalled updates so far. If its journal is saved at\\nthe same time (immediately after the document snapshot), then document and journal are in sync and can later\\non be used together to undo or redo operations or to continue journalled updates – just as if there had been no\\ninterruption.\\n', '• The snapshot PDF is a valid PDF in every aspect and fully usable. If the document is however changed in any\\nway without using its journal file, then a desynchronization will take place and the journal is rendered unusable.\\n', '• Snapshot files are structured like incremental updates. Nevertheless, the internal journalling logic requires, that\\nsaving must happen to a new file. So the user should develop a file naming convention to support recognizable\\nrelationships between an original PDF, like original.pdf and its snapshot sets, like original-snap1.pdf /\\noriginal-snap1.log, original-snap2.pdf / original-snap2.log, etc.\\n', '131\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '13.1 Example Session 1\\n', 'Description:\\n', '• Make a new PDF and enable journalling. Then add a page and some text lines – each as a separate operation.\\n', '• Navigate within the journal, undoing and redoing these updates and displaying status and file results:\\n', '>>> import fitz\\n>>> doc=fitz.open()\\n>>> doc.journal_enable()\\n', '>>> # try update without an operation:\\n>>> page = doc.new_page()\\nmupdf: No journalling operation started\\n... omitted lines\\nRuntimeError: No journalling operation started\\n', '>>> doc.journal_start_op(""op1"")\\n>>> page = doc.new_page()\\n>>> doc.journal_stop_op()\\n', '>>> doc.journal_start_op(""op2"")\\n>>> page.insert_text((100,100), ""Line 1"")\\n>>> doc.journal_stop_op()\\n', '>>> doc.journal_start_op(""op3"")\\n>>> page.insert_text((100,120), ""Line 2"")\\n>>> doc.journal_stop_op()\\n', '>>> doc.journal_start_op(""op4"")\\n>>> page.insert_text((100,140), ""Line 3"")\\n>>> doc.journal_stop_op()\\n', "">>> # show position in journal\\n>>> doc.journal_position()\\n(4, 4)\\n>>> # 4 operations recorded - positioned at bottom\\n>>> # what can we do?\\n>>> doc.journal_can_do()\\n{'undo': True, 'redo': False}\\n>>> # currently only undos are possible. Print page content:\\n>>> print(page.get_text())\\nLine 1\\nLine 2\\nLine 3\\n"", "">>> # undo last insert:\\n>>> doc.journal_undo()\\n>>> # show combined status again:\\n>>> doc.journal_position();doc.journal_can_do()\\n(3, 4)\\n{'undo': True, 'redo': True}\\n>>> print(page.get_text())\\n"", '(continues on next page)\\n', '132\\nChapter 13. Journalling\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'Line 1\\nLine 2\\n', "">>> # our position is now second to last\\n>>> # last text insertion was reverted\\n>>> # but we can redo / move forward as well:\\n>>> doc.journal_redo()\\n>>> # our combined status:\\n>>> doc.journal_position();doc.journal_can_do()\\n(4, 4)\\n{'undo': True, 'redo': False}\\n>>> print(page.get_text())\\nLine 1\\nLine 2\\nLine 3\\n>>> # line 3 has appeared again!\\n"", '13.2 Example Session 2\\n', 'Description:\\n', '• Similar to previous, but after undoing some operations, we now add a different update. This will cause:\\n', '– permanent removal of the undone journal entries\\n', '– the new update operation will become the new last entry.\\n', '>>> doc=fitz.open()\\n>>> doc.journal_enable()\\n>>> doc.journal_start_op(""Page insert"")\\n>>> page=doc.new_page()\\n>>> doc.journal_stop_op()\\n>>> for i in range(5):\\n', 'doc.journal_start_op(""insert-%i"" % i)\\npage.insert_text((100, 100 + 20*i), ""text line %i"" %i)\\ndoc.journal_stop_op()\\n', "">>> # combined status info:\\n>>> doc.journal_position();doc.journal_can_do()\\n(6, 6)\\n{'undo': True, 'redo': False}\\n"", '>>> for i in range(3):\\n# revert last three operations\\n', 'doc.journal_undo()\\n', "">>> doc.journal_position();doc.journal_can_do()\\n(3, 6)\\n{'undo': True, 'redo': True}\\n"", '>>> # now do a different update:\\n>>> doc.journal_start_op(""Draw some line"")\\n>>> page.draw_line((100,150), (300,150))\\n', '(continues on next page)\\n', '13.2. Example Session 2\\n133\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""Point(300.0, 150.0)\\n>>> doc.journal_stop_op()\\n>>> doc.journal_position();doc.journal_can_do()\\n(4, 4)\\n{'undo': True, 'redo': False}\\n"", '>>> # this has changed the journal:\\n>>> # previous last 3 text line operations were removed, and\\n>>> # we have only 4 operations: drawing the line is the new last one\\n', 'This documentation covers all versions up to 1.23.25.\\n', '134\\nChapter 13. Journalling\\n', 'CHAPTER\\n', 'FOURTEEN\\n', 'MULTIPROCESSING\\n', 'MuPDF has no integrated support for threading - calling itself “thread-agnostic”. While there do exist tricky possibil-\\nities to still use threading with MuPDF, the baseline consequence for PyMuPDF is:\\n', 'No Python threading support.\\n', 'Using PyMuPDF in a Python threading environment will lead to blocking effects for the main thread.\\n', 'However, there is the option to use Python’s multiprocessing module in a variety of ways.\\n', 'If you are looking to speed up page-oriented processing for a large document, use this script as a starting point. It\\nshould be at least twice as fast as the corresponding sequential processing.\\n', '""""""\\nDemonstrate the use of multiprocessing with PyMuPDF.\\n', 'Depending on the\\nnumber of CPUs, the document is divided in page ranges.\\n', 'Each range is then worked on by one process.\\nThe type of work would typically be text extraction or page rendering. Each\\nprocess must know where to put its results, because this processing pattern\\ndoes not include inter-process communication or data sharing.\\n', 'Compared to sequential processing, speed improvements in range of 100% (ie.\\ntwice as fast) or better can be expected.\\n""""""\\nfrom __future__ import print_function, division\\nimport sys\\nimport os\\nimport time\\nfrom multiprocessing import Pool, cpu_count\\nimport fitz\\n', '# choose a version specific timer function (bytes == str in Python 2)\\nmytime = time.clock if str is bytes else time.perf_counter\\n', 'def render_page(vector):\\n', '""""""Render a page range of a document.\\n', 'Notes:\\n', 'The PyMuPDF document cannot be part of the argument, because that\\ncannot be pickled. So we are being passed in just its filename.\\n', '(continues on next page)\\n', '135\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'This is no performance issue, because we are a separate process and\\nneed to open the document anyway.\\nAny page-specific function can be processed here - rendering is just\\nan example - text extraction might be another.\\nThe work must however be self-contained: no inter-process communication\\nor synchronization is possible with this design.\\nCare must also be taken with which parameters are contained in the\\nargument, because it will be passed in via pickling by the Pool class.\\nSo any large objects will increase the overall duration.\\n', 'Args:\\n', 'vector: a list containing required parameters.\\n', '""""""\\n# recreate the arguments\\nidx = vector[0]\\n# this is the segment number we have to process\\n', 'cpu = vector[1]\\n# number of CPUs\\n', 'filename = vector[2]\\n# document filename\\n', 'mat = vector[3]\\n# the matrix for rendering\\n', 'doc = fitz.open(filename)\\n# open the document\\n', 'num_pages = doc.page_count\\n# get number of pages\\n', '# pages per segment: make sure that cpu * seg_size >= num_pages!\\nseg_size = int(num_pages / cpu + 1)\\nseg_from = idx * seg_size\\n# our first page number\\n', 'seg_to = min(seg_from + seg_size, num_pages)\\n# last page number\\n', 'for i in range(seg_from, seg_to):\\n# work through our page segment\\n', 'page = doc[i]\\n# page.get_text(""rawdict"")\\n# use any page-related type of work here, eg\\n', 'pix = page.get_pixmap(alpha=False, matrix=mat)\\n# store away the result somewhere ...\\n# pix.save(""p-%i.png"" % i)\\n', 'print(""Processed page numbers %i through %i"" % (seg_from, seg_to - 1))\\n', 'if __name__ == ""__main__"":\\nt0 = mytime()\\n# start a timer\\n', 'filename = sys.argv[1]\\nmat = fitz.Matrix(0.2, 0.2)\\n# the rendering matrix: scale down to 20%\\n', 'cpu = cpu_count()\\n', '# make vectors of arguments for the processes\\nvectors = [(i, cpu, filename, mat) for i in range(cpu)]\\nprint(""Starting %i processes for \\'%s\\'."" % (cpu, filename))\\n', ""pool = Pool()\\n# make pool of 'cpu_count()' processes\\n"", 'pool.map(render_page, vectors, 1)\\n# start processes passing each a vector\\n', 't1 = mytime()\\n# stop the timer\\n', 'print(""Total time %g seconds"" % round(t1 - t0, 2))\\n', 'Here is a more complex example involving inter-process communication between a main process (showing a GUI) and\\n', '136\\nChapter 14. Multiprocessing\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'a child process doing PyMuPDF access to a document.\\n', '""""""\\nCreated on 2019-05-01\\n', '@author: yinkaisheng@live.com\\n@copyright: 2019 yinkaisheng@live.com\\n@license: GNU AFFERO GPL 3.0\\n', 'Demonstrate the use of multiprocessing with PyMuPDF\\n-----------------------------------------------------\\nThis example shows some more advanced use of multiprocessing.\\nThe main process show a Qt GUI and establishes a 2-way communication with\\nanother process, which accesses a supported document.\\n""""""\\nimport os\\nimport sys\\nimport time\\nimport multiprocessing as mp\\nimport queue\\nimport fitz\\n', ""''' PyQt and PySide namespace unifier shim\\n"", 'https://www.pythonguis.com/faq/pyqt6-vs-pyside6/\\nsimple ""if \\'PyQt6\\' in sys.modules:"" test fails for me, so the more complex pkgutil use\\noverkill for most people who might have one or the other, why both?\\n', ""'''\\n"", 'from pkgutil import iter_modules\\n', 'def module_exists(module_name):\\n', 'return module_name in (name for loader, name, ispkg in iter_modules())\\n', 'if\\nmodule_exists(""PyQt6""):\\n# PyQt6\\nfrom PyQt6 import QtGui, QtWidgets, QtCore\\nfrom PyQt6.QtCore import pyqtSignal as Signal, pyqtSlot as Slot\\nwrapper = ""PyQt6""\\n', 'elif module_exists(""PySide6""):\\n', '# PySide6\\nfrom PySide6 import QtGui, QtWidgets, QtCore\\nfrom PySide6.QtCore import Signal, Slot\\nwrapper = ""PySide6""\\n', 'my_timer = time.clock if str is bytes else time.perf_counter\\n', 'class DocForm(QtWidgets.QWidget):\\n', 'def __init__(self):\\n', 'super().__init__()\\n', '(continues on next page)\\n', '137\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'self.process = None\\nself.queNum = mp.Queue()\\nself.queDoc = mp.Queue()\\nself.page_count = 0\\nself.curPageNum = 0\\nself.lastDir = """"\\nself.timerSend = QtCore.QTimer(self)\\nself.timerSend.timeout.connect(self.onTimerSendPageNum)\\nself.timerGet = QtCore.QTimer(self)\\nself.timerGet.timeout.connect(self.onTimerGetPage)\\nself.timerWaiting = QtCore.QTimer(self)\\nself.timerWaiting.timeout.connect(self.onTimerWaiting)\\nself.initUI()\\n', 'def initUI(self):\\nvbox = QtWidgets.QVBoxLayout()\\nself.setLayout(vbox)\\n', 'hbox = QtWidgets.QHBoxLayout()\\nself.btnOpen = QtWidgets.QPushButton(""OpenDocument"", self)\\nself.btnOpen.clicked.connect(self.openDoc)\\nhbox.addWidget(self.btnOpen)\\n', 'self.btnPlay = QtWidgets.QPushButton(""PlayDocument"", self)\\nself.btnPlay.clicked.connect(self.playDoc)\\nhbox.addWidget(self.btnPlay)\\n', 'self.btnStop = QtWidgets.QPushButton(""Stop"", self)\\nself.btnStop.clicked.connect(self.stopPlay)\\nhbox.addWidget(self.btnStop)\\n', 'self.label = QtWidgets.QLabel(""0/0"", self)\\nself.label.setFont(QtGui.QFont(""Verdana"", 20))\\nhbox.addWidget(self.label)\\n', 'vbox.addLayout(hbox)\\n', 'self.labelImg = QtWidgets.QLabel(""Document"", self)\\nsizePolicy = QtWidgets.QSizePolicy(\\nQtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.\\n', '˓→Expanding\\n)\\nself.labelImg.setSizePolicy(sizePolicy)\\nvbox.addWidget(self.labelImg)\\n', 'self.setGeometry(100, 100, 400, 600)\\nself.setWindowTitle(""PyMuPDF Document Player"")\\nself.show()\\n', 'def openDoc(self):\\npath, _ = QtWidgets.QFileDialog.getOpenFileName(\\n', 'self,\\n', '(continues on next page)\\n', '138\\nChapter 14. Multiprocessing\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '""Open Document"",\\nself.lastDir,\\n""All Supported Files (*.pdf;*.epub;*.xps;*.oxps;*.cbz;*.fb2);;PDF Files (*.\\n', '˓→pdf);;EPUB Files (*.epub);;XPS Files (*.xps);;OpenXPS Files (*.oxps);;CBZ Files (*.\\n', '˓→cbz);;FB2 Files (*.fb2)"",\\n', '#options=QtWidgets.QFileDialog.Options(),\\n', ')\\nif path:\\n', 'self.lastDir, self.file = os.path.split(path)\\nif self.process:\\n', 'self.queNum.put(-1)\\n# use -1 to notify the process to exit\\n', 'self.timerSend.stop()\\nself.curPageNum = 0\\nself.page_count = 0\\nself.process = mp.Process(\\ntarget=openDocInProcess, args=(path, self.queNum, self.queDoc)\\n)\\nself.process.start()\\nself.timerGet.start(40)\\nself.label.setText(""0/0"")\\nself.queNum.put(0)\\nself.startTime = time.perf_counter()\\nself.timerWaiting.start(40)\\n', 'def playDoc(self):\\n', 'self.timerSend.start(500)\\n', 'def stopPlay(self):\\n', 'self.timerSend.stop()\\n', 'def onTimerSendPageNum(self):\\n', 'if self.curPageNum < self.page_count - 1:\\n', 'self.queNum.put(self.curPageNum + 1)\\n', 'else:\\n', 'self.timerSend.stop()\\n', 'def onTimerGetPage(self):\\n', 'try:\\nret = self.queDoc.get(False)\\nif isinstance(ret, int):\\n', 'self.timerWaiting.stop()\\nself.page_count = ret\\nself.label.setText(""{}/{}"".format(self.curPageNum + 1, self.page_count))\\n', 'else:\\n# tuple, pixmap info\\n', 'num, samples, width, height, stride, alpha = ret\\nself.curPageNum = num\\nself.label.setText(""{}/{}"".format(self.curPageNum + 1, self.page_count))\\nfmt = (\\nQtGui.QImage.Format.Format_RGBA8888\\nif alpha\\nelse QtGui.QImage.Format.Format_RGB888\\n)\\n', '(continues on next page)\\n', '139\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'qimg = QtGui.QImage(samples, width, height, stride, fmt)\\nself.labelImg.setPixmap(QtGui.QPixmap.fromImage(qimg))\\n', 'except queue.Empty as ex:\\n', 'pass\\n', 'def onTimerWaiting(self):\\n', 'self.labelImg.setText(\\n', '\\'Loading ""{}"", {:.2f}s\\'.format(\\n', 'self.file, time.perf_counter() - self.startTime\\n)\\n)\\n', 'def closeEvent(self, event):\\n', 'self.queNum.put(-1)\\nevent.accept()\\n', 'def openDocInProcess(path, queNum, quePageInfo):\\nstart = my_timer()\\ndoc = fitz.open(path)\\nend = my_timer()\\nquePageInfo.put(doc.page_count)\\nwhile True:\\nnum = queNum.get()\\nif num < 0:\\n', 'break\\n', 'page = doc.load_page(num)\\npix = page.get_pixmap()\\nquePageInfo.put(\\n(num, pix.samples, pix.width, pix.height, pix.stride, pix.alpha)\\n)\\ndoc.close()\\nprint(""process exit"")\\n', 'if __name__ == ""__main__"":\\napp = QtWidgets.QApplication(sys.argv)\\nform = DocForm()\\nsys.exit(app.exec())\\n', 'This documentation covers all versions up to 1.23.25.\\n', '140\\nChapter 14. Multiprocessing\\n', 'CHAPTER\\n', 'FIFTEEN\\n', 'OPTIONAL CONTENT SUPPORT\\n', 'This document explains PyMuPDF’s support of the PDF concept “Optional Content”.\\n', '15.1 Introduction: The Optional Content Concept\\n', 'Optional Content in PDF is a way to show or hide parts of a document based on certain conditions: Parameters that\\ncan be set to ON or to OFF when using a supporting PDF consumer (viewer), or programmatically.\\n', 'This capability is useful in items such as CAD drawings, layered artwork, maps, and multi-language documents. Typical\\nuses include showing or hiding details of complex vector graphics like geographical maps, technical devices, architec-\\ntural designs and similar, including automatically switching between different zooming levels. Other use cases may be\\nto automatically show different detail levels when displaying a document on screen as opposed to printing it.\\n', 'Special PDF objects, so-called Optional Content Groups (OCGs) are used to define these different layers of content.\\n', 'Assigning an OCG to a “normal” PDF object (like a text or an image) causes that object to be visible or hidden,\\ndepending on the current state of the assigned OCG.\\n', 'To ease definition of the overall configuration of a PDF’s Optional Content, OCGs can be organized in higher level\\ngroupings, called OC Configurations. Each configuration being a collection of OCGs, together with each OCG’s\\ndesired initial visibility state. Selecting one of these configurations (via the PDF viewer or programmatically) causes\\na corresponding visibility change of all affected PDF objects throughout the document.\\n', 'Except for the default one, OC Configurations are optional.\\n', 'For more explanations and additional background please refer to PDF specification manuals.\\n', '15.2 PyMuPDF Support for PDF Optional Content\\n', 'PyMuPDF offers full support for viewing, defining, changing and deleting Option Content Groups, Configurations,\\nmaintaining the assignment of OCGs to PDF objects and programmatically switching between OC Configurations and\\nthe visibility states of each single OCG.\\n', '141\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '15.3 How to Add Optional Content\\n', 'This is as simple as adding an Optional Content Group, OCG, to a PDF: Document.add_ocg().\\n', 'If previously the PDF had no OC support at all, the required setup (like defining the default OC Configuration) will be\\ndone at this point automatically.\\n', 'The method returns an xref of the created OCG. Use this xref to associate (mark) any PDF object with it, that you\\nwant to make dependent on this OCG’s state. For example, you can insert an image on a page and refer to the xref like\\nthis:\\n', 'img_xref = page.insert_image(rect, filename=""image.file"", oc=xref)\\n', 'If you want to put an existing image under the control of an OCG, you must first find out the image’s xref number (called\\nimg_xref here) and then do doc.set_oc(img_xref, xref). After this, the image will be (in-) visible everywhere\\nthroughout the document if the OCG’s state is “ON”, respectively “OFF”. You can also assign a different OCG with\\nthis method.\\n', 'To remove an OCG from an image, do doc.set_oc(img_xref, 0).\\n', 'One single OCG can be assigned to mutiple PDF objects to control their visibility.\\n', '15.4 How to Define Complex Optional Content Conditions\\n', 'Sophisticated logical conditions can be established to address complex visibility needs.\\n', 'For example, you might want to create a multi-language document, so the user may switch between languages as\\nrequired.\\n', 'Please have a look at this Jupyter Notebook and execute it as desired.\\n', 'Certainly, your requirements may even be more complex and involve multiple OCGs with ON/OFF states that are\\nconnected by some kind of logical relationship – but it should give you an impression of what is possible and how to\\nplan your next steps.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '142\\nChapter 15. Optional Content Support\\n', 'CHAPTER\\n', 'SIXTEEN\\n', 'LOW-LEVEL INTERFACES\\n', 'Numerous methods are available to access and manipulate PDF files on a fairly low level. Admittedly, a clear distinction\\nbetween “low level” and “normal” functionality is not always possible or subject to personal taste.\\n', 'It also may happen, that functionality previously deemed low-level is later on assessed as being part of the normal\\ninterface. This has happened in v1.14.0 for the class Tools - you now find it as an item in the Classes chapter.\\n', 'It is a matter of documentation only in which chapter of the documentation you find what you are looking for. Everything\\nis available and always via the same interface.\\n', '16.1 How to Iterate through the xref Table\\n', 'A PDF’s xref table is a list of all objects defined in the file. This table may easily contain many thousands of entries\\n– the manual Adobe PDF References for example has 127,000 objects. Table entry “0” is reserved and must not be\\ntouched. The following script loops through the xref table and prints each object’s definition:\\n', '>>> xreflen = doc.xref_length()\\n# length of objects table\\n', '>>> for xref in range(1, xreflen):\\n# skip item 0!\\n', 'print("""")\\nprint(""object %i (stream: %s)"" % (xref, doc.xref_is_stream(xref)))\\nprint(doc.xref_object(xref, compressed=False))\\n', 'This produces the following output:\\n', ""object 1 (stream: False)\\n<<\\n/ModDate (D:20170314122233-04'00')\\n/PXCViewerInfo (PDF-XChange Viewer;2.5.312.1;Feb\\n9 2015;12:00:06;D:20170314122233-04\\n"", ""˓→'00')\\n>>\\n"", 'object 2 (stream: False)\\n<<\\n/Type /Catalog\\n/Pages 3 0 R\\n>>\\n', 'object 3 (stream: False)\\n<<\\n', '(continues on next page)\\n', '143\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '/Kids [ 4 0 R 5 0 R ]\\n/Type /Pages\\n/Count 2\\n>>\\n', 'object 4 (stream: False)\\n<<\\n/Type /Page\\n/Annots [ 6 0 R ]\\n/Parent 3 0 R\\n/Contents 7 0 R\\n/MediaBox [ 0 0 595 842 ]\\n/Resources 8 0 R\\n>>\\n...\\nobject 7 (stream: True)\\n<<\\n/Length 494\\n/Filter /FlateDecode\\n>>\\n...\\n', 'A PDF object definition is an ordinary ASCII string.\\n', '16.2 How to Handle Object Streams\\n', 'Some object types contain additional data apart from their object definition. Examples are images, fonts, embedded\\nfiles or commands describing the appearance of a page.\\n', 'Objects of these types are called “stream objects”. PyMuPDF allows reading an object’s stream via method Document.\\nxref_stream() with the object’s xref as an argument. It is also possible to write back a modified version of a stream\\nusing Document.update_stream().\\n', 'Assume that the following snippet wants to read all streams of a PDF for whatever reason:\\n', '>>> xreflen = doc.xref_length() # number of objects in file\\n>>> for xref in range(1, xreflen): # skip item 0!\\n', 'if stream := doc.xref_stream(xref):\\n', '# do something with it (it is a bytes object or None)\\n# e.g. just write it back:\\ndoc.update_stream(xref, stream)\\n', 'Document.xref_stream() automatically returns a stream decompressed as a bytes object – and Document.\\nupdate_stream() automatically compresses it if beneficial.\\n', '144\\nChapter 16. Low-Level Interfaces\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '16.3 How to Handle Page Contents\\n', 'A PDF page can have zero or multiple contents objects. These are stream objects describing what appears where\\nand how on a page (like text and images). They are written in a special mini-language described e.g. in chapter\\n“APPENDIX A - Operator Summary” on page 643 of the Adobe PDF References.\\n', 'Every PDF reader application must be able to interpret the contents syntax to reproduce the intended appearance of the\\npage.\\n', 'If multiple contents objects are provided, they must be interpreted in the specified sequence in exactly the same way\\nas if they were provided as a concatenation of the several.\\n', 'There are good technical arguments for having multiple contents objects:\\n', '• It is a lot easier and faster to just add new contents objects than maintaining a single big one (which entails\\nreading, decompressing, modifying, recompressing, and rewriting it for each change).\\n', '• When working with incremental updates, a modified big contents object will bloat the update delta and can\\nthus easily negate the efficiency of incremental saves.\\n', 'For example, PyMuPDF adds new, small contents objects in methods Page.insert_image(), Page.\\nshow_pdf_page() and the Shape methods.\\n', 'However, there are also situations when a single contents object is beneficial: it is easier to interpret and more\\ncompressible than multiple smaller ones.\\n', 'Here are two ways of combining multiple contents of a page:\\n', '>>> # method 1: use the MuPDF clean function\\n>>> page.clean_contents()\\n# cleans and combines multiple Contents\\n', '>>> xref = page.get_contents()[0]\\n# only one /Contents now!\\n', '>>> cont = doc.xref_stream(xref)\\n>>> # this has also reformatted the PDF commands\\n', '>>> # method 2: extract concatenated contents\\n>>> cont = page.read_contents()\\n>>> # the /Contents source itself is unmodified\\n', 'The clean function Page.clean_contents() does a lot more than just glueing contents objects: it also corrects\\nand optimizes the PDF operator syntax of the page and removes any inconsistencies with the page’s object definition.\\n', '16.4 How to Access the PDF Catalog\\n', 'This is a central (“root”) object of a PDF. It serves as a starting point to reach important other objects and it also contains\\nsome global options for the PDF:\\n', '>>> import fitz\\n>>> doc=fitz.open(""PyMuPDF.pdf"")\\n>>> cat = doc.pdf_catalog()\\n# get xref of the /Catalog\\n', '>>> print(doc.xref_object(cat))\\n# print object definition\\n', '<<\\n', '/Type/Catalog\\n% object type\\n', '/Pages 3593 0 R\\n% points to page tree\\n', '/OpenAction 225 0 R\\n% action to perform on open\\n', '(continues on next page)\\n', '16.3. How to Handle Page Contents\\n145\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '/Names 3832 0 R\\n% points to global names tree\\n', '/PageMode /UseOutlines\\n% initially show the TOC\\n', '/PageLabels<</Nums[0<</S/D>>2<</S/r>>8<</S/D>>]>> % labels given to pages\\n/Outlines 3835 0 R\\n% points to outline tree\\n', '>>\\n', 'Note: Indentation, line breaks and comments are inserted here for clarification purposes only and will not normally\\nappear. For more information on the PDF catalog see section 7.7.2 on page 71 of the Adobe PDF References.\\n', '16.5 How to Access the PDF File Trailer\\n', 'The trailer of a PDF file is a dictionary located towards the end of the file. It contains special objects, and pointers\\nto important other information. See Adobe PDF References p. 42. Here is an overview:\\n', 'Key\\nType\\nValue\\n', 'Size\\nint\\nNumber of entries in the cross-reference table + 1.\\n', 'Prev\\nint\\nOffset to previous xref section (indicates incremental updates).\\n', 'Root\\ndictionary\\n(indirect) Pointer to the catalog. See previous section.\\n', 'Encrypt\\ndictionary\\nPointer to encryption object (encrypted files only).\\n', 'Info\\ndictionary\\n(indirect) Pointer to information (metadata).\\n', 'ID\\narray\\nFile identifier consisting of two byte strings.\\n', 'XRefStm\\nint\\nOffset of a cross-reference stream. See Adobe PDF References p. 49.\\n', 'Access this information via PyMuPDF with Document.pdf_trailer() or,\\nequivalently,\\nvia Document.\\nxref_object() using -1 instead of a valid xref number.\\n', '>>> import fitz\\n>>> doc=fitz.open(""PyMuPDF.pdf"")\\n>>> print(doc.xref_object(-1))\\n# or: print(doc.pdf_trailer())\\n', '<<\\n/Type /XRef\\n/Index [ 0 8263 ]\\n/Size 8263\\n/W [ 1 3 1 ]\\n/Root 8260 0 R\\n/Info 8261 0 R\\n/ID [ <4339B9CEE46C2CD28A79EBDDD67CC9B3> <4339B9CEE46C2CD28A79EBDDD67CC9B3> ]\\n/Length 19883\\n/Filter /FlateDecode\\n>>\\n>>>\\n', '146\\nChapter 16. Low-Level Interfaces\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '16.6 How to Access XML Metadata\\n', 'A PDF may contain XML metadata in addition to the standard metadata format. In fact, most PDF viewer or modifi-\\ncation software adds this type of information when saving the PDF (Adobe, Nitro PDF, PDF-XChange, etc.).\\n', 'PyMuPDF has no way to interpret or change this information directly, because it contains no XML features. XML\\nmetadata is however stored as a stream object, so it can be read, modified with appropriate software and written back.\\n', '>>> xmlmetadata = doc.get_xml_metadata()\\n>>> print(xmlmetadata)\\n<?xpacket begin=""\\\\ufeff"" id=""W5M0MpCehiHzreSzNTczkc9d""?>\\n<x:xmpmeta xmlns:x=""adobe:ns:meta/"" x:xmptk=""3.1-702"">\\n<rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"">\\n...\\nomitted data\\n...\\n<?xpacket end=""w""?>\\n', 'Using some XML package, the XML data can be interpreted and / or modified and then stored back. The following\\nalso works, if the PDF previously had no XML metadata:\\n', '>>> # write back modified XML metadata:\\n>>> doc.set_xml_metadata(xmlmetadata)\\n>>>\\n>>> # XML metadata can be deleted like this:\\n>>> doc.del_xml_metadata()\\n', '16.7 How to Extend PDF Metadata\\n', 'Attribute Document.metadata is designed so it works for all supported document types in the same way: it is a Python\\ndictionary with a fixed set of key-value pairs. Correspondingly, Document.set_metadata() only accepts standard\\nkeys.\\n', 'However, PDFs may contain items not accessible like this. Also, there may be reasons to store additional information,\\nlike copyrights. Here is a way to handle arbitrary metadata items by using PyMuPDF low-level functions.\\n', 'As an example, look at this standard metadata output of some PDF:\\n', ""# ---------------------\\n# standard metadata\\n# ---------------------\\npprint(doc.metadata)\\n{'author': 'PRINCE',\\n"", '\\'creationDate\\': ""D:2010102417034406\\'-30\\'"",\\n\\'creator\\': \\'PrimoPDF http://www.primopdf.com/\\',\\n\\'encryption\\': None,\\n\\'format\\': \\'PDF 1.4\\',\\n\\'keywords\\': \\'\\',\\n\\'modDate\\': ""D:20200725062431-04\\'00\\'"",\\n\\'producer\\': \\'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, \\'\\n', ""'AppendMode 1.1',\\n"", '(continues on next page)\\n', '16.6. How to Access XML Metadata\\n147\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""'subject': '',\\n'title': 'Full page fax print',\\n'trapped': ''}\\n"", 'Use the following code to see all items stored in the metadata object:\\n', '# ----------------------------------\\n# metadata including private items\\n# ----------------------------------\\nmetadata = {}\\n# make my own metadata dict\\n', 'what, value = doc.xref_get_key(-1, ""Info"")\\n# /Info key in the trailer\\n', 'if what != ""xref"":\\n', 'pass\\n# PDF has no metadata\\n', 'else:\\nxref = int(value.replace(""0 R"", """"))\\n# extract the metadata xref\\n', ""for key in doc.xref_get_keys(xref):\\nmetadata[key] = doc.xref_get_key(xref, key)[1]\\npprint(metadata)\\n{'Author': 'PRINCE',\\n"", '\\'CreationDate\\': ""D:2010102417034406\\'-30\\'"",\\n\\'Creator\\': \\'PrimoPDF http://www.primopdf.com/\\',\\n\\'ModDate\\': ""D:20200725062431-04\\'00\\'"",\\n\\'PXCViewerInfo\\': \\'PDF-XChange Viewer;2.5.312.1;Feb\\n9 \\'\\n', '""2015;12:00:06;D:20200725062431-04\\'00\\'"",\\n', ""'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\\n"", ""'AppendMode 1.1',\\n"", ""'Title': 'Full page fax print'}\\n"", ""# ---------------------------------------------------------------\\n# note the additional 'PXCViewerInfo' key - ignored in standard!\\n# ---------------------------------------------------------------\\n"", 'Vice versa, you can also store private metadata items in a PDF. It is your responsibility to make sure that these items\\nconform to PDF specifications - especially they must be (unicode) strings. Consult section 14.3 (p. 548) of the Adobe\\nPDF References for details and caveats:\\n', 'what, value = doc.xref_get_key(-1, ""Info"")\\n# /Info key in the trailer\\n', 'if what != ""xref"":\\n', 'raise ValueError(""PDF has no metadata"")\\nxref = int(value.replace(""0 R"", """"))\\n# extract the metadata xref\\n', '# add some private information\\ndoc.xref_set_key(xref, ""mykey"", fitz.get_pdf_str("" is Beijing""))\\n#\\n# after executing the previous code snippet, we will see this:\\npprint(metadata)\\n{\\'Author\\': \\'PRINCE\\',\\n', '\\'CreationDate\\': ""D:2010102417034406\\'-30\\'"",\\n\\'Creator\\': \\'PrimoPDF http://www.primopdf.com/\\',\\n\\'ModDate\\': ""D:20200725062431-04\\'00\\'"",\\n\\'PXCViewerInfo\\': \\'PDF-XChange Viewer;2.5.312.1;Feb\\n9 \\'\\n', '""2015;12:00:06;D:20200725062431-04\\'00\\'"",\\n', ""'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '\\n"", ""'AppendMode 1.1',\\n"", '(continues on next page)\\n', '148\\nChapter 16. Low-Level Interfaces\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""'Title': 'Full page fax print',\\n'mykey': ' is Beijing'}\\n"", 'To delete selected keys, use doc.xref_set_key(xref, ""mykey"", ""null""). As explained in the next section, string\\n“null” is the PDF equivalent to Python’s None. A key with that value will be treated as not being specified – and\\nphysically removed in garbage collections.\\n', '16.8 How to Read and Update PDF Objects\\n', 'There also exist granular, elegant ways to access and manipulate selected PDF dictionary keys.\\n', '• Document.xref_get_keys() returns the PDF keys of the object at xref:\\n', 'In [1]: import fitz\\nIn [2]: doc = fitz.open(""pymupdf.pdf"")\\nIn [3]: page = doc[0]\\nIn [4]: from pprint import pprint\\nIn [5]: pprint(doc.xref_get_keys(page.xref))\\n(\\'Type\\', \\'Contents\\', \\'Resources\\', \\'MediaBox\\', \\'Parent\\')\\n', '• Compare with the full object definition:\\n', 'In [6]: print(doc.xref_object(page.xref))\\n<<\\n', '/Type /Page\\n/Contents 1297 0 R\\n/Resources 1296 0 R\\n/MediaBox [ 0 0 612 792 ]\\n/Parent 1301 0 R\\n', '>>\\n', '• Single keys can also be accessed directly via Document.xref_get_key(). The value always is a string together\\nwith type information, that helps with interpreting it:\\n', 'In [7]: doc.xref_get_key(page.xref, ""MediaBox"")\\nOut[7]: (\\'array\\', \\'[0 0 612 792]\\')\\n', '• Here is a full listing of the above page keys:\\n', 'In [9]: for key in doc.xref_get_keys(page.xref):\\n...:\\nprint(""%s = %s"" % (key, doc.xref_get_key(page.xref, key)))\\n', ""...:\\nType = ('name', '/Page')\\nContents = ('xref', '1297 0 R')\\nResources = ('xref', '1296 0 R')\\nMediaBox = ('array', '[0 0 612 792]')\\nParent = ('xref', '1301 0 R')\\n"", ""• An undefined key inquiry returns ('null', 'null') – PDF object type null corresponds to None in Python.\\nSimilar for the booleans true and false.\\n"", '16.8. How to Read and Update PDF Objects\\n149\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Let us add a new key to the page definition that sets its rotation to 90 degrees (you are aware that there actually\\nexists Page.set_rotation() for this?):\\n', 'In [11]: doc.xref_get_key(page.xref, ""Rotate"")\\n# no rotation set:\\n', 'Out[11]: (\\'null\\', \\'null\\')\\nIn [12]: doc.xref_set_key(page.xref, ""Rotate"", ""90"")\\n# insert a new key\\n', 'In [13]: print(doc.xref_object(page.xref))\\n# confirm success\\n', '<<\\n', '/Type /Page\\n/Contents 1297 0 R\\n/Resources 1296 0 R\\n/MediaBox [ 0 0 612 792 ]\\n/Parent 1301 0 R\\n/Rotate 90\\n', '>>\\n', '• This method can also be used to remove a key from the xref dictionary by setting its value to null: The fol-\\nlowing will remove the rotation specification from the page: doc.xref_set_key(page.xref, ""Rotate"",\\n""null""). Similarly, to remove all links, annotations and fields from a page, use doc.xref_set_key(page.\\nxref, ""Annots"", ""null""). Because Annots by definition is an array, setting en empty array with the state-\\nment doc.xref_set_key(page.xref, ""Annots"", ""[]"") would do the same job in this case.\\n', '• PDF dictionaries can be hierarchically nested. In the following page object definition both, Font and XObject\\nare subdictionaries of Resources:\\n', 'In [15]: print(doc.xref_object(page.xref))\\n<<\\n', '/Type /Page\\n/Contents 1297 0 R\\n/Resources <<\\n', '/XObject <<\\n', '/Im1 1291 0 R\\n', '>>\\n/Font <<\\n', '/F39 1299 0 R\\n/F40 1300 0 R\\n', '>>\\n', '>>\\n/MediaBox [ 0 0 612 792 ]\\n/Parent 1301 0 R\\n/Rotate 90\\n', '>>\\n', '• The above situation is supported by methods Document.xref_set_key() and Document.xref_get_key():\\nuse a path-like notation to point at the required key. For example, to retrieve the value of key Im1 above, specify\\nthe complete chain of dictionaries “above” it in the key argument: ""Resources/XObject/Im1"":\\n', 'In [16]: doc.xref_get_key(page.xref, ""Resources/XObject/Im1"")\\nOut[16]: (\\'xref\\', \\'1291 0 R\\')\\n', '• The path notation can also be used to directly set a value: use the following to let Im1 point to a different object:\\n', 'In [17]: doc.xref_set_key(page.xref, ""Resources/XObject/Im1"", ""9999 0 R"")\\nIn [18]: print(doc.xref_object(page.xref))\\n# confirm success:\\n', '<<\\n', '(continues on next page)\\n', '150\\nChapter 16. Low-Level Interfaces\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '/Type /Page\\n/Contents 1297 0 R\\n/Resources <<\\n', '/XObject <<\\n', '/Im1 9999 0 R\\n', '>>\\n/Font <<\\n', '/F39 1299 0 R\\n/F40 1300 0 R\\n', '>>\\n', '>>\\n/MediaBox [ 0 0 612 792 ]\\n/Parent 1301 0 R\\n/Rotate 90\\n', '>>\\n', 'Be aware, that no semantic checks whatsoever will take place here: if the PDF has no xref 9999, it won’t be\\ndetected at this point.\\n', '• If a key does not exist, it will be created by setting its value. Moreover, if any intermediate keys do not exist\\neither, they will also be created as necessary. The following creates an array D several levels below the existing\\ndictionary A. Intermediate dictionaries B and C are automatically created:\\n', 'In [5]: print(doc.xref_object(xref))\\n# some existing PDF object:\\n', '<<\\n', '/A <<\\n>>\\n', '>>\\nIn [6]: # the following will create \\'B\\', \\'C\\' and \\'D\\'\\nIn [7]: doc.xref_set_key(xref, ""A/B/C/D"", ""[1 2 3 4]"")\\nIn [8]: print(doc.xref_object(xref))\\n# check out what happened:\\n', '<<\\n', '/A <<\\n', '/B <<\\n', '/C <<\\n', '/D [ 1 2 3 4 ]\\n', '>>\\n', '>>\\n', '>>\\n', '>>\\n', '• When setting key values, basic PDF syntax checking will be done by MuPDF. For example, new keys can only\\nbe created below a dictionary. The following tries to create some new string item E below the previously created\\narray D:\\n', 'In [9]: # \\'D\\' is an array, no dictionary!\\nIn [10]: doc.xref_set_key(xref, ""A/B/C/D/E"", ""(hello)"")\\nmupdf: not a dict (array)\\n--- ... ---\\nRuntimeError: not a dict (array)\\n', '• It is also not possible, to create a key if some higher level key is an “indirect” object, i.e. an xref. In other\\nwords, xrefs can only be modified directly and not implicitly via other objects referencing them:\\n', '16.8. How to Read and Update PDF Objects\\n151\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'In [13]: # the following object points to an xref\\nIn [14]: print(doc.xref_object(4))\\n<<\\n', '/E 3 0 R\\n', '>>\\nIn [15]: # \\'E\\' is an indirect object and cannot be modified here!\\nIn [16]: doc.xref_set_key(4, ""E/F"", ""90"")\\nmupdf: path to \\'F\\' has indirects\\n--- ... ---\\nRuntimeError: path to \\'F\\' has indirects\\n', 'Caution:\\nThese are expert functions! There are no validations as to whether valid PDF objects, xrefs, etc. are\\nspecified. As with other low-level methods there is the risk to render the PDF, or parts of it unusable.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '152\\nChapter 16. Low-Level Interfaces\\n', 'CHAPTER\\n', 'SEVENTEEN\\n', 'COMMON ISSUES AND THEIR SOLUTIONS\\n', '17.1 How To Dynamically Clean Up Corrupt PDFs\\n', 'This shows a potential use of PyMuPDF with another Python PDF library (the excellent pure Python package pdfrw\\nis used here as an example).\\n', 'If a clean, non-corrupt / decompressed PDF is needed, one could dynamically invoke PyMuPDF to recover from many\\nproblems like so:\\n', 'import sys\\nfrom io import BytesIO\\nfrom pdfrw import PdfReader\\nimport fitz\\n', '#---------------------------------------\\n# \\'Tolerant\\' PDF reader\\n#---------------------------------------\\ndef reader(fname, password = None):\\nidata = open(fname, ""rb"").read()\\n# read the PDF into memory and\\n', 'ibuffer = BytesIO(idata)\\n# convert to stream\\n', 'if password is None:\\n', 'try:\\n', 'return PdfReader(ibuffer)\\n# if this works: fine!\\n', 'except:\\n', 'pass\\n', '# either we need a password or it is a problem-PDF\\n# create a repaired / decompressed / decrypted version\\ndoc = fitz.open(""pdf"", ibuffer)\\nif password is not None:\\n# decrypt if password provided\\n', 'rc = doc.authenticate(password)\\nif not rc > 0:\\n', 'raise ValueError(""wrong password"")\\nc = doc.tobytes(garbage=3, deflate=True)\\ndel doc\\n# close & delete doc\\n', 'return PdfReader(BytesIO(c))\\n# let pdfrw retry\\n', '#---------------------------------------\\n# Main program\\n#---------------------------------------\\npdf = reader(""pymupdf.pdf"", password = None) # include a password if necessary\\n', '(continues on next page)\\n', '153\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'print pdf.Info\\n# do further processing\\n', 'With the command line utility pdftk (available for Windows only, but reported to also run under Wine) a similar result\\ncan be achieved, see here. However, you must invoke it as a separate process via subprocess.Popen, using stdin and\\nstdout as communication vehicles.\\n', '17.2 How to Convert Any Document to PDF\\n', 'Here is a script that converts any PyMuPDF supported document to a PDF. These include XPS, EPUB, FB2, CBZ and\\nimage formats, including multi-page TIFF images.\\n', 'It features maintaining any metadata, table of contents and links contained in the source document:\\n', '""""""\\nDemo script: Convert input file to a PDF\\n-----------------------------------------\\nIntended for multi-page input files like XPS, EPUB etc.\\n', 'Features:\\n---------\\nRecovery of table of contents and links of input file.\\nWhile this works well for bookmarks (outlines, table of contents),\\nlinks will only work if they are not of type ""LINK_NAMED"".\\nThis link type is skipped by the script.\\n', 'For XPS and EPUB input, internal links however **are** of type ""LINK_NAMED"".\\nBase library MuPDF does not resolve them to page numbers.\\n', 'So, for anyone expert enough to know the internal structure of these\\ndocument types, can further interpret and resolve these link types.\\n', 'Dependencies\\n--------------\\nPyMuPDF v1.14.0+\\n""""""\\nimport sys\\nimport fitz\\nif not (list(map(int, fitz.VersionBind.split("".""))) >= [1,14,0]):\\n', 'raise SystemExit(""need PyMuPDF v1.14.0+"")\\nfn = sys.argv[1]\\n', 'print(""Converting \\'%s\\' to \\'%s.pdf\\'"" % (fn, fn))\\n', 'doc = fitz.open(fn)\\n', 'b = doc.convert_to_pdf()\\n# convert to pdf\\n', 'pdf = fitz.open(""pdf"", b)\\n# open as pdf\\n', 'toc= doc.het_toc()\\n# table of contents of input\\n', 'pdf.set_toc(toc)\\n# simply set it for output\\n', '(continues on next page)\\n', '154\\nChapter 17. Common Issues and their Solutions\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'meta = doc.metadata\\n# read and set metadata\\n', 'if not meta[""producer""]:\\nmeta[""producer""] = ""PyMuPDF v"" + fitz.VersionBind\\n', 'if not meta[""creator""]:\\nmeta[""creator""] = ""PyMuPDF PDF converter""\\n', 'meta[""modDate""] = fitz.get_pdf_now()\\nmeta[""creationDate""] = meta[""modDate""]\\npdf.set_metadata(meta)\\n', '# now process the links\\nlink_cnti = 0\\nlink_skip = 0\\nfor pinput in doc:\\n# iterate through input pages\\n', 'links = pinput.get_links()\\n# get list of links\\n', 'link_cnti += len(links)\\n# count how many\\n', 'pout = pdf[pinput.number]\\n# read corresp. output page\\n', 'for l in links:\\n# iterate though the links\\n', 'if l[""kind""] == fitz.LINK_NAMED:\\n# we do not handle named links\\n', 'print(""named link page"", pinput.number, l)\\nlink_skip += 1\\n# count them\\n', 'continue\\n', 'pout.insert_link(l)\\n# simply output the others\\n', '# save the conversion result\\npdf.save(fn + "".pdf"", garbage=4, deflate=True)\\n# say how many named links we skipped\\nif link_cnti > 0:\\n', 'print(""Skipped %i named links of a total of %i in input."" % (link_skip, link_cnti))\\n', '17.3 How to Deal with Messages Issued by MuPDF\\n', 'Since PyMuPDF v1.16.0, error messages issued by the underlying MuPDF library are being redirected to the Python\\nstandard device sys.stderr. So you can handle them like any other output going to this devices.\\n', 'In addition, these messages go to the internal buffer together with any MuPDF warnings – see below.\\n', 'We always prefix these messages with an identifying string “mupdf:”. If you prefer to not see recoverable MuPDF\\nerrors at all, issue the command fitz.TOOLS.mupdf_display_errors(False).\\n', 'MuPDF warnings continue to be stored in an internal buffer and can be viewed using Tools.mupdf_warnings().\\n', 'Please note that MuPDF errors may or may not lead to Python exceptions. In other words, you may see error messages\\nfrom which MuPDF can recover and continue processing.\\n', 'Example output for a recoverable error. We are opening a damaged PDF, but MuPDF is able to repair it and gives\\nus a little information on what happened. Then we illustrate how to find out whether the document can later be saved\\nincrementally. Checking the Document.is_dirty attribute at this point also indicates that during fitz.open the\\ndocument had to be repaired:\\n', '>>> import fitz\\n>>> doc = fitz.open(""damaged-file.pdf"")\\n# leads to a sys.stderr message:\\n', '(continues on next page)\\n', '17.3. How to Deal with Messages Issued by MuPDF\\n155\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'mupdf: cannot find startxref\\n>>> print(fitz.TOOLS.mupdf_warnings())\\n# check if there is more info:\\n', ""cannot find startxref\\ntrying to repair broken xref\\nrepairing PDF document\\nobject missing 'endobj' token\\n>>> doc.can_save_incrementally()\\n# this is to be expected:\\n"", ""False\\n>>> # the following indicates whether there are updates so far\\n>>> # this is the case because of the repair actions:\\n>>> doc.is_dirty\\nTrue\\n>>> # the document has nevertheless been created:\\n>>> doc\\nfitz.Document('damaged-file.pdf')\\n>>> # we now know that any save must occur to a new file\\n"", 'Example output for an unrecoverable error:\\n', '>>> import fitz\\n>>> doc = fitz.open(""does-not-exist.pdf"")\\nmupdf: cannot open does-not-exist.pdf: No such file or directory\\nTraceback (most recent call last):\\n', 'File ""<pyshell#1>"", line 1, in <module>\\n', 'doc = fitz.open(""does-not-exist.pdf"")\\nFile ""C:\\\\Users\\\\Jorj\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python37\\\\lib\\\\site-packages\\\\fitz\\\\fitz.\\n', '˓→py"", line 2200, in __init__\\n', '_fitz.Document_swiginit(self, _fitz.new_Document(filename, stream, filetype, rect,␣\\n', '˓→width, height, fontsize))\\nRuntimeError: cannot open does-not-exist.pdf: No such file or directory\\n>>>\\n', '17.4 Changing Annotations: Unexpected Behaviour\\n', '17.4.1 Problem\\n', 'There are two scenarios:\\n', '1. Updating an annotation with PyMuPDF which was created by some other software.\\n', '2. Creating an annotation with PyMuPDF and later changing it with some other software.\\n', 'In both cases you may experience unintended changes, like a different annotation icon or text font, the fill color or line\\ndashing have disappeared, line end symbols have changed their size or even have disappeared too, etc.\\n', '156\\nChapter 17. Common Issues and their Solutions\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '17.4.2 Cause\\n', 'Annotation maintenance is handled differently by each PDF maintenance application. Some annotation types may not\\nbe supported, or not be supported fully or some details may be handled in a different way than in another application.\\nThere is no standard.\\n', 'Almost always a PDF application also comes with its own icons (file attachments, sticky notes and stamps) and its own\\nset of supported text fonts. For example:\\n', '• (Py-) MuPDF only supports these 5 basic fonts for ‘FreeText’ annotations: Helvetica, Times-Roman, Courier,\\nZapfDingbats and Symbol – no italics / no bold variations. When changing a ‘FreeText’ annotation created by\\nsome other app, its font will probably not be recognized nor accepted and be replaced by Helvetica.\\n', '• PyMuPDF supports all PDF text markers (highlight, underline, strikeout, squiggly), but these types cannot be\\nupdated with Adobe Acrobat Reader.\\n', 'In most cases there also exists limited support for line dashing which causes existing dashes to be replaced by straight\\nlines. For example:\\n', '• PyMuPDF fully supports all line dashing forms, while other viewers only accept a limited subset.\\n', '17.4.3 Solutions\\n', 'Unfortunately there is not much you can do in most of these cases.\\n', '1. Stay with the same software for creating and changing an annotation.\\n', '2. When using PyMuPDF to change an “alien” annotation, try to avoid Annot.update(). The following methods\\ncan be used without it, so that the original appearance should be maintained:\\n', '• Annot.set_rect() (location changes)\\n', '• Annot.set_flags() (annotation behaviour)\\n', '• Annot.set_info() (meta information, except changes to content)\\n', '• Annot.set_popup() (create popup or change its rect)\\n', '• Annot.set_optional_content() (add / remove reference to optional content information)\\n', '• Annot.set_open()\\n', '• Annot.update_file() (file attachment changes)\\n', '17.5 Misplaced Item Insertions on PDF Pages\\n', '17.5.1 Problem\\n', 'You inserted an item (like an image, an annotation or some text) on an existing PDF page, but later you find it being\\nplaced at a different location than intended. For example an image should be inserted at the top, but it unexpectedly\\nappears near the bottom of the page.\\n', '17.5. Misplaced Item Insertions on PDF Pages\\n157\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '17.5.2 Cause\\n', 'The creator of the PDF has established a non-standard page geometry without keeping it “local” (as they should!). Most\\ncommonly, the PDF standard point (0,0) at bottom-left has been changed to the top-left point. So top and bottom are\\nreversed – causing your insertion to be misplaced.\\n', 'The visible image of a PDF page is controlled by commands coded in a special mini-language. For an overview of\\nthis language consult “Operator Summary” on pp. 643 of the Adobe PDF References. These commands are stored in\\ncontents objects as strings (bytes in PyMuPDF).\\n', 'There are commands in that language, which change the coordinate system of the page for all the following commands.\\nIn order to limit the scope of such commands to “local”, they must be wrapped by the command pair q (“save graphics\\nstate”, or “stack”) and Q (“restore graphics state”, or “unstack”).\\n', 'So the PDF creator did this:\\n', 'stream\\n1 0 0 -1 0 792 cm\\n% <=== change of coordinate system:\\n...\\n% letter page, top / bottom reversed\\n...\\n% remains active beyond these lines\\nendstream\\n', 'where they should have done this:\\n', 'stream\\nq\\n% put the following in a stack\\n1 0 0 -1 0 792 cm\\n% <=== scope of this is limited by Q command\\n...\\n% here, a different geometry exists\\nQ\\n% after this line, geometry of outer scope prevails\\nendstream\\n', 'Note:\\n', '• In the mini-language’s syntax, spaces and line breaks are equally accepted token delimiters.\\n', '• Multiple consecutive delimiters are treated as one.\\n', '• Keywords “stream” and “endstream” are inserted automatically – not by the programmer.\\n', '17.5.3 Solutions\\n', 'Since v1.16.0, there is the property Page.is_wrapped, which lets you check whether a page’s contents are wrapped\\nin that string pair.\\n', 'If it is False or if you want to be on the safe side, pick one of the following:\\n', '1. The easiest way: in your script, do a Page.clean_contents() before you do your first item insertion.\\n', '2. Pre-process your PDF with the MuPDF command line utility mutool clean -c ... and work with its output file\\ninstead.\\n', '3. Directly wrap the page’s contents with the stacking commands before you do your first item insertion.\\n', 'Solutions 1. and 2. use the same technical basis and do a lot more than what is required in this context: they also\\nclean up other inconsistencies or redundancies that may exist, multiple /Contents objects will be concatenated into one,\\nand much more.\\n', '158\\nChapter 17. Common Issues and their Solutions\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\nFor incremental saves, solution 1. has an unpleasant implication: it will bloat the update delta, because\\nit changes so many things and, in addition, stores the cleaned contents uncompressed.\\nSo, if you use Page.\\nclean_contents() you should consider saving to a new file with (at least) garbage=3 and deflate=True.\\n', 'Solution 3. is completely under your control and only does the minimum corrective action. There is a handy utility\\nmethod Page.wrap_contents() which – as twe name suggests – wraps the page’s contents object(s) by the PDF\\ncommands q and Q.\\n', 'This solution is extremely fast and the changes to the PDF are minimal. This is useful in situations where incrementally\\nsaving the file is desirable – or even a must when the PDF has been digitally signed and you cannot change this status.\\n', 'We recommend the following snippet to get the situation under control:\\n', '>>> if not page.is_wrapped:\\n', 'page.wrap_contents()\\n', '>>> # start inserting text, images and other objects here\\n', '17.6 Missing or Unreadable Extracted Text\\n', 'Fairly often, text extraction does not work text as you would expect: text may be missing, or may not appear in the\\nreading sequence visible on your screen, or contain garbled characters (like a ? or a “TOFU” symbol), etc. This can\\nbe caused by a number of different problems.\\n', '17.6.1 Problem: no text is extracted\\n', 'Your PDF viewer does display text, but you cannot select it with your cursor, and text extraction delivers nothing.\\n', '17.6.2 Cause\\n', '1. You may be looking at an image embedded in the PDF page (e.g. a scanned PDF).\\n', '2. The PDF creator used no font, but simulated text by painting it, using little lines and curves. E.g. a capital “D”\\ncould be painted by a line “|” and a left-open semi-circle, an “o” by an ellipse, and so on.\\n', '17.6.3 Solution\\n', 'Use an OCR software like OCRmyPDF to insert a hidden text layer underneath the visible page. The resulting PDF\\nshould behave as expected.\\n', '17.6.4 Problem: unreadable text\\n', 'Text extraction does not deliver the text in readable order, duplicates some text, or is otherwise garbled.\\n', '17.6. Missing or Unreadable Extracted Text\\n159\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '17.6.5 Cause\\n', '1. The single characters are readable as such (no “<?>” symbols), but the sequence in which the text is coded in\\nthe file deviates from the reading order. The motivation behind may be technical or protection of data against\\nunwanted copies.\\n', '2. Many “<?>” symbols occur, indicating MuPDF could not interpret these characters. The font may indeed be\\nunsupported by MuPDF, or the PDF creator may haved used a font that displays readable text, but on purpose\\nobfuscates the originating corresponding unicode character.\\n', '17.6.6 Solution\\n', '1. Use layout preserving text extraction: python -m fitz gettext file.pdf.\\n', '2. If other text extraction tools also don’t work, then the only solution again is OCRing the page.\\n', 'This documentation covers all versions up to 1.23.25.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '160\\nChapter 17. Common Issues and their Solutions\\n', 'CHAPTER\\n', 'EIGHTEEN\\n', 'MODULE FITZ\\n', '• New in version 1.16.8\\n', 'PyMuPDF can also be used in the command line as a module to perform utility functions. This feature should obsolete\\nwriting some of the most basic scripts.\\n', 'Admittedly, there is some functional overlap with the MuPDF CLI mutool. On the other hand, PDF embedded files\\nare no longer supported by MuPDF, so PyMuPDF is offering something unique here.\\n', '18.1 Invocation\\n', 'Invoke the module like this:\\n', 'python -m fitz <command and parameters>\\n', 'General remarks:\\n', '• Request help via ""-h"", resp. command-specific help via ""command -h"".\\n', '• Parameters may be abbreviated where this does not introduce ambiguities.\\n', '• Several commands support parameters -pages and -xrefs. They are intended for down-selection. Please note\\nthat:\\n', '– page numbers for this utility must be given 1-based.\\n', '– valid xref numbers start at 1.\\n', '– Specify a comma-separated list of either single integers or integer ranges. A range is a pair of integers\\nseparated by one hyphen “-”. Integers must not exceed the maximum page, resp. xref number. To specify\\nthat maximum, the symbolic variable “N” may be used. Integers or ranges may occur several times, in any\\nsequence and may overlap. If in a range the first number is greater than the second one, the respective items\\nwill be processed in reversed order.\\n', '• How to use the module inside your script:\\n', '>>> from fitz.__main__ import main as fitz_command\\n>>> cmd = ""clean input.pdf output.pdf -pages 1,N"".split()\\n# prepare command line\\n', '>>> saved_parms = sys.argv[1:]\\n# save original command line\\n', '>>> sys.argv[1:] = cmd\\n# store new command line\\n', '>>> fitz_command()\\n# execute module\\n', '>>> sys.argv[1:] = saved_parms\\n# restore original command line\\n', '161\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Use the following 2-liner and compile it with Nuitka in standalone mode. This will give you a CLI executable\\nwith all the module’s features, that can be used on all compatible platforms without Python, PyMuPDF or MuPDF\\nbeing installed.\\n', 'from fitz.__main__ import main\\nmain()\\n', '18.2 Cleaning and Copying\\n', 'This command will optimize the PDF and store the result in a new file. You can use it also for encryption, decryption\\nand creating sub documents. It is mostly similar to the MuPDF command line utility “mutool clean”:\\n', 'python -m fitz clean -h\\nusage: fitz clean [-h] [-password PASSWORD]\\n[-encryption {keep,none,rc4-40,rc4-128,aes-128,aes-256}]\\n[-owner OWNER] [-user USER] [-garbage {0,1,2,3,4}]\\n[-compress] [-ascii] [-linear] [-permission PERMISSION]\\n[-sanitize] [-pretty] [-pages PAGES]\\ninput output\\n', '-------------- optimize PDF or create sub-PDF if pages given --------------\\n', 'positional arguments:\\ninput\\nPDF filename\\noutput\\noutput PDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-password PASSWORD\\npassword\\n-encryption {keep,none,rc4-40,rc4-128,aes-128,aes-256}\\nencryption method\\n-owner OWNER\\nowner password\\n-user USER\\nuser password\\n-garbage {0,1,2,3,4}\\ngarbage collection level\\n-compress\\ncompress (deflate) output\\n-ascii\\nASCII encode binary data\\n-linear\\nformat for fast web display\\n-permission PERMISSION\\ninteger with permission levels\\n-sanitize\\nsanitize / clean contents\\n-pretty\\nprettify PDF structure\\n-pages PAGES\\noutput selected pages, format: 1,5-7,50-N\\n', 'If you specify “-pages”, be aware that only page-related objects are copied, no document-level items like e.g. embedded\\nfiles.\\n', 'Please consult Document.save() for the parameter meanings.\\n', '162\\nChapter 18. Module fitz\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '18.3 Extracting Fonts and Images\\n', 'Extract fonts or images from selected PDF pages to a desired directory:\\n', 'python -m fitz extract -h\\nusage: fitz extract [-h] [-images] [-fonts] [-output OUTPUT] [-password PASSWORD]\\n[-pages PAGES]\\ninput\\n', '--------------------- extract images and fonts to disk --------------------\\n', 'positional arguments:\\ninput\\nPDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-images\\nextract images\\n-fonts\\nextract fonts\\n-output OUTPUT\\noutput directory, defaults to current\\n-password PASSWORD\\npassword\\n-pages PAGES\\nonly consider these pages, format: 1,5-7,50-N\\n', 'Image filenames are built according to the naming scheme: “img-xref.ext”, where “ext” is the extension associated\\nwith the image and “xref” the xref of the image PDF object.\\n', 'Font filenames consist of the fontname and the associated extension. Any spaces in the fontname are replaced with\\nhyphens “-“.\\n', 'The output directory must already exist.\\n', 'Note: Except for output directory creation, this feature is functionally equivalent to and obsoletes this script.\\n', '18.4 Joining PDF Documents\\n', 'To join several PDF files specify:\\n', 'python -m fitz join -h\\nusage: fitz join [-h] -output OUTPUT [input [input ...]]\\n', '---------------------------- join PDF documents ---------------------------\\n', 'positional arguments:\\ninput\\ninput filenames\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-output OUTPUT\\noutput filename\\n', ""specify each input as 'filename[,password[,pages]]'\\n"", 'Note:\\n', '18.3. Extracting Fonts and Images\\n163\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '1. Each input must be entered as “filename,password,pages”. Password and pages are optional.\\n', '2. The password entry is required if the “pages” entry is used. If the PDF needs no password, specify two commas.\\n', '3. The “pages” format is the same as explained at the top of this section.\\n', '4. Each input file is immediately closed after use. Therefore you can use one of them as output filename, and thus\\noverwrite it.\\n', 'Example: To join the following files\\n', '1. file1.pdf: all pages, back to front, no password\\n', '2. file2.pdf: last page, first page, password: “secret”\\n', '3. file3.pdf: pages 5 to last, no password\\n', 'and store the result as output.pdf enter this command:\\n', 'python -m fitz join -o output.pdf file1.pdf„N-1 file2.pdf,secret,N,1 file3.pdf„5-N\\n', '18.5 Low Level Information\\n', 'Display PDF internal information. Again, there are similarities to “mutool show”:\\n', 'python -m fitz show -h\\nusage: fitz show [-h] [-password PASSWORD] [-catalog] [-trailer] [-metadata]\\n[-xrefs XREFS] [-pages PAGES]\\ninput\\n', '------------------------- display PDF information -------------------------\\n', 'positional arguments:\\ninput\\nPDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-password PASSWORD\\npassword\\n-catalog\\nshow PDF catalog\\n-trailer\\nshow PDF trailer\\n-metadata\\nshow PDF metadata\\n-xrefs XREFS\\nshow selected objects, format: 1,5-7,N\\n-pages PAGES\\nshow selected pages, format: 1,5-7,50-N\\n', 'Examples:\\n', 'python -m fitz show x.pdf\\nPDF is password protected\\n', 'python -m fitz show x.pdf -pass hugo\\nauthentication unsuccessful\\n', ""python -m fitz show x.pdf -pass jorjmckie\\nauthenticated as owner\\nfile 'x.pdf', pages: 1, objects: 19, 58 MB, PDF 1.4, encryption: Standard V5 R6 256-bit␣\\n"", '(continues on next page)\\n', '164\\nChapter 18. Module fitz\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '˓→AES\\nDocument contains 15 embedded files.\\n', ""python -m fitz show FDA-1572_508_R6_FINAL.pdf -tr -m\\n'FDA-1572_508_R6_FINAL.pdf', pages: 2, objects: 1645, 1.4 MB, PDF 1.6, encryption:␣\\n"", '˓→Standard V4 R4 128-bit AES\\ndocument contains 740 root form fields and is signed\\n', ""------------------------------- PDF metadata ------------------------------\\nformat: PDF 1.6\\ntitle: FORM FDA 1572\\nauthor: PSC Publishing Services\\nsubject: Statement of Investigator\\nkeywords: None\\ncreator: PScript5.dll Version 5.2.2\\nproducer: Acrobat Distiller 9.0.0 (Windows)\\ncreationDate: D:20130522104413-04'00'\\nmodDate: D:20190718154905-07'00'\\nencryption: Standard V4 R4 128-bit AES\\n"", '------------------------------- PDF trailer -------------------------------\\n<<\\n/DecodeParms <<\\n/Columns 5\\n/Predictor 12\\n>>\\n/Encrypt 1389 0 R\\n/Filter /FlateDecode\\n/ID [ <9252E9E39183F2A0B0C51BE557B8A8FC> <85227BE9B84B724E8F678E1529BA8351> ]\\n/Index [ 1388 258 ]\\n/Info 1387 0 R\\n/Length 253\\n/Prev 1510559\\n/Root 1390 0 R\\n/Size 1646\\n/Type /XRef\\n/W [ 1 3 1 ]\\n>>\\n', '18.6 Embedded Files Commands\\n', 'The following commands deal with embedded files – which is a feature completely removed from MuPDF after v1.14,\\nand hence from all its command line tools.\\n', '18.6. Embedded Files Commands\\n165\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '18.6.1 Information\\n', 'Show the embedded file names (long or short format):\\n', 'python -m fitz embed-info -h\\nusage: fitz embed-info [-h] [-name NAME] [-detail] [-password PASSWORD] input\\n', '--------------------------- list embedded files ---------------------------\\n', 'positional arguments:\\ninput\\nPDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-name NAME\\nif given, report only this one\\n-detail\\nshow detail information\\n-password PASSWORD\\npassword\\n', 'Example:\\n', ""python -m fitz embed-info some.pdf\\n'some.pdf' contains the following 15 embedded files.\\n"", '20110813_180956_0002.jpg\\n20110813_181009_0003.jpg\\n20110813_181012_0004.jpg\\n20110813_181131_0005.jpg\\n20110813_181144_0006.jpg\\n20110813_181306_0007.jpg\\n20110813_181307_0008.jpg\\n20110813_181314_0009.jpg\\n20110813_181315_0010.jpg\\n20110813_181324_0011.jpg\\n20110813_181339_0012.jpg\\n20110813_181913_0013.jpg\\ninsta-20110813_180944_0001.jpg\\nmarkiert-20110813_180944_0001.jpg\\nneue.datei\\n', 'Detailed output would look like this per entry:\\n', 'name: neue.datei\\nfilename: text-tester.pdf\\nufilename: text-tester.pdf\\ndesc: nur zum Testen!\\nsize: 4639\\nlength: 1566\\n', '166\\nChapter 18. Module fitz\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '18.6.2 Extraction\\n', 'Extract an embedded file like this:\\n', 'python -m fitz embed-extract -h\\nusage: fitz embed-extract [-h] -name NAME [-password PASSWORD] [-output OUTPUT]\\ninput\\n', '---------------------- extract embedded file to disk ----------------------\\n', 'positional arguments:\\ninput\\nPDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-name NAME\\nname of entry\\n-password PASSWORD\\npassword\\n-output OUTPUT\\noutput filename, default is stored name\\n', 'For details consult Document.embfile_get(). Example (refer to previous section):\\n', ""python -m fitz embed-extract some.pdf -name neue.datei\\nSaved entry 'neue.datei' as 'text-tester.pdf'\\n"", '18.6.3 Deletion\\n', 'Delete an embedded file like this:\\n', 'python -m fitz embed-del -h\\nusage: fitz embed-del [-h] [-password PASSWORD] [-output OUTPUT] -name NAME input\\n', '--------------------------- delete embedded file --------------------------\\n', 'positional arguments:\\ninput\\nPDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-password PASSWORD\\npassword\\n-output OUTPUT\\noutput PDF filename, incremental save if none\\n-name NAME\\nname of entry to delete\\n', 'For details consult Document.embfile_del().\\n', '18.6. Embedded Files Commands\\n167\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '18.6.4 Insertion\\n', 'Add a new embedded file using this command:\\n', 'python -m fitz embed-add -h\\nusage: fitz embed-add [-h] [-password PASSWORD] [-output OUTPUT] -name NAME -path\\nPATH [-desc DESC]\\ninput\\n', '---------------------------- add embedded file ----------------------------\\n', 'positional arguments:\\ninput\\nPDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-password PASSWORD\\npassword\\n-output OUTPUT\\noutput PDF filename, incremental save if none\\n-name NAME\\nname of new entry\\n-path PATH\\npath to data for new entry\\n-desc DESC\\ndescription of new entry\\n', '“NAME” must not already exist in the PDF. For details consult Document.embfile_add().\\n', '18.6.5 Updates\\n', 'Update an existing embedded file using this command:\\n', 'python -m fitz embed-upd -h\\nusage: fitz embed-upd [-h] -name NAME [-password PASSWORD] [-output OUTPUT]\\n[-path PATH] [-filename FILENAME] [-ufilename UFILENAME]\\n[-desc DESC]\\ninput\\n', '--------------------------- update embedded file --------------------------\\n', 'positional arguments:\\ninput\\nPDF filename\\n', 'optional arguments:\\n-h, --help\\nshow this help message and exit\\n-name NAME\\nname of entry\\n-password PASSWORD\\npassword\\n-output OUTPUT\\nOutput PDF filename, incremental save if none\\n-path PATH\\npath to new data for entry\\n-filename FILENAME\\nnew filename to store in entry\\n-ufilename UFILENAME\\nnew unicode filename to store in entry\\n-desc DESC\\nnew description to store in entry\\n', ""except '-name' all parameters are optional\\n"", 'Use this method to change meta-information of the file – just omit the “PATH”. For details consult Document.\\nembfile_upd().\\n', '168\\nChapter 18. Module fitz\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '18.6.6 Copying\\n', 'Copy embedded files between PDFs:\\n', 'python -m fitz embed-copy -h\\nusage: fitz embed-copy [-h] [-password PASSWORD] [-output OUTPUT] -source\\nSOURCE [-pwdsource PWDSOURCE]\\n[-name [NAME [NAME ...]]]\\ninput\\n', '--------------------- copy embedded files between PDFs --------------------\\n', 'positional arguments:\\ninput\\nPDF to receive embedded files\\n', ""optional arguments:\\n-h, --help\\nshow this help message and exit\\n-password PASSWORD\\npassword of input\\n-output OUTPUT\\noutput PDF, incremental save to 'input' if omitted\\n-source SOURCE\\ncopy embedded files from here\\n-pwdsource PWDSOURCE\\npassword of 'source' PDF\\n-name [NAME [NAME ...]]\\nrestrict copy to these entries\\n"", '18.7 Text Extraction\\n', '• New in v1.18.16\\n', 'Extract text from arbitrary supported documents to a textfile. Currently, there are three output formatting modes avail-\\nable: simple, block sorting and reproduction of physical layout.\\n', '• Simple text extraction reproduces all text as it appears in the document pages – no effort is made to rearrange in\\nany particular reading order.\\n', '• Block sorting sorts text blocks (as identified by MuPDF) by ascending vertical, then horizontal coordinates.\\nThis should be sufficient to establish a “natural” reading order for basic pages of text.\\n', '• Layout strives to reproduce the original appearance of the input pages. You can expect results like this (produced\\nby the command python -m fitz gettext -pages 1 demo1.pdf):\\n', '18.7. Text Extraction\\n169\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\nThe “gettext” command offers a functionality similar to the CLI tool pdftotext by XPDF software, http:\\n//www.foolabs.com/xpdf/ – this is especially true for “layout” mode, which combines that tool’s -layout and -table\\noptions.\\n', 'After each page of the output file, a formfeed character, hex(12) is written – even if the input page has no text at all.\\nThis behavior can be controlled via options.\\n', 'Note:\\nFor “layout” mode, only horizontal, left-to-right, top-to bottom text is supported, other text is ignored. In\\nthis mode, text is also ignored, if its fontsize is too small.\\n', '“Simple” and “blocks” mode in contrast output all text for any text size or orientation.\\n', 'Command:\\n', 'python -m fitz gettext -h\\nusage: fitz gettext [-h] [-password PASSWORD] [-mode {simple,blocks,layout}] [-pages␣\\n', '˓→PAGES] [-noligatures]\\n[-convert-white] [-extra-spaces] [-noformfeed] [-skip-empty] [-\\n', '˓→output OUTPUT] [-grid GRID]\\n[-fontsize FONTSIZE]\\ninput\\n', '----------------- extract text in various formatting modes ----------------\\n', 'positional arguments:\\ninput\\ninput document filename\\n', 'optional arguments:\\n', '(continues on next page)\\n', '170\\nChapter 18. Module fitz\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '-h, --help\\nshow this help message and exit\\n-password PASSWORD\\npassword for input document\\n-mode {simple,blocks,layout}\\nmode: simple, block sort, or layout (default)\\n-pages PAGES\\nselect pages, format: 1,5-7,50-N\\n-noligatures\\nexpand ligature characters (default False)\\n-convert-white\\nconvert whitespace characters to space (default False)\\n-extra-spaces\\nfill gaps with spaces (default False)\\n-noformfeed\\nwrite linefeeds, no formfeeds (default False)\\n-skip-empty\\nsuppress pages with no text (default False)\\n-output OUTPUT\\nstore text in this file (default inputfilename.txt)\\n-grid GRID\\nmerge lines if closer than this (default 2)\\n-fontsize FONTSIZE\\nonly include text with a larger :data:�fontsize� (default 3)\\n', 'Note: Command options may be abbreviated as long as no ambiguities are introduced. So the following do the same:\\n', '• ... -output text.txt -noligatures -noformfeed -convert-white -grid 3 -extra-spaces\\n...\\n', '• ... -o text.txt -nol -nof -c -g 3 -e ...\\n', 'The output filename defaults to the input with its extension replaced by .txt. As with other commands, you can select\\npage ranges (caution: 1-based!) in mutool format, as indicated above.\\n', '• mode: (str) select a formatting mode – default is “layout”.\\n', '• noligatures: (bool) corresponds to not TEXT_PRESERVE_LIGATURES. If specified, ligatures (present in ad-\\nvanced fonts: glyphs combining multiple characters like “fi”) are split up into their components (i.e. “f”, “i”).\\nDefault is passing them through.\\n', '• convert-white: corresponds to not TEXT_PRESERVE_WHITESPACE. If specified, all white space characters (like\\ntabs) are replaced with one or more spaces. Default is passing them through.\\n', '• extra-spaces: (bool) corresponds to not TEXT_INHIBIT_SPACES. If specified, large gaps between adjacent\\ncharacters will be filled with one or more spaces. Default is off.\\n', '• noformfeed: (bool) instead of hex(12) (formfeed), write linebreaks n at end of output pages.\\n', '• skip-empty: (bool) skip pages with no text.\\n', '• grid: lines with a vertical coordinate difference of no more than this value (in points) will be merged into the\\nsame output line. Only relevant for “layout” mode. Use with care: 3 or the default 2 should be adequate in most\\ncases. If too large, lines that are intended to be different in the original may be merged and will result in garbled\\nand / or incomplete output. If too low, artifact separate output lines may be generated for some spans in the input\\nline, just because they are coded in a different font with slightly deviating properties.\\n', '• fontsize: include text with fontsize larger than this value only (default 3). Only relevant for “layout” option.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '18.7. Text Extraction\\n171\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '172\\nChapter 18. Module fitz\\n', 'CHAPTER\\n', 'NINETEEN\\n', 'CLASSES\\n', '19.1 Annot\\n', 'This class is supported for PDF documents only.\\n', 'Quote from the Adobe PDF References: “An annotation associates an object such as a note, sound, or movie with a\\nlocation on a page of a PDF document, or provides a way to interact with the user by means of the mouse and keyboard.”\\n', 'There is a parent-child relationship between an annotation and its page. If the page object becomes unusable (closed\\ndocument, any document structure change, etc.), then so does every of its existing annotation objects – an exception is\\nraised saying that the object is “orphaned”, whenever an annotation property or method is accessed.\\n', 'Attribute\\nShort Description\\n', 'Annot.delete_responses()\\ndelete all responding annotions\\n', 'Annot.get_file()\\nget attached file content\\n', 'Annot.get_oc()\\nget xref of an OCG / OCMD\\n', 'Annot.get_pixmap()\\nimage of the annotation as a pixmap\\n', 'Annot.get_sound()\\nget the sound of an audio annotation\\n', 'Annot.get_text()\\nextract annotation text\\n', 'Annot.get_textbox()\\nextract annotation text\\n', 'Annot.set_border()\\nset annotation’s border properties\\n', 'Annot.set_blendmode()\\nset annotation’s blend mode\\n', 'Annot.set_colors()\\nset annotation’s colors\\n', 'Annot.set_flags()\\nset annotation’s flags field\\n', 'Annot.set_irt_xref()\\ndefine the annotation to being “In Response To”\\n', 'Annot.set_name()\\nset annotation’s name field\\n', 'Annot.set_oc()\\nset xref to an OCG / OCMD\\n', 'Annot.set_opacity()\\nchange transparency\\n', 'Annot.set_open()\\nopen / close annotation or its Popup\\n', 'Annot.set_popup()\\ncreate a Popup for the annotation\\n', 'Annot.set_rect()\\nchange annotation rectangle\\n', 'Annot.set_rotation()\\nchange rotation\\n', 'Annot.update_file()\\nupdate attached file content\\n', 'Annot.update()\\napply accumulated annot changes\\n', 'Annot.blendmode\\nannotation BlendMode\\n', 'Annot.border\\nborder details\\n', 'Annot.colors\\nborder / background and fill colors\\n', 'Annot.file_info\\nget attached file information\\n', 'Annot.flags\\nannotation flags\\n', 'Annot.has_popup\\nwhether annotation has a Popup\\n', 'continues on next page\\n', '173\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 1 – continued from previous page\\n', 'Attribute\\nShort Description\\n', 'Annot.irt_xref\\nannotation to which this one responds\\n', 'Annot.info\\nvarious information\\n', 'Annot.is_open\\nwhether annotation or its Popup is open\\n', 'Annot.line_ends\\nstart / end appearance of line-type annotations\\n', 'Annot.next\\nlink to the next annotation\\n', 'Annot.opacity\\nthe annot’s transparency\\n', 'Annot.parent\\npage object of the annotation\\n', 'Annot.popup_rect\\nrectangle of the annotation’s Popup\\n', 'Annot.popup_xref\\nthe PDF xref number of the annotation’s Popup\\n', 'Annot.rect\\nrectangle containing the annotation\\n', 'Annot.type\\ntype of the annotation\\n', 'Annot.vertices\\npoint coordinates of Polygons, PolyLines, etc.\\n', 'Annot.xref\\nthe PDF xref number\\n', 'Class API\\n', 'class Annot\\n', 'get_pixmap(matrix=fitz.Identity, dpi=None, colorspace=fitz.csRGB, alpha=False)\\n', '• Changed in v1.19.2: added support of dpi parameter.\\n', 'Creates a pixmap from the annotation as it appears on the page in untransformed coordinates. The pixmap’s\\nIRect equals Annot.rect.irect (see below). All parameters are keyword only.\\n', 'Parameters\\n', '• matrix (matrix_like) – a matrix to be used for image creation. Default is Identity.\\n', '• dpi (int) – (new in v1.19.2) desired resolution in dots per inch. If not None, the matrix\\nparameter is ignored.\\n', '• colorspace (Colorspace) – a colorspace to be used for image creation.\\nDefault is\\nfitz.csRGB.\\n', '• alpha (bool) – whether to include transparency information. Default is False.\\n', 'Return type\\n', 'Pixmap\\n', 'Note:\\n', '• If the annotation has just been created or modified, you should Document.reload_page() the page\\nfirst via page = doc.reload_page(page).\\n', '• The pixmap will have “premultiplied” pixels if alpha=True. To learn about some background, e.g.\\nlook for “Premultiplied alpha” here.\\n', 'get_text(opt, clip=None, flags=None)\\n', '• New in 1.18.0\\n', 'Retrieves the content of the annotation in a variety of formats – much like the same method for Page.. This\\ncurrently only delivers relevant data for annotation types ‘FreeText’ and ‘Stamp’. Other types return an\\nempty string (or equivalent objects).\\n', 'Parameters\\n', '174\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• opt (str) – (positional only) the desired format - one of the following values. Please note\\nthat this method works exactly like the same-named method of Page.\\n', '– ”text” – TextPage.extractTEXT(), default\\n', '– ”blocks” – TextPage.extractBLOCKS()\\n', '– ”words” – TextPage.extractWORDS()\\n', '– ”html” – TextPage.extractHTML()\\n', '– ”xhtml” – TextPage.extractXHTML()\\n', '– ”xml” – TextPage.extractXML()\\n', '– ”dict” – TextPage.extractDICT()\\n', '– ”json” – TextPage.extractJSON()\\n', '– ”rawdict” – TextPage.extractRAWDICT()\\n', '• clip (rect-like) – (keyword only) restrict the extraction to this area. Should hardly ever\\nbe required, defaults to Annot.rect.\\n', '• flags (int) – (keyword only) control the amount of data returned. Defaults to simple text\\nextraction.\\n', 'get_textbox(rect)\\n', '• New in 1.18.0\\n', 'Return the annotation text. Mostly (except line breaks) equal to Annot.get_text() with the “text” option.\\n', 'Parameters\\n', 'rect (rect-like) – the area to consider, defaults to Annot.rect.\\n', 'set_info(info=None, content=None, title=None, creationDate=None, modDate=None, subject=None)\\n', '• Changed in version 1.16.10\\n', 'Changes annotation properties. These include dates, contents, subject and author (title). Changes for name\\nand id will be ignored. The update happens selectively: To leave a property unchanged, set it to None. To\\ndelete existing data, use an empty string.\\n', 'Parameters\\n', '• info (dict) – a dictionary compatible with the info property (see below). All entries must\\nbe strings. If this argument is not a dictionary, the other arguments are used instead – else\\nthey are ignored.\\n', '• content (str) – (new in v1.16.10) see description in info.\\n', '• title (str) – (new in v1.16.10) see description in info.\\n', '• creationDate (str) – (new in v1.16.10) date of annot creation. If given, should be in\\nPDF datetime format.\\n', '• modDate (str) – (new in v1.16.10) date of last modification. If given, should be in PDF\\ndatetime format.\\n', '• subject (str) – (new in v1.16.10) see description in info.\\n', 'set_line_ends(start, end)\\n', 'Sets an annotation’s line ending styles. Each of these annotation types is defined by a list of points which\\nare connected by lines. The symbol identified by start is attached to the first point, and end to the last point\\nof this list. For unsupported annotation types, a no-operation with a warning message results.\\n', '19.1. Annot\\n175\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\n', '• While ‘FreeText’, ‘Line’, ‘PolyLine’, and ‘Polygon’ annotations can have these properties, (Py-)\\nMuPDF does not support line ends for ‘FreeText’, because the call-out variant of it is not supported.\\n', '• (Changed in v1.16.16) Some symbols have an interior area (diamonds, circles, squares, etc.). By de-\\nfault, these areas are filled with the fill color of the annotation. If this is None, then white is chosen. The\\nfill_color argument of Annot.update() can now be used to override this and give line end symbols\\ntheir own fill color.\\n', 'Parameters\\n', '• start (int) – The symbol number for the first point.\\n', '• end (int) – The symbol number for the last point.\\n', 'set_oc(xref )\\n', 'Set the annotation’s visibility using PDF optional content mechanisms. This visibility is controlled by the\\nuser interface of supporting PDF viewers. It is independent from other attributes like Annot.flags.\\n', 'Parameters\\n', 'xref (int) – the xref of an optional contents group (OCG or OCMD). Any previous xref\\nwill be overwritten. If zero, a previous entry will be removed. An exception occurs if the xref\\nis not zero and does not point to a valid PDF object.\\n', 'Note: This does not require executing Annot.update() to take effect.\\n', 'get_oc()\\n', 'Return the xref of an optional content object, or zero if there is none.\\n', 'Returns\\n', 'zero or the xref of an OCG (or OCMD).\\n', 'set_irt_xref(xref )\\n', '• New in v1.19.3\\n', 'Set annotation to be “In Response To” another one.\\n', 'Parameters\\n', 'xref (int) – The xref of another annotation.\\n', 'Note:\\nMust refer to an existing annotation on this page. Setting this property requires no\\nsubsequent update().\\n', 'set_open(value)\\n', '• New in v1.18.4\\n', 'Set the annotation’s Popup annotation to open or closed – or the annotation itself, if its type is ‘Text’ (“sticky\\nnote”).\\n', 'Parameters\\n', 'value (bool) – the desired open state.\\n', '176\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'set_popup(rect)\\n', '• New in v1.18.4\\n', 'Create a Popup annotation for the annotation and specify its rectangle. If the Popup already exists, only its\\nrectangle is updated.\\n', 'Parameters\\n', 'rect (rect_like) – the desired rectangle.\\n', 'set_opacity(value)\\n', 'Set the annotation’s transparency. Opacity can also be set in Annot.update().\\n', 'Parameters\\n', 'value (float) – a float in range [0, 1]. Any value outside is assumed to be 1. E.g. a value\\nof 0.5 sets the transparency to 50%.\\n', 'Three overlapping ‘Circle’ annotations with each opacity set to 0.5:\\n', 'blendmode\\n', '• New in v1.18.4\\n', 'The annotation’s blend mode. See Adobe PDF References, page 324 for explanations.\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'the blend mode or None.\\n', 'set_blendmode(blendmode)\\n', '• New in v1.16.14\\n', 'Set the annotation’s blend mode. See Adobe PDF References, page 324 for explanations. The blend mode\\ncan also be set in Annot.update().\\n', 'Parameters\\n', 'blendmode (str) – set the blend mode. Use Annot.update() to reflect this in the visual\\nappearance. For predefined values see PDF Standard Blend Modes. Use PDF_BM_Normal to\\nremove a blend mode.\\n', 'set_name(name)\\n', '• New in version 1.16.0\\n', '19.1. Annot\\n177\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Change the name field of any annotation type. For ‘FileAttachment’ and ‘Text’ annotations, this is the icon\\nname, for ‘Stamp’ annotations the text in the stamp. The visual result (if any) depends on your PDF viewer.\\nSee also Annotation Icons in MuPDF.\\n', 'Parameters\\n', 'name (str) – the new name.\\n', 'Caution:\\nIf you set the name of a ‘Stamp’ annotation, then this will not change the rectangle, nor\\nwill the text be layouted in any way. If you choose a standard text from Stamp Annotation Icons (the\\nexact name piece after ""STAMP_""), you should receive the original layout. An arbitrary text will not\\nbe changed to upper case, but be written in font “Times-Bold” as is, horizontally centered in one line\\nand be shortened to fit. To get your text fully displayed, its length using fontsize 20 must not exceed\\n190 points. So please make sure that the following inequality is true: fitz.get_text_length(text,\\nfontname=""tibo"", fontsize=20) <= 190.\\n', 'set_rect(rect)\\n', 'Change the rectangle of an annotation. The annotation can be moved around and both sides of the rectangle\\ncan be independently scaled. However, the annotation appearance will never get rotated, flipped or sheared.\\nThis method only affects certain annotation types2 and will lead to a message on Python’s sys.stderr in\\nother cases. No exception will be raised, but False will be returned.\\n', 'Parameters\\n', 'rect (rect_like) – the new rectangle of the annotation (finite and not empty). E.g. using\\na value of annot.rect + (5, 5, 5, 5) will shift the annot position 5 pixels to the right and\\ndownwards.\\n', 'Note: You need not invoke Annot.update() for activation of the effect.\\n', 'set_rotation(angle)\\n', 'Set the rotation of an annotation. This rotates the annotation rectangle around its center point. Then a new\\nannotation rectangle is calculated from the resulting quad.\\n', 'Parameters\\n', 'angle (int) – rotation angle in degrees. Arbitrary values are possible, but will be clamped\\nto the interval [0, 360).\\n', 'Note:\\n', '• You must invoke Annot.update() to activate the effect.\\n', '• For PDF_ANNOT_FREE_TEXT, only one of the values 0, 90, 180 and 270 is possible and will rotate\\nthe text inside the current rectangle (which remains unchanged). Other values are silently ignored and\\nreplaced by 0.\\n', '• Otherwise, only the following Annotation Types can be rotated: ‘Square’, ‘Circle’, ‘Caret’, ‘Text’,\\n‘FileAttachment’, ‘Ink’, ‘Line’, ‘Polyline’, ‘Polygon’, and ‘Stamp’. For all others the method is a no-\\nop.\\n', 'set_border(border=None, width=None, style=None, dashes=None, clouds=None)\\n', '2 Only the following annotation types support method Annot.set_rect(): Text, FreeText, Square, Circle, Redact, Stamp, Caret, FileAttach-\\nment, Sound, and Movie.\\n', '178\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed in version 1.16.9: Allow specification without using a dictionary. The direct parameters are\\nused if border is not a dictionary.\\n', '• Changed in version 1.22.5: Support of the “cloudy” border effect.\\n', 'PDF only: Change border width, dashing, style and cloud effect. See the Annot.border attribute for more\\ndetails.\\n', 'Parameters\\n', '• border (dict) – a dictionary as returned by the border property, with keys “width”\\n(float), “style” (str), “dashes” (sequence) and clouds (int). Omitted keys will leave the\\nresp. property unchanged. Set the border argument to None (the default) to use the other\\narguments.\\n', '• width (float) – A non-negative value will change the border line width.\\n', '• style (str) – A value other than None will change this border property.\\n', '• dashes (sequence) – All items of the sequence must be integers, otherwise the parameter\\nis ignored. To remove dashing use: dashes=[]. If dashes is a non-empty sequence, “style”\\nwill automatically be set to “D” (dashed).\\n', '• clouds (int) – A value >= 0 will change this property. Use clouds=0 to remove the\\ncloudy appearance completely. Only annotation types ‘Square’, ‘Circle’, and ‘Polygon’ are\\nsupported with this property.\\n', 'set_flags(flags)\\n', 'Changes the annotation flags. Use the | operator to combine several.\\n', 'Parameters\\n', 'flags (int) – an integer specifying the required flags.\\n', 'set_colors(colors=None, stroke=None, fill=None)\\n', '• Changed in version 1.16.9: Allow colors to be directly set. These parameters are used if colors is not\\na dictionary.\\n', 'Changes the “stroke” and “fill” colors for supported annotation types – not all annotations accept both.\\n', 'Parameters\\n', '• colors (dict) – a dictionary containing color specifications. For accepted dictionary keys\\nand values see below. The most practical way should be to first make a copy of the colors\\nproperty and then modify this dictionary as required.\\n', '• stroke (sequence) – see above.\\n', '• fill (sequence) – see above.\\n', 'Changed in v1.18.5: To completely remove a color specification, use an empty sequence like []. If you\\nspecify None, an existing specification will not be changed.\\n', 'delete_responses()\\n', '• New in version 1.16.12\\n', 'Delete annotations referring to this one. This includes any ‘Popup’ annotations and all annotations respond-\\ning to it.\\n', 'update(opacity=None, blend_mode=None, fontsize=0, text_color=None, border_color=None,\\nfill_color=None, cross_out=True, rotate=-1)\\n', 'Synchronize the appearance of an annotation with its properties after relevant changes.\\n', 'You can safely omit this method only for the following changes:\\n', '19.1. Annot\\n179\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Annot.set_rect()\\n', '• Annot.set_flags()\\n', '• Annot.set_oc()\\n', '• Annot.update_file()\\n', '• Annot.set_info() (except any changes to “content”)\\n', 'All arguments are optional. (Changed in v1.16.14) Blend mode and opacity are applicable to all annotation\\ntypes. The other arguments are mostly special use, as described below.\\n', 'Color specifications may be made in the usual format used in PuMuPDF as sequences of floats ranging from\\n0.0 to 1.0 (including both). The sequence length must be 1, 3 or 4 (supporting GRAY, RGB and CMYK\\ncolorspaces respectively). For GRAY, just a float is also acceptable.\\n', 'Parameters\\n', '• opacity (float) – (new in v1.16.14) valid for all annotation types: change or set the\\nannotation’s transparency. Valid values are 0 <= opacity < 1.\\n', '• blend_mode (str) – (new in v1.16.14) valid for all annotation types: change or set the\\nannotation’s blend mode. For valid values see PDF Standard Blend Modes.\\n', '• fontsize (float) – change fontsize of the text. ‘FreeText’ annotations only.\\n', '• text_color (sequence,float) – change the text color. ‘FreeText’ annotations only.\\n', '• border_color (sequence,float) – change the border color. ‘FreeText’ annotations\\nonly.\\n', '• fill_color (sequence,float) – the fill color.\\n', '– ’Line’, ‘Polyline’, ‘Polygon’ annotations: use it to give applicable line end symbols a fill\\ncolor other than that of the annotation (changed in v1.16.16).\\n', '• cross_out (bool) – (new in v1.17.2) add two diagonal lines to the annotation rectangle.\\n‘Redact’ annotations only. If not desired, False must be specified even if the annotation\\nwas created with False.\\n', '• rotate (int) – new rotation value. Default (-1) means no change. Supports ‘FreeText’\\nand several other annotation types (see Annot.set_rotation()),1. Only choose 0, 90,\\n180, or 270 degrees for ‘FreeText’. Otherwise any integer is acceptable.\\n', 'Return type\\n', 'bool\\n', 'Note:\\nUsing this method inside a Page.annots() loop is not recommended! This is because most\\nannotation updates require the owning page to be reloaded – which cannot be done inside this loop. Please\\nuse the example coding pattern given in the documentation of this generator.\\n', 'file_info\\n', 'Basic information of the annot’s attached file.\\n', 'Return type\\n', 'dict\\n', '1 Rotating an annotation also changes its rectangle. Depending on how the annotation was defined, the original rectangle is cannot be recon-\\nstructed by setting the rotation value to zero again and will be lost.\\n', '180\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Returns\\n', 'a dictionary with keys filename, ufilename, desc (description), size (uncompressed file size),\\nlength (compressed length) for FileAttachment annot types, else None.\\n', 'get_file()\\n', 'Returns attached file content.\\n', 'Return type\\n', 'bytes\\n', 'Returns\\n', 'the content of the attached file.\\n', 'update_file(buffer=None, filename=None, ufilename=None, desc=None)\\n', 'Updates the content of an attached file. All arguments are optional. No arguments lead to a no-op.\\n', 'Parameters\\n', '• buffer (bytes|bytearray|BytesIO) – the new file content. Omit to only change meta-\\ninformation.\\n', '(Changed in version 1.14.13) io.BytesIO is now also supported.\\n', '• filename (str) – new filename to associate with the file.\\n', '• ufilename (str) – new unicode filename to associate with the file.\\n', '• desc (str) – new description of the file content.\\n', 'get_sound()\\n', 'Return the embedded sound of an audio annotation.\\n', 'Return type\\n', 'dict\\n', 'Returns\\n', 'the sound audio file and accompanying properties. These are the possible dictionary keys, of\\nwhich only “rate” and “stream” are always present.\\n', 'Key\\nDescription\\n', 'rate\\n(float, requ.) samples per second\\n', 'channels\\n(int, opt.) number of sound channels\\n', 'bps\\n(int, opt.) bits per sample value per channel\\n', 'encoding\\n(str, opt.) encoding format: Raw, Signed, muLaw, ALaw\\n', 'compression\\n(str, opt.) name of compression filter\\n', 'stream\\n(bytes, requ.) the sound file content\\n', 'opacity\\n', 'The annotation’s transparency. If set, it is a value in range [0, 1]. The PDF default is 1. However, in an\\neffort to tell the difference, we return -1.0 if not set.\\n', 'Return type\\n', 'float\\n', 'parent\\n', 'The owning page object of the annotation.\\n', 'Return type\\n', 'Page\\n', '19.1. Annot\\n181\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'rotation\\n', 'The annot rotation.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'a value [-1, 359]. If rotation is not at all, -1 is returned (and implies a rotation angle of 0).\\nOther possible values are normalized to some value value 0 <= angle < 360.\\n', 'rect\\n', 'The rectangle containing the annotation.\\n', 'Return type\\n', 'Rect\\n', 'next\\n', 'The next annotation on this page or None.\\n', 'Return type\\n', 'Annot\\n', 'type\\n', 'A number and one or two strings describing the annotation type, like [2, ‘FreeText’, ‘FreeTextCallout’].\\nThe second string entry is optional and may be empty. See the appendix Annotation Types for a list of\\npossible values and their meanings.\\n', 'Return type\\n', 'list\\n', 'info\\n', 'A dictionary containing various information. All fields are optional strings. For information items not\\nprovided, an empty string is returned.\\n', '• name – e.g. for ‘Stamp’ annotations it will contain the stamp text like “Sold” or “Experimental”, for\\nother annot types you will see the name of the annot’s icon here (“PushPin” for FileAttachment).\\n', '• content – a string containing the text for type Text and FreeText annotations. Commonly used for filling\\nthe text field of annotation pop-up windows.\\n', '• title – a string containing the title of the annotation pop-up window. By convention, this is used for the\\nannotation author.\\n', '• creationDate – creation timestamp.\\n', '• modDate – last modified timestamp.\\n', '• subject – subject.\\n', '• id – (new in version 1.16.10) a unique identification of the annotation. This is taken from PDF key\\n/NM. Annotations added by PyMuPDF will have a unique name, which appears here.\\n', 'Return type\\n', 'dict\\n', 'flags\\n', 'An integer whose low order bits contain flags for how the annotation should be presented.\\n', 'Return type\\n', 'int\\n', '182\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'line_ends\\n', 'A pair of integers specifying start and end symbol of annotations types ‘FreeText’, ‘Line’, ‘PolyLine’, and\\n‘Polygon’. None if not applicable. For possible values and descriptions in this list, see the Adobe PDF\\nReferences, table 1.76 on page 400.\\n', 'Return type\\n', 'tuple\\n', 'vertices\\n', 'A list containing a variable number of point (“vertices”) coordinates (each given by a pair of floats) for\\nvarious types of annotations:\\n', '• ‘Line’ – the starting and ending coordinates (2 float pairs).\\n', '• ‘FreeText’ – 2 or 3 float pairs designating the starting, the (optional) knee point, and the ending coor-\\ndinates.\\n', '• ‘PolyLine’ / ‘Polygon’ – the coordinates of the edges connected by line pieces (n float pairs for n\\npoints).\\n', '• text markup annotations – 4 float pairs specifying the QuadPoints of the marked text span (see Adobe\\nPDF References, page 403).\\n', '• ‘Ink’ – list of one to many sublists of vertex coordinates. Each such sublist represents a separate line\\nin the drawing.\\n', 'Return type\\n', 'list\\n', 'colors\\n', 'dictionary of two lists of floats in range 0 <= float <= 1 specifying the “stroke” and the interior (“fill”)\\ncolors. The stroke color is used for borders and everything that is actively painted or written (“stroked”).\\nThe fill color is used for the interior of objects like line ends, circles and squares. The lengths of these lists\\nimplicitly determine the colorspaces used: 1 = GRAY, 3 = RGB, 4 = CMYK. So “[1.0, 0.0, 0.0]” stands for\\nRGB color red. Both lists can be empty if no color is specified.\\n', 'Return type\\n', 'dict\\n', 'xref\\n', 'The PDF xref.\\n', 'Return type\\n', 'int\\n', 'irt_xref\\n', 'The PDF xref of an annotation to which this one responds. Return zero if this is no response annotation.\\n', 'Return type\\n', 'int\\n', 'popup_xref\\n', 'The PDF xref of the associated Popup annotation. Zero if non-existent.\\n', 'Return type\\n', 'int\\n', 'has_popup\\n', 'Whether the annotation has a Popup annotation.\\n', '19.1. Annot\\n183\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'bool\\n', 'is_open\\n', 'Whether the annotation’s Popup is open – or the annotation itself (‘Text’ annotations only).\\n', 'Return type\\n', 'bool\\n', 'popup_rect\\n', 'The rectangle of the associated Popup annotation. Infinite rectangle if non-existent.\\n', 'Return type\\n', 'Rect\\n', 'rect_delta\\n', 'A tuple of four floats representing the /RD entry of the annotation. The four numbers describe the numerical\\ndifferences (left, top, -right, -bottom) between two rectangles: the rect of the annotation and a rectangle\\ncontained within that rectangle. If the entry is missing, this property is (0, 0, 0, 0). If the annotation\\nborder is a normal, straight line, these numbers are typically border width divided by 2. If the annotation\\nhas a “cloudy” border, you will see the breadth of the cloud semi-circles here. In general, the numbers need\\nnot be identical. To compute the inner rectangle do a.rect + a.rect_delta.\\n', 'border\\n', 'A dictionary containing border characteristics. Empty if no border information exists. The following keys\\nmay be present:\\n', '• width – a float indicating the border thickness in points. The value is -1.0 if no width is specified.\\n', '• dashes – a sequence of integers specifying a line dashing pattern. [] means no dashes, [n] means equal\\non-off lengths of n points, longer lists will be interpreted as specifying alternating on-off length values.\\nSee the Adobe PDF References page 126 for more details.\\n', '• style – 1-byte border style: “S” (Solid) = solid line surrounding the annotation, “D” (Dashed) = dashed\\nline surrounding the annotation, the dash pattern is specified by the dashes entry, “B” (Beveled) = a\\nsimulated embossed rectangle that appears to be raised above the surface of the page, “I” (Inset) = a\\nsimulated engraved rectangle that appears to be recessed below the surface of the page, “U” (Underline)\\n= a single line along the bottom of the annotation rectangle.\\n', '• clouds – an integer indicating a “cloudy” border, where n is an integer -1 <= n <= 2. A value n =\\n0 indicates a straight line (no clouds), 1 means small and 2 means large semi-circles, mimicking the\\ncloudy appearance. If -1, then no specification is present.\\n', 'Return type\\n', 'dict\\n', '19.1.1 Annotation Icons in MuPDF\\n', 'This is a list of icons referenceable by name for annotation types ‘Text’ and ‘FileAttachment’. You can use them via the\\nicon parameter when adding an annotation, or use the as argument in Annot.set_name(). It is left to your discretion\\nwhich item to choose when – no mechanism will keep you from using e.g. the “Speaker” icon for a ‘FileAttachment’.\\n', '184\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.1.2 Example\\n', 'Change the graphical image of an annotation. Also update the “author” and the text to be shown in the popup window:\\n', 'doc = fitz.open(""circle-in.pdf"")\\npage = doc[0]\\n# page 0\\n', 'annot = page.first_annot\\n# get the annotation\\n', 'annot.set_border(dashes=[3])\\n# set dashes to ""3 on, 3 off ...""\\n', '# set stroke and fill color to some blue\\nannot.set_colors({""stroke"":(0, 0, 1), ""fill"":(0.75, 0.8, 0.95)})\\ninfo = annot.info\\n# get info dict\\n', 'info[""title""] = ""Jorj X. McKie""\\n# set author\\n', '# text in popup window ...\\ninfo[""content""] = ""I changed border and colors and enlarged the image by 20%.""\\ninfo[""subject""] = ""Demonstration of PyMuPDF""\\n# some PDF viewers also show this\\n', 'annot.set_info(info)\\n# update info dict\\n', 'r = annot.rect\\n# take annot rect\\n', 'r.x1 = r.x0 + r.width\\n* 1.2\\n# new location has same top-left\\n', 'r.y1 = r.y0 + r.height * 1.2\\n# but 20% longer sides\\n', 'annot.set_rect(r)\\n# update rectangle\\n', '(continues on next page)\\n', '19.1. Annot\\n185\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""annot.update()\\n# update the annot's appearance\\n"", 'doc.save(""circle-out.pdf"")\\n# save\\n', 'This is how the circle annotation looks like before and after the change (pop-up windows displayed using Nitro PDF\\nviewer):\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.2 Archive\\n', '• New in v1.21.0\\n', 'This class represents a generalization of file folders and container files like ZIP and TAR archives. Archives allow\\naccessing arbitrary collections of file folders, ZIP / TAR files and single binary data elements as if they all were part\\nof one hierarchical tree of folders.\\n', 'In PyMuPDF, archives are currently only used by Story objects to specify where to look for fonts, images and other\\nresources.\\n', 'Method / Attribute\\nShort Description\\n', 'Archive.add()\\nadd new data to the archive\\n', 'Archive.has_entry()\\ncheck if given name is a member\\n', 'Archive.read_entry()\\nread the data given by the name\\n', 'Archive.entry_list\\nlist[dict] of archive items\\n', 'Class API\\n', 'class Archive\\n', '186\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '__init__(self[, content[, path]])\\n', 'Creates a new archive. Without parameters, an empty archive is created.\\n', 'If provided, content may be one of the following:\\n', '• another Archive: the archive is being made a sub-archive of the new one.\\n', '• a string: this must be the name of a local folder or file. pathlib.Path objects are also supported.\\n', '– A folder will be converted to a sub-archive, so its files (and any sub-folders) can be accessed by\\ntheir names.\\n', '– A file will be read with mode ""rb"" and these binary data (a bytes object) be treated as a single-\\nmember sub-archive. In this case, the path parameter is mandatory and should be the member\\nname under which this item can be found / retrieved.\\n', '• a zipfile.ZipFile or tarfile.TarFile object: Will be added as a sub-archive.\\n', '• a Python binary object (bytes, bytearray, io.BytesIO): this will add a single-member sub-archive.\\nIn this case, the path parameter is mandatory and should be the member name under which this item\\ncan be found / retrieved.\\n', '• a tuple (data, name): This will add a single-member sub-archive with the member name name.\\ndata may be a Python binary object or a local file name (in which case its binary file content is used).\\nUse this format if you need to specify path.\\n', '• a Python sequence: This is a convenience format to specify any combination of the above.\\n', 'If provided, path must be a string.\\n', '• If content is either binary data or a file name, this parameter is mandatory and must be the name\\nunder which the data can be found.\\n', '• Otherwise this parameter is optional. It can be used to simulate a folder name or a mount point, under\\nwhich this sub-archive’s elements can be found. For example this specification Archive((data,\\n""name""), ""path"") means that data will be found using the element name ""path/name"". Similar\\nis true for other sub-archives: to retrieve members of a ZIP sub-archive, their names must be prefixed\\nwith ""path/"". The main purpose of this parameter probably is to differentiate between duplicate\\nnames.\\n', 'Note:\\nIf duplicate entry names exist in the archive, always the last entry with that name will be found /\\nretrieved. During archive creation, or appending more data to an archive (see Archive.add()) no check\\nfor duplicates will be made. Use the path parameter to prevent this from happening.\\n', 'add(content[, path])\\n', 'Append a sub-archive. The meaning of the parameters are exactly the same as explained above. Of course,\\nparameter content is not optional here.\\n', 'has_entry(name)\\n', 'Checks whether an entry exists in any of the sub-archives.\\n', 'Parameters\\n', 'name (str) – The fully qualified name of the entry. So must include any path prefix under\\nwhich the entry’s sub-archive has been added.\\n', 'Returns\\n', 'True or False.\\n', 'read_entry(name)\\n', 'Retrieve the data of an entry.\\n', '19.2. Archive\\n187\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'name (str) – The fully qualified name of the entry. So must include any path prefix under\\nwhich the entry’s sub-archive has been added.\\n', 'Returns\\n', 'The binary data (bytes) of the entry. If not found, an exception is raised.\\n', 'entry_list\\n', 'A list of the archive’s sub-archives. Each list item is a dictionary with the following keys:\\n', '• entries – a list of (top-level) entry names in this sub-archive.\\n', '• fmt – the format of the sub-archive. This is one of the strings “dir” (file folder), “zip” (ZIP archive),\\n“tar” (TAR archive), or “tree” for single binary entries or file content.\\n', '• path – the value of the path parameter under which this sub-archive was added.\\n', 'Example:\\n', '>>> from pprint import pprint\\n>>> import fitz\\n>>> dir1 = ""fitz-32""\\n# a folder name\\n', '>>> dir2 = ""fitz-64""\\n# a folder name\\n', '>>> img = (""nur-ruhig.jpg"", ""img"")\\n# an image file\\n', '>>> members = (dir1, img, dir2)\\n# we want to append these in one go\\n', '>>> arch = fitz.Archive()\\n>>> arch.add(members, path=""mypath"")\\n>>> pprint(arch.entry_list)\\n[{\\'entries\\': [\\'310\\', \\'37\\', \\'38\\', \\'39\\'], \\'fmt\\': \\'dir\\', \\'path\\': \\'mypath\\'},\\n{\\'entries\\': [\\'img\\'], \\'fmt\\': \\'tree\\', \\'path\\': \\'mypath\\'},\\n{\\'entries\\': [\\'310\\', \\'311\\', \\'37\\', \\'38\\', \\'39\\', \\'pypy\\'],\\n\\'fmt\\': \\'dir\\',\\n\\'path\\': \\'mypath\\'}]\\n>>>\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.3 Colorspace\\n', 'Represents the color space of a Pixmap.\\n', 'Class API\\n', 'class Colorspace\\n', '__init__(self, n)\\n', 'Constructor\\n', 'Parameters\\n', 'n (int) – A number identifying the colorspace. Possible values are CS_RGB, CS_GRAY and\\nCS_CMYK.\\n', '188\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'name\\n', 'The name identifying the colorspace. Example: fitz.csCMYK.name = ‘DeviceCMYK’.\\n', 'Type\\n', 'str\\n', 'n\\n', 'The number of bytes required to define the color of one pixel. Example: fitz.csCMYK.n == 4.\\n', 'type\\n', 'int\\n', 'Predefined Colorspaces\\n', 'For saving some typing effort, there exist predefined colorspace objects for the three available cases.\\n', '• csRGB = fitz.Colorspace(fitz.CS_RGB)\\n', '• csGRAY = fitz.Colorspace(fitz.CS_GRAY)\\n', '• csCMYK = fitz.Colorspace(fitz.CS_CMYK)\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.4 DisplayList\\n', 'DisplayList is a list containing drawing commands (text, images, etc.). The intent is two-fold:\\n', '1. as a caching-mechanism to reduce parsing of a page\\n', '2. as a data structure in multi-threading setups, where one thread parses the page and another one renders pages.\\nThis aspect is currently not supported by PyMuPDF.\\n', 'A display list is populated with objects from a page, usually by executing Page.get_displaylist(). There also\\nexists an independent constructor.\\n', '“Replay” the list (once or many times) by invoking one of its methods run(), get_pixmap() or get_textpage().\\n', 'Method\\nShort Description\\n', 'run()\\nRun a display list through a device.\\n', 'get_pixmap()\\ngenerate a pixmap\\n', 'get_textpage()\\ngenerate a text page\\n', 'rect\\nmediabox of the display list\\n', 'Class API\\n', 'class DisplayList\\n', '__init__(self, mediabox)\\n', 'Create a new display list.\\n', 'Parameters\\n', 'mediabox (Rect) – The page’s rectangle.\\n', 'Return type\\n', 'DisplayList\\n', '19.4. DisplayList\\n189\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'run(device, matrix, area)\\n', 'Run the display list through a device. The device will populate the display list with its “commands” (i.e.\\ntext extraction or image creation). The display list can later be used to “read” a page many times without\\nhaving to re-interpret it from the document file.\\n', 'You will most probably instead use one of the specialized run methods below – get_pixmap() or\\nget_textpage().\\n', 'Parameters\\n', '• device (Device) – Device\\n', '• matrix (Matrix) – Transformation matrix to apply to the display list contents.\\n', '• area (Rect) – Only the part visible within this area will be considered when the list is run\\nthrough the device.\\n', 'get_pixmap(matrix=fitz.Identity, colorspace=fitz.csRGB, alpha=0, clip=None)\\n', 'Run the display list through a draw device and return a pixmap.\\n', 'Parameters\\n', '• matrix (Matrix) – matrix to use. Default is the identity matrix.\\n', '• colorspace (Colorspace) – the desired colorspace. Default is RGB.\\n', '• alpha (int) – determine whether or not (0, default) to include a transparency channel.\\n', '• clip (irect_like) – restrict rendering to the intersection of this area with\\n', 'DisplayList.rect.\\n', 'Return type\\n', 'Pixmap\\n', 'Returns\\n', 'pixmap of the display list.\\n', 'get_textpage(flags)\\n', 'Run the display list through a text device and return a text page.\\n', 'Parameters\\n', 'flags (int) – control which information is parsed into a text page.\\nDefault value\\nin PyMuPDF is 3 = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE, i.e.\\nligatures are passed through, white spaces are passed through (not translated to spaces),\\nand images are not included. See Text Extraction Flags.\\n', 'Return type\\n', 'TextPage\\n', 'Returns\\n', 'text page of the display list.\\n', 'rect\\n', 'Contains the display list’s mediabox. This will equal the page’s rectangle if it was created via Page.\\nget_displaylist().\\n', 'Type\\n', 'Rect\\n', 'This documentation covers all versions up to 1.23.25.\\n', '190\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.5 Document\\n', 'This class represents a document. It can be constructed from a file or from memory.\\n', 'There exists the alias open for this class, i.e. fitz.Document(...) and fitz.open(...) do exactly the same thing.\\n', 'For details on embedded files refer to Appendix 3.\\n', 'Note:\\nStarting with v1.17.0, a new page addressing mechanism for EPUB files only is supported. This document\\ntype is internally organized in chapters such that pages can most efficiently be found by their so-called “location”. The\\nlocation is a tuple (chapter, pno) consisting of the chapter number and the page number in that chapter. Both numbers\\nare zero-based.\\n', 'While it is still possible to locate a page via its (absolute) number, doing so may mean that the complete EPUB document\\nmust be laid out before the page can be addressed. This may have a significant performance impact if the document is\\nvery large. Using the page’s (chapter, pno) prevents this from happening.\\n', 'To maintain a consistent API, PyMuPDF supports the page location syntax for all file types – documents without this\\nfeature simply have just one chapter. Document.load_page() and the equivalent index access now also support a\\nlocation argument.\\n', 'There are a number of methods for converting between page numbers and locations, for determining the chapter count,\\nthe page count per chapter, for computing the next and the previous locations, and the last page location of a document.\\n', 'Method / Attribute\\nShort Description\\n', 'Document.add_layer()\\nPDF only: make new optional content configuration\\n', 'Document.add_ocg()\\nPDF only: add new optional content group\\n', 'Document.authenticate()\\ngain access to an encrypted document\\n', 'Document.can_save_incrementally()\\ncheck if incremental save is possible\\n', 'Document.chapter_page_count()\\nnumber of pages in chapter\\n', 'Document.close()\\nclose the document\\n', 'Document.convert_to_pdf()\\nwrite a PDF version to memory\\n', 'Document.copy_page()\\nPDF only: copy a page reference\\n', 'Document.del_toc_item()\\nPDF only: remove a single TOC item\\n', 'Document.delete_page()\\nPDF only: delete a page\\n', 'Document.delete_pages()\\nPDF only: delete multiple pages\\n', 'Document.embfile_add()\\nPDF only: add a new embedded file from buffer\\n', 'Document.embfile_count()\\nPDF only: number of embedded files\\n', 'Document.embfile_del()\\nPDF only: delete an embedded file entry\\n', 'Document.embfile_get()\\nPDF only: extract an embedded file buffer\\n', 'Document.embfile_info()\\nPDF only: metadata of an embedded file\\n', 'Document.embfile_names()\\nPDF only: list of embedded files\\n', 'Document.embfile_upd()\\nPDF only: change an embedded file\\n', 'Document.extract_font()\\nPDF only: extract a font by xref\\n', 'Document.extract_image()\\nPDF only: extract an embedded image by xref\\n', 'Document.ez_save()\\nPDF only: Document.save() with different defaults\\n', 'Document.find_bookmark()\\nretrieve page location after laid out document\\n', 'Document.fullcopy_page()\\nPDF only: duplicate a page\\n', 'Document.get_layer()\\nPDF only: lists of OCGs in ON, OFF, RBGroups\\n', 'Document.get_layers()\\nPDF only: list of optional content configurations\\n', 'Document.get_oc()\\nPDF only: get OCG /OCMD xref of image / form xobject\\n', 'Document.get_ocgs()\\nPDF only: info on all optional content groups\\n', 'continues on next page\\n', '19.5. Document\\n191\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 2 – continued from previous page\\n', 'Method / Attribute\\nShort Description\\n', 'Document.get_ocmd()\\nPDF only: retrieve definition of an OCMD\\n', 'Document.get_page_fonts()\\nPDF only: list of fonts referenced by a page\\n', 'Document.get_page_images()\\nPDF only: list of images referenced by a page\\n', 'Document.get_page_labels()\\nPDF only: list of page label definitions\\n', 'Document.get_page_numbers()\\nPDF only: get page numbers having a given label\\n', 'Document.get_page_pixmap()\\ncreate a pixmap of a page by page number\\n', 'Document.get_page_text()\\nextract the text of a page by page number\\n', 'Document.get_page_xobjects()\\nPDF only: list of XObjects referenced by a page\\n', 'Document.get_sigflags()\\nPDF only: determine signature state\\n', 'Document.get_toc()\\nextract the table of contents\\n', 'Document.get_xml_metadata()\\nPDF only: read the XML metadata\\n', 'Document.has_annots()\\nPDF only: check if PDF contains any annots\\n', 'Document.has_links()\\nPDF only: check if PDF contains any links\\n', 'Document.insert_page()\\nPDF only: insert a new page\\n', 'Document.insert_pdf()\\nPDF only: insert pages from another PDF\\n', 'Document.insert_file()\\nPDF only: insert pages from arbitrary document\\n', 'Document.journal_can_do()\\nPDF only: which journal actions are possible\\n', 'Document.journal_enable()\\nPDF only: enables journalling for the document\\n', 'Document.journal_load()\\nPDF only: load journal from a file\\n', 'Document.journal_op_name()\\nPDF only: return name of a journalling step\\n', 'Document.journal_position()\\nPDF only: return journalling status\\n', 'Document.journal_redo()\\nPDF only: redo current operation\\n', 'Document.journal_save()\\nPDF only: save journal to a file\\n', 'Document.journal_start_op()\\nPDF only: start an “operation” giving it a name\\n', 'Document.journal_stop_op()\\nPDF only: end current operation\\n', 'Document.journal_undo()\\nPDF only: undo current operation\\n', 'Document.layer_ui_configs()\\nPDF only: list of optional content intents\\n', 'Document.layout()\\nre-paginate the document (if supported)\\n', 'Document.load_page()\\nread a page\\n', 'Document.make_bookmark()\\ncreate a page pointer in reflowable documents\\n', 'Document.move_page()\\nPDF only: move a page to different location in doc\\n', 'Document.need_appearances()\\nPDF only: get/set /NeedAppearances property\\n', 'Document.new_page()\\nPDF only: insert a new empty page\\n', 'Document.next_location()\\nreturn (chapter, pno) of following page\\n', 'Document.outline_xref()\\nPDF only: xref a TOC item\\n', 'Document.page_cropbox()\\nPDF only: the unrotated page rectangle\\n', 'Document.page_xref()\\nPDF only: xref of a page number\\n', 'Document.pages()\\niterator over a page range\\n', 'Document.pdf_catalog()\\nPDF only: xref of catalog (root)\\n', 'Document.pdf_trailer()\\nPDF only: trailer source\\n', 'Document.prev_location()\\nreturn (chapter, pno) of preceding page\\n', 'Document.reload_page()\\nPDF only: provide a new copy of a page\\n', 'Document.resolve_names()\\nPDF only: Convert destination names into a Python dict\\n', 'Document.save()\\nPDF only: save the document\\n', 'Document.saveIncr()\\nPDF only: save the document incrementally\\n', 'Document.scrub()\\nPDF only: remove sensitive data\\n', 'Document.search_page_for()\\nsearch for a string on a page\\n', 'Document.select()\\nPDF only: select a subset of pages\\n', 'Document.set_layer_ui_config()\\nPDF only: set OCG visibility temporarily\\n', 'continues on next page\\n', '192\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 2 – continued from previous page\\n', 'Method / Attribute\\nShort Description\\n', 'Document.set_layer()\\nPDF only: mass changing OCG states\\n', 'Document.set_markinfo()\\nPDF only: set the MarkInfo values\\n', 'Document.set_metadata()\\nPDF only: set the metadata\\n', 'Document.set_oc()\\nPDF only: attach OCG/OCMD to image / form xobject\\n', 'Document.set_ocmd()\\nPDF only: create or update an OCMD\\n', 'Document.set_page_labels()\\nPDF only: add/update page label definitions\\n', 'Document.set_pagemode()\\nPDF only: set the PageMode\\n', 'Document.set_pagelayout()\\nPDF only: set the PageLayout\\n', 'Document.set_toc_item()\\nPDF only: change a single TOC item\\n', 'Document.set_toc()\\nPDF only: set the table of contents (TOC)\\n', 'Document.set_xml_metadata()\\nPDF only: create or update document XML metadata\\n', 'Document.subset_fonts()\\nPDF only: create font subsets\\n', 'Document.switch_layer()\\nPDF only: activate OC configuration\\n', 'Document.tobytes()\\nPDF only: writes document to memory\\n', 'Document.xref_copy()\\nPDF only: copy a PDF dictionary to another xref\\n', 'Document.xref_get_key()\\nPDF only: get the value of a dictionary key\\n', 'Document.xref_get_keys()\\nPDF only: list the keys of object at xref\\n', 'Document.xref_object()\\nPDF only: get the definition source of xref\\n', 'Document.xref_set_key()\\nPDF only: set the value of a dictionary key\\n', 'Document.xref_stream_raw()\\nPDF only: raw stream source at xref\\n', 'Document.xref_xml_metadata()\\nPDF only: xref of XML metadata\\n', 'Document.chapter_count\\nnumber of chapters\\n', 'Document.FormFonts\\nPDF only: list of global widget fonts\\n', 'Document.is_closed\\nhas document been closed?\\n', 'Document.is_dirty\\nPDF only: has document been changed yet?\\n', 'Document.is_encrypted\\ndocument (still) encrypted?\\n', 'Document.is_fast_webaccess\\nis PDF linearized?\\n', 'Document.is_form_pdf\\nis this a Form PDF?\\n', 'Document.is_pdf\\nis this a PDF?\\n', 'Document.is_reflowable\\nis this a reflowable document?\\n', 'Document.is_repaired\\nPDF only: has this PDF been repaired during open?\\n', 'Document.last_location\\n(chapter, pno) of last page\\n', 'Document.metadata\\nmetadata\\n', 'Document.markinfo\\nPDF MarkInfo value\\n', 'Document.name\\nfilename of document\\n', 'Document.needs_pass\\nrequire password to access data?\\n', 'Document.outline\\nfirst Outline item\\n', 'Document.page_count\\nnumber of pages\\n', 'Document.permissions\\npermissions to access the document\\n', 'Document.pagemode\\nPDF PageMode value\\n', 'Document.pagelayout\\nPDF PageLayout value\\n', 'Document.version_count\\nPDF count of versions\\n', 'Class API\\n', 'class Document\\n', '__init__(self, filename=None, stream=None, *, filetype=None, rect=None, width=0, height=0,\\nfontsize=11)\\n', '• Changed in v1.14.13: support io.BytesIO for memory documents.\\n• Changed in v1.19.6: Clearer, shorter and more consistent exception messages. File type\\n', '19.5. Document\\n193\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '“pdf” is always assumed if not specified. Empty files and memory areas will always lead to\\nexceptions.\\nCreates a Document object.\\n', '• With default parameters, a new empty PDF document will be created.\\n• If stream is given, then the document is created from memory and, if not a PDF, either\\nfilename or filetype must indicate its type.\\n', '• If stream is None, then a document is created from the file given by filename. Its type is\\ninferred from the extension. This can be overruled by filetype.\\n', 'Parameters\\n', '• filename (str,pathlib) – A UTF-8 string or pathlib object containing a file\\npath. The document type is inferred from the filename extension. If not present or\\nnot matching a supported type, a PDF document is assumed. For memory docu-\\nments, this argument may be used instead of filetype, see below.\\n', '• stream (bytes,bytearray,BytesIO) – A memory area containing a supported\\ndocument.\\nIf not a PDF, its type must be specified by either filename or\\nfiletype.\\n', '• filetype (str) – A string specifying the type of document. This may be anything\\nlooking like a filename (e.g. “x.pdf”), in which case MuPDF uses the extension to\\ndetermine the type, or a mime type like application/pdf. Just using strings like\\n“pdf” or “.pdf” will also work. May be omitted for PDF documents, otherwise\\nmust match a supported document type.\\n', '• rect (rect_like) – a rectangle specifying the desired page size. This parameter\\nis only meaningful for documents with a variable page layout (“reflowable” docu-\\nments), like e-books or HTML, and ignored otherwise. If specified, it must be a\\nnon-empty, finite rectangle with top-left coordinates (0, 0). Together with param-\\neter fontsize, each page will be accordingly laid out and hence also determine the\\nnumber of pages.\\n', '• width (float) – may used together with height as an alternative to rect to specify\\nlayout information.\\n', '• height (float) – may used together with width as an alternative to rect to specify\\nlayout information.\\n', '• fontsize (float) – the default fontsize for reflowable document types. This\\nparameter is ignored if none of the parameters rect or width and height are specified.\\nWill be used to calculate the page layout.\\n', 'Raises\\n', '• TypeError – if the type of any parameter does not conform.\\n• FileNotFoundError – if the file / path cannot be found. Re-implemented as sub-\\nclass of RuntimeError.\\n', '• EmptyFileError – if the file / path is empty or the bytes object in memory has\\nzero length. A subclass of FileDataError and RuntimeError.\\n', '• ValueError – if an unknown file type is explicitly specified.\\n• FileDataError – if the document has an invalid structure for the given type – or\\nis no file at all (but e.g. a folder). A subclass of RuntimeError.\\n', 'Returns\\n', 'A document object.\\nIf the document cannot be created,\\nan exception\\nis raised in the above sequence.\\nNote that PyMuPDF-specific exceptions,\\nFileNotFoundError, EmptyFileError and FileDataError are intercepted if you\\ncheck for RuntimeError.\\n', 'In case of problems you can see more detail in the internal messages store:\\nprint(fitz.TOOLS.mupdf_warnings()) (which will be emptied by this call, but\\nyou can also prevent this – consult Tools.mupdf_warnings()).\\n', '194\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\nNot all document types are checked for valid formats already at open time. Raster im-\\nages for example will raise exceptions only later, when trying to access the content. Other types\\n(notably with non-binary content) may also be opened (and sometimes accessed) successfully –\\nsometimes even when having invalid content for the format:\\n', '• HTM, HTML, XHTML: always opened, metadata[""format""] is “HTML5”, resp.\\n“XHTML”.\\n', '• XML, FB2: always opened, metadata[""format""] is “FictionBook2”.\\n', 'Overview of possible forms, note: open is a synonym of Document:\\n', '>>> # from a file\\n>>> doc = fitz.open(""some.xps"")\\n>>> # handle wrong extension\\n>>> doc = fitz.open(""some.file"", filetype=""xps"")\\n>>>\\n>>> # from memory, filetype is required if not a PDF\\n>>> doc = fitz.open(""xps"", mem_area)\\n>>> doc = fitz.open(None, mem_area, ""xps"")\\n>>> doc = fitz.open(stream=mem_area, filetype=""xps"")\\n>>>\\n>>> # new empty PDF\\n>>> doc = fitz.open()\\n>>> doc = fitz.open(None)\\n>>> doc = fitz.open("""")\\n', 'Note:\\nRaster images with a wrong (but supported) file extension are no problem. MuPDF\\nwill determine the correct image type when file content is actually accessed and will process it\\nwithout complaint. So fitz.open(""file.jpg"") will work even for a PNG image.\\n', 'The Document class can be also be used as a context manager. On exit, the document will\\nautomatically be closed.\\n', '>>> import fitz\\n>>> with fitz.open(...) as doc:\\n', 'for page in doc: print(""page %i"" % page.number)\\n', 'page 0\\npage 1\\npage 2\\npage 3\\n>>> doc.is_closed\\nTrue\\n>>>\\n', 'get_oc(xref )\\n', '• New in v1.18.4\\nReturn the cross reference number of an OCG or OCMD attached to an image or form xobject.\\n', 'Parameters\\n', 'xref (int) – the xref of an image or form xobject.\\nValid such cross refer-\\nence numbers are returned by Document.get_page_images(), resp. Document.\\nget_page_xobjects(). For invalid numbers, an exception is raised.\\n', 'Return type\\n', '19.5. Document\\n195\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'int\\n', 'Returns\\n', 'the cross reference number of an optional contents object or zero if there is none.\\n', 'set_oc(xref, ocxref )\\n', '• New in v1.18.4\\nIf xref represents an image or form xobject, set or remove the cross reference number ocxref of\\nan optional contents object.\\n', 'Parameters\\n', '• xref (int) – the xref of an image or form xobject5. Valid such cross refer-\\nence numbers are returned by Document.get_page_images(), resp. Document.\\nget_page_xobjects(). For invalid numbers, an exception is raised.\\n', '• ocxref (int) – the xref number of an OCG / OCMD. If not zero, an invalid reference\\nraises an exception. If zero, any OC reference is removed.\\n', 'get_layers()\\n', '• New in v1.18.3\\nShow optional layer configurations. There always is a standard one, which is not included in the\\nresponse.\\n', "">>> for item in doc.get_layers(): print(item)\\n{'number': 0, 'name': 'my-config', 'creator': ''}\\n>>> # use 'number' as config identifier in add_ocg\\n"", 'add_layer(name, creator=None, on=None)\\n', '• New in v1.18.3\\nAdd an optional content configuration. Layers serve as a collection of ON / OFF states for op-\\ntional content groups and allow fast visibility switches between different views on the same doc-\\nument.\\n', 'Parameters\\n', '• name (str) – arbitrary name.\\n• creator (str) – (optional) creating software.\\n• on (sequ) – a sequence of OCG xref numbers which should be set to ON when\\nthis layer gets activated. All OCGs not listed here will be set to OFF.\\n', 'switch_layer(number, as_default=False)\\n', '• New in v1.18.3\\nSwitch to a document view as defined by the optional layer’s configuration number. This is\\ntemporary, except if established as default.\\n', 'Parameters\\n', '• number (int) – config number as returned by Document.layer_configs().\\n• as_default (bool) – make this the default configuration.\\nActivates the ON / OFF states of OCGs as defined in the identified layer. If as_default=True,\\nthen additionally all layers, including the standard one, are merged and the result is written back\\nto the standard layer, and all optional layers are deleted.\\n', ""add_ocg(name, config=-1, on=True, intent='View', usage='Artwork')\\n"", '• New in v1.18.3\\nAdd an optional content group. An OCG is the most important unit of information to determine\\nobject visibility. For a PDF, in order to be regarded as having optional content, at least one OCG\\nmust exist.\\n', 'Parameters\\n', '• name (str) – arbitrary name. Will show up in supporting PDF viewers.\\n', '5 Examples for “Form XObjects” are created by Page.show_pdf_page().\\n', '196\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• config (int) – layer configuration number. Default -1 is the standard configura-\\ntion.\\n', '• on (bool) – standard visibility status for objects pointing to this OCG.\\n• intent (str,list) – a string or list of strings declaring the visibility intents.\\nThere are two PDF standard values to choose from: “View” and “Design”. Default\\nis “View”. Correct spelling is important.\\n', '• usage (str) – another influencer for OCG visibility. This will become part of the\\nOCG’s /Usage key. There are two PDF standard values to choose from: “Artwork”\\nand “Technical”. Default is “Artwork”. Please only change when required.\\n', 'Returns\\n', 'xref of the created OCG. Use as entry for oc parameter in supporting objects.\\n', 'Note: Multiple OCGs with identical parameters may be created. This will not cause problems.\\nGarbage option 3 of Document.save() will get rid of any duplicates.\\n', ""set_ocmd(xref=0, ocgs=None, policy='AnyOn', ve=None)\\n"", '• New in v1.18.4\\nCreate or update an OCMD, Optional Content Membership Dictionary.\\n', 'Parameters\\n', '• xref (int) – xref of the OCMD to be updated, or 0 for a new OCMD.\\n• ocgs (list) – a sequence of xref numbers of existing OCG PDF objects.\\n• policy (str) – one of “AnyOn” (default), “AnyOff”, “AllOn”, “AllOff” (mixed or\\nlower case).\\n', '• ve (list) – a “visibility expression”. This is a list of arbitrarily nested other lists\\n– see explanation below. Use as an alternative to the combination ocgs / policy if\\nyou need to formulate more complex conditions.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'xref of the OCMD. Use as oc=xref parameter in supporting objects, and respec-\\ntively in Document.set_oc() or Annot.set_oc().\\n', 'Note:\\nLike an OCG, an OCMD has a visibility state ON or OFF, and it can be used like an\\nOCG. In contrast to an OCG, the OCMD state is determined by evaluating the state of one or\\nmore OCGs via special forms of boolean expressions. If the expression evaluates to true, the\\nOCMD state is ON and OFF for false.\\n', 'There are two ways to formulate OCMD visibility:\\n1. Use the combination of ocgs and policy: The policy value is interpreted as follows:\\n', '• AnyOn – (default) true if at least one OCG is ON.\\n• AnyOff – true if at least one OCG is OFF.\\n• AllOn – true if all OCGs are ON.\\n• AllOff – true if all OCGs are OFF.\\n', 'Suppose you want two PDF objects be displayed exactly one at a time (if one is ON, then\\nthe other one must be OFF):\\n', 'Solution: use an OCG for object 1 and an OCMD for object 2. Create the OCMD via\\nset_ocmd(ocgs=[xref], policy=""AllOff""), with the xref of the OCG.\\n', '2. Use the visibility expression ve: This is a list of two or more items. The first item is a\\nlogical keyword: one of the strings “and”, “or”, or “not”. The second and all subsequent\\nitems must either be an integer or another list. An integer must be the xref number of an\\nOCG. A list must again have at least two items starting with one of the boolean keywords.\\nThis syntax is a bit awkward, but quite powerful:\\n', '19.5. Document\\n197\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Each list must start with a logical keyword.\\n• If the keyword is a “not”, then the list must have exactly two items. If it is “and” or\\n“or”, any number of other items may follow.\\n', '• Items following the logical keyword may be either integers or again a list. An integer\\nmust be the xref of an OCG. A list must conform to the previous rules.\\n', 'Examples:\\n• set_ocmd(ve=[""or"", 4, [""not"", 5], [""and"", 6, 7]]). This delivers ON if\\nthe following is true: “4 is ON, or 5 is OFF, or 6 and 7 are both ON”.\\n', '• set_ocmd(ve=[""not"", xref]). This has the same effect as the OCMD example\\ncreated under 1.\\nFor more details and examples see page 224 of Adobe PDF References. Also do have a\\nlook at example scripts here.\\n', 'Visibility expressions, /VE, are part of PDF specification version 1.6. So not all PDF\\nviewers / readers may already support this feature and hence will react in some standard\\nway for those cases.\\n', 'get_ocmd(xref )\\n', '• New in v1.18.4\\nRetrieve the definition of an OCMD.\\n', 'Parameters\\n', 'xref (int) – the xref of the OCMD.\\n', 'Return type\\n', 'dict\\n', 'Returns\\n', 'a dictionary with the keys xref, ocgs, policy and ve.\\n', 'get_layer(config=-1)\\n', '• New in v1.18.3\\nList of optional content groups by status in the specified configuration. This is a dictionary with\\nlists of cross reference numbers for OCGs that occur in the arrays /ON, /OFF or in some radio\\nbutton group (/RBGroups).\\n', 'Parameters\\n', 'config (int) – the configuration layer (default is the standard config layer).\\n', "">>> pprint(doc.get_layer())\\n{'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups': [[7, 10]]}\\n>>>\\n"", 'set_layer(config, *, on=None, off=None, basestate=None, rbgroups=None, locked=None)\\n', '• New in v1.18.3\\n• Changed in v1.22.5: Support list of locked OCGs.\\nMass status changes of optional content groups. Permanently sets the status of OCGs.\\n', 'Parameters\\n', '• config (int) – desired configuration layer, choose -1 for the default one.\\n• on (list) – list of xref of OCGs to set ON. Replaces previous values.\\nAn\\nempty list will cause no OCG being set to ON anymore. Should be specified if\\nbasestate=""ON"" is used.\\n', '• off (list) – list of xref of OCGs to set OFF. Replaces previous values. An\\nempty list will cause no OCG being set to OFF anymore. Should be specified if\\nbasestate=""OFF"" is used.\\n', '• basestate (str) – state of OCGs that are not mentioned in on or off. Possible\\nvalues are “ON”, “OFF” or “Unchanged”. Upper / lower case possible.\\n', '198\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• rbgroups (list) – a list of lists. Replaces previous values. Each sublist should\\ncontain two or more OCG xrefs. OCGs in the same sublist are handled like but-\\ntons in a radio button group: setting one to ON automatically sets all other group\\nmembers to OFF.\\n', '• locked (list) – a list of OCG xref number that cannot be changed by the user\\ninterface.\\nValues None will not change the corresponding PDF array.\\n', '>>> doc.set_layer(-1, basestate=""OFF"")\\n# only changes the base state\\n', "">>> pprint(doc.get_layer())\\n{'basestate': 'OFF', 'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups':␣\\n"", '˓→[[7, 10]]}\\n', 'get_ocgs()\\n', '• New in v1.18.3\\nDetails of all optional content groups. This is a dictionary of dictionaries like this (key is the\\nOCG’s xref):\\n', "">>> pprint(doc.get_ocgs())\\n{13: {'on': True,\\n"", ""'intent': ['View', 'Design'],\\n'name': 'Circle',\\n'usage': 'Artwork'},\\n"", ""14: {'on': True,\\n"", ""'intent': ['View', 'Design'],\\n'name': 'Square',\\n'usage': 'Artwork'},\\n"", ""15: {'on': False, 'intent': ['View'], 'name': 'Square', 'usage':\\n"", ""˓→'Artwork'}}\\n>>>\\n"", 'layer_ui_configs()\\n', '• New in v1.18.3\\nShow the visibility status of optional content that is modifiable by the user interface of supporting\\nPDF viewers.\\n', '• Only reports items contained in the currently selected layer configuration.\\n• The meaning of the dictionary keys is as follows:\\n', '– depth: item’s nesting level in the /Order array\\n– locked: true if cannot be changed via user interfaces\\n– number: running sequence number\\n– on: item state\\n– text: text string or name field of the originating OCG\\n– type: one of “label” (set by a text string), “checkbox” (set by a single OCG) or “ra-\\ndiobox” (set by a set of connected OCGs)\\n', 'set_layer_ui_config(number, action=0)\\n', '• New in v1.18.3\\nModify OC visibility status of content groups. This is analog to what supporting PDF viewers\\nwould offer.\\n', 'Please note that visibility is not a property stored with the OCG. It is not even infor-\\nmation necessarily present in the PDF document at all. Instead, the current visibility is\\ntemporarily set using the user interface of some supporting PDF consumer software.\\nThe same type of functionality is offered by this method.\\n', 'To make permanent changes, use Document.set_layer().\\n', '19.5. Document\\n199\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', '• number (int,str) – either the sequence number of the item in list Document.\\nlayer_configs() or the “text” of one of these items.\\n', '• action (int) – PDF_OC_ON = set on (default), PDF_OC_TOGGLE = toggle on/off,\\nPDF_OC_OFF = set off.\\n', 'authenticate(password)\\n', 'Decrypts the document with the string password. If successful, document data can be accessed.\\nFor PDF documents, the “owner” and the “user” have different privileges, and hence different\\npasswords may exist for these authorization levels. The method will automatically establish the\\nappropriate (owner or user) access rights for the provided password.\\n', 'Parameters\\n', 'password (str) – owner or user password.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'a positive value if successful, zero otherwise (the string does not match either pass-\\nword). If positive, the indicator Document.is_encrypted is set to False. Positive\\nreturn codes carry the following information detail:\\n• 1 => authenticated, but the PDF has neither owner nor user passwords.\\n• 2 => authenticated with the user password.\\n• 4 => authenticated with the owner password.\\n• 6 => authenticated and both passwords are equal – probably a rare situation.\\n', 'Note:\\nThe document may be protected by an owner, but not by a user password.\\nDetect this situation via doc.authenticate("""") == 2. This allows opening and\\nreading the document without authentication, but, depending on the Document.\\npermissions value, other actions may be prohibited. PyMuPDF (like MuPDF) in\\nthis case ignores those restrictions. So, – in contrast to any PDF viewers – you can\\nfor example extract text and add or modify content, even if the respective permission\\nflags PDF_PERM_COPY, PDF_PERM_MODIFY, PDF_PERM_ANNOTATE, etc. are set off!\\nIt is your responsibility building a legally compliant application where applicable.\\n', 'get_page_numbers(label, only_one=False)\\n', '• New in v 1.18.6\\nPDF only: Return a list of page numbers that have the specified label – note that labels may not\\nbe unique in a PDF. This implies a sequential search through all page numbers to compare their\\nlabels.\\n', 'Note: Implementation detail – pages are not loaded for this purpose.\\n', 'Parameters\\n', '• label (str) – the label to look for, e.g. “vii” (Roman number 7).\\n• only_one (bool) – stop after first hit. Useful e.g. if labelling is known to be\\nunique, or there are many pages, etc. The default will check every page number.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'list of page numbers that have this label. Empty if none found, no labels defined, etc.\\n', 'get_page_labels()\\n', '• New in v1.18.7\\n', '200\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'PDF only: Extract the list of page label definitions. Typically used for modifications before\\nfeeding it into Document.set_page_labels().\\n', 'Returns\\n', 'a list of dictionaries as defined in Document.set_page_labels().\\n', 'set_page_labels(labels)\\n', '• New in v1.18.6\\nPDF only: Add or update the page label definitions of the PDF.\\n', 'Parameters\\n', ""labels (list) – a list of dictionaries. Each dictionary defines a label building rule\\nand a 0-based “start” page number. That start page is the first for which the label defini-\\ntion is valid. Each dictionary has up to 4 items and looks like {'startpage':\\nint,\\n'prefix':\\nstr, 'style':\\nstr, 'firstpagenum':\\nint} and has the fol-\\nlowing items.\\n• startpage: (int) the first page number (0-based) to apply the label rule. This key\\nmust be present. The rule is applied to all subsequent pages until either end of\\ndocument or superseded by the rule with the next larger page number.\\n"", '• prefix: (str) an arbitrary string to start the label with, e.g. “A-”. Default is “”.\\n• style: (str) the numbering style. Available are “D” (decimal), “r”/”R” (Roman\\nnumbers, lower / upper case), and “a”/”A” (lower / upper case alphabetical num-\\nbering: “a” through “z”, then “aa” through “zz”, etc.). Default is “”. If “”, no\\nnumbering will take place and the pages in that range will receive the same label\\nconsisting of the prefix value. If prefix is also omitted, then the label will be “”.\\n', '• firstpagenum: (int) start numbering with this value. Default is 1, smaller values\\nare ignored.\\nFor example:\\n', ""[{'startpage': 6, 'prefix': 'A-', 'style': 'D', 'firstpagenum': 10},\\n{'startpage': 10, 'prefix': '', 'style': 'D', 'firstpagenum': 1}]\\n"", 'will generate the labels “A-10”, “A-11”, “A-12”, “A-13”, “1”, “2”, “3”, ... for pages 6, 7 and so\\non until end of document. Pages 0 through 5 will have the label “”.\\n', 'make_bookmark(loc)\\n', '• New in v.1.17.3\\nReturn a page pointer in a reflowable document. After re-layouting the document, the result of\\nthis method can be used to find the new location of the page.\\n', 'Note: Do not confuse with items of a table of contents, TOC.\\n', 'Parameters\\n', 'loc (list,tuple) – page location. Must be a valid (chapter, pno).\\n', 'Return type\\n', 'pointer\\n', 'Returns\\n', 'a long integer in pointer format. To be used for finding the new location of the page\\nafter re-layouting the document. Do not touch or re-assign.\\n', 'find_bookmark(bookmark)\\n', '• New in v.1.17.3\\nReturn the new page location after re-layouting the document.\\n', 'Parameters\\n', 'bookmark (pointer) – created by Document.make_bookmark().\\n', '19.5. Document\\n201\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'tuple\\n', 'Returns\\n', 'the new (chapter, pno) of the page.\\n', 'chapter_page_count(chapter)\\n', '• New in v.1.17.0\\nReturn the number of pages of a chapter.\\n', 'Parameters\\n', 'chapter (int) – the 0-based chapter number.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'number of pages in chapter. Relevant only for document types with chapter support\\n(EPUB currently).\\n', 'next_location(page_id)\\n', '• New in v.1.17.0\\nReturn the location of the following page.\\n', 'Parameters\\n', 'page_id (tuple) – the current page id. This must be a tuple (chapter, pno) identifying\\nan existing page.\\n', 'Returns\\n', 'The tuple of the following page, i.e. either (chapter, pno + 1) or (chapter + 1, 0), or\\nthe empty tuple () if the argument was the last page. Relevant only for document types\\nwith chapter support (EPUB currently).\\n', 'prev_location(page_id)\\n', '• New in v.1.17.0\\nReturn the locator of the preceding page.\\n', 'Parameters\\n', 'page_id (tuple) – the current page id. This must be a tuple (chapter, pno) identifying\\nan existing page.\\n', 'Returns\\n', 'The tuple of the preceding page, i.e. either (chapter, pno - 1) or the last page of the\\npreceding chapter, or the empty tuple () if the argument was the first page. Relevant\\nonly for document types with chapter support (EPUB currently).\\n', 'load_page(page_id=0)\\n', '• Changed in v1.17.0: For document types supporting a so-called “chapter structure” (like\\nEPUB), pages can also be loaded via the combination of chapter number and relative page\\nnumber, instead of the absolute page number. This should significantly speed up access for\\nlarge documents.\\nCreate a Page object for further processing (like rendering, text searching, etc.).\\n', 'Parameters\\n', 'page_id (int,tuple) – (Changed in v1.17.0)\\n', 'Either a 0-based page number, or a tuple (chapter, pno). For an integer, any -∞\\n< page_id < page_count is acceptable. While page_id is negative, page_count\\nwill be added to it. For example: to load the last page, you can use doc.load_page(-1).\\nAfter this you have page.number = doc.page_count - 1.\\n', 'For a tuple, chapter must be in range Document.chapter_count, and pno must be\\nin range Document.chapter_page_count() of that chapter. Both values are 0-\\nbased. Using this notation, Page.number will equal the given tuple. Relevant only\\nfor document types with chapter support (EPUB currently).\\n', '202\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'Page\\n', 'Note:\\nDocuments also follow the Python sequence protocol with page numbers as indices:\\ndoc.load_page(n) == doc[n].\\n', 'For absolute page numbers only, expressions like “for page in doc: ...” and “for page in re-\\nversed(doc): ...” will successively yield the document’s pages. Refer to Document.pages() which\\nallows processing pages as with slicing.\\n', 'You can also use index notation with the new chapter-based page identification: use page = doc[(5,\\n2)] to load the third page of the sixth chapter.\\n', 'To maintain a consistent API, for document types not supporting a chapter structure (like PDFs),\\nDocument.chapter_count is 1, and pages can also be loaded via tuples (0, pno). See this3 footnote\\nfor comments on performance improvements.\\n', 'reload_page(page)\\n', '• New in v1.16.10\\nPDF only: Provide a new copy of a page after finishing and updating all pending changes.\\n', 'Parameters\\n', 'page (Page) – page object.\\n', 'Return type\\n', 'Page\\n', 'Returns\\n', 'a new copy of the same page. All pending updates (e.g. to annotations or widgets)\\nwill be finalized and a fresh copy of the page will be loaded.\\n', 'Note: In a typical use case, a page Pixmap should be taken after annotations / wid-\\ngets have been added or changed. To force all those changes being reflected in the\\npage structure, this method re-instates a fresh copy while keeping the object hierarchy\\n“document -> page -> annotations/widgets” intact.\\n', 'resolve_names()\\n', 'PDF only: Convert destination names into a Python dict.\\n', 'Only available in PyMuPDF’s “rebased” implementation.\\n', 'Returns\\n', 'A dictionary with the following layout:\\n• key: (str) the name.\\n• value: (dict) with the following layout:\\n', '– ”page”: target page number (0-based). If no page number found -1.\\n– ”to”: (x, y) target point on page. Currently in PDF coordinates, i.e. point (0,0)\\nis the bottom-left of the page.\\n', '– ”zoom”: (float) the zoom factor.\\n– ”dest”: (str) only present if the target location on the page has not been pro-\\nvided as “/XYZ” or if no page number was found.\\nExamples:\\n', '3 For applicable (EPUB) document types, loading a page via its absolute number may result in layouting a large part of the document, before\\nthe page can be accessed. To avoid this performance impact, prefer chapter-based access. Use convenience methods and attributes Document.\\nnext_location(), Document.prev_location() and Document.last_location for maintaining a high level of coding efficiency.\\n', '19.5. Document\\n203\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '{\\n', ""'__bookmark_1': {'page': 0, 'to': (0.0, 541.0), 'zoom': 0.0}\\n"", '˓→,\\n', ""'__bookmark_2': {'page': 0, 'to': (0.0, 481.45), 'zoom': 0.\\n"", '˓→0},\\n}\\n', 'or:\\n', '{\\n', ""'21154a7c20684ceb91f9c9adc3b677c40': {'page': -1, 'dest': '/\\n"", ""˓→XYZ 15.75 1486 0'},\\n"", '...\\n', '}\\n', 'All names found in the catalog under keys “/Dests” and “/Names/Dests” are included.\\n', '• New in v1.23.6\\n', 'page_cropbox(pno)\\n', '• New in v1.17.7\\n', 'PDF only: Return the unrotated page rectangle – without loading the page (via Document.\\nload_page()). This is meant for internal purpose requiring best possible performance.\\n', 'Parameters\\n', 'pno (int) – 0-based page number.\\n', 'Returns\\n', 'Rect of the page like Page.rect(), but ignoring any rotation.\\n', 'page_xref(pno)\\n', '• New in v1.17.7\\n', 'PDF only: Return the xref of the page – without loading the page (via Document.\\nload_page()). This is meant for internal purpose requiring best possible performance.\\n', 'Parameters\\n', 'pno (int) – 0-based page number.\\n', 'Returns\\n', 'xref of the page like Page.xref.\\n', 'pages(start=None[, stop=None[, step=None]])\\n', '• New in v1.16.4\\n', 'A generator for a range of pages. Parameters have the same meaning as in the built-in function\\nrange(). Intended for expressions of the form “for page in doc.pages(start, stop, step): ...”.\\n', 'Parameters\\n', '• start (int) – start iteration with this page number. Default is zero, al-\\nlowed values are -∞ < start < page_count. While this is negative,\\npage_count is added before starting the iteration.\\n', '• stop (int) – stop iteration at this page number. Default is page_count,\\npossible are -∞ < stop <= page_count. Larger values are silently re-\\nplaced by the default. Negative values will cyclically emit the pages in\\n', '204\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'reversed order. As with the built-in range(), this is the first page not re-\\nturned.\\n', '• step (int) – stepping value. Defaults are 1 if start < stop and -1 if start >\\nstop. Zero is not allowed.\\n', 'Returns\\n', 'a generator iterator over the document’s pages. Some examples:\\n', '• ”doc.pages()” emits all pages.\\n', '• ”doc.pages(4, 9, 2)” emits pages 4, 6, 8.\\n', '• ”doc.pages(0, None, 2)” emits all pages with even numbers.\\n', '• ”doc.pages(-2)” emits the last two pages.\\n', '• ”doc.pages(-1, -1)” emits all pages in reversed order.\\n', '• ”doc.pages(-1, -10)” always emits 10 pages in reversed order, starting with\\nthe last page – repeatedly if the document has less than 10 pages. So for a\\n4-page document the following page numbers are emitted: 3, 2, 1, 0, 3, 2,\\n1, 0, 3, 2, 1, 0, 3.\\n', 'convert_to_pdf(from_page=-1, to_page=-1, rotate=0)\\n', 'Create a PDF version of the current document and write it to memory. All document types are\\nsupported. The parameters have the same meaning as in insert_pdf(). In essence, you can\\nrestrict the conversion to a page subset, specify page rotation, and revert page sequence.\\n', 'Parameters\\n', '• from_page (int) – first page to copy (0-based). Default is first page.\\n', '• to_page (int) – last page to copy (0-based). Default is last page.\\n', '• rotate (int) – rotation angle. Default is 0 (no rotation). Should be n *\\n90 with an integer n (not checked).\\n', 'Return type\\n', 'bytes\\n', 'Returns\\n', 'a Python bytes object containing a PDF file image. It is created by internally us-\\ning tobytes(garbage=4, deflate=True). See tobytes(). You can out-\\nput it directly to disk or open it as a PDF. Here are some examples:\\n', '>>> # convert an XPS file to PDF\\n>>> xps = fitz.open(""some.xps"")\\n>>> pdfbytes = xps.convert_to_pdf()\\n>>>\\n>>> # either do this -->\\n>>> pdf = fitz.open(""pdf"", pdfbytes)\\n>>> pdf.save(""some.pdf"")\\n>>>\\n>>> # or this -->\\n>>> pdfout = open(""some.pdf"", ""wb"")\\n>>> pdfout.tobytes(pdfbytes)\\n>>> pdfout.close()\\n', '19.5. Document\\n205\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '>>> # copy image files to PDF pages\\n>>> # each page will have image dimensions\\n>>> doc = fitz.open()\\n# new PDF\\n', '>>> imglist = [ ... image file names ...] # e.g. a␣\\n', '˓→directory listing\\n>>> for img in imglist:\\n', 'imgdoc=fitz.open(img)\\n# open image as a␣\\n', '˓→document\\n', 'pdfbytes=imgdoc.convert_to_pdf()\\n# make a 1-page␣\\n', '˓→PDF of it\\n', 'imgpdf=fitz.open(""pdf"", pdfbytes)\\ndoc.insert_pdf(imgpdf)\\n# insert the␣\\n', '˓→image PDF\\n>>> doc.save(""allmyimages.pdf"")\\n', 'Note:\\nThe method uses the same logic as the mutool convert CLI. This works very well in\\nmost cases – however, beware of the following limitations.\\n', '• Image files: perfect, no issues detected. However, image transparency is ignored. If you\\nneed that (like for a watermark), use Page.insert_image() instead. Otherwise, this\\nmethod is recommended for its much better performance.\\n', '• XPS: appearance very good. Links work fine, outlines (bookmarks) are lost, but can easily\\nbe recovered2.\\n', '• EPUB, CBZ, FB2: similar to XPS.\\n', '• SVG: medium. Roughly comparable to svglib.\\n', 'get_toc(simple=True)\\n', 'Creates a table of contents (TOC) out of the document’s outline chain.\\n', 'Parameters\\n', 'simple (bool) – Indicates whether a simple or a detailed TOC is required. If\\nFalse, each item of the list also contains a dictionary with linkDest details for\\neach outline entry.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of lists. Each entry has the form [lvl, title, page, dest]. Its entries have the\\nfollowing meanings:\\n', '• lvl – hierarchy level (positive int). The first entry is always 1. Entries in a\\nrow are either equal, increase by 1, or decrease by any number.\\n', '• title – title (str)\\n', '• page – 1-based source page number (int). -1 if no destination or outside\\ndocument.\\n', '• dest – (dict) included only if simple=False. Contains details of the TOC\\nitem as follows:\\n', '2 However, you can use Document.get_toc() and Page.get_links() (which are available for all document types) and copy this information\\nover to the output PDF. See demo convert.py.\\n', '206\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– kind: destination kind, see Link Destination Kinds.\\n', '– file: filename if kind is LINK_GOTOR or LINK_LAUNCH.\\n', '– page: target page, 0-based, LINK_GOTOR or LINK_GOTO only.\\n', '– to: position on target page (Point).\\n', '– zoom: (float) zoom factor on target page.\\n', '– xref: xref of the item (0 if no PDF).\\n', '– color: item color in PDF RGB format (red, green, blue), or omit-\\nted (always omitted if no PDF).\\n', '– bold: true if bold item text or omitted. PDF only.\\n', '– italic: true if italic item text, or omitted. PDF only.\\n', '– collapse: true if sub-items are folded, or omitted. PDF only.\\n', '– nameddest: target name if kind=4. PDF only. (New in 1.23.7.)\\n', 'xref_get_keys(xref )\\n', '• New in v1.18.7\\n', 'PDF only: Return the PDF dictionary keys of the dictionary object provided by its xref\\nnumber.\\n', 'Parameters\\n', 'xref (int) – the xref. (Changed in v1.18.10) Use -1 to access the special\\ndictionary “PDF trailer”.\\n', 'Returns\\n', 'a tuple of dictionary keys present in object xref. Examples:\\n', '>>> from pprint import pprint\\n>>> import fitz\\n>>> doc=fitz.open(""pymupdf.pdf"")\\n>>> xref = doc.page_xref(0)\\n# xref of page 0\\n', '>>> pprint(doc.xref_get_keys(xref))\\n# primary level keys␣\\n', ""˓→of a page\\n('Type', 'Contents', 'Resources', 'MediaBox', 'Parent')\\n>>> pprint(doc.xref_get_keys(-1))\\n# primary level keys of␣\\n"", ""˓→the trailer\\n('Type', 'Index', 'Size', 'W', 'Root', 'Info', 'ID',\\n"", ""˓→'Length', 'Filter')\\n>>>\\n"", 'xref_get_key(xref, key)\\n', '• New in v1.18.7\\n', 'PDF only: Return type and value of a PDF dictionary key of a dictionary object given by its\\nxref.\\n', 'Parameters\\n', '• xref (int) – the xref. Changed in v1.18.10: Use -1 to access the special\\ndictionary “PDF trailer”.\\n', '19.5. Document\\n207\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• key (str) – the desired PDF key. Must exactly match (case-sensitive) one\\nof the keys contained in Document.xref_get_keys().\\n', 'Return type\\n', 'tuple\\n', 'Returns\\n', 'A tuple (type, value) of strings, where type is one of “xref”, “array”, “dict”,\\n“int”, “float”, “null”, “bool”, “name”, “string” or “unknown” (should not oc-\\ncur). Independent of “type”, the value of the key is always formatted as a string\\n– see the following example – and (almost always) a faithful reflection of what\\nis stored in the PDF. In most cases, the format of the value string also gives a\\nclue about the key type:\\n', '• A “name” always starts with a “/” slash.\\n', '• An “xref” always ends with “ 0 R”.\\n', '• An “array” is always enclosed in “[...]” brackets.\\n', '• A “dict” is always enclosed in “<<...>>” brackets.\\n', '• A “bool”, resp. “null” always equal either “true”, “false”, resp. “null”.\\n', '• “float” and “int” are represented by their string format – and are thus not always distin-\\nguishable.\\n', ""• A “string” is converted to UTF-8 and may therefore deviate from what is\\nstored in the PDF. For example, the PDF key “Author” may have a value of\\n“<FEFF004A006F0072006A00200058002E0020004D0063004B00690065>” in the file,\\nbut the method will return ('string', 'Jorj X. McKie').\\n"", '>>> for key in doc.xref_get_keys(xref):\\n', 'print(key, ""="" , doc.xref_get_key(xref, key))\\n', ""Type = ('name', '/Page')\\nContents = ('xref', '1297 0 R')\\nResources = ('xref', '1296 0 R')\\nMediaBox = ('array', '[0 0 612 792]')\\nParent = ('xref', '1301 0 R')\\n>>> #\\n>>> # Now same thing for the PDF trailer.\\n>>> # It has no xref, so -1 must be used instead.\\n>>> #\\n>>> for key in doc.xref_get_keys(-1):\\n"", 'print(key, ""="", doc.xref_get_key(-1, key))\\n', ""Type = ('name', '/XRef')\\nIndex = ('array', '[0 8802]')\\nSize = ('int', '8802')\\nW = ('array', '[1 3 1]')\\nRoot = ('xref', '8799 0 R')\\nInfo = ('xref', '8800 0 R')\\nID = ('array', '[<DC9D56A6277EFFD82084E64F9441E18C>\\n"", ""˓→<DC9D56A6277EFFD82084E64F9441E18C>]')\\nLength = ('int', '21111')\\nFilter = ('name', '/FlateDecode')\\n>>>\\n"", '208\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'xref_set_key(xref, key, value)\\n', '• New in v1.18.7, changed in v 1.18.13\\n', '• Changed in v1.19.4: remove a key “physically” if set to “null”.\\n', 'PDF only: Set (add, update, delete) the value of a PDF key for the dictionary object given\\nby its xref.\\n', 'Caution: This is an expert function: if you do not know what you are doing, there is a high\\nrisk to render (parts of) the PDF unusable. Please do consult Adobe PDF References about\\nobject specification formats (page 18) and the structure of special dictionary types like page\\nobjects.\\n', 'Parameters\\n', '• xref (int) – the xref. Changed in v1.18.13: To update the PDF trailer,\\nspecify -1.\\n', '• key (str) – the desired PDF key (without leading “/”). Must not be empty.\\nAny valid PDF key – whether already present in the object (which will\\nbe overwritten) – or new. It is possible to use PDF path notation like\\n""Resources/ExtGState"" – which sets the value for key ""/ExtGState""\\nas a sub-object of ""/Resources"".\\n', '• value (str) – the value for the key. It must be a non-empty string and,\\ndepending on the desired PDF object type, the following rules must be\\nobserved. There is some syntax checking, but no type checking and no\\nchecking if it makes sense PDF-wise, i.e. no semantics checking. Upper /\\nlower case is important!\\n', '• xref – must be provided as ""nnn 0 R"" with a valid xref number nnn of the PDF. The\\nsuffix “0 R” is required to be recognizable as an xref by PDF applications.\\n', '• array – a string like ""[a b c d e f]"". The brackets are required. Array items must\\nbe separated by at least one space (not commas like in Python). An empty array ""[]"" is\\npossible and equivalent to removing the key. Array items may be any PDF objects, like\\ndictionaries, xrefs, other arrays, etc. Like in Python, array items may be of different types.\\n', '• dict – a string like ""<< ... >>"". The brackets are required and must enclose a valid\\nPDF dictionary definition. The empty dictionary ""<<>>"" is possible and equivalent to\\nremoving the key.\\n', '• int – an integer formatted as a string.\\n', '• float – a float formatted as a string. Scientific notation (with exponents) is not allowed\\nby PDF.\\n', '• null – the string ""null"". This is the PDF equivalent to Python’s None and causes the key\\nto be ignored – however not necessarily removed, resp. removed on saves with garbage\\ncollection. Changed in v1.19.4: If the key is no path hierarchy (i.e. contains no slash “/”),\\nthen it will be completely removed.\\n', '• bool – one of the strings ""true"" or ""false"".\\n', '• name – a valid PDF name with a leading slash like this: ""/PageLayout"". See page 16\\nof the Adobe PDF References.\\n', '19.5. Document\\n209\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• string – a valid PDF string. All PDF strings must be enclosed by brackets. Denote the\\nempty string as ""()"". Depending on its content, the possible brackets are\\n', '– “(...)” for ASCII-only text. Reserved PDF characters must be backslash-escaped\\nand non-ASCII characters must be provided as 3-digit backslash-escaped octals –\\nincluding leading zeros. Example: 12 = 0x0C must be encoded as 014.\\n', '– “<...>” for hex-encoded text. Every character must be represented by two hex-digits\\n(lower or upper case).\\n', '– If in doubt, we strongly recommend to use get_pdf_str()! This function auto-\\nmatically generates the right brackets, escapes, and overall format. It will for example\\ndo conversions like these:\\n', '>>> # because of the € symbol, the following yields UTF-16BE␣\\n', '˓→BOM\\n>>> fitz.get_pdf_str(""Pay in $ or €."")\\n\\'<feff00500061007900200069006e002000240020006f0072002020ac002e>\\n', '˓→\\'\\n>>> # escapes for brackets and non-ASCII\\n>>> fitz.get_pdf_str(""Prices in EUR (USD also accepted). Areas␣\\n', '˓→are in m2."")\\n\\'(Prices in EUR \\\\\\\\(USD also accepted\\\\\\\\). Areas are in m\\\\\\\\262.)\\'\\n', 'get_page_pixmap(pno: int, *, matrix: matrix_like = Identity, dpi=None, colorspace: Colorspace\\n', '= csRGB, clip: rect_like = None, alpha: bool = False, annots: bool = True)\\n', 'Creates a pixmap from page pno (zero-based). Invokes Page.get_pixmap().\\n', 'All parameters except pno are keyword-only.\\n', 'Parameters\\n', 'pno (int) – page number, 0-based in -∞ < pno < page_count.\\n', 'Return type\\n', 'Pixmap\\n', 'get_page_xobjects(pno)\\n', '• New in v1.16.13\\n', '• Changed in v1.18.11\\n', 'PDF only: Return a list of all XObjects referenced by a page.\\n', 'Parameters\\n', 'pno (int) – page number, 0-based, -∞ < pno < page_count.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of (non-image) XObjects. These objects typically represent pages em-\\nbedded (not copied) from other PDFs. For example, Page.show_pdf_page()\\nwill create this type of object. An item of this list has the following layout:\\n(xref, name, invoker, bbox), where\\n', '• xref (int) is the XObject’s xref.\\n', '• name (str) is the symbolic name to reference the XObject.\\n', '210\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• invoker (int) the xref of the invoking XObject or zero if the page directly\\ninvokes it.\\n', '• bbox (Rect) the boundary box of the XObject’s location on the page\\nin untransformed coordinates.\\nTo get actual, non-rotated page\\ncoordinates, multiply with the page’s transformation matrix Page.\\ntransformation_matrix. Changed in v.18.11: the bbox is now format-\\nted as Rect.\\n', 'get_page_images(pno, full=False)\\n', 'PDF only: Return a list of all images (directly or indirectly) referenced by the page.\\n', 'Parameters\\n', '• pno (int) – page number, 0-based, -∞ < pno < page_count.\\n', '• full (bool) – whether to also include the referencer’s xref (which is zero\\nif this is the page).\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of images referenced by this page. Each item looks like\\n', '(xref, smask, width, height, bpc, colorspace, alt.\\ncolorspace, name, filter, referencer)\\n', 'Where\\n', '• xref (int) is the image object number\\n', '• smask (int) is the object number of its soft-mask image\\n', '• width and height (ints) are the image dimensions\\n', '• bpc (int) denotes the number of bits per component (normally 8)\\n', '• colorspace (str) a string naming the colorspace (like DeviceRGB)\\n', '• alt. colorspace (str) is any alternate colorspace depending on the value of\\ncolorspace\\n', '• name (str) is the symbolic name by which the image is referenced\\n', '• filter (str) is the decode filter of the image (Adobe PDF References, pp.\\n22).\\n', '• referencer (int) the xref of the referencer. Zero if directly referenced by\\nthe page. Only present if full=True.\\n', 'Note: In general, this is not the list of images that are actually displayed. This method only\\nparses several PDF objects to collect references to embedded images. It does not analyse the\\npage’s contents, where all the actual image display commands are defined. To get this infor-\\nmation, please use Page.get_image_info(). Also have a look at the discussion in section\\nStructure of Dictionary Outputs.\\n', 'get_page_fonts(pno, full=False)\\n', 'PDF only: Return a list of all fonts (directly or indirectly) referenced by the page.\\n', 'Parameters\\n', '19.5. Document\\n211\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• pno (int) – page number, 0-based, -∞ < pno < page_count.\\n', '• full (bool) – whether to also include the referencer’s xref. If True, the\\nreturned items are one entry longer. Use this option if you need to know,\\nwhether the page directly references the font. In this case the last entry is\\n0. If the font is referenced by an /XObject of the page, you will find its\\nxref here.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of fonts referenced by this page. Each entry looks like\\n', '(xref, ext, type, basefont, name, encoding, referencer),\\n', 'where\\n', '• xref (int) is the font object number (may be zero if the PDF uses one of the builtin fonts\\ndirectly)\\n', '• ext (str) font file extension (e.g. “ttf”, see Font File Extensions)\\n', '• type (str) is the font type (like “Type1” or “TrueType” etc.)\\n', '• basefont (str) is the base font name,\\n', '• name (str) is the symbolic name, by which the font is referenced\\n', '• encoding (str) the font’s character encoding if different from its built-in encoding (Adobe\\nPDF References, p. 254):\\n', '• referencer (int optional) the xref of the referencer. Zero if directly referenced by the\\npage, otherwise the xref of an XObject. Only present if full=True.\\n', 'Example:\\n', "">>> pprint(doc.get_page_fonts(0, full=False))\\n[(12, 'ttf', 'TrueType', 'FNUUTH+Calibri-Bold', 'R8', ''),\\n"", ""(13, 'ttf', 'TrueType', 'DOKBTG+Calibri', 'R10', ''),\\n(14, 'ttf', 'TrueType', 'NOHSJV+Calibri-Light', 'R12', ''),\\n(15, 'ttf', 'TrueType', 'NZNDCL+CourierNewPSMT', 'R14', ''),\\n(16, 'ttf', 'Type0', 'MNCSJY+SymbolMT', 'R17', 'Identity-H'),\\n(17, 'cff', 'Type1', 'UAEUYH+Helvetica', 'R20', 'WinAnsiEncoding'),\\n(18, 'ttf', 'Type0', 'ECPLRU+Calibri', 'R23', 'Identity-H'),\\n(19, 'ttf', 'Type0', 'TONAYT+CourierNewPSMT', 'R27', 'Identity-H')]\\n"", 'Note:\\n', '• This list has no duplicate entries: the combination of xref, name and referencer is unique.\\n', '• In general, this is a superset of the fonts actually in use by this page. The PDF creator may\\ne.g. have specified some global list, of which each page only makes partial use.\\n', ""get_page_text(pno, output='text', flags=3, textpage=None, sort=False)\\n"", 'Extracts the text of a page given its page number pno (zero-based). Invokes Page.get_text().\\n', 'Parameters\\n', 'pno (int) – page number, 0-based, any value -∞ < pno < page_count.\\n', 'For other parameter refer to the page method.\\n', '212\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'str\\n', 'layout(rect=None, width=0, height=0, fontsize=11)\\n', 'Re-paginate (“reflow”) the document based on the given page dimension and fontsize. This\\nonly affects some document types like e-books and HTML. Ignored if not supported. Supported\\ndocuments have True in property is_reflowable.\\n', 'Parameters\\n', '• rect (rect_like) – desired page size. Must be finite, not empty and start\\nat point (0, 0).\\n', '• width (float) – use it together with height as alternative to rect.\\n', '• height (float) – use it together with width as alternative to rect.\\n', '• fontsize (float) – the desired default fontsize.\\n', 'select(s)\\n', 'PDF only: Keeps only those pages of the document whose numbers occur in the list. Empty\\nsequences or elements outside range(doc.page_count) will cause a ValueError. For more\\ndetails see remarks at the bottom or this chapter.\\n', 'Parameters\\n', 's (sequence) – The sequence (see Using Python Sequences as Arguments in\\nPyMuPDF) of page numbers (zero-based) to be included. Pages not in the se-\\nquence will be deleted (from memory) and become unavailable until the docu-\\nment is reopened. Page numbers can occur multiple times and in any order:\\nthe resulting document will reflect the sequence exactly as specified.\\n', 'Note:\\n', '• Page numbers in the sequence need not be unique nor be in any particular order. This\\nmakes the method a versatile utility to e.g. select only the even or the odd pages or meeting\\nsome other criteria and so forth.\\n', '• On a technical level, the method will always create a new pagetree.\\n', '• When dealing with only a few pages,\\nmethods copy_page(),\\nmove_page(),\\n', 'delete_page() are easier to use. In fact, they are also much faster – by at least one\\norder of magnitude when the document has many pages.\\n', 'set_metadata(m)\\n', 'PDF only: Sets or updates the metadata of the document as specified in m, a Python dictionary.\\n', 'Parameters\\n', 'm (dict) – A dictionary with the same keys as metadata (see below). All keys\\nare optional. A PDF’s format and encryption method cannot be set or changed\\nand will be ignored. If any value should not contain data, do not specify its key\\nor set the value to None. If you use {} all metadata information will be cleared to\\nthe string “none”. If you want to selectively change only some values, modify\\na copy of doc.metadata and use it as the argument. Arbitrary unicode values\\nare possible if specified as UTF-8-encoded.\\n', '(Changed in v1.18.4) Empty values or “none” are no longer written, but completely omitted.\\n', 'get_xml_metadata()\\n', 'PDF only: Get the document XML metadata.\\n', '19.5. Document\\n213\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'XML metadata of the document. Empty string if not present or not a PDF.\\n', 'set_xml_metadata(xml)\\n', 'PDF only: Sets or updates XML metadata of the document.\\n', 'Parameters\\n', 'xml (str) – the new XML metadata. Should be XML syntax, however no\\nchecking is done by this method and any string is accepted.\\n', 'set_pagelayout(value)\\n', '• New in v1.22.2\\n', 'PDF only: Set the /PageLayout.\\n', 'Parameters\\n', 'value (str) – one of the strings “SinglePage”, “OneColumn”, “TwoColumn-\\nLeft”, “TwoColumnRight”, “TwoPageLeft”, “TwoPageRight”. Lower case is\\nsupported.\\n', 'set_pagemode(value)\\n', '• New in v1.22.2\\n', 'PDF only: Set the /PageMode.\\n', 'Parameters\\n', 'value (str) – one of the strings “UseNone”, “UseOutlines”, “UseThumbs”,\\n“FullScreen”, “UseOC”, “UseAttachments”. Lower case is supported.\\n', 'set_markinfo(value)\\n', '• New in v1.22.2\\n', 'PDF only: Set the /MarkInfo values.\\n', 'Parameters\\n', 'value (dict) – a dictionary like this one:\\n{""Marked"":\\nFalse,\\n""UserProperties"":\\nFalse, ""Suspects"":\\nFalse}.\\nThis dictionary\\ncontains information about the usage of Tagged PDF conventions. For details\\nplease see the PDF specifications.\\n', 'set_toc(toc, collapse=1)\\n', 'PDF only: Replaces the complete current outline tree (table of contents) with the one provided\\nas the argument. After successful execution, the new outline tree can be accessed as usual via\\nDocument.get_toc() or via Document.outline. Like with other output-oriented methods,\\nchanges become permanent only via save() (incremental save supported). Internally, this\\nmethod consists of the following two steps. For a demonstration see example below.\\n', '• Step 1 deletes all existing bookmarks.\\n', '• Step 2 creates a new TOC from the entries contained in toc.\\n', 'Parameters\\n', '• toc (sequence) – A list / tuple with all bookmark entries that should form\\nthe new table of contents. Output variants of get_toc() are acceptable.\\n', '214\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'To completely remove the table of contents specify an empty sequence or\\nNone. Each item must be a list with the following format.\\n', '– [lvl, title, page [, dest]] where\\n', '∗ lvl is the hierarchy level (int > 0) of the item, which must be 1 for the\\nfirst item and at most 1 larger than the previous one.\\n', '∗ title (str) is the title to be displayed. It is assumed to be UTF-8-\\nencoded (relevant for multibyte code points only).\\n', '∗ page (int) is the target page number (attention: 1-based). Must be in\\nvalid range if positive. Set it to -1 if there is no target, or the target is\\nexternal.\\n', '∗ dest (optional) is a dictionary or a number. If a number, it will be\\ninterpreted as the desired height (in points) this entry should point\\nto on the page. Use a dictionary (like the one given as output by\\nget_toc(False)) for a detailed control of the bookmark’s proper-\\nties, see Document.get_toc() for a description.\\n', '• collapse (int) – (new in v1.16.9) controls the hierarchy level beyond\\nwhich outline entries should initially show up collapsed. The default 1 will\\nhence only display level 1, higher levels must be unfolded using the PDF\\nviewer. To unfold everything, specify either a large integer, 0 or None.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'the number of inserted, resp. deleted items.\\n', 'Changed in v1.23.8: Destination ‘to’ coordinates should now be in the same coordinate system\\nas those returned by get_toc() (internally they are now transformed with page.cropbox\\nand page.rotation_matrix). So for example set_toc(get_toc()) now gives unchanged\\ndestination ‘to’ coordinates.\\n', 'outline_xref(idx)\\n', '• New in v1.17.7\\n', 'PDF only: Return the xref of the outline item. This is mainly used for internal purposes.\\n', 'arg int idx: index of the item in list Document.get_toc().\\n', 'Returns\\n', 'xref.\\n', 'del_toc_item(idx)\\n', '• New in v1.17.7\\n', '• Changed in v1.18.14: no longer remove the item’s text, but show it grayed-out.\\n', 'PDF only: Remove this TOC item. This is a high-speed method, which disables the respective\\nitem, but leaves the overall TOC structure intact. Physically, the item still exists in the TOC\\ntree, but is shown grayed-out and will no longer point to any destination.\\n', 'This also implies that you can reassign the item to a new destination using Document.\\nset_toc_item(), when required.\\n', 'Parameters\\n', 'idx (int) – the index of the item in list Document.get_toc().\\n', '19.5. Document\\n215\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'set_toc_item(idx, dest_dict=None, kind=None, pno=None, uri=None, title=None, to=None,\\nfilename=None, zoom=0)\\n', '• New in v1.17.7\\n', '• Changed in v1.18.6\\n', 'PDF only: Changes the TOC item identified by its index. Change the item title, destination,\\nappearance (color, bold, italic) or collapsing sub-items – or to remove the item altogether.\\n', 'Use this method if you need specific changes for selected entries only and want to avoid replac-\\ning the complete TOC. This is beneficial especially when dealing with large table of contents.\\n', 'Parameters\\n', '• idx (int) – the index of the entry in the list created by Document.\\nget_toc().\\n', '• dest_dict (dict) – the new destination. A dictionary like the last entry\\nof an item in doc.get_toc(False). Using this as a template is recom-\\nmended. When given, all other parameters are ignored – except title.\\n', '• kind (int) – the link kind, see Link Destination Kinds. If LINK_NONE,\\nthen all remaining parameter will be ignored, and the TOC item will be\\nremoved – same as Document.del_toc_item(). If None, then only the\\ntitle is modified and the remaining parameters are ignored. All other val-\\nues will lead to making a new destination dictionary using the subsequent\\narguments.\\n', '• pno (int) – the 1-based page number, i.e.\\na value 1 <= pno <=\\ndoc.page_count. Required for LINK_GOTO.\\n', '• uri (str) – the URL text. Required for LINK_URI.\\n', '• title (str) – the desired new title. None if no change.\\n', '• to (point_like) – (optional) points to a coordinate on the target page.\\nRelevant for LINK_GOTO. If omitted, a point near the page’s top is chosen.\\n', '• filename (str) – required for LINK_GOTOR and LINK_LAUNCH.\\n', '• zoom (float) – use this zoom factor when showing the target page.\\n', 'Example use: Change the TOC of the SWIG manual to achieve this:\\n', 'Collapse everything below top level and show the chapter on Python support in red, bold and\\nitalic:\\n', '>>> import fitz\\n>>> doc=fitz.open(""SWIGDocumentation.pdf"")\\n>>> toc = doc.get_toc(False)\\n# we need the detailed TOC\\n', '>>> # list of level 1 indices and their titles\\n>>> lvl1 = [(i, item[1]) for i, item in enumerate(toc) if item[0] == 1]\\n>>> for i, title in lvl1:\\n', 'd = toc[i][3]\\n# get the destination dict\\n', 'd[""collapse""] = True\\n# collapse items underneath\\n', 'if ""Python"" in title:\\n# show the \\'Python\\' chapter\\n', 'd[""color""] = (1, 0, 0)\\n# in red,\\n', 'd[""bold""] = True\\n# bold and\\n', 'd[""italic""] = True\\n# italic\\n', '(continues on next page)\\n', '216\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'doc.set_toc_item(i, dest_dict=d)\\n# update this toc item\\n', '>>> doc.save(""NEWSWIG.pdf"",garbage=3,deflate=True)\\n', 'In the previous example, we have changed only 42 of the 1240 TOC items of the file.\\n', 'can_save_incrementally()\\n', '• New in v1.16.0\\n', 'Check whether the document can be saved incrementally. Use it to choose the right option\\nwithout encountering exceptions.\\n', 'scrub(attached_files=True, clean_pages=True, embedded_files=True, hidden_text=True,\\njavascript=True, metadata=True, redactions=True, redact_images=0, remove_links=True,\\nreset_fields=True, reset_responses=True, thumbnails=True, xml_metadata=True)\\n', '• New in v1.16.14\\n', 'PDF only: Remove potentially sensitive data from the PDF. This function is inspired by the\\nsimilar “Sanitize” function in Adobe Acrobat products. The process is configurable by a number\\nof options.\\n', 'Parameters\\n', '• attached_files (bool) – Search for ‘FileAttachment’ annotations and\\nremove the file content.\\n', '• clean_pages (bool) – Remove any comments from page painting\\nsources. If this option is set to False, then this is also done for hidden_text\\nand redactions.\\n', '• embedded_files (bool) – Remove embedded files.\\n', '• hidden_text (bool) – Remove OCRed text and invisible text7.\\n', '• javascript (bool) – Remove JavaScript sources.\\n', '• metadata (bool) – Remove PDF standard metadata.\\n', '• redactions (bool) – Apply redaction annotations.\\n', '• redact_images (int) – how to handle images if applying redactions. One\\nof 0 (ignore), 1 (blank out overlaps) or 2 (remove).\\n', '• remove_links (bool) – Remove all links.\\n', '• reset_fields (bool) – Reset all form fields to their defaults.\\n', '• reset_responses (bool) – Remove all responses from all annotations.\\n', '• thumbnails (bool) – Remove thumbnail images from pages.\\n', '• xml_metadata (bool) – Remove XML metadata.\\n', 'save(outfile, garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False,\\nincremental=False, ascii=False, expand=0, linear=False, pretty=False, no_new_id=False,\\nencryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None, user_pw=None)\\n', '• Changed in v1.18.7\\n', '• Changed in v1.19.0\\n', '7 This only works under certain conditions. For example, if there is normal text covered by some image on top of it, then this is undetectable and\\nthe respective text is not removed. Similar is true for white text on white background, and so on.\\n', '19.5. Document\\n217\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'PDF only: Saves the document in its current state.\\n', 'Parameters\\n', '• outfile (str,Path,fp) – The file path, pathlib.Path or file object\\nto save to. A file object must have been created before via open(...)\\nor io.BytesIO(). Choosing io.BytesIO() is similar to Document.\\ntobytes() below, which equals the getvalue() output of an internally\\ncreated io.BytesIO().\\n', '• garbage (int) – Do garbage collection. Positive values exclude “incre-\\nmental”.\\n', '– 0 = none\\n', '– 1 = remove unused (unreferenced) objects.\\n', '– 2 = in addition to 1, compact the xref table.\\n', '– 3 = in addition to 2, merge duplicate objects.\\n', '– 4 = in addition to 3, check stream objects for duplication. This may be\\nslow because such data are typically large.\\n', '• clean (bool) – Clean and sanitize content streams1. Corresponds to “mu-\\ntool clean -sc”.\\n', '• deflate (bool) – Deflate (compress) uncompressed streams.\\n', '• deflate_images (bool) – (new in v1.18.3) Deflate (compress) uncom-\\npressed image streams4.\\n', '• deflate_fonts (bool) – (new in v1.18.3) Deflate (compress) uncom-\\npressed fontfile streamsPage 218, 4.\\n', '• incremental (bool) – Only save changes to the PDF. Excludes “garbage”\\nand “linear”. Can only be used if outfile is a string or a pathlib.Path\\nand equal to Document.name. Cannot be used for files that are decrypted\\nor repaired and also in some other cases. To be sure, check Document.\\ncan_save_incrementally(). If this is false, saving to a new file is re-\\nquired.\\n', '• ascii (bool) – convert binary data to ASCII.\\n', '• expand (int) – Decompress objects. Generates versions that can be better\\nread by some other programs and will lead to larger files.\\n', '– 0 = none\\n', '– 1 = images\\n', '– 2 = fonts\\n', '– 255 = all\\n', '• linear (bool) – Save a linearised version of the document. This option\\ncreates a file format for improved performance for Internet access. Excludes\\n“incremental”.\\n', '1 Content streams describe what (e.g. text or images) appears where and how on a page. PDF uses a specialized mini language similar to\\nPostScript to do this (pp. 643 in Adobe PDF References), which gets interpreted when a page is loaded.\\n4 These parameters cause separate handling of stream categories: use it together with expand to restrict decompression to streams other than\\nimages / fontfiles.\\n', '218\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• pretty (bool) – Prettify the document source for better readability. PDF\\nobjects will be reformatted to look like the default output of Document.\\nxref_object().\\n', '• no_new_id (bool) – Suppress the update of the file’s /ID field. If the file\\nhappens to have no such field at all, also suppress creation of a new one.\\nDefault is False, so every save will lead to an updated file identification.\\n', '• permissions (int) – (new in v1.16.0) Set the desired permission levels.\\nSee Document Permissions for possible values. Default is granting all.\\n', '• encryption (int) – (new in v1.16.0) set the desired encryption method.\\nSee PDF encryption method codes for possible values.\\n', '• owner_pw (str) – (new in v1.16.0) set the document’s owner password.\\n(Changed in v1.18.3) If not provided, the user password is taken if provided.\\nThe string length must not exceed 40 characters.\\n', '• user_pw (str) – (new in v1.16.0) set the document’s user password. The\\nstring length must not exceed 40 characters.\\n', 'Note: The method does not check, whether a file of that name already exists, will hence not\\nask for confirmation, and overwrite the file. It is your responsibility as a programmer to handle\\nthis.\\n', 'ez_save(*args, **kwargs)\\n', '• New in v1.18.11\\n', 'PDF only: The same as Document.save() but with the changed defaults deflate=True,\\ngarbage=3.\\n', 'saveIncr()\\n', 'PDF only:\\nsaves the document incrementally.\\nThis is a convenience abbreviation for\\ndoc.save(doc.name, incremental=True, encryption=PDF_ENCRYPT_KEEP).\\n', 'Note:\\nSaving incrementally may be required if the document contains verified signatures which\\nwould be invalidated by saving to a new file.\\n', 'tobytes(garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False,\\nascii=False, expand=0, linear=False, pretty=False, no_new_id=False,\\nencryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None,\\nuser_pw=None)\\n', '• Changed in v1.18.7\\n', '• Changed in v1.19.0\\n', 'PDF only: Writes the current content of the document to a bytes object instead of to a file.\\nObviously, you should be wary about memory requirements. The meanings of the parameters\\nexactly equal those in save(). Chapter FAQ contains an example for using this method as a\\npre-processor to pdfrw.\\n', '(Changed in v1.16.0) for extended encryption support.\\n', 'Return type\\n', 'bytes\\n', '19.5. Document\\n219\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Returns\\n', 'a bytes object containing the complete document.\\n', 'search_page_for(pno, text, quads=False)\\n', 'Search for “text” on page number “pno”.\\nWorks exactly like the corresponding Page.\\nsearch_for(). Any integer -∞ < pno < page_count is acceptable.\\n', 'insert_pdf(docsrc, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True,\\nshow_progress=0, final=1)\\n', '• Changed in v1.19.3 - as a fix to issue #537, form fields are always excluded.\\n', 'PDF only: Copy the page range [from_page, to_page] (including both) of PDF document\\ndocsrc into the current one. Inserts will start with page number start_at. Value -1 indicates\\ndefault values. All pages thus copied will be rotated as specified. Links and annotations can be\\nexcluded in the target, see below. All page numbers are 0-based.\\n', 'Parameters\\n', '• docsrc (Document) – An opened PDF Document which must not be the\\ncurrent document. However, it may refer to the same underlying file.\\n', '• from_page (int) – First page number in docsrc. Default is zero.\\n', '• to_page (int) – Last page number in docsrc to copy. Defaults to last page.\\n', '• start_at (int) – First copied page, will become page number start_at in\\nthe target. Default -1 appends the page range to the end. If zero, the page\\nrange will be inserted before current first page.\\n', '• rotate (int) – All copied pages will be rotated by the provided value\\n(degrees, integer multiple of 90).\\n', '• links (bool) – Choose whether (internal and external) links should be\\nincluded in the copy. Default is True. Internal links to outside the copied\\npage range are always excluded.\\n', '• annots (bool) – (new in v1.16.1) choose whether annotations should be\\nincluded in the copy. (Fixed in v1.19.3) Form fields can never be copied.\\n', '• show_progress (int) – (new in v1.17.7) specify an interval size greater\\nzero to see progress messages on sys.stdout. After each interval, a mes-\\nsage like Inserted 30 of 47 pages. will be printed.\\n', '• final (int) – (new in v1.18.0) controls whether the list of already copied\\nobjects should be dropped after this method, default True. Set it to 0 except\\nfor the last one of multiple insertions from the same source PDF. This saves\\ntarget file size and speeds up execution considerably.\\n', 'Note:\\n', '1. If from_page > to_page, pages will be copied in reverse order. If 0 <= from_page == to_page,\\nthen one page will be copied.\\n', '2. docsrc TOC entries will not be copied. It is easy however, to recover a table of contents for\\nthe resulting document. Look at the examples below and at program join.py in the examples\\ndirectory: it can join PDF documents and at the same time piece together respective parts of\\nthe tables of contents.\\n', '220\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'insert_file(infile, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True,\\nshow_progress=0, final=1)\\n', '• New in v1.22.0\\n', 'PDF only: Add an arbitrary supported document to the current PDF. Opens “infile” as a doc-\\nument, converts it to a PDF and then invokes Document.insert_pdf(). Parameters are the\\nsame as for that method. Among other things, this features an easy way to append images as\\nfull pages to an output PDF.\\n', 'Parameters\\n', 'infile (multiple) – the input document to insert. May be a filename speci-\\nfication as is valid for creating a Document or a Pixmap.\\n', 'new_page(pno=-1, width=595, height=842)\\n', 'PDF only: Insert an empty page.\\n', 'Parameters\\n', '• pno (int) – page number in front of which the new page should be inserted.\\nMust be in 1 < pno <= page_count. Special values -1 and doc.page_count\\ninsert after the last page.\\n', '• width (float) – page width.\\n', '• height (float) – page height.\\n', 'Return type\\n', 'Page\\n', 'Returns\\n', 'the created page object.\\n', ""insert_page(pno, text=None, fontsize=11, width=595, height=842, fontname='helv',\\nfontfile=None, color=None)\\n"", 'PDF only: Insert a new page and insert some text. Convenience function which combines\\nDocument.new_page() and (parts of) Page.insert_text().\\n', 'Parameters\\n', 'pno (int) – page number (0-based) in front of which to insert.\\nMust\\nbe in range(-1, doc.page_count + 1).\\nSpecial values -1 and doc.\\npage_count insert after the last page.\\n', 'Changed in v1.14.12\\n', 'This is now a positional parameter\\n', 'For the other parameters, please consult the aforementioned methods.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'the result of Page.insert_text() (number of successfully inserted lines).\\n', 'delete_page(pno=-1)\\n', 'PDF only: Delete a page given by its 0-based number in -∞ < pno < page_count - 1.\\n', '• Changed in v1.18.14: support Python’s del statement.\\n', 'Parameters\\n', 'pno (int) – the page to be deleted. Negative number count backwards from the\\nend of the document (like with indices). Default is the last page.\\n', '19.5. Document\\n221\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'delete_pages(*args, **kwds)\\n', '• Changed in v1.18.13: more flexibility specifying pages to delete.\\n', '• Changed in v1.18.14: support Python’s del statement.\\n', 'PDF only: Delete multiple pages given as 0-based numbers.\\n', 'Format 1: Use keywords. Represents the old format. A contiguous range of pages is\\nremoved.\\n', '• “from_page”: first page to delete. Zero if omitted.\\n', '• “to_page”: last page to delete. Last page in document if omitted. Must not be less\\nthen “from_page”.\\n', 'Format 2: Two page numbers as positional parameters. Handled like Format 1.\\n', 'Format 3: One positional integer parameter. Equivalent to Page.delete_page().\\n', 'Format 4: One positional parameter of type list, tuple or range() of page numbers. The items\\nof this sequence may be in any order and may contain duplicates.\\n', 'Format 5: (New in v1.18.14) Using the Python del statement and index / slice notation is now\\npossible.\\n', 'Note: (Changed in v1.14.17, optimized in v1.17.7) In an effort to maintain a valid PDF struc-\\nture, this method and delete_page() will also deactivate items in the table of contents which\\npoint to deleted pages. “Deactivation” here means, that the bookmark will point to nowhere\\nand the title will be shown grayed-out by supporting PDF viewers. The overall TOC structure\\nis left intact.\\n', 'It will also remove any links on remaining pages which point to a deleted one. This action\\nmay have an extended response time for documents with many pages.\\n', 'Following examples will all delete pages 500 through 519:\\n', '• doc.delete_pages(500, 519)\\n', '• doc.delete_pages(from_page=500, to_page=519)\\n', '• doc.delete_pages((500, 501, 502, ... , 519))\\n', '• doc.delete_pages(range(500, 520))\\n', '• del doc[500:520]\\n', '• del doc[(500, 501, 502, ... , 519)]\\n', '• del doc[range(500, 520)]\\n', 'For the Adobe PDF References the above takes about 0.6 seconds, because the remaining 1290\\npages must be cleaned from invalid links.\\n', 'In general, the performance of this method is dependent on the number of remaining pages –\\nnot on the number of deleted pages: in the above example, deleting all pages except those 20,\\nwill need much less time.\\n', 'copy_page(pno, to=-1)\\n', 'PDF only: Copy a page reference within the document.\\n', 'Parameters\\n', '222\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• pno (int) – the page to be copied.\\nMust be in range 0 <= pno <\\npage_count.\\n', '• to (int) – the page number in front of which to copy. The default inserts\\nafter the last page.\\n', 'Note:\\nOnly a new reference to the page object will be created – not a new page object, all\\ncopied pages will have identical attribute values, including the Page.xref. This implies that\\nany changes to one of these copies will appear on all of them.\\n', 'fullcopy_page(pno, to=-1)\\n', '• New in v1.14.17\\n', 'PDF only: Make a full copy (duplicate) of a page.\\n', 'Parameters\\n', '• pno (int) – the page to be duplicated. Must be in range 0 <= pno <\\npage_count.\\n', '• to (int) – the page number in front of which to copy. The default inserts\\nafter the last page.\\n', 'Note:\\n', '• In contrast to copy_page(), this method creates a new page object (with a new xref),\\nwhich can be changed independently from the original.\\n', '• Any Popup and “IRT” (“in response to”) annotations are not copied to avoid potentially\\nincorrect situations.\\n', 'move_page(pno, to=-1)\\n', 'PDF only: Move (copy and then delete original) a page within the document.\\n', 'Parameters\\n', '• pno (int) – the page to be moved.\\nMust be in range 0 <= pno <\\npage_count.\\n', '• to (int) – the page number in front of which to insert the moved page. The\\ndefault moves after the last page.\\n', 'need_appearances(value=None)\\n', '• New in v1.17.4\\n', 'PDF only: Get or set the /NeedAppearances property of Form PDFs. Quote: “(Optional) A\\nflag specifying whether to construct appearance streams and appearance dictionaries for all\\nwidget annotations in the document ... Default value: false.” This may help controlling the\\nbehavior of some readers / viewers.\\n', 'Parameters\\n', 'value (bool) – set the property to this value. If omitted or None, inquire the\\ncurrent value.\\n', 'Return type\\n', 'bool\\n', 'Returns\\n', '19.5. Document\\n223\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• None: not a Form PDF, or property not defined.\\n', '• True / False: the value of the property (either just set or existing for in-\\nquiries). Has no effect if no Form PDF.\\n', 'get_sigflags()\\n', 'PDF only: Return whether the document contains signature fields. This is an optional PDF\\nproperty: if not present (return value -1), no conclusions can be drawn – the PDF creator may\\njust not have bothered using it.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', '• -1: not a Form PDF / no signature fields recorded / no SigFlags found.\\n', '• 1: at least one signature field exists.\\n', '• 3: contains signatures that may be invalidated if the file is saved (written) in\\na way that alters its previous contents, as opposed to an incremental update.\\n', 'embfile_add(name, buffer, filename=None, ufilename=None, desc=None)\\n', '• Changed in v1.14.16: The sequence of positional parameters “name” and “buffer” has\\nbeen changed to comply with the call pattern of other functions.\\n', 'PDF only: Embed a new file. All string parameters except the name may be unicode (in previous\\nversions, only ASCII worked correctly). File contents will be compressed (where beneficial).\\n', 'Parameters\\n', '• name (str) – entry identifier, must not already exist.\\n', '• buffer (bytes,bytearray,BytesIO) – file contents.\\n', '(Changed in v1.14.13) io.BytesIO is now also supported.\\n', '• filename (str) – optional filename. Documentation only, will be set to\\nname if None.\\n', '• ufilename (str) – optional unicode filename. Documentation only, will\\nbe set to filename if None.\\n', '• desc (str) – optional description. Documentation only, will be set to name\\nif None.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', '(Changed in v1.18.13) The method now returns the xref of the inserted file.\\nIn addition, the file object now will be automatically given the PDF keys /\\nCreationDate and /ModDate based on the current date-time.\\n', 'embfile_count()\\n', '• Changed in v1.14.16: This is now a method. In previous versions, this was a property.\\n', 'PDF only: Return the number of embedded files.\\n', 'embfile_get(item)\\n', 'PDF only: Retrieve the content of embedded file by its entry number or name. If the document\\nis not a PDF, or entry cannot be found, an exception is raised.\\n', '224\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'item (int,str) – index or name of entry.\\nAn integer must be in\\nrange(embfile_count()).\\n', 'Return type\\n', 'bytes\\n', 'embfile_del(item)\\n', '• Changed in v1.14.16: Items can now be deleted by index, too.\\n', 'PDF only: Remove an entry from /EmbeddedFiles. As always, physical deletion of the em-\\nbedded file content (and file space regain) will occur only when the document is saved to a new\\nfile with a suitable garbage option.\\n', 'Parameters\\n', 'item (int/str) – index or name of entry.\\n', 'Warning:\\nWhen specifying an entry name, this function will only delete the first item\\nwith that name. Be aware that PDFs not created with PyMuPDF may contain duplicate\\nnames. So you may want to take appropriate precautions.\\n', 'embfile_info(item)\\n', '• Changed in v1.18.13\\n', 'PDF only: Retrieve information of an embedded file given by its number or by its name.\\n', 'Parameters\\n', 'item (int/str) – index or name of entry.\\nAn integer must be in\\nrange(embfile_count()).\\n', 'Return type\\n', 'dict\\n', 'Returns\\n', 'a dictionary with the following keys:\\n', '• name – (str) name under which this entry is stored\\n', '• filename – (str) filename\\n', '• ufilename – (unicode) filename\\n', '• desc – (str) description\\n', '• size – (int) original file size\\n', '• length – (int) compressed file length\\n', '• creationDate – (New in v1.18.13) (str) date-time of item creation in PDF\\nformat\\n', '• modDate – (New in v1.18.13) (str) date-time of last change in PDF format\\n', '• collection – (New in v1.18.13) (int) xref of the associated PDF portfolio\\nitem if any, else zero.\\n', '• checksum – (New in v1.18.13) (str) a hashcode of the stored file content as\\na hexadecimal string. Should be MD5 according to PDF specifications, but\\nbe prepared to see other hashing algorithms.\\n', '19.5. Document\\n225\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'embfile_names()\\n', '• New in v1.14.16\\n', 'PDF only: Return a list of embedded file names. The sequence of the names equals the physical\\nsequence in the document.\\n', 'Return type\\n', 'list\\n', 'embfile_upd(item, buffer=None, filename=None, ufilename=None, desc=None)\\n', 'PDF only: Change an embedded file given its entry number or name. All parameters are op-\\ntional. Letting them default leads to a no-operation.\\n', 'Parameters\\n', '• item (int/str) – index or name of entry.\\nAn integer must be in\\nrange(embfile_count()).\\n', '• buffer (bytes,bytearray,BytesIO) – the new file content.\\n', '(Changed in v1.14.13) io.BytesIO is now also supported.\\n', '• filename (str) – the new filename.\\n', '• ufilename (str) – the new unicode filename.\\n', '• desc (str) – the new description.\\n', '(Changed in v1.18.13) The method now returns the xref of the file object.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'xref of the file object. Automatically, its /ModDate PDF key will be updated\\nwith the current date-time.\\n', 'close()\\n', 'Release objects and space allocations associated with the document. If created from a file, also\\ncloses filename (releasing control to the OS). Explicitly closing a document is equivalent to\\ndeleting it, del doc, or assigning it to something else like doc = None.\\n', 'xref_object(xref, compressed=False, ascii=False)\\n', '• New in v1.16.8\\n', '• Changed in v1.18.10\\n', 'PDF only: Return the definition source of a PDF object.\\n', 'Parameters\\n', '• xref (int) – the object’s xref. Changed in v1.18.10: A value of -1\\nreturns the PDF trailer source.\\n', '• compressed (bool) – whether to generate a compact output with no line\\nbreaks or spaces.\\n', '• ascii (bool) – whether to ASCII-encode binary data.\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'The object definition source.\\n', '226\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'pdf_catalog()\\n', '• New in v1.16.8\\n', 'PDF only: Return the xref number of the PDF catalog (or root) object. Use that number with\\nDocument.xref_object() to see its source.\\n', 'pdf_trailer(compressed=False)\\n', '• New in v1.16.8\\n', 'PDF only: Return the trailer source of the PDF, which is usually located at the PDF file’s end.\\nThis is Document.xref_object() with an xref argument of -1.\\n', 'xref_stream(xref )\\n', '• New in v1.16.8\\n', 'PDF only: Return the decompressed contents of the xref stream object.\\n', 'Parameters\\n', 'xref (int) – xref number.\\n', 'Return type\\n', 'bytes\\n', 'Returns\\n', 'the (decompressed) stream of the object.\\n', 'xref_stream_raw(xref )\\n', '• New in v1.16.8\\n', 'PDF only: Return the unmodified (esp. not decompressed) contents of the xref stream ob-\\nject. Otherwise equal to Document.xref_stream().\\n', 'Return type\\n', 'bytes\\n', 'Returns\\n', 'the (original, unmodified) stream of the object.\\n', 'update_object(xref, obj_str, page=None)\\n', '• New in v1.16.8\\n', 'PDF only: Replace object definition of xref with the provided string. The xref may also be\\nnew, in which case this instruction completes the object definition. If a page object is also given,\\nits links and annotations will be reloaded afterwards.\\n', 'Parameters\\n', '• xref (int) – xref number.\\n', '• obj_str (str) – a string containing a valid PDF object definition.\\n', '• page (Page) – a page object. If provided, indicates, that annotations of this\\npage should be refreshed (reloaded) to reflect changes incurred with links\\nand / or annotations.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'zero if successful, otherwise an exception will be raised.\\n', '19.5. Document\\n227\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'update_stream(xref, data, new=False, compress=True)\\n', '• New in v.1.16.8\\n', '• Changed in v1.19.2: added parameter “compress”\\n', '• Changed in v1.19.6: deprecated parameter “new”. Now confirms that the object is a PDF\\ndictionary object.\\n', 'Replace the stream of an object identified by xref, which must be a PDF dictionary. If the object\\nis no stream, it will be turned into one. The function automatically performs a compress\\noperation (“deflate”) where beneficial.\\n', 'Parameters\\n', '• xref (int) – xref number.\\n', '• stream (bytes|bytearray|BytesIO) – the new content of the stream.\\n', '(Changed in v1.14.13:) io.BytesIO objects are now also supported.\\n', '• new (bool) – deprecated and ignored. Will be removed some time after\\nv1.20.0.\\n', '• compress (bool) – whether to compress the inserted stream. If True (de-\\nfault), the stream will be inserted using /FlateDecode compression (if\\nbeneficial), otherwise the stream will inserted as is.\\n', 'Raises\\n', 'ValueError – if xref does not represent a PDF dict. An empty dictionary\\n<<>> is accepted. So if you just created the xref and want to give it a stream, first\\nexecute doc.update_object(xref, ""<<>>""), and then insert the stream\\ndata with this method.\\n', 'The method is primarily (but not exclusively) intended to manipulate streams containing PDF\\noperator syntax (see pp. 643 of the Adobe PDF References) as it is the case for e.g. page content\\nstreams.\\n', 'If you update a contents stream, consider using save parameter clean=True to ensure consis-\\ntency between PDF operator source and the object structure.\\n', 'Example: Let us assume that you no longer want a certain image appear on a page. This can be\\nachieved by deleting the respective reference in its contents source(s) – and indeed: the image\\nwill be gone after reloading the page. But the page’s resources object would still show the\\nimage as being referenced by the page. This save option will clean up any such mismatches.\\n', 'xref_copy(source, target, *, keep=None)\\n', '• New in v1.19.5\\n', 'PDF Only: Make target xref an exact copy of source. If source is a stream, then these data are also\\ncopied.\\n', 'Parameters\\n', '• source (int) – the source xref. It must be an existing dictionary object.\\n', '• target (int) – the target xref. Must be an existing dictionary object. If the xref\\nhas just been created, make sure to initialize it as a PDF dictionary with the mini-\\nmum specification <<>>.\\n', '• keep (list) – an optional list of top-level keys in target, that should not be removed\\nin preparation of the copy process.\\n', '228\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\n', '• This method has much in common with Python’s dict method copy().\\n', '• Both xref numbers must represent existing dictionaries.\\n', '• Before data is copied from source, all target dictionary keys are deleted. You can specify exceptions\\nfrom this in the keep list. If source however has a same-named key, its value will still replace the\\ntarget.\\n', '• If source is a stream object, then these data will also be copied over, and target will be converted\\nto a stream object.\\n', '• A typical use case is to replace or remove an existing image without using redaction annotations.\\nExample scripts can be seen here.\\n', 'extract_image(xref )\\n', 'PDF Only: Extract data and meta information of an image stored in the document. The output can directly\\nbe used to be stored as an image file, as input for PIL, Pixmap creation, etc. This method avoids using\\npixmaps wherever possible to present the image in its original format (e.g. as JPEG).\\n', 'Parameters\\n', 'xref (int) – xref of an image object.\\nIf this is not in range(1, doc.\\nxref_length()), or the object is no image or other errors occur, None is returned\\nand no exception is raised.\\n', 'Return type\\n', 'dict\\n', 'Returns\\n', 'a dictionary with the following keys\\n', '• ext (str) image type (e.g. ‘jpeg’), usable as image file extension\\n', '• smask (int) xref number of a stencil (/SMask) image or zero\\n', '• width (int) image width\\n', '• height (int) image height\\n', '• colorspace (int) the image’s colorspace.n number.\\n', '• cs-name (str) the image’s colorspace.name.\\n', '• xres (int) resolution in x direction. Please also see resolution.\\n', '• yres (int) resolution in y direction. Please also see resolution.\\n', '• image (bytes) image data, usable as image file content\\n', "">>> d = doc.extract_image(1373)\\n>>> d\\n{'ext': 'png', 'smask': 2934, 'width': 5, 'height': 629, 'colorspace': 3, 'xres\\n"", '˓→\\': 96,\\n\\'yres\\': 96, \\'cs-name\\': \\'DeviceRGB\\',\\n\\'image\\': b\\'\\\\x89PNG\\\\r\\\\n\\\\x1a\\\\n\\\\x00\\\\x00\\\\x00\\\\rIHDR\\\\x00\\\\x00\\\\x00\\\\x05\\\\ ...\\'}\\n>>> imgout = open(f""image.{d[\\'ext\\']}"", ""wb"")\\n>>> imgout.write(d[""image""])\\n102\\n>>> imgout.close()\\n', '19.5. Document\\n229\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: There is a functional overlap with pix = fitz.Pixmap(doc, xref), followed by a pix.tobytes(). Main\\ndifferences are that extract_image, (1) does not always deliver PNG image formats, (2) is very much faster\\nwith non-PNG images, (3) usually results in much less disk storage for extracted images, (4) returns None\\nin error cases (generates no exception). Look at the following example images within the same PDF.\\n', '• xref 1268 is a PNG – Comparable execution time and identical output:\\n', 'In [23]: %timeit pix = fitz.Pixmap(doc, 1268);pix.tobytes()\\n10.8 ms ± 52.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\\nIn [24]: len(pix.tobytes())\\nOut[24]: 21462\\n', 'In [25]: %timeit img = doc.extract_image(1268)\\n10.8 ms ± 86 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\\nIn [26]: len(img[""image""])\\nOut[26]: 21462\\n', '• xref 1186 is a JPEG – Document.extract_image() is many times faster and produces a much\\nsmaller output (2.48 MB vs. 0.35 MB):\\n', 'In [27]: %timeit pix = fitz.Pixmap(doc, 1186);pix.tobytes()\\n341 ms ± 2.86 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\\nIn [28]: len(pix.tobytes())\\nOut[28]: 2599433\\n', 'In [29]: %timeit img = doc.extract_image(1186)\\n15.7 µs ± 116 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\\nIn [30]: len(img[""image""])\\nOut[30]: 371177\\n', 'extract_font(xref, info_only=False, named=None)\\n', '• Changed in v1.19.4: return a dictionary if named == True.\\n', 'PDF Only: Return an embedded font file’s data and appropriate file extension. This can be\\nused to store the font as an external file. The method does not throw exceptions (other than\\nvia checking for PDF and valid xref).\\n', 'arg int xref\\n', 'PDF object number of the font to extract.\\n', 'arg bool info_only\\n', 'only return font information, not the buffer. To be used for information-only\\npurposes, avoids allocation of large buffer areas.\\n', 'arg bool named\\n', 'If true, a dictionary with the following keys is returned: ‘name’ (font base\\nname), ‘ext’ (font file extension), ‘type’ (font type), ‘content’ (font file con-\\ntent).\\n', 'rtype\\n', 'tuple,dict\\n', 'returns\\n', 'a tuple (basename, ext, type, content), where ext is a 3-byte sug-\\ngested file extension (str), basename is the font’s name (str), type is the font’s\\n', '230\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'type (e.g. “Type1”) and content is a bytes object containing the font file’s con-\\ntent (or b””). For possible extension values and their meaning see Font File\\nExtensions. Return details on error:\\n', '• ("""", """", """", b"""") – invalid xref or xref is not a (valid) font object.\\n', '• (basename, ""n/a"", ""Type1"", b"""") – basename is not embedded\\nand thus cannot be extracted. This is the case for e.g. the PDF Base\\n14 Fonts and Type 3 fonts.\\n', 'Example:\\n', '>>> # store font as an external file\\n>>> name, ext, _, content = doc.extract_font(4711)\\n>>> # assuming content is not None:\\n>>> ofile = open(name + ""."" + ext, ""wb"")\\n>>> ofile.write(content)\\n>>> ofile.close()\\n', 'Warning: The basename is returned unchanged from the PDF. So it may contain char-\\nacters (such as blanks) which may disqualify it as a filename for your operating system.\\nTake appropriate action.\\n', 'Note:\\n', '• The returned basename in general is not the original file name, but it probably has some\\nsimilarity.\\n', ""• If parameter named == True, a dictionary with the following keys is returned:\\n{'name':\\n'T1', 'ext':\\n'n/a', 'type':\\n'Type3', 'content':\\nb''}.\\n"", 'xref_xml_metadata()\\n', '• New in v1.16.8\\n', 'PDF only: Return the xref of the document’s XML metadata.\\n', 'has_links()\\n', 'has_annots()\\n', '• New in v1.18.7\\n', 'PDF only: Check whether there are links, resp. annotations anywhere in the document.\\n', 'Returns\\n', 'True / False. As opposed to fields, which are also stored in a central place of a PDF\\ndocument, the existence of links / annotations can only be detected by parsing each\\npage. These methods are tuned to do this efficiently and will immediately return,\\nif the answer is True for a page. For PDFs with many thousand pages however, an\\nanswer may take some time6 if no link, resp. no annotation is found.\\n', '6 For a False the complete document must be scanned. Both methods do not load pages, but only scan object definitions. This makes them\\nat least 10 times faster than application-level loops (where total response time roughly equals the time for loading all pages). For the Adobe PDF\\nReferences (756 pages) and the Pandas documentation (over 3070 pages) – both have no annotations – the method needs about 11 ms for the answer\\nFalse. So response times will probably become significant only well beyond this order of magnitude.\\n', '19.5. Document\\n231\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'subset_fonts()\\n', '• New in v1.18.7, changed in v1.18.9\\n', 'PDF only: Investigate eligible fonts for their use by text in the document. If a font is supported and\\na size reduction is possible, that font is replaced by a version with a character subset.\\n', 'Use this method immediately before saving the document. The following features and restrictions\\napply for the time being:\\n', '• Package fontTools must be installed. It is required for creating the font subsets. If not installed,\\nthe method raises an ImportError exception.\\n', '• Supported font types only include embedded OTF, TTF and WOFF that are not already sub-\\nsets.\\n', '• Changed in v1.18.9: A subset font directly replaces its original – text remains untouched and\\nis not rewritten. It thus should retain all its properties, like spacing, hiddenness, control by\\nOptional Content, etc.\\n', 'The greatest benefit can be achieved when creating new PDFs using large fonts like is typical for\\nAsian scripts. In these cases, the set of actually used unicodes mostly is small compared to the\\nnumber of glyphs in the font. Using this feature can easily reduce the embedded font binary by two\\norders of magnitude – from several megabytes to a low two-digit kilobyte amount.\\n', 'journal_enable()\\n', '• New in v1.19.0\\n', 'PDF only: Enable journalling. Use this before you start logging operations.\\n', 'journal_start_op(name)\\n', '• New in v1.19.0\\n', 'PDF only: Start journalling an “operation” identified by a string “name”. Updates will fail for a\\njournal-enabled PDF, if no operation has been started.\\n', 'journal_stop_op()\\n', '• New in v1.19.0\\n', 'PDF only: Stop the current operation. The updates between start and stop of an operation belong to\\nthe same unit of work and will be undone / redone together.\\n', 'journal_position()\\n', '• New in v1.19.0\\n', 'PDF only: Return the numbers of the current operation and the total operation count.\\n', 'Returns\\n', 'a tuple (step, steps) containing the current operation number and the total num-\\nber of operations in the journal. If step is 0, we are at the top of the journal. If step\\nequals steps, we are at the bottom. Updating the PDF with anything other than undo\\nor redo will automatically remove all journal entries after the current one and the new\\nupdate will become the new last entry in the journal. The updates corresponding to\\nthe removed journal entries will be permanently lost.\\n', 'journal_op_name(step)\\n', '• New in v1.19.0\\n', 'PDF only: Return the name of operation number step.\\n', '232\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'journal_can_do()\\n', '• New in v1.19.0\\n', 'PDF only: Show whether forward (“redo”) and / or backward (“undo”) executions are possible from\\nthe current journal position.\\n', 'Returns\\n', 'a dictionary {""undo"":\\nbool, ""redo"":\\nbool}.\\nThe respective method is\\navailable if its value is True.\\n', 'journal_undo()\\n', '• New in v1.19.0\\n', 'PDF only: Revert (undo) the current step in the journal. This moves towards the journal’s top.\\n', 'journal_redo()\\n', '• New in v1.19.0\\n', 'PDF only: Re-apply (redo) the current step in the journal. This moves towards the journal’s bottom.\\n', 'journal_save(filename)\\n', '• New in v1.19.0\\n', 'PDF only: Save the journal to a file.\\n', 'Parameters\\n', 'filename (str,fp) – either a filename as string or a file object opened as “wb” (or\\nan io.BytesIO() object).\\n', 'journal_load(filename)\\n', '• New in v1.19.0\\n', 'PDF only: Load journal from a file. Enables journalling for the document. If journalling is already\\nenabled, an exception is raised.\\n', 'Parameters\\n', 'filename (str,fp) – the filename (str) of the journal or a file object opened as “rb”\\n(or an io.BytesIO() object).\\n', 'save_snapshot()\\n', '• New in v1.19.0\\n', 'PDF only: Saves a “snapshot” of the document. This is a PDF document with a special, incremental-\\nsave format compatible with journalling – therefore no save options are available. Saving a snapshot\\nis not possible for new documents.\\n', 'This is a normal PDF document with no usage restrictions whatsoever. If it is not being changed in\\nany way, it can be used together with its journal to undo / redo operations or continue updating.\\n', 'outline\\n', 'Contains the first Outline entry of the document (or None). Can be used as a starting point to walk\\nthrough all outline items. Accessing this property for encrypted, not authenticated documents will\\nraise an AttributeError.\\n', 'Type\\n', 'Outline\\n', '19.5. Document\\n233\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'is_closed\\n', 'False if document is still open. If closed, most other attributes and methods will have been deleted\\n/ disabled. In addition, Page objects referring to this document (i.e. created with Document.\\nload_page()) and their dependent objects will no longer be usable.\\nFor reference purposes,\\n', 'Document.name still exists and will contain the filename of the original document (if applicable).\\n', 'Type\\n', 'bool\\n', 'is_dirty\\n', 'True if this is a PDF document and contains unsaved changes, else False.\\n', 'Type\\n', 'bool\\n', 'is_pdf\\n', 'True if this is a PDF document, else False.\\n', 'Type\\n', 'bool\\n', 'is_form_pdf\\n', 'False if this is not a PDF or has no form fields, otherwise the number of root form fields (fields with\\nno ancestors).\\n', '(Changed in v1.16.4) Returns the total number of (root) form fields.\\n', 'Type\\n', 'bool,int\\n', 'is_reflowable\\n', 'True if document has a variable page layout (like e-books or HTML). In this case you can set the\\ndesired page dimensions during document creation (open) or via method layout().\\n', 'Type\\n', 'bool\\n', 'is_repaired\\n', '• New in v1.18.2\\n', 'True if PDF has been repaired during open (because of major structure issues). Always False for\\nnon-PDF documents. If true, more details have been stored in TOOLS.mupdf_warnings(), and\\nDocument.can_save_incrementally() will return False.\\n', 'Type\\n', 'bool\\n', 'is_fast_webaccess\\n', '• New in v1.22.2\\n', 'True if PDF is in linearized format. False for non-PDF documents.\\n', 'Type\\n', 'bool\\n', 'markinfo\\n', '• New in v1.22.2\\n', 'A dictionary indicating the /MarkInfo value. If not specified, the empty dictionary is returned. If\\nnot a PDF, None is returned.\\n', '234\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Type\\n', 'dict\\n', 'pagemode\\n', '• New in v1.22.2\\n', 'A string containing the /PageMode value. If not specified, the default “UseNone” is returned. If\\nnot a PDF, None is returned.\\n', 'Type\\n', 'str\\n', 'pagelayout\\n', '• New in v1.22.2\\n', 'A string containing the /PageLayout value. If not specified, the default “SinglePage” is returned.\\nIf not a PDF, None is returned.\\n', 'Type\\n', 'str\\n', 'version_count\\n', '• New in v1.22.2\\n', 'An integer counting the number of versions present in the document. Zero if not a PDF, otherwise\\nthe number of incremental saves plus one.\\n', 'Type\\n', 'int\\n', 'needs_pass\\n', 'Indicates whether the document is password-protected against access. This indicator remains un-\\nchanged – even after the document has been authenticated. Precludes incremental saves if true.\\n', 'Type\\n', 'bool\\n', 'is_encrypted\\n', 'This indicator initially equals Document.needs_pass. After successful authentication, it is set to\\nFalse to reflect the situation.\\n', 'Type\\n', 'bool\\n', 'permissions\\n', '• Changed in v1.16.0: This is now an integer comprised of bit indicators. Was a dictionary\\npreviously.\\n', 'Contains the permissions to access the document. This is an integer containing bool values in re-\\nspective bit positions. For example, if doc.permissions & fitz.PDF_PERM_MODIFY > 0, you may\\nchange the document. See Document Permissions for details.\\n', 'Type\\n', 'int\\n', 'metadata\\n', 'Contains the document’s meta data as a Python dictionary or None (if is_encrypted=True and need-\\nPass=True). Keys are format, encryption, title, author, subject, keywords, creator, producer, cre-\\nationDate, modDate, trapped. All item values are strings or None.\\n', '19.5. Document\\n235\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Except format and encryption, for PDF documents, the key names correspond in an obvious way\\nto the PDF keys /Creator, /Producer, /CreationDate, /ModDate, /Title, /Author, /Subject, /Trapped\\nand /Keywords respectively.\\n', '• format contains the document format (e.g. ‘PDF-1.6’, ‘XPS’, ‘EPUB’).\\n', '• encryption either contains None (no encryption), or a string naming an encryption method\\n(e.g. ‘Standard V4 R4 128-bit RC4’). Note that an encryption method may be specified even if\\nneeds_pass=False. In such cases not all permissions will probably have been granted. Check\\nDocument.permissions for details.\\n', '• If the date fields contain valid data (which need not be the case at all!), they are strings in the\\nPDF-specific timestamp format “D:<TS><TZ>”, where\\n', '– <TS> is the 12 character ISO timestamp YYYYMMDDhhmmss (YYYY - year, MM - month,\\nDD - day, hh - hour, mm - minute, ss - second), and\\n', '– <TZ> is a time zone value (time interval relative to GMT) containing a sign (‘+’ or ‘-‘),\\nthe hour (hh), and the minute (‘mm’, note the apostrophes!).\\n', '• A Paraguayan value might hence look like D:20150415131602-04’00’, which corresponds to\\nthe timestamp April 15, 2015, at 1:16:02 pm local time Asuncion.\\n', 'Type\\n', 'dict\\n', 'name\\n', 'Contains the filename or filetype value with which Document was created.\\n', 'Type\\n', 'str\\n', 'page_count\\n', 'Contains the number of pages of the document. May return 0 for documents with no pages. Function\\nlen(doc) will also deliver this result.\\n', 'Type\\n', 'int\\n', 'chapter_count\\n', '• New in v1.17.0\\n', 'Contains the number of chapters in the document. Always at least 1. Relevant only for document\\ntypes with chapter support (EPUB currently). Other documents will return 1.\\n', 'Type\\n', 'int\\n', 'last_location\\n', '• New in v1.17.0\\n', 'Contains (chapter, pno) of the document’s last page. Relevant only for document types with chapter\\nsupport (EPUB currently). Other documents will return (0, page_count - 1) and (0, -1) if\\nit has no pages.\\n', 'Type\\n', 'int\\n', '236\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'FormFonts\\n', 'A list of form field font names defined in the /AcroForm object. None if not a PDF.\\n', 'Type\\n', 'list\\n', 'Note: For methods that change the structure of a PDF (insert_pdf(), select(), copy_page(), delete_page()\\nand others), be aware that objects or properties in your program may have been invalidated or orphaned. Examples are\\nPage objects and their children (links, annotations, widgets), variables holding old page counts, tables of content and\\nthe like. Remember to keep such variables up to date or delete orphaned objects. Also refer to Ensuring Consistency\\nof Important Objects in PyMuPDF.\\n', '19.5.1 set_metadata() Example\\n', 'Clear metadata information. If you do this out of privacy / data protection concerns, make sure you save the document\\nas a new file with garbage > 0. Only then the old /Info object will also be physically removed from the file. In this\\ncase, you may also want to clear any XML metadata inserted by several PDF editors:\\n', '>>> import fitz\\n>>> doc=fitz.open(""pymupdf.pdf"")\\n>>> doc.metadata\\n# look at what we currently have\\n', '{\\'producer\\': \\'rst2pdf, reportlab\\', \\'format\\': \\'PDF 1.4\\', \\'encryption\\': None, \\'author\\':\\n\\'Jorj X. McKie\\', \\'modDate\\': ""D:20160611145816-04\\'00\\'"", \\'keywords\\': \\'PDF, XPS, EPUB, CBZ\\',\\n\\'title\\': \\'The PyMuPDF Documentation\\', \\'creationDate\\': ""D:20160611145816-04\\'00\\'"",\\n\\'creator\\': \\'sphinx\\', \\'subject\\': \\'PyMuPDF 1.9.1\\'}\\n>>> doc.set_metadata({})\\n# clear all fields\\n', '>>> doc.metadata\\n# look again to show what happened\\n', ""{'producer': 'none', 'format': 'PDF 1.4', 'encryption': None, 'author': 'none',\\n'modDate': 'none', 'keywords': 'none', 'title': 'none', 'creationDate': 'none',\\n'creator': 'none', 'subject': 'none'}\\n>>> doc._delXmlMetadata()\\n# clear any XML metadata\\n"", '>>> doc.save(""anonymous.pdf"", garbage = 4)\\n# save anonymized doc\\n', '19.5.2 set_toc() Demonstration\\n', 'This shows how to modify or add a table of contents. Also have a look at import.py and export.py in the examples\\ndirectory.\\n', '>>> import fitz\\n>>> doc = fitz.open(""test.pdf"")\\n>>> toc = doc.get_toc()\\n>>> for t in toc: print(t)\\n# show what we have\\n', '[1, \\'The PyMuPDF Documentation\\', 1]\\n[2, \\'Introduction\\', 1]\\n[3, \\'Note on the Name fitz\\', 1]\\n[3, \\'License\\', 1]\\n>>> toc[1][1] += "" modified by set_toc""\\n# modify something\\n', '>>> doc.set_toc(toc)\\n# replace outline tree\\n', '3\\n# number of bookmarks inserted\\n', '>>> for t in doc.get_toc(): print(t)\\n# demonstrate it worked\\n', '(continues on next page)\\n', '19.5. Document\\n237\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""[1, 'The PyMuPDF Documentation', 1]\\n[2, 'Introduction modified by set_toc', 1]\\n# <<< this has changed\\n"", ""[3, 'Note on the Name fitz', 1]\\n[3, 'License', 1]\\n"", '19.5.3 insert_pdf() Examples\\n', '(1) Concatenate two documents including their TOCs:\\n', '>>> doc1 = fitz.open(""file1.pdf"")\\n# must be a PDF\\n', '>>> doc2 = fitz.open(""file2.pdf"")\\n# must be a PDF\\n', "">>> pages1 = len(doc1)\\n# save doc1's page count\\n"", '>>> toc1 = doc1.get_toc(False)\\n# save TOC 1\\n', '>>> toc2 = doc2.get_toc(False)\\n# save TOC 2\\n', '>>> doc1.insert_pdf(doc2)\\n# doc2 at end of doc1\\n', '>>> for t in toc2:\\n# increase toc2 page numbers\\n', 't[2] += pages1\\n# by old len(doc1)\\n', '>>> doc1.set_toc(toc1 + toc2)\\n# now result has total TOC\\n', 'Obviously, similar ways can be found in more general situations. Just make sure that hierarchy levels in a row do not\\nincrease by more than one. Inserting dummy bookmarks before and after toc2 segments would heal such cases. A\\nready-to-use GUI (wxPython) solution can be found in script join.py of the examples directory.\\n', '(2) More examples:\\n', '>>> # insert 5 pages of doc2, where its page 21 becomes page 15 in doc1\\n>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=15)\\n', '>>> # same example, but pages are rotated and copied in reverse order\\n>>> doc1.insert_pdf(doc2, from_page=25, to_page=21, start_at=15, rotate=90)\\n', '>>> # put copied pages in front of doc1\\n>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=0)\\n', '19.5.4 Other Examples\\n', 'Extract all page-referenced images of a PDF into separate PNG files:\\n', 'for i in range(doc.page_count):\\nimglist = doc.get_page_images(i)\\nfor img in imglist:\\nxref = img[0]\\n# xref number\\n', 'pix = fitz.Pixmap(doc, xref)\\n# make pixmap from image\\n', 'if pix.n - pix.alpha < 4:\\n# can be saved as PNG\\n', 'pix.save(""p%s-%s.png"" % (i, xref))\\n', 'else:\\n# CMYK: must convert first\\n', 'pix0 = fitz.Pixmap(fitz.csRGB, pix)\\npix0.save(""p%s-%s.png"" % (i, xref))\\npix0 = None\\n# free Pixmap resources\\n', 'pix = None\\n# free Pixmap resources\\n', '238\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Rotate all pages of a PDF:\\n', '>>> for page in doc: page.set_rotation(90)\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.6 DocumentWriter\\n', '• New in v1.21.0\\n', 'This class represents a utility which can output various document types supported by MuPDF.\\n', 'In PyMuPDF only used for outputting PDF documents whose pages are populated by Story DOMs.\\n', 'Using DocumentWriter also for other document types might happen in the future.\\n', 'Method / Attribute\\nShort Description\\n', 'DocumentWriter.begin_page()\\nstart a new output page\\n', 'DocumentWriter.end_page()\\nfinish the current output page\\n', 'DocumentWriter.close()\\nflush pending output and close the file\\n', 'Class API\\n', 'class DocumentWriter\\n', '__init__(self, path, options=None)\\n', 'Create a document writer object, passing a Python file pointer or a file path. Options to use when saving\\nthe file may also be passed.\\n', 'This class can also be used as a Python context manager.\\n', 'Parameters\\n', '• path – the output file. This may be a string file name, or any Python file pointer.\\n', 'Note:\\nBy using a io.BytesIO() object as file pointer, a document writer can\\ncreate a PDF in memory. Subsequently, this PDF can be re-opened for input and be\\nfurther manipulated. This technique is used by several example scripts in Stories\\nrecipes.\\n', '• options (str) – specify saving options for the output PDF. Typical are “compress”\\nor “clean”. More possible values may be taken from help output of the mutool\\nconvert CLI utility.\\n', 'begin_page(mediabox)\\n', 'Start a new output page of a given dimension.\\n', 'Parameters\\n', 'mediabox (rect_like) – a rectangle specifying the page size. After this method, out-\\nput operations may write content to the page.\\n', '19.6. DocumentWriter\\n239\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'end_page()\\n', 'Finish a page. This flushes any pending data and appends the page to the output document.\\n', 'close()\\n', 'Close the output file. This method is required for writing any pending data.\\n', 'For usage examples consult the section of Story.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.7 Font\\n', '• New in v1.16.18\\n', 'This class represents a font as defined in MuPDF (fz_font_s structure). It is required for the new class TextWriter and the\\nnew Page.write_text(). Currently, it has no connection to how fonts are used in methods Page.insert_text()\\nor Page.insert_textbox(), respectively.\\n', 'A Font object also contains useful general information, like the font bbox, the number of defined glyphs, glyph names\\nor the bbox of a single glyph.\\n', 'Method / Attribute\\nShort Description\\n', 'glyph_advance()\\nWidth of a character\\n', 'glyph_bbox()\\nGlyph rectangle\\n', 'glyph_name_to_unicode()\\nGet unicode from glyph name\\n', 'has_glyph()\\nReturn glyph id of unicode\\n', 'text_length()\\nCompute string length\\n', 'char_lengths()\\nTuple of char widths of a string\\n', 'unicode_to_glyph_name()\\nGet glyph name of a unicode\\n', 'valid_codepoints()\\nArray of supported unicodes\\n', 'ascender\\nFont ascender\\n', 'descender\\nFont descender\\n', 'bbox\\nFont rectangle\\n', 'buffer\\nCopy of the font’s binary image\\n', 'flags\\nCollection of font properties\\n', 'glyph_count\\nNumber of supported glyphs\\n', 'name\\nName of font\\n', 'is_writable\\nFont usable with TextWriter\\n', 'Class API\\n', 'class Font\\n', '__init__(self, fontname=None, fontfile=None,\\nfontbuffer=None, script=0, language=None, ordering=-1, is_bold=0,\\nis_italic=0, is_serif=0)\\n', 'Font constructor. The large number of parameters are used to locate font, which most closely resembles\\nthe requirements. Not all parameters are ever required – see the below pseudo code explaining the logic\\nhow the parameters are evaluated.\\n', 'Parameters\\n', '240\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• fontname (str) – one of the PDF Base 14 Fonts or CJK fontnames. Also possible\\nare a select few other names like (watch the correct spelling): “Arial”, “Times”,\\n“Times Roman”.\\n', '(Changed in v1.17.5)\\n', 'If you have installed pymupdf-fonts, there are also new “reserved” fontnames avail-\\nable, which are listed in fitz_fonts and in the table further down.\\n', '• fontfile (str) – the filename of a fontfile somewhere on your system1.\\n', '• fontbuffer (bytes,bytearray,io.BytesIO) – a fontfile loaded in mem-\\noryPage 241, 1.\\n', '• script (in) – the number of a UCDN script. Currently supported in PyMuPDF\\nare numbers 24, and 32 through 35.\\n', '• language (str) – one of the values “zh-Hant” (traditional Chinese), “zh-Hans”\\n(simplified Chinese), “ja” (Japanese) and “ko” (Korean). Otherwise, all ISO 639\\ncodes from the subsets 1, 2, 3 and 5 are also possible, but are currently documentary\\nonly.\\n', '• ordering (int) – an alternative selector for one of the CJK fonts.\\n', '• is_bold (bool) – look for a bold font.\\n', '• is_italic (bool) – look for an italic font.\\n', '• is_serif (bool) – look for a serifed font.\\n', 'Returns\\n', 'a MuPDF font if successful. This is the overall sequence of checks to determine an\\nappropriate font:\\n', 'Argu-\\nment\\n', 'Action\\n', 'fontfile?\\nCreate font from file, exception if failure.\\n', 'font-\\nbuffer?\\n', 'Create font from buffer, exception if failure.\\n', 'order-\\ning>=0\\n', 'Create universal font, always succeeds.\\n', 'font-\\nname?\\n', 'Create a Base-14 font, universal font, or font provided by pymupdf-\\nfonts. See table below.\\n', 'Note: With the usual reserved names “helv”, “tiro”, etc., you will create fonts with the expected names\\n“Helvetica”, “Times-Roman” and so on. However, and in contrast to Page.insert_font() and friends,\\n', '• a font file will always be embedded in your PDF,\\n', '• Greek and Cyrillic characters are supported without needing the encoding parameter.\\n', 'Using ordering >= 0, or fontnames “cjk”, “china-t”, “china-s”, “japan” or “korea” will always create\\nthe same “universal” font “Droid Sans Fallback Regular”. This font supports all Chinese, Japanese,\\nKorean and Latin characters, including Greek and Cyrillic. This is a sans-serif font.\\n', 'Actually, you would rarely ever need another sans-serif font than “Droid Sans Fallback Regular”. Except\\nthat this font file is relatively large and adds about 1.65 MB (compressed) to your PDF file size. If you do\\n', '1 MuPDF does not support all fontfiles with this feature and will raise exceptions like “mupdf: FT_New_Memory_Face((null)): unknown file\\nformat”, if it encounters issues. The TextWriter methods check Font.is_writable.\\n', '19.7. Font\\n241\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'not need CJK support, stick with specifying “helv”, “tiro” etc., and you will get away with about 35 KB\\ncompressed.\\n', 'If you know you have a mixture of CJK and Latin text, consider just using Font(""cjk"") because this\\nsupports everything and also significantly (by a factor of up to three) speeds up execution: MuPDF will\\nalways find any character in this single font and never needs to check fallbacks.\\n', 'But if you do use some other font, you will still automatically be able to also write CJK characters: MuPDF\\ndetects this situation and silently falls back to the universal font (which will then of course also be embedded\\nin your PDF).\\n', '(New in v1.17.5) Optionally, some new “reserved” fontname codes become available if you install\\npymupdf-fonts, pip install pymupdf-fonts. “Fira Mono” is a mono-spaced sans font set and Fi-\\nraGO is another non-serifed “universal” font set which supports all Latin (including Cyrillic and Greek)\\nplus Thai, Arabian, Hewbrew and Devanagari – but none of the CJK languages. The size of a FiraGO font\\nis only a quarter of the “Droid Sans Fallback” size (compressed 400 KB vs. 1.65 MB) – and it provides\\nthe weights bold, italic, bold-italic – which the universal font doesn’t.\\n', '“Space Mono” is another nice and small mono-spaced font from Google Fonts, which supports Latin\\nExtended characters and comes with all 4 important weights.\\n', 'The following table maps a fontname code to the corresponding font. For the current content of the package\\nplease see its documentation:\\n', 'Code\\nFontname\\nNew in\\nComment\\n', 'figo\\nFiraGO Regular\\nv1.0.0\\nnarrower than Helvetica\\n', 'figbo\\nFiraGO Bold\\nv1.0.0\\n', 'figit\\nFiraGO Italic\\nv1.0.0\\n', 'figbi\\nFiraGO Bold Italic\\nv1.0.0\\n', 'fimo\\nFira Mono Regular\\nv1.0.0\\n', 'fimbo\\nFira Mono Bold\\nv1.0.0\\n', 'spacemo\\nSpace Mono Regular\\nv1.0.1\\n', 'spacembo\\nSpace Mono Bold\\nv1.0.1\\n', 'spacemit\\nSpace Mono Italic\\nv1.0.1\\n', 'spacembi\\nSpace Mono Bold-Italic\\nv1.0.1\\n', 'math\\nNoto Sans Math Regular\\nv1.0.2\\nmath symbols\\n', 'music\\nNoto Music Regular\\nv1.0.2\\nmusical symbols\\n', 'symbol1\\nNoto Sans Symbols Regular\\nv1.0.2\\nreplacement for “symb”\\n', 'symbol2\\nNoto Sans Symbols2 Regular\\nv1.0.2\\nextended symbol set\\n', 'notos\\nNoto Sans Regular\\nv1.0.3\\nalternative to Helvetica\\n', 'notosit\\nNoto Sans Italic\\nv1.0.3\\n', 'notosbo\\nNoto Sans Bold\\nv1.0.3\\n', 'notosbi\\nNoto Sans BoldItalic\\nv1.0.3\\n', 'has_glyph(chr, language=None, script=0, fallback=False)\\n', 'Check whether the unicode chr exists in the font or (option) some fallback font. May be used to check\\nwhether any “TOFU” symbols will appear on output.\\n', 'Parameters\\n', '• chr (int) – the unicode of the character (i.e. ord()).\\n', '• language (str) – the language – currently unused.\\n', '• script (int) – the UCDN script number.\\n', '242\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• fallback (bool) – (new in v1.17.5) perform an extended search in fallback fonts\\nor restrict to current font (default).\\n', 'Returns\\n', '(changed in 1.17.7) the glyph number. Zero indicates no glyph found.\\n', 'valid_codepoints()\\n', '• New in v1.17.5\\n', 'Return an array of unicodes supported by this font.\\n', 'Returns\\n', 'an array.array2 of length at most Font.glyph_count. I.e. chr() of every item in this\\narray has a glyph in the font without using fallbacks. This is an example display of the\\nsupported glyphs:\\n', '>>> import fitz\\n>>> font = fitz.Font(""math"")\\n>>> vuc = font.valid_codepoints()\\n>>> for i in vuc:\\n', 'print(""%04X %s (%s)"" % (i, chr(i), font.unicode_to_glyph_\\n', '˓→name(i)))\\n0000\\n000D\\n(CR)\\n', '0020\\n(space)\\n', '0021 ! (exclam)\\n0022 "" (quotedbl)\\n0023 # (numbersign)\\n0024 $ (dollar)\\n0025 % (percent)\\n...\\n00AC ¬ (logicalnot)\\n00B1 ± (plusminus)\\n...\\n21D0\\n(arrowdblleft)\\n', '21D1\\n(arrowdblup)\\n', '21D2\\n(arrowdblright)\\n', '21D3\\n(arrowdbldown)\\n', '21D4\\n(arrowdblboth)\\n', '...\\n221E ∞ (infinity)\\n...\\n', 'Note: This method only returns meaningful data for fonts having a CMAP (character map, charmap, the\\n/ToUnicode PDF key). Otherwise, this array will have length 1 and contain zero only.\\n', 'glyph_advance(chr, language=None, script=0, wmode=0)\\n', 'Calculate the “width” of the character’s glyph (visual representation).\\n', 'Parameters\\n', '2 The built-in module array has been chosen for its speed and its compact representation of values.\\n', '19.7. Font\\n243\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• chr (int) – the unicode number of the character. Use ord(), not the character itself.\\nAgain, this should normally work even if a character is not supported by that font,\\nbecause fallback fonts will be checked where necessary.\\n', '• wmode (int) – write mode, 0 = horizontal, 1 = vertical.\\n', 'The other parameters are not in use currently.\\n', 'Returns\\n', 'a float representing the glyph’s width relative to fontsize 1.\\n', 'glyph_name_to_unicode(name)\\n', 'Return the unicode value for a given glyph name. Use it in conjunction with chr() if you want to output\\ne.g. a certain symbol.\\n', 'Parameters\\n', 'name (str) – The name of the glyph.\\n', 'Returns\\n', 'The unicode integer,\\nor 65533 = 0xFFFD if the name is unknown.\\nEx-\\namples:\\nfont.glyph_name_to_unicode(""Sigma"") = 931,\\nfont.\\nglyph_name_to_unicode(""sigma"") = 963.\\nRefer to the Adobe Glyph List\\n', 'publication for a list of glyph names and their unicode numbers. Example:\\n', '>>> font = fitz.Font(""helv"")\\n>>> font.has_glyph(font.glyph_name_to_unicode(""infinity""))\\nTrue\\n', 'glyph_bbox(chr, language=None, script=0)\\n', 'The glyph rectangle relative to fontsize 1.\\n', 'Parameters\\n', 'chr (int) – ord() of the character.\\n', 'Returns\\n', 'a Rect.\\n', 'unicode_to_glyph_name(ch)\\n', 'Show the name of the character’s glyph.\\n', 'Parameters\\n', 'ch (int) – the unicode number of the character. Use ord(), not the character itself.\\n', 'Returns\\n', 'a string representing the glyph’s name.\\nE.g.\\nfont.glyph_name(ord(""#"")) =\\n""numbersign"". For an invalid code “.notfound” is returned.\\n', 'Note:\\n(Changed in v1.18.0) This method and Font.glyph_name_to_unicode()\\n', 'no longer depend on a font and instead retrieve information from the Adobe Glyph\\nList.\\nAlso available as fitz.unicode_to_glyph_name() and resp.\\nfitz.\\nglyph_name_to_unicode().\\n', 'text_length(text, fontsize=11)\\n', 'Calculate the length in points of a unicode string.\\n', '244\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: There is a functional overlap with get_text_length() for Base-14 fonts only.\\n', 'Parameters\\n', '• text (str) – a text string, UTF-8 encoded.\\n', '• fontsize (float) – the fontsize.\\n', 'Return type\\n', 'float\\n', 'Returns\\n', 'the length of the string in points when stored in the PDF. If a character is not contained\\nin the font, it will automatically be looked up in a fallback font.\\n', 'Note:\\nThis method was originally implemented in Python, based on calling Font.\\nglyph_advance(). For performance reasons, it has been rewritten in C for v1.18.14.\\nTo compute the width of a single character, you can now use either of the following\\nwithout performance penalty:\\n', '1. font.glyph_advance(ord(""Ä"")) * fontsize\\n', '2. font.text_length(""Ä"", fontsize=fontsize)\\n', 'For multi-character strings, the method offers a huge performance advantage compared\\nto the previous implementation: instead of about 0.5 microseconds for each character,\\nonly 12.5 nanoseconds are required for the second and subsequent ones.\\n', 'char_lengths(text, fontsize=11)\\n', 'New in v1.18.14\\n', 'Sequence of character lengths in points of a unicode string.\\n', 'Parameters\\n', '• text (str) – a text string, UTF-8 encoded.\\n', '• fontsize (float) – the fontsize.\\n', 'Return type\\n', 'tuple\\n', 'Returns\\n', 'the lengths in points of the characters of a string when stored in the PDF. It works like\\nFont.text_length() broken down to single characters. This is a high speed method,\\nused e.g. in TextWriter.fill_textbox(). The following is true (allowing rounding\\nerrors): font.text_length(text) == sum(font.char_lengths(text)).\\n', '>>> font = fitz.Font(""helv"")\\n>>> text = ""PyMuPDF""\\n>>> font.text_length(text)\\n50.115999937057495\\n>>> fitz.get_text_length(text, fontname=""helv"")\\n50.115999937057495\\n>>> sum(font.char_lengths(text))\\n', '(continues on next page)\\n', '19.7. Font\\n245\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '50.115999937057495\\n>>> pprint(font.char_lengths(text))\\n(7.336999952793121,\\n# P\\n', '5.5,\\n# y\\n', '9.163000047206879,\\n# M\\n', '6.115999937057495,\\n# u\\n', '7.336999952793121,\\n# P\\n', '7.942000031471252,\\n# D\\n', '6.721000015735626)\\n# F\\n', 'buffer\\n', '• New in v1.17.6\\n', 'Copy of the binary font file content.\\n', 'Return type\\n', 'bytes\\n', 'flags\\n', 'A dictionary with various font properties, each represented as bools. Example for Helvetica:\\n', "">>> pprint(font.flags)\\n{'bold': 0,\\n'fake-bold': 0,\\n'fake-italic': 0,\\n'invalid-bbox': 0,\\n'italic': 0,\\n'mono': 0,\\n'opentype': 0,\\n'serif': 1,\\n'stretch': 0,\\n'substitute': 0}\\n"", 'Return type\\n', 'dict\\n', 'name\\n', 'Return type\\n', 'str\\n', 'Name of the font. May be “” or “(null)”.\\n', 'bbox\\n', 'The font bbox. This is the maximum of its glyph bboxes.\\n', 'Return type\\n', 'Rect\\n', 'glyph_count\\n', 'Return type\\n', 'int\\n', 'The number of glyphs defined in the font.\\n', '246\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'ascender\\n', '• New in v1.18.0\\n', 'The ascender value of the font, see here for details. Please note that there is a difference to the strict\\ndefinition: our value includes everything above the baseline – not just the height difference between upper\\ncase “A” and and lower case “a”.\\n', 'Return type\\n', 'float\\n', 'descender\\n', '• New in v1.18.0\\n', 'The descender value of the font, see here for details. This value always is negative and is the portion that\\nsome glyphs descend below the base line, for example “g” or “y”. As a consequence, the value ascender\\n- descender is the total height, that every glyph of the font fits into. This is true at least for most fonts –\\nas always, there are exceptions, especially for calligraphic fonts, etc.\\n', 'Return type\\n', 'float\\n', 'is_writable\\n', '• New in v1.18.0\\n', 'Indicates whether this font can be used with TextWriter.\\n', 'Return type\\n', 'bool\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.8 Identity\\n', 'Identity is a Matrix that performs no action – to be used whenever the syntax requires a matrix, but no actual transfor-\\nmation should take place. It has the form fitz.Matrix(1, 0, 0, 1, 0, 0).\\n', 'Identity is a constant, an “immutable” object. So, all of its matrix properties are read-only and its methods are disabled.\\n', 'If you need a mutable identity matrix as a starting point, use one of the following statements:\\n', '>>> m = fitz.Matrix(1, 0, 0, 1, 0, 0)\\n# specify the values\\n', '>>> m = fitz.Matrix(1, 1)\\n# use scaling by factor 1\\n', '>>> m = fitz.Matrix(0)\\n# use rotation by zero degrees\\n', '>>> m = fitz.Matrix(fitz.Identity)\\n# make a copy of Identity\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.8. Identity\\n247\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.9 IRect\\n', 'IRect is a rectangular bounding box, very similar to Rect, except that all corner coordinates are integers. IRect is used\\nto specify an area of pixels, e.g. to receive image data during rendering. Otherwise, e.g. considerations concerning\\nemptiness and validity of rectangles also apply to this class. Methods and attributes have the same names, and in many\\ncases are implemented by re-using the respective Rect counterparts.\\n', 'Attribute / Method\\nShort Description\\n', 'IRect.contains()\\nchecks containment of another object\\n', 'IRect.get_area()\\ncalculate rectangle area\\n', 'IRect.intersect()\\ncommon part with another rectangle\\n', 'IRect.intersects()\\nchecks for non-empty intersection\\n', 'IRect.morph()\\ntransform with a point and a matrix\\n', 'IRect.torect()\\nmatrix that transforms to another rectangle\\n', 'IRect.norm()\\nthe Euclidean norm\\n', 'IRect.normalize()\\nmakes a rectangle finite\\n', 'IRect.bottom_left\\nbottom left point, synonym bl\\n', 'IRect.bottom_right\\nbottom right point, synonym br\\n', 'IRect.height\\nheight of the rectangle\\n', 'IRect.is_empty\\nwhether rectangle is empty\\n', 'IRect.is_infinite\\nwhether rectangle is infinite\\n', 'IRect.rect\\nthe Rect equivalent\\n', 'IRect.top_left\\ntop left point, synonym tl\\n', 'IRect.top_right\\ntop_right point, synonym tr\\n', 'IRect.quad\\nQuad made from rectangle corners\\n', 'IRect.width\\nwidth of the rectangle\\n', 'IRect.x0\\nX-coordinate of the top left corner\\n', 'IRect.x1\\nX-coordinate of the bottom right corner\\n', 'IRect.y0\\nY-coordinate of the top left corner\\n', 'IRect.y1\\nY-coordinate of the bottom right corner\\n', 'Class API\\n', 'class IRect\\n', '__init__(self )\\n', '__init__(self, x0, y0, x1, y1)\\n', '__init__(self, irect)\\n', '__init__(self, sequence)\\n', 'Overloaded constructors. Also see examples below and those for the Rect class.\\n', 'If another irect is specified, a new copy will be made.\\n', 'If sequence is specified, it must be a Python sequence type of 4 numbers (see Using Python Sequences\\nas Arguments in PyMuPDF). Non-integer numbers will be truncated, non-numeric values will raise an\\nexception.\\n', 'The other parameters mean integer coordinates.\\n', 'get_area([unit])\\n', 'Calculates the area of the rectangle and, with no parameter, equals abs(IRect). Like an empty rectangle,\\nthe area of an infinite rectangle is also zero.\\n', '248\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'unit (str) – Specify required unit: respective squares of “px” (pixels, default), “in”\\n(inches), “cm” (centimeters), or “mm” (millimeters).\\n', 'Return type\\n', 'float\\n', 'intersect(ir)\\n', 'The intersection (common rectangular area) of the current rectangle and ir is calculated and replaces the\\ncurrent rectangle. If either rectangle is empty, the result is also empty. If either rectangle is infinite, the\\nother one is taken as the result – and hence also infinite if both rectangles were infinite.\\n', 'Parameters\\n', 'ir (rect_like) – Second rectangle.\\n', 'contains(x)\\n', 'Checks whether x is contained in the rectangle. It may be rect_like, point_like or a number. If x is\\nan empty rectangle, this is always true. Conversely, if the rectangle is empty this is always False, if x is not\\nan empty rectangle and not a number. If x is a number, it will be checked to be one of the four components.\\nx in irect and irect.contains(x) are equivalent.\\n', 'Parameters\\n', 'x (IRect or Rect or Point or int) – the object to check.\\n', 'Return type\\n', 'bool\\n', 'intersects(r)\\n', 'Checks whether the rectangle and the rect_like “r” contain a common non-empty IRect. This will\\nalways be False if either is infinite or empty.\\n', 'Parameters\\n', 'r (rect_like) – the rectangle to check.\\n', 'Return type\\n', 'bool\\n', 'torect(rect)\\n', '• New in version 1.19.3\\n', 'Compute the matrix which transforms this rectangle to a given one. See Rect.torect().\\n', 'Parameters\\n', 'rect (rect_like) – the target rectangle. Must not be empty or infinite.\\n', 'Return type\\n', 'Matrix\\n', 'Returns\\n', 'a matrix mat such that self * mat = rect. Can for example be used to transform\\nbetween the page and the pixmap coordinates.\\n', 'morph(fixpoint, matrix)\\n', '• New in version 1.17.0\\n', 'Return a new quad after applying a matrix to it using a fixed point.\\n', 'Parameters\\n', '• fixpoint (point_like) – the fixed point.\\n', '19.9. IRect\\n249\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• matrix (matrix_like) – the matrix.\\n', 'Returns\\n', 'a new Quad. This a wrapper of the same-named quad method. If infinite, the infinite\\nquad is returned.\\n', 'norm()\\n', '• New in version 1.16.0\\n', 'Return the Euclidean norm of the rectangle treated as a vector of four numbers.\\n', 'normalize()\\n', 'Make the rectangle finite. This is done by shuffling rectangle corners. After this, the bottom right corner\\nwill indeed be south-eastern to the top left one. See Rect for a more details.\\n', 'top_left\\n', 'tl\\n', 'Equals Point(x0, y0).\\n', 'Type\\n', 'Point\\n', 'top_right\\n', 'tr\\n', 'Equals Point(x1, y0).\\n', 'Type\\n', 'Point\\n', 'bottom_left\\n', 'bl\\n', 'Equals Point(x0, y1).\\n', 'Type\\n', 'Point\\n', 'bottom_right\\n', 'br\\n', 'Equals Point(x1, y1).\\n', 'Type\\n', 'Point\\n', 'rect\\n', 'The Rect with the same coordinates as floats.\\n', 'Type\\n', 'Rect\\n', 'quad\\n', 'The quadrilateral Quad(irect.tl, irect.tr, irect.bl, irect.br).\\n', 'Type\\n', 'Quad\\n', '250\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'width\\n', 'Contains the width of the bounding box. Equals abs(x1 - x0).\\n', 'Type\\n', 'int\\n', 'height\\n', 'Contains the height of the bounding box. Equals abs(y1 - y0).\\n', 'Type\\n', 'int\\n', 'x0\\n', 'X-coordinate of the left corners.\\n', 'Type\\n', 'int\\n', 'y0\\n', 'Y-coordinate of the top corners.\\n', 'Type\\n', 'int\\n', 'x1\\n', 'X-coordinate of the right corners.\\n', 'Type\\n', 'int\\n', 'y1\\n', 'Y-coordinate of the bottom corners.\\n', 'Type\\n', 'int\\n', 'is_infinite\\n', 'True if rectangle is infinite, False otherwise.\\n', 'Type\\n', 'bool\\n', 'is_empty\\n', 'True if rectangle is empty, False otherwise.\\n', 'Type\\n', 'bool\\n', 'Note:\\n', '• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also\\nrefer to Using Python Sequences as Arguments in PyMuPDF.\\n', '• Rectangles can be used with arithmetic operators – see chapter Operator Algebra for Geometry Objects.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.9. IRect\\n251\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.10 Link\\n', 'Represents a pointer to somewhere (this document, other documents, the internet). Links exist per document page,\\nand they are forward-chained to each other, starting from an initial link which is accessible by the Page.first_link\\nproperty.\\n', 'There is a parent-child relationship between a link and its page. If the page object becomes unusable (closed document,\\nany document structure change, etc.), then so does every of its existing link objects – an exception is raised saying that\\nthe object is “orphaned”, whenever a link property or method is accessed.\\n', 'Attribute\\nShort Description\\n', 'Link.set_border()\\nmodify border properties\\n', 'Link.set_colors()\\nmodify color properties\\n', 'Link.set_flags()\\nmodify link flags\\n', 'Link.border\\nborder characteristics\\n', 'Link.colors\\nborder line color\\n', 'Link.dest\\npoints to destination details\\n', 'Link.is_external\\nchecks if the link is an external destination\\n', 'Link.flags\\nlink annotation flags\\n', 'Link.next\\npoints to next link\\n', 'Link.rect\\nclickable area in untransformed coordinates\\n', 'Link.uri\\nlink destination\\n', 'Link.xref\\nxref number of the entry\\n', 'Class API\\n', 'class Link\\n', 'set_border(border=None, width=0, style=None, dashes=None)\\n', 'PDF only: Change border width and dashing properties.\\n', '(Changed in version 1.16.9) Allow specification without using a dictionary. The direct parameters are used\\nif border is not a dictionary.\\n', 'Parameters\\n', '• border (dict) – a dictionary as returned by the border property, with keys\\n“width” (float), “style” (str) and “dashes” (sequence). Omitted keys will leave\\nthe resp. property unchanged. To e.g. remove dashing use: “dashes”: []. If dashes\\nis not an empty sequence, “style” will automatically be set to “D” (dashed).\\n', '• width (float) – see above.\\n', '• style (str) – see above.\\n', '• dashes (sequence) – see above.\\n', 'set_colors(colors=None, stroke=None)\\n', 'PDF only: Changes the “stroke” color.\\n', 'Note: In PDF, links are a subtype of annotations technically and do not support fill colors. However, to\\nkeep a consistent API, we do allow specifying a fill= parameter like with all annotations, which will be\\nignored with a warning.\\n', '(Changed in version 1.16.9) Allow colors to be directly set. These parameters are used if colors is not a\\ndictionary.\\n', '252\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', '• colors (dict) – a dictionary containing color specifications. For accepted dictio-\\nnary keys and values see below. The most practical way should be to first make a\\ncopy of the colors property and then modify this dictionary as required.\\n', '• stroke (sequence) – see above.\\n', 'set_flags(flags)\\n', 'New in v1.18.16\\n', 'Set the PDF /F property of the link annotation. See Annot.set_flags() for details. If not a PDF, this\\nmethod is a no-op.\\n', 'flags\\n', 'New in v1.18.16\\n', 'Return the link annotation flags, an integer (see Annot.flags for details). Zero if not a PDF.\\n', 'colors\\n', 'Meaningful for PDF only: A dictionary of two tuples of floats in range 0 <= float <= 1 specifying the\\nstroke and the interior (fill) colors. If not a PDF, None is returned. As mentioned above, the fill color is\\nalways None for links. The stroke color is used for the border of the link rectangle. The length of the tuple\\nimplicitly determines the colorspace: 1 = GRAY, 3 = RGB, 4 = CMYK. So (1.0, 0.0, 0.0) stands\\nfor RGB color red. The value of each float f is mapped to the integer value i in range 0 to 255 via the\\ncomputation f = i / 255.\\n', 'Return type\\n', 'dict\\n', 'border\\n', 'Meaningful for PDF only: A dictionary containing border characteristics. It will be None for non-PDFs\\nand an empty dictionary if no border information exists. The following keys can occur:\\n', '• width – a float indicating the border thickness in points. The value is -1.0 if no width is specified.\\n', '• dashes – a sequence of integers specifying a line dash pattern. [] means no dashes, [n] means equal\\non-off lengths of n points, longer lists will be interpreted as specifying alternating on-off length\\nvalues. See the Adobe PDF References page 126 for more detail.\\n', '• style – 1-byte border style: S (Solid) = solid rectangle surrounding the annotation, D (Dashed) =\\ndashed rectangle surrounding the link, the dash pattern is specified by the dashes entry, B (Beveled)\\n= a simulated embossed rectangle that appears to be raised above the surface of the page, I (Inset) = a\\nsimulated engraved rectangle that appears to be recessed below the surface of the page, U (Underline)\\n= a single line along the bottom of the annotation rectangle.\\n', 'Return type\\n', 'dict\\n', 'rect\\n', 'The area that can be clicked in untransformed coordinates.\\n', 'Type\\n', 'Rect\\n', 'is_external\\n', 'A bool specifying whether the link target is outside of the current document.\\n', 'Type\\n', 'bool\\n', '19.10. Link\\n253\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'uri\\n', 'A string specifying the link target. The meaning of this property should be evaluated in conjunction with\\nproperty isExternal. The value may be None, in which case isExternal == False. If uri starts with file://,\\nmailto:, or an internet resource name, isExternal is True. In all other cases isExternal == False and uri\\npoints to an internal location. In case of PDF documents, this should either be #nnnn to indicate a 1-\\nbased (!) page number nnnn, or a named location. The format varies for other document types, e.g. uri =\\n‘../FixedDoc.fdoc#PG_2_LNK_1’ for page number 2 (1-based) in an XPS document.\\n', 'Type\\n', 'str\\n', 'xref\\n', 'An integer specifying the PDF xref. Zero if not a PDF.\\n', 'Type\\n', 'int\\n', 'next\\n', 'The next link or None.\\n', 'Type\\n', 'Link\\n', 'dest\\n', 'The link destination details object.\\n', 'Type\\n', 'linkDest\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.11 linkDest\\n', 'Class representing the dest property of an outline entry or a link. Describes the destination to which such entries\\npoint.\\n', 'Note:\\nUp to MuPDF v1.9.0 this class existed inside MuPDF and was dropped in version 1.10.0. For backward\\ncompatibility, PyMuPDF is still maintaining it, although some of its attributes are no longer backed by data actually\\navailable via MuPDF.\\n', '254\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Attribute\\nShort Description\\n', 'linkDest.dest\\ndestination\\n', 'linkDest.fileSpec\\nfile specification (path, filename)\\n', 'linkDest.flags\\ndescriptive flags\\n', 'linkDest.isMap\\nis this a MAP?\\n', 'linkDest.isUri\\nis this a URI?\\n', 'linkDest.kind\\nkind of destination\\n', 'linkDest.lt\\ntop left coordinates\\n', 'linkDest.named\\nname if named destination\\n', 'linkDest.newWindow\\nname of new window\\n', 'linkDest.page\\npage number\\n', 'linkDest.rb\\nbottom right coordinates\\n', 'linkDest.uri\\nURI\\n', 'Class API\\n', 'class linkDest\\n', 'dest\\n', 'Target destination name if linkDest.kind is LINK_GOTOR and linkDest.page is -1.\\n', 'Type\\n', 'str\\n', 'fileSpec\\n', 'Contains the filename and path this link points to, if linkDest.kind is LINK_GOTOR or LINK_LAUNCH.\\n', 'Type\\n', 'str\\n', 'flags\\n', 'A bitfield describing the validity and meaning of the different aspects of the destination. As far as possible,\\nlink destinations are constructed such that e.g. linkDest.lt and linkDest.rb can be treated as defining\\na bounding box. But the flags indicate which of the values were actually specified, see Link Destination\\nFlags.\\n', 'Type\\n', 'int\\n', 'isMap\\n', 'This flag specifies whether to track the mouse position when the URI is resolved. Default value: False.\\n', 'Type\\n', 'bool\\n', 'isUri\\n', 'Specifies whether this destination is an internet resource (as opposed to e.g. a local file specification in\\nURI format).\\n', 'Type\\n', 'bool\\n', 'kind\\n', 'Indicates the type of this destination, like a place in this document, a URI, a file launch, an action or a\\nplace in another file. Look at Link Destination Kinds to see the names and numerical values.\\n', 'Type\\n', 'int\\n', '19.11. linkDest\\n255\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'lt\\n', 'The top left Point of the destination.\\n', 'Type\\n', 'Point\\n', 'named\\n', 'This destination refers to some named action to perform (e.g. a javascript, see Adobe PDF References).\\nStandard actions provided are NextPage, PrevPage, FirstPage, and LastPage.\\n', 'Type\\n', 'str\\n', 'newWindow\\n', 'If true, the destination should be launched in a new window.\\n', 'Type\\n', 'bool\\n', 'page\\n', 'The page number (in this or the target document) this destination points to. Only set if linkDest.kind is\\nLINK_GOTOR or LINK_GOTO. May be -1 if linkDest.kind is LINK_GOTOR. In this case linkDest.dest\\ncontains the name of a destination in the target document.\\n', 'Type\\n', 'int\\n', 'rb\\n', 'The bottom right Point of this destination.\\n', 'Type\\n', 'Point\\n', 'uri\\n', 'The name of the URI this destination points to.\\n', 'Type\\n', 'str\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.12 Matrix\\n', 'Matrix is a row-major 3x3 matrix used by image transformations in MuPDF (which complies with the respective\\nconcepts laid down in the Adobe PDF References). With matrices you can manipulate the rendered image of a page in\\na variety of ways: (parts of) the page can be rotated, zoomed, flipped, sheared and shifted by setting some or all of just\\nsix float values.\\n', 'Since all points or pixels live in a two-dimensional space, one column vector of that matrix is a constant unit vector,\\nand only the remaining six elements are used for manipulations. These six elements are usually represented by [a, b,\\nc, d, e, f]. Here is how they are positioned in the matrix:\\n', '256\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Please note:\\n', '• the below methods are just convenience functions – everything they do, can also be achieved by directly manip-\\nulating the six numerical values\\n', '• all manipulations can be combined – you can construct a matrix that rotates and shears and scales and shifts,\\netc. in one go. If you however choose to do this, do have a look at the remarks further down or at the Adobe\\nPDF References.\\n', 'Method / Attribute\\nDescription\\n', 'Matrix.prerotate()\\nperform a rotation\\n', 'Matrix.prescale()\\nperform a scaling\\n', 'Matrix.preshear()\\nperform a shearing (skewing)\\n', 'Matrix.pretranslate()\\nperform a translation (shifting)\\n', 'Matrix.concat()\\nperform a matrix multiplication\\n', 'Matrix.invert()\\ncalculate the inverted matrix\\n', 'Matrix.norm()\\nthe Euclidean norm\\n', 'Matrix.a\\nzoom factor X direction\\n', 'Matrix.b\\nshearing effect Y direction\\n', 'Matrix.c\\nshearing effect X direction\\n', 'Matrix.d\\nzoom factor Y direction\\n', 'Matrix.e\\nhorizontal shift\\n', 'Matrix.f\\nvertical shift\\n', 'Matrix.is_rectilinear\\ntrue if rect corners will remain rect corners\\n', 'Class API\\n', 'class Matrix\\n', '__init__(self )\\n', '__init__(self, zoom-x, zoom-y)\\n', '__init__(self, shear-x, shear-y, 1)\\n', '__init__(self, a, b, c, d, e, f )\\n', '__init__(self, matrix)\\n', '__init__(self, degree)\\n', '__init__(self, sequence)\\n', 'Overloaded constructors.\\n', 'Without parameters, the zero matrix Matrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) will be created.\\n', 'zoom-* and shear-* specify zoom or shear values (float) and create a zoom or shear matrix, respectively.\\n', 'For “matrix” a new copy of another matrix will be made.\\n', 'Float value “degree” specifies the creation of a rotation matrix which rotates anti-clockwise.\\n', '19.12. Matrix\\n257\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'A “sequence” must be any Python sequence object with exactly 6 float entries (see Using Python Sequences\\nas Arguments in PyMuPDF).\\n', 'fitz.Matrix(1, 1) and fitz.Matrix(fitz.Identity) create modifiable versions of the Identity matrix, which looks\\nlike [1, 0, 0, 1, 0, 0].\\n', 'norm()\\n', '• New in version 1.16.0\\n', 'Return the Euclidean norm of the matrix as a vector.\\n', 'prerotate(deg)\\n', 'Modify the matrix to perform a counter-clockwise rotation for positive deg degrees, else clockwise. The\\nmatrix elements of an identity matrix will change in the following way:\\n', '[1, 0, 0, 1, 0, 0] -> [cos(deg), sin(deg), -sin(deg), cos(deg), 0, 0].\\n', 'Parameters\\n', 'deg (float) – The rotation angle in degrees (use conventional notation based on Pi =\\n180 degrees).\\n', 'prescale(sx, sy)\\n', 'Modify the matrix to scale by the zoom factors sx and sy. Has effects on attributes a thru d only: [a, b, c,\\nd, e, f] -> [a*sx, b*sx, c*sy, d*sy, e, f].\\n', 'Parameters\\n', '• sx (float) – Zoom factor in X direction. For the effect see description of attribute\\na.\\n', '• sy (float) – Zoom factor in Y direction. For the effect see description of attribute\\nd.\\n', 'preshear(sx, sy)\\n', 'Modify the matrix to perform a shearing, i.e. transformation of rectangles into parallelograms (rhomboids).\\nHas effects on attributes a thru d only: [a, b, c, d, e, f] -> [c*sy, d*sy, a*sx, b*sx, e, f].\\n', 'Parameters\\n', '• sx (float) – Shearing effect in X direction. See attribute c.\\n', '• sy (float) – Shearing effect in Y direction. See attribute b.\\n', 'pretranslate(tx, ty)\\n', 'Modify the matrix to perform a shifting / translation operation along the x and / or y axis. Has effects on\\nattributes e and f only: [a, b, c, d, e, f] -> [a, b, c, d, tx*a + ty*c, tx*b + ty*d].\\n', 'Parameters\\n', '• tx (float) – Translation effect in X direction. See attribute e.\\n', '• ty (float) – Translation effect in Y direction. See attribute f.\\n', 'concat(m1, m2)\\n', 'Calculate the matrix product m1 * m2 and store the result in the current matrix. Any of m1 or m2 may be\\nthe current matrix. Be aware that matrix multiplication is not commutative. So the sequence of m1, m2 is\\nimportant.\\n', 'Parameters\\n', '• m1 (Matrix) – First (left) matrix.\\n', '• m2 (Matrix) – Second (right) matrix.\\n', '258\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'invert(m=None)\\n', 'Calculate the matrix inverse of m and store the result in the current matrix. Returns 1 if m is not invertible\\n(“degenerate”). In this case the current matrix will not change. Returns 0 if m is invertible, and the current\\nmatrix is replaced with the inverted m.\\n', 'Parameters\\n', 'm (Matrix) – Matrix to be inverted. If not provided, the current matrix will be used.\\n', 'Return type\\n', 'int\\n', 'a\\n', 'Scaling in X-direction (width). For example, a value of 0.5 performs a shrink of the width by a factor of\\n2. If a < 0, a left-right flip will (additionally) occur.\\n', 'Type\\n', 'float\\n', 'b\\n', 'Causes a shearing effect: each Point(x, y) will become Point(x, y - b*x). Therefore, horizontal\\nlines will be “tilt”.\\n', 'Type\\n', 'float\\n', 'c\\n', 'Causes a shearing effect: each Point(x, y) will become Point(x - c*y, y). Therefore, vertical lines\\nwill be “tilt”.\\n', 'Type\\n', 'float\\n', 'd\\n', 'Scaling in Y-direction (height). For example, a value of 1.5 performs a stretch of the height by 50%. If d\\n< 0, an up-down flip will (additionally) occur.\\n', 'Type\\n', 'float\\n', 'e\\n', 'Causes a horizontal shift effect: Each Point(x, y) will become Point(x + e, y). Positive (negative) values\\nof e will shift right (left).\\n', 'Type\\n', 'float\\n', 'f\\n', 'Causes a vertical shift effect: Each Point(x, y) will become Point(x, y - f). Positive (negative) values of f\\nwill shift down (up).\\n', 'Type\\n', 'float\\n', 'is_rectilinear\\n', 'Rectilinear means that no shearing is present and that any rotations are integer multiples of 90 degrees.\\nUsually this is used to confirm that (axis-aligned) rectangles before the transformation are still axis-aligned\\nrectangles afterwards.\\n', 'Type\\n', 'bool\\n', '19.12. Matrix\\n259\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\n', '• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also\\nrefer to Using Python Sequences as Arguments in PyMuPDF.\\n', '• Matrices can be used with arithmetic operators almost like ordinary numbers: they can be added, subtracted,\\nmultiplied or divided – see chapter Operator Algebra for Geometry Objects.\\n', '• Matrix multiplication is not commutative – changing the sequence of the multiplicands will change the result\\nin general. So it can quickly become unclear which result a transformation will yield.\\n', '19.12.1 Examples\\n', 'Here are examples that illustrate some of the achievable effects. All pictures show some text, inserted under control of\\nsome matrix and relative to a fixed reference point (the red dot).\\n', '1. The Identity matrix performs no operation.\\n', '2. The scaling matrix Matrix(2, 0.5) stretches by a factor of 2 in horizontal, and shrinks by factor 0.5 in vertical\\ndirection.\\n', '3. Attributes Matrix.e and Matrix.f shift horizontally and, respectively vertically. In the following 10 to the\\nright and 20 down.\\n', '260\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '4. A negative Matrix.a causes a left-right flip.\\n', '5. A negative Matrix.d causes an up-down flip.\\n', '6. Attribute Matrix.b tilts upwards / downwards along the x-axis.\\n', '7. Attribute Matrix.c tilts left / right along the y-axis.\\n', '19.12. Matrix\\n261\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '8. Matrix Matrix(beta) performs counterclockwise rotations for positive angles beta.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.13 Outline\\n', 'outline (or “bookmark”), is a property of Document. If not None, it stands for the first outline item of the document.\\nIts properties in turn define the characteristics of this item and also point to other outline items in “horizontal” or\\ndownward direction. The full tree of all outline items for e.g. a conventional table of contents (TOC) can be recovered\\nby following these “pointers”.\\n', 'Method / Attribute\\nShort Description\\n', 'Outline.down\\nnext item downwards\\n', 'Outline.next\\nnext item same level\\n', 'Outline.page\\npage number (0-based)\\n', 'Outline.title\\ntitle\\n', 'Outline.uri\\nstring further specifying outline target\\n', 'Outline.is_external\\ntarget outside document\\n', 'Outline.is_open\\nwhether sub-outlines are open or collapsed\\n', 'Outline.dest\\npoints to destination details object\\n', 'Class API\\n', 'class Outline\\n', 'down\\n', 'The next outline item on the next level down. Is None if the item has no children.\\n', '262\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Type\\n', 'Outline\\n', 'next\\n', 'The next outline item at the same level as this item. Is None if this is the last one in its level.\\n', 'Type\\n', 'Outline\\n', 'page\\n', 'The page number (0-based) this bookmark points to.\\n', 'Type\\n', 'int\\n', 'title\\n', 'The item’s title as a string or None.\\n', 'Type\\n', 'str\\n', 'is_open\\n', 'Indicator showing whether any sub-outlines should be expanded (True) or be collapsed (False). This\\ninformation is interpreted by PDF reader software.\\n', 'Type\\n', 'bool\\n', 'is_external\\n', 'A bool specifying whether the target is outside (True) of the current document.\\n', 'Type\\n', 'bool\\n', 'uri\\n', 'A string specifying the link target. The meaning of this property should be evaluated in conjunction with\\nisExternal. The value may be None, in which case isExternal == False. If uri starts with file://, mailto:,\\nor an internet resource name, isExternal is True. In all other cases isExternal == False and uri points\\nto an internal location. In case of PDF documents, this should either be #nnnn to indicate a 1-based\\n(!) page number nnnn, or a named location. The format varies for other document types, e.g. uri =\\n‘../FixedDoc.fdoc#PG_21_LNK_84’ for page number 21 (1-based) in an XPS document.\\n', 'Type\\n', 'str\\n', 'dest\\n', 'The link destination details object.\\n', 'Type\\n', 'linkDest\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.13. Outline\\n263\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.14 Page\\n', 'Class representing a document page. A page object is created by Document.load_page() or, equivalently, via index-\\ning the document like doc[n] - it has no independent constructor.\\n', 'There is a parent-child relationship between a document and its pages. If the document is closed or deleted, all page\\nobjects (and their respective children, too) in existence will become unusable (“orphaned”): If a page property or\\nmethod is being used, an exception is raised.\\n', 'Several page methods have a Document counterpart for convenience. At the end of this chapter you will find a synopsis.\\n', 'Note: Many times in this chapter we are using the term coordinate. It is of high importance to have at least a basic\\nunderstanding of what that is and that you feel comfortable with the section Coordinates.\\n', '19.14.1 Modifying Pages\\n', 'Changing page properties and adding or changing page content is available for PDF documents only.\\n', 'In a nutshell, this is what you can do with PyMuPDF:\\n', '• Modify page rotation and the visible part (“cropbox”) of the page.\\n', '• Insert images, other PDF pages, text and simple geometrical objects.\\n', '• Add annotations and form fields.\\n', 'Note:\\nMethods require coordinates (points, rectangles) to put content in desired places. Please be aware that these\\ncoordinates must always be provided relative to the unrotated page (since v1.17.0). The reverse is also true: except\\nPage.rect, resp. Page.bound() (both reflect when the page is rotated), all coordinates returned by methods and\\nattributes pertain to the unrotated page.\\n', 'So the returned value of e.g. Page.get_image_bbox() will not change if you do a Page.set_rotation(). The\\nsame is true for coordinates returned by Page.get_text(), annotation rectangles, and so on. If you want to find out,\\nwhere an object is located in rotated coordinates, multiply the coordinates with Page.rotation_matrix. There\\nalso is its inverse, Page.derotation_matrix, which you can use when interfacing with other readers, which may\\nbehave differently in this respect.\\n', 'Note: If you add or update annotations, links or form fields on the page and immediately afterwards need to work with\\nthem (i.e. without leaving the page), you should reload the page using Document.reload_page() before referring\\nto these new or updated items.\\n', 'Reloading the page is generally recommended – although not strictly required in all cases. However, some annotation\\nand widget types have extended features in PyMuPDF compared to MuPDF. More of these extensions may also be\\nadded in the future.\\n', 'Releoading the page ensures all your changes have been fully applied to PDF structures, so you can safely create\\nPixmaps or successfully iterate over annotations, links and form fields.\\n', 'Method / Attribute\\nShort Description\\n', 'Page.add_caret_annot()\\nPDF only: add a caret annotation\\n', 'Page.add_circle_annot()\\nPDF only: add a circle annotation\\n', 'continues on next page\\n', '264\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 3 – continued from previous page\\n', 'Method / Attribute\\nShort Description\\n', 'Page.add_file_annot()\\nPDF only: add a file attachment annotation\\n', 'Page.add_freetext_annot()\\nPDF only: add a text annotation\\n', 'Page.add_highlight_annot()\\nPDF only: add a “highlight” annotation\\n', 'Page.add_ink_annot()\\nPDF only: add an ink annotation\\n', 'Page.add_line_annot()\\nPDF only: add a line annotation\\n', 'Page.add_polygon_annot()\\nPDF only: add a polygon annotation\\n', 'Page.add_polyline_annot()\\nPDF only: add a multi-line annotation\\n', 'Page.add_rect_annot()\\nPDF only: add a rectangle annotation\\n', 'Page.add_redact_annot()\\nPDF only: add a redaction annotation\\n', 'Page.add_squiggly_annot()\\nPDF only: add a “squiggly” annotation\\n', 'Page.add_stamp_annot()\\nPDF only: add a “rubber stamp” annotation\\n', 'Page.add_strikeout_annot()\\nPDF only: add a “strike-out” annotation\\n', 'Page.add_text_annot()\\nPDF only: add a comment\\n', 'Page.add_underline_annot()\\nPDF only: add an “underline” annotation\\n', 'Page.add_widget()\\nPDF only: add a PDF Form field\\n', 'Page.annot_names()\\nPDF only: a list of annotation (and widget) names\\n', 'Page.annot_xrefs()\\nPDF only: a list of annotation (and widget) xrefs\\n', 'Page.annots()\\nreturn a generator over the annots on the page\\n', 'Page.apply_redactions()\\nPDF only: process the redactions of the page\\n', 'Page.bound()\\nrectangle of the page\\n', 'Page.delete_annot()\\nPDF only: delete an annotation\\n', 'Page.delete_image()\\nPDF only: delete an image\\n', 'Page.delete_link()\\nPDF only: delete a link\\n', 'Page.delete_widget()\\nPDF only: delete a widget / field\\n', 'Page.draw_bezier()\\nPDF only: draw a cubic Bezier curve\\n', 'Page.draw_circle()\\nPDF only: draw a circle\\n', 'Page.draw_curve()\\nPDF only: draw a special Bezier curve\\n', 'Page.draw_line()\\nPDF only: draw a line\\n', 'Page.draw_oval()\\nPDF only: draw an oval / ellipse\\n', 'Page.draw_polyline()\\nPDF only: connect a point sequence\\n', 'Page.draw_quad()\\nPDF only: draw a quad\\n', 'Page.draw_rect()\\nPDF only: draw a rectangle\\n', 'Page.draw_sector()\\nPDF only: draw a circular sector\\n', 'Page.draw_squiggle()\\nPDF only: draw a squiggly line\\n', 'Page.draw_zigzag()\\nPDF only: draw a zig-zagged line\\n', 'Page.find_tables()\\nlocate tables on the page\\n', 'Page.get_drawings()\\nget vector graphics on page\\n', 'Page.get_fonts()\\nPDF only: get list of referenced fonts\\n', 'Page.get_image_bbox()\\nPDF only: get bbox and matrix of embedded image\\n', 'Page.get_image_info()\\nget list of meta information for all used images\\n', 'Page.get_image_rects()\\nPDF only: improved version of Page.get_image_bbox()\\n', 'Page.get_images()\\nPDF only: get list of referenced images\\n', 'Page.get_label()\\nPDF only: return the label of the page\\n', 'Page.get_links()\\nget all links\\n', 'Page.get_pixmap()\\ncreate a page image in raster format\\n', 'Page.get_svg_image()\\ncreate a page image in SVG format\\n', 'Page.get_text()\\nextract the page’s text\\n', 'Page.get_textbox()\\nextract text contained in a rectangle\\n', 'Page.get_textpage_ocr()\\ncreate a TextPage with OCR for the page\\n', 'continues on next page\\n', '19.14. Page\\n265\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 3 – continued from previous page\\n', 'Method / Attribute\\nShort Description\\n', 'Page.get_textpage()\\ncreate a TextPage for the page\\n', 'Page.get_xobjects()\\nPDF only: get list of referenced xobjects\\n', 'Page.insert_font()\\nPDF only: insert a font for use by the page\\n', 'Page.insert_image()\\nPDF only: insert an image\\n', 'Page.insert_link()\\nPDF only: insert a link\\n', 'Page.insert_text()\\nPDF only: insert text\\n', 'Page.insert_htmlbox()\\nPDF only: insert html text in a rectangle\\n', 'Page.insert_textbox()\\nPDF only: insert a text box\\n', 'Page.links()\\nreturn a generator of the links on the page\\n', 'Page.load_annot()\\nPDF only: load a specific annotation\\n', 'Page.load_widget()\\nPDF only: load a specific field\\n', 'Page.load_links()\\nreturn the first link on a page\\n', 'Page.new_shape()\\nPDF only: create a new Shape\\n', 'Page.replace_image()\\nPDF only: replace an image\\n', 'Page.search_for()\\nsearch for a string\\n', 'Page.set_artbox()\\nPDF only: modify /ArtBox\\n', 'Page.set_bleedbox()\\nPDF only: modify /BleedBox\\n', 'Page.set_cropbox()\\nPDF only: modify the cropbox (visible page)\\n', 'Page.set_mediabox()\\nPDF only: modify /MediaBox\\n', 'Page.set_rotation()\\nPDF only: set page rotation\\n', 'Page.set_trimbox()\\nPDF only: modify /TrimBox\\n', 'Page.show_pdf_page()\\nPDF only: display PDF page image\\n', 'Page.update_link()\\nPDF only: modify a link\\n', 'Page.widgets()\\nreturn a generator over the fields on the page\\n', 'Page.write_text()\\nwrite one or more TextWriter objects\\n', 'Page.cropbox_position\\ndisplacement of the cropbox\\n', 'Page.cropbox\\nthe page’s cropbox\\n', 'Page.artbox\\nthe page’s /ArtBox\\n', 'Page.bleedbox\\nthe page’s /BleedBox\\n', 'Page.trimbox\\nthe page’s /TrimBox\\n', 'Page.derotation_matrix\\nPDF only: get coordinates in unrotated page space\\n', 'Page.first_annot\\nfirst Annot on the page\\n', 'Page.first_link\\nfirst Link on the page\\n', 'Page.first_widget\\nfirst widget (form field) on the page\\n', 'Page.mediabox_size\\nbottom-right point of mediabox\\n', 'Page.mediabox\\nthe page’s mediabox\\n', 'Page.number\\npage number\\n', 'Page.parent\\nowning document object\\n', 'Page.rect\\nrectangle of the page\\n', 'Page.rotation_matrix\\nPDF only: get coordinates in rotated page space\\n', 'Page.rotation\\nPDF only: page rotation\\n', 'Page.transformation_matrix\\nPDF only: translate between PDF and MuPDF space\\n', 'Page.xref\\nPDF only: page xref\\n', 'Class API\\n', 'class Page\\n', 'bound()\\n', 'Determine the rectangle of the page. Same as property Page.rect. For PDF documents this usually also\\ncoincides with mediabox and cropbox, but not always. For example, if the page is rotated, then this is\\n', '266\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'reflected by this method – the Page.cropbox however will not change.\\n', 'Return type\\n', 'Rect\\n', 'add_caret_annot(point)\\n', 'PDF only: Add a caret icon. A caret annotation is a visual symbol normally used to indicate the presence\\nof text edits on the page.\\n', 'Parameters\\n', 'point (point_like) – the top left point of a 20 x 20 rectangle containing the MuPDF-\\nprovided icon.\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation. Stroke color blue = (0, 0, 1), no fill color support.\\n', '• New in v1.16.0\\n', ""add_text_annot(point, text, icon='Note')\\n"", 'PDF only: Add a comment icon (“sticky note”) with accompanying text. Only the icon is visible, the\\naccompanying text is hidden and can be visualized by many PDF viewers by hovering the mouse over the\\nsymbol.\\n', 'Parameters\\n', '• point (point_like) – the top left point of a 20 x 20 rectangle containing the\\nMuPDF-provided “note” icon.\\n', '• text (str) – the commentary text. This will be shown on double clicking or hov-\\nering over the icon. May contain any Latin characters.\\n', '• icon (str) – choose one of “Note” (default), “Comment”, “Help”, “Insert”, “Key”,\\n“NewParagraph”, “Paragraph” as the visual symbol for the embodied text4. (New\\nin v1.16.0)\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.\\n', ""add_freetext_annot(rect, text, fontsize=12, fontname='helv', border_color=None, text_color=0,\\nfill_color=1, rotate=0, align=TEXT_ALIGN_LEFT)\\n"", 'PDF only: Add text in a given rectangle.\\n', 'Parameters\\n', '4 You are generally free to choose any of the Annotation Icons in MuPDF you consider adequate.\\n', '19.14. Page\\n267\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• rect (rect_like) – the rectangle into which the text should be inserted. Text is\\nautomatically wrapped to a new line at box width. Lines not fitting into the box will\\nbe invisible.\\n', '• text (str) – the text. May contain any mixture of Latin, Greek, Cyrillic, Chinese,\\nJapanese and Korean characters. The respective required font is automatically de-\\ntermined. (New in v1.17.0)\\n', '• fontsize (float) – the fontsize. Default is 12.\\n', '• fontname (str) – the font name. Default is “Helv”. Accepted alternatives are\\n“Cour”, “TiRo”, “ZaDb” and “Symb”. The name may be abbreviated to the first two\\ncharacters, like “Co” for “Cour”. Lower case is also accepted. Bold or italic variants\\nof the fonts are not accepted (changed in v1.16.0). A user-contributed script pro-\\nvides a circumvention for this restriction – see section Using Buttons and JavaScript\\nin chapter FAQ. The actual font to use is now determined on a by-character level, and\\nall required fonts (or sub-fonts) are automatically included. Therefore, you should\\nrarely ever need to care about this parameter and let it default (except you insist on\\na serifed font for your non-CJK text parts). (New in v1.17.0)\\n', '• text_color (sequence,float) – the text color.\\nDefault is black.\\n(New in\\nv1.16.0)\\n', '• fill_color (sequence,float) – the fill color.\\nDefault is white.\\n(New in\\nv1.16.0)\\n', '• text_color – the text color. Default is black.\\n', '• border_color (sequence,float) – the border color. Default is None. (New in\\nv1.19.6)\\n', '• align\\n(int)\\n–\\ntext\\nalignment,\\none\\nof\\nTEXT_ALIGN_LEFT,\\nTEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT - justify is not supported.\\n(New in v1.17.0)\\n', '• rotate (int) – the text orientation. Accepted values are 0, 90, 270, invalid entries\\nare set to zero.\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation. Color properties can only be changed using special parameters\\nof Annot.update(). There, you can also set a border color different from the text color.\\n', '• Changed in v1.19.6: add border color parameter\\n', ""add_file_annot(pos, buffer, filename, ufilename=None, desc=None, icon='PushPin')\\n"", 'PDF only: Add a file attachment annotation with a “PushPin” icon at the specified location.\\n', 'Parameters\\n', '• pos (point_like) – the top-left point of a 18x18 rectangle containing the MuPDF-\\nprovided “PushPin” icon.\\n', '• buffer (bytes,bytearray,BytesIO) – the data to be stored (actual file content,\\nany data, etc.).\\n', '268\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Changed in v1.14.13: io.BytesIO is now also supported.\\n', '• filename (str) – the filename to associate with the data.\\n', '• ufilename (str) – the optional PDF unicode version of filename. Defaults to\\nfilename.\\n', '• desc (str) – an optional description of the file. Defaults to filename.\\n', '• icon (str) – choose one of “PushPin” (default), “Graph”, “Paperclip”, “Tag” as\\nthe visual symbol for the attached dataPage 267, 4. (New in v1.16.0)\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.\\n', 'add_ink_annot(list)\\n', 'PDF only: Add a “freehand” scribble annotation.\\n', 'Parameters\\n', 'list (sequence) – a list of one or more lists, each containing point_like items. Each\\nitem in these sublists is interpreted as a Point through which a connecting line is drawn.\\nSeparate sublists thus represent separate drawing lines.\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation in default appearance black =(0, 0, 0),line width 1. No fill color\\nsupport.\\n', 'add_line_annot(p1, p2)\\n', 'PDF only: Add a line annotation.\\n', 'Parameters\\n', '• p1 (point_like) – the starting point of the line.\\n', '• p2 (point_like) – the end point of the line.\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation. It is drawn with line (stroke) color red = (1, 0, 0) and line width\\n1. No fill color support. The annot rectangle is automatically created to contain both\\npoints, each one surrounded by a circle of radius 3 * line width to make room for any\\nline end symbols.\\n', 'add_rect_annot(rect)\\n', 'add_circle_annot(rect)\\n', 'PDF only: Add a rectangle, resp. circle annotation.\\n', 'Parameters\\n', 'rect (rect_like) – the rectangle in which the circle or rectangle is drawn, must be\\nfinite and not empty. If the rectangle is not equal-sided, an ellipse is drawn.\\n', 'Return type\\n', 'Annot\\n', '19.14. Page\\n269\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Returns\\n', 'the created annotation. It is drawn with line (stroke) color red = (1, 0, 0), line width 1,\\nfill color is supported.\\n', 'add_redact_annot(quad, text=None, fontname=None, fontsize=11, align=TEXT_ALIGN_LEFT, fill=(1, 1,\\n1), text_color=(0, 0, 0), cross_out=True)\\n', 'PDF only: Add a redaction annotation. A redaction annotation identifies content to be removed from the\\ndocument. Adding such an annotation is the first of two steps. It makes visible what will be removed in\\nthe subsequent step, Page.apply_redactions().\\n', 'Parameters\\n', '• quad (quad_like,rect_like) – specifies the (rectangular) area to be removed\\nwhich is always equal to the annotation rectangle. This may be a rect_like or\\nquad_like object. If a quad is specified, then the enveloping rectangle is taken.\\n', '• text (str) – text to be placed in the rectangle after applying the redaction (and\\nthus removing old content). (New in v1.16.12)\\n', '• fontname (str) – the font to use when text is given, otherwise ignored. The\\nsame rules apply as for Page.insert_textbox() – which is the method Page.\\napply_redactions() internally invokes. The replacement text will be vertically\\ncentered, if this is one of the CJK or PDF Base 14 Fonts. (New in v1.16.12)\\n', 'Note:\\n', '– For an existing font of the page, use its reference name as fontname (this is\\nitem[4] of its entry in Page.get_fonts()).\\n', '– For a new, non-builtin font, proceed as follows:\\n', 'page.insert_text(point,\\n# anywhere, but outside all␣\\n', '˓→redaction rectangles\\n', '""something"",\\n# some non-empty string\\n', 'fontname=""newname"",\\n# new, unused reference name\\n', 'fontfile=""..."",\\n# desired font file\\n', 'render_mode=3,\\n# makes the text invisible\\n', ')\\npage.add_redact_annot(..., fontname=""newname"")\\n', '• fontsize (float) – the fontsize to use for the replacing text. If the text is\\ntoo large to fit, several insertion attempts will be made, gradually reducing the\\nfontsize to no less than 4. If then the text will still not fit, no text insertion will\\ntake place at all. (New in v1.16.12)\\n', '• align (int) – the horizontal alignment for the replacing text.\\nSee\\n', 'insert_textbox() for available values.\\nThe vertical alignment is (approxi-\\nmately) centered if a PDF built-in font is used (CJK or PDF Base 14 Fonts). (New\\nin v1.16.12)\\n', '• fill (sequence) – the fill color of the rectangle after applying the redaction. The\\ndefault is white = (1, 1, 1), which is also taken if None is specified. To suppress a\\nfill color altogether, specify False. In this cases the rectangle remains transparent.\\n(New in v1.16.12)\\n', '• text_color (sequence) – the color of the replacing text. Default is black = (0, 0,\\n0). (New in v1.16.12)\\n', '270\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• cross_out (bool) – add two diagonal lines to the annotation rectangle. (New in\\nv1.17.2)\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation. Its standard appearance looks like a red rectangle (no fill color),\\noptionally showing two diagonal lines. Colors, line width, dashing, opacity and blend\\nmode can now be set and applied via Annot.update() like with other annotations.\\n(Changed in v1.17.2)\\n', '• New in v1.16.11\\n', 'add_polyline_annot(points)\\n', 'add_polygon_annot(points)\\n', 'PDF only: Add an annotation consisting of lines which connect the given points. A Polygon’s first and last\\npoints are automatically connected, which does not happen for a PolyLine. The rectangle is automatically\\ncreated as the smallest rectangle containing the points, each one surrounded by a circle of radius 3 (= 3 *\\nline width). The following shows a ‘PolyLine’ that has been modified with colors and line ends.\\n', 'Parameters\\n', 'points (list) – a list of point_like objects.\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the created annotation. It is drawn with line color black, line width 1 no fill color but\\nfill color support. Use methods of Annot to make any changes to achieve something like\\nthis:\\n', 'add_underline_annot(quads=None, start=None, stop=None, clip=None)\\n', 'add_strikeout_annot(quads=None, start=None, stop=None, clip=None)\\n', 'add_squiggly_annot(quads=None, start=None, stop=None, clip=None)\\n', 'add_highlight_annot(quads=None, start=None, stop=None, clip=None)\\n', 'PDF only: These annotations are normally used for marking text which has previously been somehow\\nlocated (for example via Page.search_for()). But this is not required: you are free to “mark” just\\nanything.\\n', '19.14. Page\\n271\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Standard (stroke only – no fill color support) colors are chosen per annotation type: yellow for highlighting,\\nred for striking out, green for underlining, and magenta for wavy underlining.\\n', 'All these four methods convert the arguments into a list of Quad objects. The annotation rectangle is then\\ncalculated to envelop all these quadrilaterals.\\n', 'Note: search_for() delivers a list of either Rect or Quad objects. Such a list can be directly used as an\\nargument for these annotation types and will deliver one common annotation for all occurrences of the\\nsearch string:\\n', '>>> # prefer quads=True in text searching for annotations!\\n>>> quads = page.search_for(""pymupdf"", quads=True)\\n>>> page.add_highlight_annot(quads)\\n', 'Note: Obviously, text marker annotations need to know what is the top, the bottom, the left, and the right\\nside of the area(s) to be marked. If the arguments are quads, this information is given by the sequence of\\nthe quad points. In contrast, a rectangle delivers much less information – this is illustrated by the fact, that\\n4! = 24 different quads can be constructed with the four corners of a rectangle.\\n', 'Therefore, we strongly recommend to use the quads option for text searches, to ensure correct annota-\\ntions. A similar consideration applies to marking text spans extracted with the “dict” / “rawdict” options\\nof Page.get_text(). For more details on how to compute quadrilaterals in this case, see section “How\\nto Mark Non-horizontal Text” of FAQ.\\n', 'Parameters\\n', '• quads (rect_like,quad_like,list,tuple) – the location(s) – rectangle(s) or\\nquad(s) – to be marked. (Changed in v1.14.20) A list or tuple must consist of\\nrect_like or quad_like items (or even a mixture of either). Every item must\\nbe finite, convex and not empty (as applicable). Set this parameter to None if you\\nwant to use the following arguments (Changed in v1.16.14). And vice versa: if not\\nNone, the remaining parameters must be None.\\n', '• start (point_like) – start text marking at this point. Defaults to the top-left\\npoint of clip. Must be provided if quads is None. (New in v1.16.14)\\n', '• stop (point_like) – stop text marking at this point. Defaults to the bottom-right\\npoint of clip. Must be used if quads is None. (New in v1.16.14)\\n', '• clip (rect_like) – only consider text lines intersecting this area. Defaults to the\\npage rectangle. Only use if start and stop are provided. (New in v1.16.14)\\n', 'Return type\\n', 'Annot or None (changed in v1.16.14).\\n', 'Returns\\n', 'the created annotation. If quads is an empty list, no annotation is created (changed in\\nv1.16.14).\\n', 'Note: You can use parameters start, stop and clip to highlight consecutive lines between the points start\\nand stop (starting with v1.16.14). Make use of clip to further reduce the selected line bboxes and thus deal\\nwith e.g. multi-column pages. The following multi-line highlight on a page with three text columns was\\ncreated by specifying the two red points and setting clip accordingly.\\n', '272\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'find_tables(clip=None, strategy=None, vertical_strategy=None, horizontal_strategy=None,\\nvertical_lines=None, horizontal_lines=None, snap_tolerance=None, snap_x_tolerance=None,\\nsnap_y_tolerance=None, join_tolerance=None, join_x_tolerance=None,\\njoin_y_tolerance=None, edge_min_length=3, min_words_vertical=3,\\nmin_words_horizontal=1, intersection_tolerance=None, intersection_x_tolerance=None,\\nintersection_y_tolerance=None, text_tolerance=None, text_x_tolerance=None,\\ntext_y_tolerance=None, add_lines=None)\\n', 'Find tables on the page and return an object with related information. Typically, the default values of the\\nmany parameters will be sufficient. Adjustments should ever only be needed in corner case situations.\\n', 'Parameters\\n', '• clip (rect_like) – specify a region to consider within the page rectangle and\\nignore the rest. Default is the full page.\\n', '• strategy (str) – Request a table detection strategy. Valid values are “lines”,\\n“lines_strict” and “text”.\\n', 'Default is “lines” which uses all vector graphics on the page to detect grid lines.\\n', 'Strategy “lines_strict” ignores borderless rectangle vector graphics. Sometimes\\nsingle text pieces have background colors which may lead to false columns or lines.\\nThis strategy ignores them and can thus increase detection precision.\\n', 'If “text” is specified, text positions are used to generate “virtual” column and / or\\nrow boundaries. Use min_words_* to request the number of words for considering\\ntheir coordinates.\\n', 'Use parameters vertical_strategy and horizontal_strategy instead for a\\nmore fine-grained treatment of the dimensions.\\n', '• horizontal_lines (sequence[floats]) – y-coordinates of rows. If provided,\\nthere will be no attempt to identify additional table rows. This influences table\\ndetection.\\n', '• vertical_lines (sequence[floats]) – x-coordinates of columns. If provided,\\nthere will be no attempt to identify additional table columns. This influences table\\ndetection.\\n', '• min_words_vertical (int) – relevant for vertical strategy option “text”: at least\\nthis many words must coincide to establish a virtual column boundary.\\n', '• min_words_horizontal (int) – relevant for horizontal strategy option “text”: at\\nleast this many words must coincide to establish a virtual row boundary.\\n', '• snap_tolerance (float) – Any two horizontal lines whose y-values differ by\\nno more than this value will be snapped into one. Accordingly for vertical lines.\\n', '19.14. Page\\n273\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Default is 3. Separate values can be specified instead for the dimensions, using\\nsnap_x_tolerance and snap_y_tolerance.\\n', '• join_tolerance (float) – Any two lines will be joined to one if the end and\\nthe start points differ by no more than this value (in points). Default is 3. In-\\nstead of this value, separate values can be specified for the dimensions using\\njoin_x_tolerance and join_y_tolerance.\\n', '• edge_min_length (float) – Ignore a line if its length does not exceed this value\\n(points). Default is 3.\\n', '• intersection_tolerance (float) – When combining lines into cell borders,\\northogonal lines must be within this value (points) to be considered intersecting.\\nDefault is 3. Instead of this value, separate values can be specified for the dimen-\\nsions using intersection_x_tolerance and intersection_y_tolerance.\\n', '• text_tolerance (float) – Characters will be combined into words only if their\\ndistance is no larger than this value (points). Default is 3. Instead of this value,\\nseparate values can be specified for the dimensions using text_x_tolerance and\\ntext_y_tolerance.\\n', '• add_lines (tuple,list) – Specify a list of “lines” (i.e. pairs of point_like\\n', 'objects) as additional, “virtual” vector graphics. These lines may help with table\\nand / or cell detection and will not otherwise influence the detection strategy. Espe-\\ncially, in contrast to parameters horizontal_lines and vertical_lines, they\\nwill not prevent detecting rows or columns in other ways. These lines will be treated\\nexactly like “real” vector graphics in terms of joining, snapping, intersectiing, min-\\nimum length and containment in the clip rectangle. Similarly, lines not parallel to\\nany of the coordinate axes will be ignored.\\n', 'Returns\\n', 'a TableFinder object that has the following significant attributes:\\n', '• cells: a list of all bboxes on the page, that have been identified as table cells (across\\nall tables). Each cell is a tuple (x0, y0, x1, y1) of coordinates or None.\\n', '• tables: a list of Table objects. This is [] if the page has no tables. Single tables can\\nbe found as items of this list. But the TableFinder object itself is also a sequence\\n', '274\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'of its tables. This means that if tabs is a TableFinder object, then table “n” is\\ndelivered by tabs.tables[n] as well as by the shorter tabs[n].\\n', '• The Table object has the following attributes:\\n', '– bbox: the bounding box of the table as a tuple (x0, y0, x1, y1).\\n', '– cells: bounding boxes of the table’s cells (list of tuples). A cell may also be\\nNone.\\n', '– extract(): this method returns the text content of each table cell as a list of list\\nof strings.\\n', '– to_pandas(): this method returns the table as a pandas DataFrame.\\n', '– header: a TableHeader object containing header information of the table.\\n', '– col_count: an integer containing the number of table columns.\\n', '– row_count: an integer containing the number of table rows.\\n', '– rows: a list of TableRow objects containing two attributes: bbox is the bound-\\nary box of the row, and cells is a list of table cells contained in this row.\\n', '• The TableHeader object has the following attributes:\\n', '– bbox: the bounding box of the header.\\n', '– cells: a list of bounding boxes containing the name of the respective column.\\n', '– names: a list of strings containing the text of each of the cell bboxes. They\\nrepresent the column names – which can be used when exporting the table to\\npandas DataFrames or CSV, etc.\\n', '– external: a bool indicating whether the header bbox is outside the table body\\n(True) or not. Table headers are never identified by the TableFinder logic.\\nTherefore, if external is true, then the header cells are not part of any cell iden-\\ntified by TableFinder. If external == False, then the first table row is the\\nheader.\\n', 'Please have a look at these Jupyter notebooks, which cover standard situations like mul-\\ntiple tables on one page or joining table fragments across multiple pages.\\n', '• New in version 1.23.0\\n', '• Changed in version 1.23.19: new argument add_lines.\\n', 'Important: There is also the pdf2docx extract tables method which is capable of table extraction if you\\nprefer.\\n', 'add_stamp_annot(rect, stamp=0)\\n', 'PDF only: Add a “rubber stamp” like annotation to e.g. indicate the document’s intended use (“DRAFT”,\\n“CONFIDENTIAL”, etc.).\\n', 'Parameters\\n', '• rect (rect_like) – rectangle where to place the annotation.\\n', '19.14. Page\\n275\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• stamp (int) – id number of the stamp text. For available stamps see Stamp Anno-\\ntation Icons.\\n', 'Note:\\n', '• The stamp’s text and its border line will automatically be sized and be put horizontally and vertically\\ncentered in the given rectangle. Annot.rect is automatically calculated to fit the given width and\\nwill usually be smaller than this parameter.\\n', '• The font chosen is “Times Bold” and the text will be upper case.\\n', '• The appearance can be changed using Annot.set_opacity() and by setting the “stroke” color (no\\n“fill” color supported).\\n', '• This can be used to create watermark images: on a temporary PDF page create a stamp annotation\\nwith a low opacity value, make a pixmap from it with alpha=True (and potentially also rotate it),\\ndiscard the temporary PDF page and use the pixmap with insert_image() for your target PDF.\\n', 'add_widget(widget)\\n', 'PDF only: Add a PDF Form field (“widget”) to a page. This also turns the PDF into a Form PDF.\\nBecause of the large amount of different options available for widgets, we have developed a new class\\nWidget, which contains the possible PDF field attributes. It must be used for both, form field creation and\\nupdates.\\n', 'Parameters\\n', 'widget (Widget) – a Widget object which must have been created upfront.\\n', 'Returns\\n', 'a widget annotation.\\n', 'delete_annot(annot)\\n', '• The removal will now include any bound ‘Popup’ or response annotations and related objects\\n(changed in v1.16.6).\\n', 'PDF only: Delete annotation from the page and return the next one.\\n', 'Parameters\\n', 'annot (Annot) – the annotation to be deleted.\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the annotation following the deleted one. Please remember that physical removal re-\\nquires saving to a new file with garbage > 0.\\n', 'delete_widget(widget)\\n', 'PDF only: Delete field from the page and return the next one.\\n', 'Parameters\\n', 'widget (Widget) – the widget to be deleted.\\n', 'Return type\\n', 'Widget\\n', '276\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Returns\\n', 'the widget following the deleted one. Please remember that physical removal requires\\nsaving to a new file with garbage > 0.\\n', '(New in v1.18.4)\\n', 'apply_redactions(images=PDF_REDACT_IMAGE_PIXELS)\\n', 'PDF only: Remove all text content contained in any redaction rectangle.\\n', 'This method applies and then deletes all redactions from the page.\\n', 'Parameters\\n', 'images (int) – How to redact overlapping images.\\nThe default (2) blanks\\nout\\noverlapping\\npixels.\\nPDF_REDACT_IMAGE_NONE\\n(0)\\nignores,\\nand\\nPDF_REDACT_IMAGE_REMOVE (1) completely removes all overlapping images.\\n', 'Returns\\n', 'True if at least one redaction annotation has been processed, False otherwise.\\n', 'Note:\\n', '• Text contained in a redaction rectangle will be physically removed from the page (assuming\\n', 'Document.save() with a suitable garbage option) and will no longer appear in e.g. text extractions\\nor anywhere else. All redaction annotations will also be removed. Other annotations are unaffected.\\n', '• All overlapping links will be removed. If the rectangle of the link was covering text, then only the\\noverlapping part of the text is being removed. Similar applies to images covered by link rectangles.\\n', '• The\\noverlapping\\nparts\\nof\\nimages\\nwill\\nbe\\nblanked-out\\nfor\\ndefault\\noption\\nPDF_REDACT_IMAGE_PIXELS (changed in v1.18.0).\\nOption 0 does not touch any images\\nand 1 will remove any image with an overlap.\\nPlease be aware that there is a bug for option\\nPDF_REDACT_IMAGE_PIXELS = 2: transparent images will be incorrectly handled!\\n', '• For option images=PDF_REDACT_IMAGE_REMOVE only this page’s references to the images are\\nremoved - not necessarily the images themselves. Images are completely removed from the file\\nonly, if no longer referenced at all (assuming suitable garbage collection options).\\n', '• For option images=PDF_REDACT_IMAGE_PIXELS a new image of format PNG is created, which\\nthe page will use in place of the original one. The original image is not deleted or replaced as part of\\nthis process, so other pages may still show the original. In addition, the new, modified PNG image\\ncurrently is stored uncompressed. Do keep these aspects in mind when choosing the right garbage\\ncollection method and compression options during save.\\n', '• Text removal is done by character: A character is removed if its bbox has a non-empty over-\\nlap with a redaction rectangle (changed in MuPDF v1.17).\\nDepending on the font properties\\nand / or the chosen line height, deletion may occur for undesired text parts.\\nUsing Tools.\\nset_small_glyph_heights() with a True argument before text search may help to prevent this.\\n', '• Redactions are a simple way to replace single words in a PDF, or to just physically remove them.\\nLocate the word “secret” using some text extraction or search method and insert a redaction using\\n“xxxxxx” as replacement text for each occurrence.\\n', '– Be wary if the replacement is longer than the original – this may lead to an awkward appear-\\nance, line breaks or no new text at all.\\n', '– For a number of reasons, the new text may not exactly be positioned on the same line like the\\nold one – especially true if the replacement font was not one of CJK or PDF Base 14 Fonts.\\n', '19.14. Page\\n277\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• New in v1.16.11\\n', '• Changed in v1.16.12: The previous mark parameter is gone. Instead, the respective rectangles are\\nfilled with the individual fill color of each redaction annotation. If a text was given in the annotation,\\nthen insert_textbox() is invoked to insert it, using parameters provided with the redaction.\\n', '• Changed in v1.18.0: added option for handling images that overlap redaction areas.\\n', 'delete_link(linkdict)\\n', 'PDF only: Delete the specified link from the page.\\nThe parameter must be an original item of\\n', 'get_links(), see Description of get_links() Entries. The reason for this is the dictionary’s “xref” key,\\nwhich identifies the PDF object to be deleted.\\n', 'Parameters\\n', 'linkdict (dict) – the link to be deleted.\\n', 'insert_link(linkdict)\\n', 'PDF only: Insert a new link on this page. The parameter must be a dictionary of format as provided by\\nget_links(), see Description of get_links() Entries.\\n', 'Parameters\\n', 'linkdict (dict) – the link to be inserted.\\n', 'update_link(linkdict)\\n', 'PDF only: Modify the specified link. The parameter must be a (modified) original item of get_links(),\\nsee Description of get_links() Entries. The reason for this is the dictionary’s “xref” key, which identifies\\nthe PDF object to be changed.\\n', 'Parameters\\n', 'linkdict (dict) – the link to be modified.\\n', 'Warning:\\nIf updating / inserting a URI link (""kind"":\\nLINK_URI), please make sure to start the\\nvalue for the ""uri"" key with a disambiguating string like ""http://"", ""https://"", ""file://"",\\n""ftp://"", ""mailto:"", etc. Otherwise – depending on your browser or other “consumer” software –\\nunexpected default assumptions may lead to unwanted behaviours.\\n', 'get_label()\\n', 'PDF only: Return the label for the page.\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'the label string like “vii” for Roman numbering or “” if not defined.\\n', '• New in v1.18.6\\n', '278\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'get_links()\\n', 'Retrieves all links of a page.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'A list of dictionaries. For a description of the dictionary entries, see Description of\\nget_links() Entries. Always use this or the Page.links() method if you intend to make\\nchanges to the links of a page.\\n', 'links(kinds=None)\\n', 'Return a generator over the page’s links. The results equal the entries of Page.get_links().\\n', 'Parameters\\n', 'kinds (sequence) – a sequence of integers to down-select to one or more link kinds.\\nDefault is all links. Example: kinds=(fitz.LINK_GOTO,) will only return internal links.\\n', 'Return type\\n', 'generator\\n', 'Returns\\n', 'an entry of Page.get_links() for each iteration.\\n', '• New in v1.16.4\\n', 'annots(types=None)\\n', 'Return a generator over the page’s annotations.\\n', 'Parameters\\n', 'types (sequence) – a sequence of integers to down-select to one or more annotation\\ntypes. Default is all annotations. Example: types=(fitz.PDF_ANNOT_FREETEXT,\\nfitz.PDF_ANNOT_TEXT) will only return ‘FreeText’ and ‘Text’ annotations.\\n', 'Return type\\n', 'generator\\n', 'Returns\\n', 'an Annot for each iteration.\\n', 'Caution: You cannot safely update annotations from within this generator. This\\nis because most annotation updates require reloading the page via page = doc.\\nreload_page(page). To circumvent this restriction, make a list of annotations\\nxref numbers first and then iterate over these numbers:\\n', 'In [4]: xrefs = [annot.xref for annot in page.annots(types=[...\\n', '˓→])]\\nIn [5]: for xref in xrefs:\\n', '...:\\nannot = page.load_annot(xref)\\n', '...:\\nannot.update()\\n', '...:\\npage = doc.reload_page(page)\\nIn [6]:\\n', '19.14. Page\\n279\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• New in v1.16.4\\n', 'widgets(types=None)\\n', 'Return a generator over the page’s form fields.\\n', 'Parameters\\n', 'types (sequence) – a sequence of integers to down-select to one or more widget types.\\nDefault is all form fields. Example: types=(fitz.PDF_WIDGET_TYPE_TEXT,) will\\nonly return ‘Text’ fields.\\n', 'Return type\\n', 'generator\\n', 'Returns\\n', 'a Widget for each iteration.\\n', '• New in v1.16.4\\n', 'write_text(rect=None, writers=None, overlay=True, color=None, opacity=None, keep_proportion=True,\\nrotate=0, oc=0)\\n', 'PDF only: Write the text of one or more TextWriter objects to the page.\\n', 'Parameters\\n', '• rect (rect_like) – where to place the text. If omitted, the rectangle union of the\\ntext writers is used.\\n', '• writers (sequence) – a non-empty tuple / list of TextWriter objects or a single\\n', 'TextWriter.\\n', '• opacity (float) – set transparency, overwrites resp. value in the text writers.\\n', '• color (sequ) – set the text color, overwrites resp. value in the text writers.\\n', '• overlay (bool) – put the text in foreground or background.\\n', '• keep_proportion (bool) – maintain the aspect ratio.\\n', '• rotate (float) – rotate the text by an arbitrary angle.\\n', '• oc (int) – the xref of an OCG or OCMD. (New in v1.18.4)\\n', 'Note:\\nParameters overlay, keep_proportion, rotate and oc have the same meaning as in Page.\\nshow_pdf_page().\\n', '• New in v1.16.18\\n', '280\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', ""insert_text(point, text, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None,\\nrender_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, rotate=0,\\nmorph=None, stroke_opacity=1, fill_opacity=1, overlay=True, oc=0)\\n"", 'PDF only: Insert text starting at point_like point. See Shape.insert_text().\\n', '• Changed in v1.18.4\\n', ""insert_textbox(rect, buffer, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None,\\nrender_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, expandtabs=8,\\nalign=TEXT_ALIGN_LEFT, charwidths=None, rotate=0, morph=None,\\nstroke_opacity=1, fill_opacity=1, oc=0, overlay=True)\\n"", 'PDF only: Insert text into the specified rect_like rect. See Shape.insert_textbox().\\n', '• Changed in v1.18.4\\n', 'insert_htmlbox(rect, text, *, css=None, scale_low=0, archive=None, rotate=0, oc=0, opacity=1,\\noverlay=True)\\n', 'PDF only: Insert text into the specified rectangle. The method has similarities with methods Page.\\ninsert_textbox() and TextWriter.fill_textbox(), but is much more powerful. This is achieved\\nby letting a Story object do all the required processing.\\n', '• Parameter text may be a string as in the other methods. But it will be interpreted as HTML source\\nand may therefore also contain HTML language elements – including styling. The css parameter\\nmay be used to pass in additional styling instructions.\\n', '• Automatic line breaks are generated at word boundaries. The “soft hyphen” character ""&#173;"" (or\\n&shy;) can be used to cause hyphenation and thus may also cause line breaks. Forced line breaks\\nhowever are only achievable via the HTML tag <br> - ""\\\\n"" is ignored and will be treated like a\\nspace.\\n', '• With this method the following can be achieved:\\n', '– Styling effects like bold, italic, text color, text alignment, font size or font switching.\\n', '– The text may include arbitrary languages – including right-to-left languages.\\n', '– Scripts like Devanagari and several others in Asia have a highly complex system of ligatures,\\nwhere two or more unicodes together yield one glyph. The Story uses the software package\\nHarfBuzz , to deal with these things and produce correct output.\\n', '– One can also include images via HTML tag <img> – the Story will take care of the appropriate\\nlayout. This is an alternative option to insert images, compared to Page.insert_image().\\n', '– HTML tables (tag <table>) may be included in the text and will be handled appropriately.\\n', '– Links are automatically generated when present.\\n', '• If content does not fit in the rectangle, the developer has two choices:\\n', '– either only be informed about this (and accept a no-op, just like with the other textbox insertion\\nmethods),\\n', '– or (scale_low=0 - the default) scale down the content until it fits.\\n', '19.14. Page\\n281\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', '• rect (rect_like) – rectangle on page to receive the text.\\n', '• text (str,Story) – the text to be written. Can contain a mixture of plain text and\\nHTML tags with styling instructions. Alternatively, a Story object may be specified\\n(in which case the internal Story generation step will be omitted). A Story must\\nhave been generated with all required styling and Archive information.\\n', '• css (str) – optional string containing additional CSS instructions. This parameter\\nis ignored if text is a Story.\\n', '• scale_low (float) – if necessary, scale down the content until it fits in the target\\nrectangle. This sets the down scaling limit. Default is 0, no limit. A value of 1\\nmeans no down-scaling permitted. A value of e.g. 0.2 means maximum down-\\nscaling by 80%.\\n', '• archive (Archive) – an Archive object that points to locations where to find im-\\nages or non-standard fonts. If text refers to images or non-standard fonts, this\\nparameter is required. This parameter is ignored if text is a Story.\\n', '• rotate (int) – one of the values 0, 90, 180, 270. Depending on this, text will be\\nfilled:\\n', '– 0: top-left to bottom-right.\\n', '– 90: bottom-left to top-right.\\n', '– 180: bottom-right to top-left.\\n', '– 270: top-right to bottom-left.\\n', '• oc (int) – the xref of an OCG / OCMD or 0. Please refer to Page.show_pdf_page()\\n', 'for details.\\n', '• opacity (float) – set the fill and stroke opacity of the content. Only values 0 <=\\nopacity < 1 are considered.\\n', '• overlay (bool) – put the text in front of other content. Please refer to Page.\\nshow_pdf_page() for details.\\n', 'Returns\\n', 'A tuple of floats (spare_height, scale).\\n', '• spare_height: -1 if content did not fit, else >= 0. It is the height of the unused (still\\navailable) rectangle stripe. Positive only if scale = 1 (no down-scaling happened).\\n', '• scale: down-scaling factor, 0 < scale <= 1.\\n', 'Please refer to examples in this section of the recipes: How to Fill a Box with HTML\\nText.\\n', '282\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• New in v1.23.8; rebased-only.\\n', '• New in v1.23.9: opacity parameter.\\n', 'draw_line(p1, p2, color=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,\\nmorph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only: Draw a line from p1 to p2 (point_like s). See Shape.draw_line().\\n', '• Changed in v1.18.4\\n', 'draw_zigzag(p1, p2, breadth=2, color=None, width=1, dashes=None, lineCap=0, lineJoin=0,\\noverlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only: Draw a zigzag line from p1 to p2 (point_like s). See Shape.draw_zigzag().\\n', '• Changed in v1.18.4\\n', 'draw_squiggle(p1, p2, breadth=2, color=None, width=1, dashes=None, lineCap=0, lineJoin=0,\\noverlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only: Draw a squiggly (wavy, undulated) line from p1 to p2 (point_like s).\\nSee Shape.\\ndraw_squiggle().\\n', '• Changed in v1.18.4\\n', 'draw_circle(center, radius, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,\\noverlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only:\\nDraw a circle around center (point_like) with a radius of radius.\\nSee Shape.\\ndraw_circle().\\n', '• Changed in v1.18.4\\n', 'draw_oval(quad, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,\\nmorph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only: Draw an oval (ellipse) within the given rect_like or quad_like. See Shape.draw_oval().\\n', '• Changed in v1.18.4\\n', '19.14. Page\\n283\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'draw_sector(center, point, angle, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,\\nfullSector=True, overlay=True, closePath=False, morph=None, stroke_opacity=1,\\nfill_opacity=1, oc=0)\\n', 'PDF only: Draw a circular sector, optionally connecting the arc to the circle’s center (like a piece of pie).\\nSee Shape.draw_sector().\\n', '• Changed in v1.18.4\\n', 'draw_polyline(points, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,\\noverlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only:\\nDraw several connected lines defined by a sequence of point_like s.\\nSee Shape.\\ndraw_polyline().\\n', '• Changed in v1.18.4\\n', 'draw_bezier(p1, p2, p3, p4, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,\\noverlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only: Draw a cubic Bézier curve from p1 to p4 with the control points p2 and p3 (all are point_like\\ns). See Shape.draw_bezier().\\n', '• Changed in v1.18.4\\n', 'draw_curve(p1, p2, p3, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,\\noverlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only: This is a special case of draw_bezier(). See Shape.draw_curve().\\n', '• Changed in v1.18.4\\n', 'draw_rect(rect, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,\\nmorph=None, stroke_opacity=1, fill_opacity=1, radius=None, oc=0)\\n', 'PDF only: Draw a rectangle. See Shape.draw_rect().\\n', '• Changed in v1.18.4\\n', '• Changed in v1.22.0: Added parameter radius.\\n', '284\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'draw_quad(quad, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,\\nmorph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'PDF only: Draw a quadrilateral. See Shape.draw_quad().\\n', '• Changed in v1.18.4\\n', ""insert_font(fontname='helv', fontfile=None, fontbuffer=None, set_simple=False,\\nencoding=TEXT_ENCODING_LATIN)\\n"", 'PDF only: Add a new font to be used by text output methods and return its xref. If not already present in\\nthe file, the font definition will be added. Supported are the built-in Base14_Fonts and the CJK fonts via\\n“reserved” fontnames. Fonts can also be provided as a file path or a memory area containing the image\\nof a font file.\\n', 'Parameters\\n', '• fontname (str) – The name by which this font shall be referenced when outputting\\ntext on this page. In general, you have a “free” choice here (but consult the Adobe\\nPDF References, page 16, section 7.3.5 for a formal description of building legal\\nPDF names). However, if it matches one of the Base14_Fonts or one of the CJK\\nfonts, fontfile and fontbuffer are ignored.\\n', 'In other words, you cannot insert a font via fontfile / fontbuffer and also give it a\\nreserved fontname.\\n', 'Note: A reserved fontname can be specified in any mixture of upper or lower case\\nand still match the right built-in font definition: fontnames “helv”, “Helv”, “HELV”,\\n“Helvetica”, etc. all lead to the same font definition “Helvetica”. But from a Page\\nperspective, these are different references. You can exploit this fact when using\\ndifferent encoding variants (Latin, Greek, Cyrillic) of the same font on a page.\\n', '• fontfile (str) – a path to a font file. If used, fontname must be different from\\nall reserved names.\\n', '• fontbuffer (bytes/bytearray) – the memory image of a font file. If used, font-\\nname must be different from all reserved names. This parameter would typically\\nbe used with Font.buffer for fonts supported / available via Font.\\n', '• set_simple (int) – applicable for fontfile / fontbuffer cases only: enforce treat-\\nment as a “simple” font, i.e. one that only uses character codes up to 255.\\n', '• encoding (int) – applicable for the “Helvetica”, “Courier” and “Times” sets of\\n', 'Base14_Fonts only. Select one of the available encodings Latin (0), Cyrillic (2)\\nor Greek (1). Only use the default (0 = Latin) for “Symbol” and “ZapfDingBats”.\\n', 'Rytpe\\n', 'int\\n', 'Returns\\n', 'the xref of the installed font.\\n', 'Note:\\nBuilt-in fonts will not lead to the inclusion of a font file. So the resulting PDF file will remain\\nsmall. However, your PDF viewer software is responsible for generating an appropriate appearance – and\\nthere exist differences on whether or how each one of them does this. This is especially true for the CJK\\n', '19.14. Page\\n285\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'fonts. But also Symbol and ZapfDingbats are incorrectly handled in some cases. Following are the Font\\nNames and their correspondingly installed Base Font names:\\n', 'Base-14 Fonts1\\n', 'Font Name\\nInstalled Base Font\\nComments\\n', 'helv\\nHelvetica\\nnormal\\n', 'heit\\nHelvetica-Oblique\\nitalic\\n', 'hebo\\nHelvetica-Bold\\nbold\\n', 'hebi\\nHelvetica-BoldOblique\\nbold-italic\\n', 'cour\\nCourier\\nnormal\\n', 'coit\\nCourier-Oblique\\nitalic\\n', 'cobo\\nCourier-Bold\\nbold\\n', 'cobi\\nCourier-BoldOblique\\nbold-italic\\n', 'tiro\\nTimes-Roman\\nnormal\\n', 'tiit\\nTimes-Italic\\nitalic\\n', 'tibo\\nTimes-Bold\\nbold\\n', 'tibi\\nTimes-BoldItalic\\nbold-italic\\n', 'symb\\nSymbol\\n3\\n', 'zadb\\nZapfDingbats\\n3\\n', 'CJK Fonts2 (China, Japan, Korea)\\n', 'Font Name\\nInstalled Base Font\\nComments\\n', 'china-s\\nHeiti\\nsimplified Chinese\\n', 'china-ss\\nSong\\nsimplified Chinese (serif)\\n', 'china-t\\nFangti\\ntraditional Chinese\\n', 'china-ts\\nMing\\ntraditional Chinese (serif)\\n', 'japan\\nGothic\\nJapanese\\n', 'japan-s\\nMincho\\nJapanese (serif)\\n', 'korea\\nDotum\\nKorean\\n', 'korea-s\\nBatang\\nKorean (serif)\\n', 'insert_image(rect, *, alpha=-1, filename=None, height=0, keep_proportion=True, mask=None, oc=0,\\noverlay=True, pixmap=None, rotate=0, stream=None, width=0, xref=0)\\n', 'PDF only: Put an image inside the given rectangle. The image may already exist in the PDF or be taken\\nfrom a pixmap, a file, or a memory area.\\n', 'Parameters\\n', '• rect (rect_like) – where to put the image. Must be finite and not empty.\\n', '• alpha (int) – deprecated and ignored.\\n', '• filename (str) – name of an image file (all formats supported by MuPDF – see\\n', 'Supported Input Image Formats).\\n', '• height (int) –\\n', '1 If your existing code already uses the installed base name as a font reference (as it was supported by PyMuPDF versions earlier than 1.14), this\\nwill continue to work.\\n3 Not all PDF readers display these fonts at all. Some others do, but use a wrong character spacing, etc.\\n2 Not all PDF reader software (including internet browsers and office software) display all of these fonts. And if they do, the difference between\\nthe serifed and the non-serifed version may hardly be noticeable. But serifed and non-serifed versions lead to different installed base fonts, thus\\nproviding an option to be displayable with your specific PDF viewer.\\n', '286\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• keep_proportion (bool) – maintain the aspect ratio of the image.\\n', '• mask (bytes,bytearray,io.BytesIO) – image in memory – to be used as image\\nmask (alpha values) for the base image. When specified, the base image must be\\nprovided as a filename or a stream – and must not be an image that already has a\\nmask.\\n', '• oc (int) – (xref) make image visibility dependent on this OCG or OCMD. Ignored\\nafter the first of multiple insertions. The property is stored with the generated PDF\\nimage object and therefore controls the image’s visibility throughout the PDF.\\n', '• overlay – see Common Parameters.\\n', '• pixmap (Pixmap) – a pixmap containing the image.\\n', '• rotate (int) – rotate the image. Must be an integer multiple of 90 degrees. Posi-\\ntive values rotate anti-clockwise. If you need a rotation by an arbitrary angle, con-\\nsider converting the image to a PDF (Document.convert_to_pdf()) first and\\nthen use Page.show_pdf_page() instead.\\n', '• stream (bytes,bytearray,io.BytesIO) – image in memory (all formats sup-\\nported by MuPDF – see Supported Input Image Formats).\\n', '• width (int) –\\n', '• xref (int) – the xref of an image already present in the PDF. If given, parameters\\nfilename, Pixmap, stream, alpha and mask are ignored. The page will simply\\nreceive a reference to the existing image.\\n', 'Returns\\n', 'The xref of the embedded image. This can be used as the xref argument for very\\nsignificant performance boosts, if the image is inserted again.\\n', 'This example puts the same image on every page of a document:\\n', '>>> doc = fitz.open(...)\\n>>> rect = fitz.Rect(0, 0, 50, 50)\\n# put thumbnail in upper left corner\\n', '>>> img = open(""some.jpg"", ""rb"").read()\\n# an image file\\n', '>>> img_xref = 0\\n# first execution embeds the image\\n', '>>> for page in doc:\\n', 'img_xref = page.insert_image(rect, stream=img,\\n', 'xref=img_xref,\\n2nd time reuses existing image\\n', ')\\n', '>>> doc.save(...)\\n', 'Note:\\n', '1. The method detects multiple insertions of the same image (like in the above example) and will store\\nits data only on the first execution. This is even true (although less performant), if using the default\\nxref=0.\\n', '2. The method cannot detect if the same image had already been part of the file before opening it.\\n', '3. You can use this method to provide a background or foreground image for the page, like a copyright\\nor a watermark. Please remember, that watermarks require a transparent image if put in foreground\\n...\\n', '4. The image may be inserted uncompressed, e.g. if a Pixmap is used or if the image has an alpha\\nchannel. Therefore, consider using deflate=True when saving the file. In addition, there are ways\\n', '19.14. Page\\n287\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'to control the image size – even if transparency comes into play. Have a look at How to Add Images\\nto a PDF Page.\\n', '5. The image is stored in the PDF at its original quality level. This may be much better than what\\nyou need for your display. Consider decreasing the image size before insertion – e.g. by using\\nthe pixmap option and then shrinking it or scaling it down (see Pixmap chapter). The PIL method\\nImage.thumbnail() can also be used for that purpose. The file size savings can be very significant.\\n', '6. Another efficient way to display the same image on multiple pages is another method:\\n', 'show_pdf_page(). Consult Document.convert_to_pdf() for how to obtain intermediary PDFs\\nusable for that method.\\n', '• Changed in v1.14.1: By default, the image keeps its aspect ratio.\\n', '• Changed in v1.14.11: Added args keep_proportion, rotate.\\n', '• Changed in v1.14.13:\\n', '– The image is now always placed centered in the rectangle, i.e. the centers of image and rect-\\nangle are equal.\\n', '– Added support for stream as io.BytesIO.\\n', '• Changed in v1.17.6: Insertion rectangle no longer needs to have a non-empty intersection with the\\npage’s Page.cropbox5.\\n', '• Changed in v1.18.1: Added mask arg.\\n', '• Changed in v1.18.3: Added oc arg.\\n', '• Changed in v1.18.13:\\n', '– Allow providing the image as the xref of an existing one.\\n', '– Added xref arg.\\n', '– Return xref of stored image.\\n', '• Changed in v1.19.3: deprecate and ignore alpha arg.\\n', 'replace_image(xref, filename=None, pixmap=None, stream=None)\\n', 'Replace the image at xref with another one.\\n', 'Parameters\\n', '• xref (int) – the xref of the image.\\n', '• filename – the filename of the new image.\\n', '• pixmap – the Pixmap of the new image.\\n', '• stream – the memory area containing the new image.\\n', 'Arguments filename, Pixmap, stream have the same meaning as in Page.insert_image(), especially\\nexactly one of these must be provided.\\n', 'This is a global replacement: the new image will also be shown wherever the old one has been displayed\\nthroughout the file.\\n', '5 The previous algorithm caused images to be shrunk to this intersection. Now the image can be anywhere on Page.mediabox, potentially\\nbeing invisible or only partially visible if the cropbox (representing the visible page part) is smaller.\\n', '288\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'This method mainly exists for technical purposes. Typical uses include replacing large images by smaller\\nversions, like a lower resolution, graylevel instead of colored, etc., or changing transparency.\\n', '• New in v1.21.0\\n', 'delete_image(xref )\\n', 'Delete the image at xref. This is slightly misleading: actually the image is being replaced with a small\\ntransparent Pixmap using above Page.replace_image(). The visible effect however is equivalent.\\n', 'Parameters\\n', 'xref (int) – the xref of the image.\\n', 'This is a global replacement: the image will disappear wherever the old one has been displayed throughout\\nthe file.\\n', ""If you inspect / extract a page’s images by methods like Page.get_images(), Page.get_image_info()\\nor Page.get_text(), the replacing “dummy” image will be detected like so (45, 47, 1, 1, 8,\\n'DeviceGray', '', 'Im1', 'FlateDecode') and also seem to “cover” the same boundary box on\\nthe page.\\n"", '• New in v1.21.0\\n', 'get_text(option, *, clip=None, flags=None, textpage=None, sort=False, delimiters=None)\\n', 'Retrieves the content of a page in a variety of formats. This is a wrapper for multiple TextPage methods\\nby choosing the output option opt as follows:\\n', '• “text” – TextPage.extractTEXT(), default\\n', '• “blocks” – TextPage.extractBLOCKS()\\n', '• “words” – TextPage.extractWORDS()\\n', '• “html” – TextPage.extractHTML()\\n', '• “xhtml” – TextPage.extractXHTML()\\n', '• “xml” – TextPage.extractXML()\\n', '• “dict” – TextPage.extractDICT()\\n', '• “json” – TextPage.extractJSON()\\n', '• “rawdict” – TextPage.extractRAWDICT()\\n', '• “rawjson” – TextPage.extractRAWJSON()\\n', 'Parameters\\n', '• opt (str) – A string indicating the requested format, one of the above. A mixture\\nof upper and lower case is supported.\\n', 'Values “words” and “blocks” are also accepted (changed in v1.16.3).\\n', '• clip (rect-like) – restrict extracted text to this rectangle. If None, the full page\\nis taken. Has no effect for options “html”, “xhtml” and “xml”. (New in v1.17.7)\\n', '19.14. Page\\n289\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• flags (int) – indicator bits to control whether to include images or how text should\\nbe handled with respect to white spaces and ligatures. See Text Extraction Flags\\nfor available indicators and Text Extraction Flags Defaults for default settings. (New\\nin v1.16.2)\\n', '• textpage – use a previously created TextPage. This reduces execution time very\\nsignificantly: by more than 50% and up to 95%, depending on the extraction option.\\nIf specified, the ‘flags’ and ‘clip’ arguments are ignored, because they are textpage-\\nonly properties. If omitted, a new, temporary textpage will be created. (New in\\nv1.19.0)\\n', '• sort (bool) – sort the output by vertical, then horizontal coordinates. In many\\ncases, this should suffice to generate a “natural” reading order. Has no effect on\\n(X)HTML and XML. Output option “words” sorts by (y1, x0) of the words’\\nbboxes. Similar is true for “blocks”, “dict”, “json”, “rawdict”, “rawjson”: they\\nall are sorted by (y1, x0) of the resp. block bbox. If specified for “text”, then\\ninternally “blocks” is used. (New in v1.19.1)\\n', '• delimiters (str) – use these characters as additional word separators with the\\n“words” output option (ignored otherwise). By default, all white spaces (includ-\\ning non-breaking space 0xA0) indicate start and end of a word. Now you can\\nspecify more characters causing this. For instance, the default will return ""john.\\ndoe@outlook.com"" as one word. If you specify delimiters=""@."" then the four\\nwords ""john"", ""doe"", ""outlook"", ""com"" will be returned. Other possible uses in-\\nclude ignoring punctuation characters delimiters=string.punctuation. The\\n“word” strings will not contain any delimiting character. (New in v1.23.5)\\n', 'Return type\\n', 'str, list, dict\\n', 'Returns\\n', 'The page’s content as a string, a list or a dictionary. Refer to the corresponding TextPage\\nmethod for details.\\n', 'Note:\\n', '1. You can use this method as a document conversion tool from any supported document type to one\\nof TEXT, HTML, XHTML or XML documents.\\n', '2. The inclusion of text via the clip parameter is decided on a by-character level: a character becomes\\npart of the output, if its bbox is contained in clip (changed in v1.18.2). This deviates from the\\nalgorithm used in redaction annotations: a character will be removed if its bbox intersects any\\nredaction annotation.\\n', '• Changed in v1.19.0: added TextPage parameter\\n', '• Changed in v1.19.1: added sort parameter\\n', '• Changed in v1.19.6: added new constants for defining default flags per method.\\n', '• Changed in v1.23.5: added delimiters parameter\\n', 'get_textbox(rect, textpage=None)\\n', 'Retrieve the text contained in a rectangle.\\n', '290\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', '• rect (rect-like) – rect-like.\\n', '• textpage – a TextPage to use. If omitted, a new, temporary textpage will be cre-\\nated.\\n', 'Returns\\n', 'a string with interspersed linebreaks where necessary. It is based on dedicated code\\n(changed in v1.19.0). A tyical use is checking the result of Page.search_for():\\n', '>>> rl = page.search_for(""currency:"")\\n>>> page.get_textbox(rl[0])\\n\\'Currency:\\'\\n>>>\\n', '• New in v1.17.7\\n', '• Changed in v1.19.0: add TextPage parameter\\n', 'get_textpage(clip=None, flags=3)\\n', 'Create a TextPage for the page.\\n', 'Parameters\\n', '• flags (int) – indicator bits controlling the content available for subsequent text\\nextractions and searches – see the parameter of Page.get_text().\\n', '• clip (rect-like) – restrict extracted text to this area. (New in v1.17.7)\\n', 'Returns\\n', 'TextPage\\n', '• New in v1.16.5\\n', '• Changed in v1.17.7: introduced clip parameter.\\n', ""get_textpage_ocr(flags=3, language='eng', dpi=72, full=False, tessdata=None)\\n"", 'Create a TextPage for the page that includes OCRed text. MuPDF will invoke Tesseract-OCR if this method\\nis used. Otherwise this is a normal TextPage object.\\n', 'Parameters\\n', '• flags (int) – indicator bits controlling the content available for subsequent test\\nextractions and searches – see the parameter of Page.get_text().\\n', '• language (str) – the expected language(s). Use “+”-separated values if multiple\\nlanguages are expected, “eng+spa” for English and Spanish.\\n', '• dpi (int) – the desired resolution in dots per inch. Influences recognition quality\\n(and execution time).\\n', '• full (bool) – whether to OCR the full page, or just the displayed images.\\n', '19.14. Page\\n291\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• tessdata (str) – The name of Tesseract’s language support folder tessdata.\\nIf\\nomitted,\\nthis\\ninformation\\nmust\\nbe\\npresent\\nas\\nenvironment\\nvariable\\n', 'TESSDATA_PREFIX. Can be determined by function get_tessdata().\\n', 'Note: This method does not support a clip parameter – OCR will always happen for the complete page\\nrectangle.\\n', 'Returns\\n', 'a TextPage. Execution may be significantly longer than Page.get_textpage().\\n', 'For a full page OCR, all text will have the font “GlyphlessFont” from Tesseract. In case\\nof partial OCR, normal text will keep its properties, and only text coming from images\\nwill have the GlyphlessFont.\\n', 'Note:\\nOCRed text is only available to PyMuPDF’s text extractions and searches if\\ntheir TextPage parameter specifies the output of this method.\\n', 'This Jupyter notebook walks through an example for using OCR textpages.\\n', '• New in v.1.19.0\\n', '• Changed in v1.19.1: support full and partial OCRing a page.\\n', 'get_drawings(extended=False)\\n', 'Return the vector graphics of the page. These are instructions which draw lines, rectangles, quadruples or\\ncurves, including properties like colors, transparency, line width and dashing, etc. Alternative terms are\\n“line art” and “drawings”.\\n', 'Returns\\n', 'a list of dictionaries. Each dictionary item contains one or more single draw commands\\nbelonging together: they have the same properties (colors, dashing, etc.). This is called\\na “path” in PDF, so we adopted that name here, but the method works for all document\\ntypes.\\n', 'The path dictionary for fill, stroke and fill-stroke paths has been designed to be compatible with class\\nShape. There are the following keys:\\n', '292\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Key\\nValue\\n', 'closePath\\nSame as the parameter in Shape.\\n', 'color\\nStroke color (see Shape).\\n', 'dashes\\nDashed line specification (see Shape).\\n', 'even_odd\\nFill colors of area overlaps – same as the parameter in Shape.\\n', 'fill\\nFill color (see Shape).\\n', 'items\\nList of draw commands: lines, rectangles, quads or curves.\\n', 'lineCap\\nNumber 3-tuple, use its max value on output with Shape.\\n', 'lineJoin\\nSame as the parameter in Shape.\\n', 'fill_opacity\\nfill color transparency (see Shape). (New in v1.18.17)\\n', 'stroke_opacity\\nstroke color transparency (see Shape). (New in v1.18.17)\\n', 'rect\\nPage area covered by this path. Information only.\\n', 'layer\\nname of applicable Optional Content Group. (New in v1.22.0)\\n', 'level\\nthe hierarchy level if extended=True. (New in v1.22.0)\\n', 'seqno\\ncommand number when building page appearance. (New in v1.19.0)\\n', 'type\\ntype of this path. (New in v1.18.17)\\n', 'width\\nStroke line width. (see Shape).\\n', 'Key ""opacity"" has been replaced by the new keys ""fill_opacity"" and ""stroke_opacity"". This is\\nnow compatible with the corresponding parameters of Shape.finish(). (Changed in v1.18.17)\\n', 'For paths other than groups or clips, key ""type"" takes one of the following values:\\n', '• “f” – this is a fill-only path. Only key-values relevant for this operation have a meaning, not ap-\\nplicable ones are present with a value of None: ""color"", ""lineCap"", ""lineJoin"", ""width"",\\n""closePath"", ""dashes"" and should be ignored.\\n', '• “s” – this is a stroke-only path. Similar to previous, key ""fill"" is present with value None.\\n', '• “fs” – this is a path performing combined fill and stroke operations.\\n', 'Each item in path[""items""] is one of the following:\\n', '• (""l"", p1, p2) - a line from p1 to p2 (Point objects).\\n', '• (""c"", p1, p2, p3, p4) - cubic Bézier curve from p1 to p4 (p2 and p3 are the control points).\\nAll objects are of type Point.\\n', '• (""re"", rect, orientation) - a Rect. Multiple rectangles within the same path are now detected\\n(changed in v1.18.17). Integer orientation is 1 resp. -1 indicating whether the enclosed area is\\nrotated left (1 = anti-clockwise), or resp. right7 (changed in v1.19.2).\\n', '• (""qu"", quad) - a Quad. 3 or 4 consecutive lines are detected to actually represent a Quad (changed\\nin v1.19.2:). (New in v1.18.17)\\n', 'Using class Shape, you should be able to recreate the original drawings on a separate (PDF) page with\\nhigh fidelity under normal, not too sophisticated circumstances. Please see the following comments on\\nrestrictions. A coding draft can be found in section “Extractings Drawings” of chapter FAQ.\\n', 'Specifying extended=True significantly alters the output. Most importantly, new dictionary types are\\npresent: “clip” and “group”. All paths will now be organized in a hierarchic structure which is encoded\\nby the new integer key “level”, the hierarchy level. Each group or clip establishes a new hierarchy, which\\napplies to all subsequent paths having a larger level value. (New in v1.22.0)\\n', '7 In PDF, an area enclosed by some lines or curves can have a property called “orientation”. This is significant for switching on or off the fill\\ncolor of that area when there exist multiple area overlaps - see discussion in method Shape.finish() using the “non-zero winding number” rule.\\nWhile orientation of curves, quads, triangles and other shapes enclosed by lines always was detectable, this has been impossible for “re” (rectangle)\\nitems in the past. Adding the orientation parameter now delivers the missing information.\\n', '19.14. Page\\n293\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Any path with a smaller level value than its predecessor will end the scope of (at least) the preceeding\\nhierarchy level. A “clip” path with the same level as the preceding clip will end the scope of that clip.\\nSame is true for groups. This is best explained by an example:\\n', '+------+------+--------+------+--------+\\n| line | lvl0 | lvl1\\n| lvl2 |\\nlvl3\\n|\\n', '+------+------+--------+------+--------+\\n|\\n0\\n| clip |\\n|\\n|\\n|\\n', '|\\n1\\n|\\n| fill\\n|\\n|\\n|\\n', '|\\n2\\n|\\n| group\\n|\\n|\\n|\\n', '|\\n3\\n|\\n|\\n| clip |\\n|\\n', '|\\n4\\n|\\n|\\n|\\n| stroke |\\n', '|\\n5\\n|\\n|\\n| fill |\\n|\\nends scope of clip in line 3\\n', '|\\n6\\n|\\n| stroke |\\n|\\n|\\nends scope of group in line 2\\n', '|\\n7\\n|\\n| clip\\n|\\n|\\n|\\n', '|\\n8\\n| fill |\\n|\\n|\\n|\\nends scope of line 0\\n', '+------+------+--------+------+--------+\\n', 'The clip in line 0 applies to line including line 7. Group in line 2 applies to lines 3 to 5, clip in line 3 only\\napplies to line 4.\\n', '“stroke” in line 4 is under control of “group” in line 2 and “clip” in line 3 (which in turn is a subset of line\\n0 clip).\\n', '• “clip” dictionary. Its values (most importantly “scissor”) remain valid / apply as long as following\\ndictionaries have a larger “level” value.\\n', 'Key\\nValue\\n', 'closePath\\nSame as in “stroke” or “fill” dictionaries\\n', 'even_odd\\nSame as in “stroke” or “fill” dictionaries\\n', 'items\\nSame as in “stroke” or “fill” dictionaries\\n', 'rect\\nSame as in “stroke” or “fill” dictionaries\\n', 'layer\\nSame as in “stroke” or “fill” dictionaries\\n', 'level\\nSame as in “stroke” or “fill” dictionaries\\n', 'scissor\\nthe clip rectangle\\n', 'type\\n“clip”\\n', '• “group” dictionary. Its values remain valid (apply) as long as following dictionaries have a larger\\n“level” value. Any dictionary with an equal or lower level end this group.\\n', 'Key\\nValue\\n', 'rect\\nSame as in “stroke” or “fill” dictionaries\\n', 'layer\\nSame as in “stroke” or “fill” dictionaries\\n', 'level\\nSame as in “stroke” or “fill” dictionaries\\n', 'isolated\\n(bool) Whether this group is isolated\\n', 'knockout\\n(bool) Whether this is a “Knockout Group”\\n', 'blendmode\\nName of the BlendMode, default is “Normal”\\n', 'opacity\\nFloat value in range [0, 1].\\n', 'type\\n“group”\\n', 'Note: The method is based on the output of Page.get_cdrawings() – which is much faster, but requires\\nsomewhat more attention processing its output.\\n', '294\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• New in v1.18.0\\n', '• Changed in v1.18.17\\n', '• Changed in v1.19.0: add “seqno” key, remove “clippings” key\\n', '• Changed in v1.19.1: “color” / “fill” keys now always are either are RGB tuples or None. This resolves\\nissues caused by exotic colorspaces.\\n', '• Changed in v1.19.2: add an indicator for the “orientation” of the area covered by an “re” item.\\n', '• Changed in v1.22.0: add new key ""layer"" which contains the name of the Optional Content Group\\nof the path (or None).\\n', '• Changed in v1.22.0: add parameter extended to also return clipping and group paths.\\n', 'get_cdrawings(extended=False)\\n', 'Extract the vector graphics on the page. Apart from following technical differences, functionally equivalent\\nto Page.get_drawings(), but much faster:\\n', '• Every path type only contains the relevant keys, e.g. a stroke path has no ""fill"" color key. See\\ncomment in method Page.get_drawings().\\n', '• Coordinates are given as point_like, rect_like and quad_like tuples – not as Point, Rect,\\n', 'Quad objects.\\n', 'If performance is a concern, consider using this method: Compared to versions earlier than 1.18.17, you\\nshould see much shorter response times. We have seen pages that required 2 seconds then, now only need\\n200 ms with this method.\\n', '• New in v1.18.17\\n', '• Changed in v1.19.0: removed “clippings” key, added “seqno” key.\\n', '• Changed in v1.19.1: always generate RGB color tuples.\\n', '• Changed in v1.22.0: added new key ""layer"" which contains the name of the Optional Content\\nGroup of the path (or None).\\n', '• Changed in v1.22.0: added parameter extended to also return clipping paths.\\n', 'get_fonts(full=False)\\n', 'PDF only: Return a list of fonts referenced by the page. Wrapper for Document.get_page_fonts().\\n', 'get_images(full=False)\\n', 'PDF only: Return a list of images referenced by the page. Wrapper for Document.get_page_images().\\n', 'get_image_info(hashes=False, xrefs=False)\\n', 'Return a list of meta information dictionaries for all images shown on the page. This works for all document\\ntypes. Technically, this is a subset of the dictionary output of Page.get_text(): the image binary content\\nand any text on the page are ignored.\\n', 'Parameters\\n', '19.14. Page\\n295\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• hashes (bool) – Compute the MD5 hashcode for each encountered image, which\\nallows identifying image duplicates. This adds the key ""digest"" to the output,\\nwhose value is a 16 byte bytes object. (New in v1.18.13)\\n', '• xrefs (bool) – PDF only.\\nTry to find the xref for each image.\\nImplies\\nhashes=True. Adds the ""xref"" key to the dictionary. If not found, the value\\nis 0, which means, the image is either “inline” or otherwise undetectable. Please\\nnote that this option has an extended response time, because the MD5 hashcode will\\nbe computed at least two times for each image with an xref. (New in v1.18.13)\\n', 'Return type\\n', 'list[dict]\\n', 'Returns\\n', 'A list of dictionaries. This includes information for exactly those images, that are\\nshown on the page – including “inline images”. In contrast to images included in\\nPage.get_text(), image binary content is not loaded, which drastically reduces\\nmemory usage.\\nThe dictionary layout is similar to that of image blocks in page.\\nget_text(""dict"").\\n', 'Key\\nValue\\n', 'number\\nblock number (int)\\n', 'bbox\\nimage bbox on page, rect_like\\n', 'width\\noriginal image width (int)\\n', 'height\\noriginal image height (int)\\n', 'cs-name\\ncolorspace name (str)\\n', 'colorspace\\ncolorspace.n (int)\\n', 'xres\\nresolution in x-direction (int)\\n', 'yres\\nresolution in y-direction (int)\\n', 'bpc\\nbits per component (int)\\n', 'size\\nstorage occupied by image (int)\\n', 'digest\\nMD5 hashcode (bytes), if hashes is true\\n', 'xref\\nimage xref or 0, if xrefs is true\\n', 'transform\\nmatrix transforming image rect to bbox, matrix_like\\n', 'Multiple occurrences of the same image are always reported. You can detect duplicates\\nby comparing their digest values.\\n', '• New in v1.18.11\\n', '• Changed in v1.18.13: added image MD5 hashcode computation and xref search.\\n', 'get_xobjects()\\n', 'PDF only:\\nReturn a list of Form XObjects referenced by the page.\\nWrapper for Document.\\nget_page_xobjects().\\n', 'get_image_rects(item, transform=False)\\n', 'PDF only: Return boundary boxes and transformation matrices of an embedded image. This is an improved\\nversion of Page.get_image_bbox() with the following differences:\\n', '• There is no restriction on how the image is invoked (by the page or one of its Form XObjects). The\\nresult is always complete and correct.\\n', '296\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• The result is a list of Rect or (Rect, Matrix) objects – depending on transform. Each list item rep-\\nresents one location of the image on the page. Multiple occurrences might not be detectable by\\nPage.get_image_bbox().\\n', '• The method invokes Page.get_image_info() with xrefs=True and therefore has a noticeably\\nlonger response time than Page.get_image_bbox().\\n', 'Parameters\\n', '• item (list,str,int) – an item of the list Page.get_images(), or the reference\\nname entry of such an item (item[7]), or the image xref.\\n', '• transform (bool) – also return the matrix used to transform the image rectangle\\nto the bbox on the page. If true, then tuples (bbox, matrix) are returned.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'Boundary boxes and respective transformation matrices for each image occurrence on\\nthe page. If the item is not on the page, an empty list [] is returned.\\n', 'New in v1.18.13\\n', 'get_image_bbox(item, transform=False)\\n', 'PDF only: Return boundary box and transformation matrix of an embedded image.\\n', 'Parameters\\n', '• item (list,str) – an item of the list Page.get_images() with full=True spec-\\nified, or the reference name entry of such an item, which is item[-3] (or item[7]\\nrespectively).\\n', '• transform (bool) – return the matrix used to transform the image rectangle to the\\nbbox on the page (new in v1.18.11). Default is just the bbox. If true, then a tuple\\n(bbox, matrix) is returned.\\n', 'Return type\\n', 'Rect or (Rect, Matrix)\\n', 'Returns\\n', 'the boundary box of the image – optionally also its transformation matrix.\\n', '• (Changed in v1.16.7): If the page in fact does not display this image, an infinite\\nrectangle is returned now. In previous versions, an exception was raised. Formally\\ninvalid parameters still raise exceptions.\\n', '• (Changed in v1.17.0): Only images referenced directly by the page are considered.\\nThis means that images occurring in embedded PDF pages are ignored and an ex-\\nception is raised.\\n', '• (Changed in v1.18.5): Removed the restriction introduced in v1.17.0: any item of\\nthe page’s image list may be specified.\\n', '19.14. Page\\n297\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• (Changed in v1.18.11): Partially re-instated a restriction: only those images are\\nconsidered, that are either directly referenced by the page or by a Form XObject\\ndirectly referenced by the page.\\n', '• (Changed in v1.18.11): Optionally also return the transformation matrix together\\nwith the bbox as the tuple (bbox, transform).\\n', 'Note:\\n', '1. Be aware that Page.get_images() may contain “dead” entries i.e. images, which the page does\\nnot display. This is no error, but intended by the PDF creator. No exception will be raised in this\\ncase, but an infinite rectangle is returned. You can avoid this from happening by executing Page.\\nclean_contents() before this method.\\n', '2. The image’s “transformation matrix” is defined as the matrix, for which the expression bbox /\\ntransform == fitz.Rect(0, 0, 1, 1) is true, lookup details here: Image Transformation\\nMatrix.\\n', '• Changed in v1.18.11: return image transformation matrix\\n', 'get_svg_image(matrix=fitz.Identity, text_as_path=True)\\n', 'Create an SVG image from the page. Only full page images are currently supported.\\n', 'Parameters\\n', '• matrix (matrix_like) – a matrix, default is Identity.\\n', '• text_as_path (bool) – – controls how text is represented. True outputs each\\ncharacter as a series of elementary draw commands, which leads to a more precise\\ntext display in browsers, but a very much larger output for text-oriented pages.\\nDisplay quality for False relies on the presence of the referenced fonts on the current\\nsystem. For missing fonts, the internet browser will fall back to some default –\\nleading to unpleasant appearances. Choose False if you want to parse the text of\\nthe SVG. (New in v1.17.5)\\n', 'Returns\\n', 'a UTF-8 encoded string that contains the image. Because SVG has XML syntax it can\\nbe saved in a text file, the standard extension is .svg.\\n', 'Note: In case of a PDF, you can circumvent the “full page image only” restriction by\\nmodifying the page’s CropBox before using the method.\\n', 'get_pixmap(*, matrix=fitz.Identity, dpi=None, colorspace=fitz.csRGB, clip=None, alpha=False,\\nannots=True)\\n', 'Create a pixmap from the page. This is probably the most often used method to create a Pixmap.\\n', 'All parameters are keyword-only.\\n', 'Parameters\\n', '298\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• matrix (matrix_like) – default is Identity.\\n', '• dpi (int) – desired resolution in x and y direction. If not None, the ""matrix""\\nparameter is ignored. (New in v1.19.2)\\n', '• colorspace (str or Colorspace) – The desired colorspace, one of “GRAY”, “RGB”\\nor “CMYK” (case insensitive). Or specify a Colorspace, ie. one of the predefined\\nones: csGRAY, csRGB or csCMYK.\\n', '• clip (irect_like) – restrict rendering to the intersection of this area with the\\npage’s rectangle.\\n', '• alpha (bool) – whether to add an alpha channel. Always accept the default False\\nif you do not really need transparency. This will save a lot of memory (25% in\\ncase of RGB ... and pixmaps are typically large!), and also processing time. Also\\nnote an important difference in how the image will be rendered: with True the\\npixmap’s samples area will be pre-cleared with 0x00. This results in transparent\\nareas where the page is empty. With False the pixmap’s samples will be pre-cleared\\nwith 0xff. This results in white where the page has nothing to show.\\n', 'Changed in v1.14.17\\n', 'The default alpha value is now False.\\n', '– Generated with alpha=True\\n', '– Generated with alpha=False\\n', '• annots (bool) – (new in version 1.16.0) whether to also render annotations or to\\nsuppress them. You can create pixmaps for annotations separately.\\n', 'Return type\\n', 'Pixmap\\n', '19.14. Page\\n299\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Returns\\n', 'Pixmap of the page. For fine-controlling the generated image, the by far most important\\nparameter is matrix. E.g. you can increase or decrease the image resolution by using\\nMatrix(xzoom, yzoom). If zoom > 1, you will get a higher resolution: zoom=2 will\\ndouble the number of pixels in that direction and thus generate a 2 times larger image.\\nNon-positive values will flip horizontally, resp. vertically. Similarly, matrices also let\\nyou rotate or shear, and you can combine effects via e.g. matrix multiplication. See the\\nMatrix section to learn more.\\n', 'Note:\\n', '• The pixmap will have “premultiplied” pixels if alpha=True. To learn about some background, e.g.\\nlook for “Premultiplied alpha” here.\\n', '• The method will respect any page rotation and will not exceed the intersection of clip and Page.\\ncropbox. If you need the page’s mediabox (and if this is a different rectangle), you can use a snippet\\nlike the following to achieve this:\\n', 'In [1]: import fitz\\nIn [2]: doc=fitz.open(""demo1.pdf"")\\nIn [3]: page=doc[0]\\nIn [4]: rotation = page.rotation\\nIn [5]: cropbox = page.cropbox\\nIn [6]: page.set_cropbox(page.mediabox)\\nIn [7]: page.set_rotation(0)\\nIn [8]: pix = page.get_pixmap()\\nIn [9]: page.set_cropbox(cropbox)\\nIn [10]: if rotation != 0:\\n', '...:\\npage.set_rotation(rotation)\\n', '...:\\nIn [11]:\\n', '• Changed in v1.19.2: added support of parameter dpi.\\n', 'annot_names()\\n', 'PDF only: return a list of the names of annotations, widgets and links. Technically, these are the /NM\\nvalues of every PDF object found in the page’s /Annots array.\\n', 'Return type\\n', 'list\\n', '• New in v1.16.10\\n', 'annot_xrefs()\\n', 'PDF only: return a list of the :data`xref` numbers of annotations, widgets and links – technically of all\\nentries found in the page’s /Annots array.\\n', '300\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of items (xref, type) where type is the annotation type. Use the type to tell apart\\nlinks, fields and annotations, see Annotation Types.\\n', '• New in v1.17.1\\n', 'load_annot(ident)\\n', 'PDF only: return the annotation identified by ident. This may be its unique name (PDF /NM key), or its\\nxref.\\n', 'Parameters\\n', 'ident (str,int) – the annotation name or xref.\\n', 'Return type\\n', 'Annot\\n', 'Returns\\n', 'the annotation or None.\\n', 'Note: Methods Page.annot_names(), Page.annot_xrefs() provide lists of names or xrefs, respec-\\ntively, from where an item may be picked and loaded via this method.\\n', '• New in v1.17.1\\n', 'load_widget(xref )\\n', 'PDF only: return the field identified by xref.\\n', 'Parameters\\n', 'xref (int) – the field’s xref.\\n', 'Return type\\n', 'Widget\\n', 'Returns\\n', 'the field or None.\\n', 'Note: This is similar to the analogous method Page.load_annot() – except that here only the xref is\\nsupported as identifier.\\n', '• New in v1.19.6\\n', '19.14. Page\\n301\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'load_links()\\n', 'Return the first link on a page. Synonym of property first_link.\\n', 'Return type\\n', 'Link\\n', 'Returns\\n', 'first link on the page (or None).\\n', 'set_rotation(rotate)\\n', 'PDF only: Set the rotation of the page.\\n', 'Parameters\\n', 'rotate (int) – An integer specifying the required rotation in degrees. Must be an\\ninteger multiple of 90. Values will be converted to one of 0, 90, 180, 270.\\n', 'show_pdf_page(rect, docsrc, pno=0, keep_proportion=True, overlay=True, oc=0, rotate=0, clip=None)\\n', 'PDF only:\\nDisplay a page of another PDF as a vector image (otherwise similar to Page.\\ninsert_image()). This is a multi-purpose method. For example, you can use it to\\n', '• create “n-up” versions of existing PDF files, combining several input pages into one output page\\n(see example combine.py),\\n', '• create “posterized” PDF files, i.e. every input page is split up in parts which each create a separate\\noutput page (see posterize.py),\\n', '• include PDF-based vector images like company logos, watermarks, etc., see svg-logo.py, which puts\\nan SVG-based logo on each page (requires additional packages to deal with SVG-to-PDF conver-\\nsions).\\n', 'Parameters\\n', '• rect (rect_like) – where to place the image on current page. Must be finite and\\nits intersection with the page must not be empty.\\n', '• docsrc (Document) – source PDF document containing the page. Must be a dif-\\nferent document object, but may be the same file.\\n', '• pno (int) – page number (0-based, in -∞ < pno < docsrc.page_count) to be\\nshown.\\n', '• keep_proportion (bool) – whether to maintain the width-height-ratio (default).\\nIf false, all 4 corners are always positioned on the border of the target rectangle\\n– whatever the rotation value. In general, this will deliver distorted and /or non-\\nrectangular images.\\n', '• overlay (bool) – put image in foreground (default) or background.\\n', '• oc (int) – (xref) make visibility dependent on this OCG / OCMD (which must be\\ndefined in the target PDF)9. (New in v1.18.3)\\n', '• rotate (float) – show the source rectangle rotated by some angle. Any angle is\\nsupported (changed in v1.14.11). (New in v1.14.10)\\n', '• clip (rect_like) – choose which part of the source page to show. Default is the\\nfull page, else must be finite and its intersection with the source page must not be\\nempty.\\n', '9 Objects inside the source page, like images, text or drawings, are never aware of whether their owning page now is under OC control inside the\\ntarget PDF. If source page objects are OC-controlled in the source PDF, then this will not be retained on the target: they will become unconditionally\\nvisible.\\n', '302\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: In contrast to method Document.insert_pdf(), this method does not copy annotations, widgets\\nor links, so these are not included in the target6. But all its other resources (text, images, fonts, etc.) will\\nbe imported into the current PDF. They will therefore appear in text extractions and in get_fonts() and\\nget_images() lists – even if they are not contained in the visible area given by clip.\\n', 'Example: Show the same source page, rotated by 90 and by -90 degrees:\\n', '>>> doc = fitz.open()\\n# new empty PDF\\n', '>>> page=doc.new_page()\\n# new page in A4 format\\n', '>>>\\n>>> # upper half page\\n>>> r1 = fitz.Rect(0, 0, page.rect.width, page.rect.height/2)\\n>>>\\n>>> # lower half page\\n>>> r2 = r1 + (0, page.rect.height/2, 0, page.rect.height/2)\\n>>>\\n>>> src = fitz.open(""PyMuPDF.pdf"")\\n# show page 0 of this\\n', '>>>\\n>>> page.show_pdf_page(r1, src, 0, rotate=90)\\n>>> page.show_pdf_page(r2, src, 0, rotate=-90)\\n>>> doc.save(""show.pdf"")\\n', '6 If you need to also see annotations or fields in the target page, you can try and convert the source PDF to another PDF using Document.\\nconvert_to_pdf().\\nThe underlying MuPDF function of that method will convert these objects to normal page content.\\nThen use Page.\\nshow_pdf_page() with the converted PDF page.\\n', '19.14. Page\\n303\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed in v1.14.11: Parameter reuse_xref has been deprecated. Position the source rectangle\\ncentered in target rectangle. Any rotation angle is now supported.\\n', '• Changed in v1.18.3: New parameter oc.\\n', 'new_shape()\\n', 'PDF only: Create a new Shape object for the page.\\n', 'Return type\\n', 'Shape\\n', 'Returns\\n', 'a new Shape to use for compound drawings. See description there.\\n', 'search_for(needle, *, clip=None, quads=False, flags=TEXT_DEHYPHENATE |\\nTEXT_PRESERVE_WHITESPACE | TEXT_PRESERVE_LIGATURES |\\nTEXT_MEDIABOX_CLIP, textpage=None)\\n', 'Search for needle on a page. Wrapper for TextPage.search().\\n', 'Parameters\\n', '• needle (str) – Text to search for. May contain spaces. Upper / lower case is ig-\\nnored, but only works for ASCII characters: For example, “COMPÉTENCES” will\\nnot be found if needle is “compétences” – “compÉtences” however will. Similar is\\ntrue for German umlauts and the like.\\n', '• clip (rect_like) – only search within this area. (New in v1.18.2)\\n', '• quads (bool) – Return object type Quad instead of Rect.\\n', '• flags (int) – Control the data extracted by the underlying TextPage. By default,\\nligatures and white spaces are kept, and hyphenation8 is detected.\\n', '• textpage – use a previously created TextPage. This reduces execution time sig-\\nnificantly. If specified, the ‘flags’ and ‘clip’ arguments are ignored. If omitted, a\\ntemporary textpage will be created. (New in v1.19.0)\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'A list of Rect or Quad objects, each of which – normally! – surrounds one occurrence\\nof needle. However: if parts of needle occur on more than one line, then a separate item\\nis generated for each these parts. So, if needle = ""search string"", two rectangles\\nmay be generated.\\n', 'Changes in v1.18.2:\\n', '• There no longer is a limit on the list length (removal of the hit_max parameter).\\n', '• If a word is hyphenated at a line break, it will still be found. E.g. the needle\\n“method” will be found even if hyphenated as “meth-od” at a line break, and two\\nrectangles will be returned: one surrounding “meth” (without the hyphen) and an-\\nother one surrounding “od”.\\n', '8 Hyphenation detection simply means that if the last character of a line is “-”, it will be assumed to be a continuation character. That character\\nwill not be found by text searching with its default flag setting. Please take note, that a MuPDF line may not always be what you expect: words\\nseparated by overly large gaps (e.g. caused by text justification) may constitute separate MuPDF lines. If then any of these words ends with a hyphen,\\nit will only be found by text searching if hyphenation is switched off.\\n', '304\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: The method supports multi-line text marker annotations: you can use the full returned list as one\\nsingle parameter for creating the annotation.\\n', 'Caution:\\n', '• There is a tricky aspect: the search logic regards contiguous multiple occurrences of needle\\nas one: assuming needle is “abc”, and the page contains “abc” and “abcabc”, then only two\\nrectangles will be returned, one for “abc”, and a second one for “abcabc”.\\n', '• You can always use Page.get_textbox() to check what text actually is being surrounded by\\neach rectangle.\\n', 'Note: A feature repeatedly asked for is supporting regular expressions when specifying the ""needle""\\nstring: There is no way to do this. If you need something in that direction, first extract text in the desired\\nformat and then subselect the result by matching with some regex pattern. Here is an example for matching\\nwords:\\n', '>>> pattern = re.compile(r""..."")\\n# the regex pattern\\n', '>>> words = page.get_text(""words"")\\n# extract words on page\\n', '>>> matches = [w for w in words if pattern.search(w[4])]\\n', 'The matches list will contain the words matching the given pattern. In the same way you can select\\nspan[""text""] from the output of page.get_text(""dict"").\\n', '• Changed in v1.18.2: added clip parameter. Remove hit_max parameter. Add default “dehyphen-\\nate”.\\n', '• Changed in v1.19.0: added TextPage parameter.\\n', 'set_mediabox(r)\\n', 'PDF only: Change the physical page dimension by setting mediabox in the page’s object definition.\\n', 'Parameters\\n', 'r (rect-like) – the new mediabox value.\\n', 'Note: This method also removes the page’s other (optional) rectangles (cropbox, ArtBox, TrimBox and\\nBleedbox) to prevent inconsistent situations. This will cause those to assume their default values.\\n', 'Caution:\\nFor non-empty pages this may have undesired effects, because the location of all content\\ndepends on this value and will therefore change position or even disappear.\\n', '19.14. Page\\n305\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• New in v1.16.13\\n', '• Changed in v1.19.4: remove all other rectangle definitions.\\n', 'set_cropbox(r)\\n', 'PDF only: change the visible part of the page.\\n', 'Parameters\\n', 'r (rect_like) – the new visible area of the page. Note that this must be specified\\nin unrotated coordinates, not empty, nor infinite and be completely contained in the\\nPage.mediabox.\\n', 'After execution (if the page is not rotated), Page.rect will equal this rectangle, but be shifted to the\\ntop-left position (0, 0) if necessary. Example session:\\n', '>>> page = doc.new_page()\\n>>> page.rect\\nfitz.Rect(0.0, 0.0, 595.0, 842.0)\\n>>>\\n>>> page.cropbox\\n# cropbox and mediabox still equal\\n', 'fitz.Rect(0.0, 0.0, 595.0, 842.0)\\n>>>\\n>>> # now set cropbox to a part of the page\\n>>> page.set_cropbox(fitz.Rect(100, 100, 400, 400))\\n>>> # this will also change the ""rect"" property:\\n>>> page.rect\\nfitz.Rect(0.0, 0.0, 300.0, 300.0)\\n>>>\\n>>> # but mediabox remains unaffected\\n>>> page.mediabox\\nfitz.Rect(0.0, 0.0, 595.0, 842.0)\\n>>>\\n>>> # revert CropBox change\\n>>> # either set it to MediaBox\\n>>> page.set_cropbox(page.mediabox)\\n>>> # or \\'refresh\\' MediaBox: will remove all other rectangles\\n>>> page.set_mediabox(page.mediabox)\\n', 'set_artbox(r)\\n', 'set_bleedbox(r)\\n', 'set_trimbox(r)\\n', 'PDF only: Set the resp. rectangle in the page object. For the meaning of these objects see Adobe PDF\\nReferences, page 77. Parameter and restrictions are the same as for Page.set_cropbox().\\n', '• New in v1.19.4\\n', 'rotation\\n', 'Contains the rotation of the page in degrees (always 0 for non-PDF types). This is a copy of the value in\\nthe PDF file. The PDF documentation says:\\n', '306\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '“The number of degrees by which the page should be rotated clockwise when displayed or\\nprinted. The value must be a multiple of 90. Default value: 0.”\\n', 'In PyMuPDF, we make sure that this attribute is always one of 0, 90, 180 or 270.\\n', 'Type\\n', 'int\\n', 'cropbox_position\\n', 'Contains the top-left point of the page’s /CropBox for a PDF, otherwise Point(0, 0).\\n', 'Type\\n', 'Point\\n', 'cropbox\\n', 'The page’s /CropBox for a PDF. Always the unrotated page rectangle is returned. For a non-PDF this\\nwill always equal the page rectangle.\\n', 'Note:\\nIn PDF, the relationship between /MediaBox, /CropBox and page rectangle may sometimes be\\nconfusing, please do lookup the glossary for MediaBox.\\n', 'Type\\n', 'Rect\\n', 'artbox\\n', 'bleedbox\\n', 'trimbox\\n', 'The page’s /ArtBox, /BleedBox, /TrimBox, respectively. If not provided, defaulting to Page.cropbox.\\n', 'Type\\n', 'Rect\\n', 'mediabox_size\\n', 'Contains the width and height of the page’s Page.mediabox for a PDF, otherwise the bottom-right coor-\\ndinates of Page.rect.\\n', 'Type\\n', 'Point\\n', 'mediabox\\n', 'The page’s mediabox for a PDF, otherwise Page.rect.\\n', 'Type\\n', 'Rect\\n', 'Note: For most PDF documents and for all other document types, page.rect == page.cropbox ==\\npage.mediabox is true. However, for some PDFs the visible page is a true subset of mediabox. Also, if\\nthe page is rotated, its Page.rect may not equal Page.cropbox. In these cases the above attributes help\\nto correctly locate page elements.\\n', '19.14. Page\\n307\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'transformation_matrix\\n', 'This matrix translates coordinates from the PDF space to the MuPDF space. For example, in PDF /Rect\\n[x0 y0 x1 y1] the pair (x0, y0) specifies the bottom-left point of the rectangle – in contrast to MuPDF’s\\nsystem, where (x0, y0) specify top-left. Multiplying the PDF coordinates with this matrix will deliver the\\n(Py-) MuPDF rectangle version. Obviously, the inverse matrix will again yield the PDF rectangle.\\n', 'Type\\n', 'Matrix\\n', 'rotation_matrix\\n', 'derotation_matrix\\n', 'These matrices may be used for dealing with rotated PDF pages. When adding / inserting anything to a\\nPDF page, the coordinates of the unrotated page are always used. These matrices help translating between\\nthe two states. Example: if a page is rotated by 90 degrees – what would then be the coordinates of the\\ntop-left Point(0, 0) of an A4 page?\\n', '>>> page.set_rotation(90)\\n# rotate an ISO A4 page\\n', '>>> page.rect\\nRect(0.0, 0.0, 842.0, 595.0)\\n>>> p = fitz.Point(0, 0)\\n# where did top-left point land?\\n', '>>> p * page.rotation_matrix\\nPoint(842.0, 0.0)\\n>>>\\n', 'Type\\n', 'Matrix\\n', 'first_link\\n', 'Contains the first Link of a page (or None).\\n', 'Type\\n', 'Link\\n', 'first_annot\\n', 'Contains the first Annot of a page (or None).\\n', 'Type\\n', 'Annot\\n', 'first_widget\\n', 'Contains the first Widget of a page (or None).\\n', 'Type\\n', 'Widget\\n', 'number\\n', 'The page number.\\n', 'Type\\n', 'int\\n', 'parent\\n', 'The owning document object.\\n', 'Type\\n', 'Document\\n', '308\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'rect\\n', 'Contains the rectangle of the page. Same as result of Page.bound().\\n', 'Type\\n', 'Rect\\n', 'xref\\n', 'The page’s PDF xref. Zero if not a PDF.\\n', 'Type\\n', 'Rect\\n', '19.14.2 Description of get_links() Entries\\n', 'Each entry of the Page.get_links() list is a dictionary with the following keys:\\n', '• kind: (required) an integer indicating the kind of link. This is one of LINK_NONE, LINK_GOTO, LINK_GOTOR,\\nLINK_LAUNCH, or LINK_URI. For values and meaning of these names refer to Link Destination Kinds.\\n', '• from: (required) a Rect describing the “hot spot” location on the page’s visible representation (where the cursor\\nchanges to a hand image, usually).\\n', '• page: a 0-based integer indicating the destination page. Required for LINK_GOTO and LINK_GOTOR, else\\nignored.\\n', '• to: either a fitz.Point, specifying the destination location on the provided page, default is fitz.Point(0, 0), or a\\nsymbolic (indirect) name. If an indirect name is specified, page = -1 is required and the name must be defined\\nin the PDF in order for this to work. Required for LINK_GOTO and LINK_GOTOR, else ignored.\\n', '• file: a string specifying the destination file. Required for LINK_GOTOR and LINK_LAUNCH, else ignored.\\n', '• uri: a string specifying the destination internet resource. Required for LINK_URI, else ignored. You should make\\nsure to start this string with an unambiguous substring, that classifies the subtype of the URL, like ""http://"",\\n""https://"", ""file://"", ""ftp://"", ""mailto:"", etc. Otherwise your browser will try to interpret the text and\\ncome to unwanted / unexpected conclusions about the intended URL type.\\n', '• xref : an integer specifying the PDF xref of the link object. Do not change this entry in any way. Required for\\nlink deletion and update, otherwise ignored. For non-PDF documents, this entry contains -1. It is also -1 for all\\nentries in the get_links() list, if any of the links is not supported by MuPDF - see Notes on Supporting Links.\\n', '19.14.3 Notes on Supporting Links\\n', 'MuPDF’s support for links has changed in v1.10a. These changes affect link types LINK_GOTO and LINK_GOTOR.\\n', 'Reading (pertains to method get_links() and the first_link property chain)\\n', 'If MuPDF detects a link to another file, it will supply either a LINK_GOTOR or a LINK_LAUNCH link kind. In case\\nof LINK_GOTOR destination details may either be given as page number (eventually including position information),\\nor as an indirect destination.\\n', 'If an indirect destination is given, then this is indicated by page = -1, and link.dest.dest will contain this name. The\\ndictionaries in the get_links() list will contain this information as the to value.\\n', 'Internal links are always of kind LINK_GOTO. If an internal link specifies an indirect destination, it will always\\nbe resolved and the resulting direct destination will be returned. Names are never returned for internal links, and\\nundefined destinations will cause the link to be ignored.\\n', '19.14. Page\\n309\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Writing\\n', 'PyMuPDF writes (updates, inserts) links by constructing and writing the appropriate PDF object source. This makes\\nit possible to specify indirect destinations for LINK_GOTOR and LINK_GOTO link kinds (pre PDF 1.2 file formats\\nare not supported).\\n', 'Warning: If a LINK_GOTO indirect destination specifies an undefined name, this link can later on not be found /\\nread again with MuPDF / PyMuPDF. Other readers however will detect it, but flag it as erroneous.\\n', 'Indirect LINK_GOTOR destinations can in general of course not be checked for validity and are therefore always\\naccepted.\\n', 'Example: How to insert a link pointing to another page in the same document\\n', '1. Determine the rectangle on the current page, where the link should be placed. This may be the bbox of an image\\nor some text.\\n', '2. Determine the target page number (“pno”, 0-based) and a Point on it, where the link should be directed to.\\n', '3. Create\\na\\ndictionary\\nd = {""kind"":\\nfitz.LINK_GOTO, ""page"":\\npno, ""from"":\\nbbox, ""to"":\\npoint}.\\n', '4. Execute page.insert_link(d).\\n', '19.14.4 Homologous Methods of Document and Page\\n', 'This is an overview of homologous methods on the Document and on the Page level.\\n', 'Document Level\\nPage Level\\n', 'Document.get_page_fonts(pno)\\nPage.get_fonts()\\n', 'Document.get_page_images(pno)\\nPage.get_images()\\n', 'Document.get_page_pixmap(pno, ...)\\nPage.get_pixmap()\\n', 'Document.get_page_text(pno, ...)\\nPage.get_text()\\n', 'Document.search_page_for(pno, ...)\\nPage.search_for()\\n', 'The page number “pno” is a 0-based integer -∞ < pno < page_count.\\n', 'Note:\\nMost document methods (left column) exist for convenience reasons, and are just wrappers for: Docu-\\nment[pno].<page method>. So they load and discard the page on each execution.\\n', 'However, the first two methods work differently. They only need a page’s object definition statement - the page itself will\\nnot be loaded. So e.g. Page.get_fonts() is a wrapper the other way round and defined as follows: page.get_fonts\\n== page.parent.get_page_fonts(page.number).\\n', 'This documentation covers all versions up to 1.23.25.\\n', '310\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.15 Pixmap\\n', 'Pixmaps (“pixel maps”) are objects at the heart of MuPDF’s rendering capabilities. They represent plane rectangular\\nsets of pixels. Each pixel is described by a number of bytes (“components”) defining its color, plus an optional alpha\\nbyte defining its transparency.\\n', 'In PyMuPDF, there exist several ways to create a pixmap. Except the first one, all of them are available as overloaded\\nconstructors. A pixmap can be created ...\\n', '1. from a document page (method Page.get_pixmap())\\n', '2. empty, based on Colorspace and IRect information\\n', '3. from a file\\n', '4. from an in-memory image\\n', '5. from a memory area of plain pixels\\n', '6. from an image inside a PDF document\\n', '7. as a copy of another pixmap\\n', 'Note: A number of image formats is supported as input for points 3. and 4. above. See section Supported Input Image\\nFormats.\\n', 'Have a look at the FAQ section to see some pixmap usage “at work”.\\n', 'Method / Attribute\\nShort Description\\n', 'Pixmap.clear_with()\\nclear parts of the pixmap\\n', 'Pixmap.color_count()\\ndetermine used colors\\n', 'Pixmap.color_topusage()\\ndetermine share of most used color\\n', 'Pixmap.copy()\\ncopy parts of another pixmap\\n', 'Pixmap.gamma_with()\\napply a gamma factor to the pixmap\\n', 'Pixmap.invert_irect()\\ninvert the pixels of a given area\\n', 'Pixmap.pdfocr_save()\\nsave the pixmap as an OCRed 1-page PDF\\n', 'Pixmap.pdfocr_tobytes()\\nsave the pixmap as an OCRed 1-page PDF\\n', 'Pixmap.pil_save()\\nsave as image using pillow\\n', 'Pixmap.pil_tobytes()\\nwrite to bytes object using pillow\\n', 'Pixmap.pixel()\\nreturn the value of a pixel\\n', 'Pixmap.save()\\nsave the pixmap in a variety of formats\\n', 'Pixmap.set_alpha()\\nset alpha values\\n', 'Pixmap.set_dpi()\\nset the image resolution\\n', 'Pixmap.set_origin()\\nset pixmap x,y values\\n', 'Pixmap.set_pixel()\\nset color and alpha of a pixel\\n', 'Pixmap.set_rect()\\nset color and alpha of all pixels in a rectangle\\n', 'Pixmap.shrink()\\nreduce size keeping proportions\\n', 'Pixmap.tint_with()\\ntint the pixmap\\n', 'Pixmap.tobytes()\\nreturn a memory area in a variety of formats\\n', 'Pixmap.warp()\\nreturn a pixmap made from a quad inside\\n', 'Pixmap.alpha\\ntransparency indicator\\n', 'Pixmap.colorspace\\npixmap’s Colorspace\\n', 'Pixmap.digest\\nMD5 hashcode of the pixmap\\n', 'Pixmap.height\\npixmap height\\n', 'continues on next page\\n', '19.15. Pixmap\\n311\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 4 – continued from previous page\\n', 'Method / Attribute\\nShort Description\\n', 'Pixmap.interpolate\\ninterpolation method indicator\\n', 'Pixmap.is_monochrome\\ncheck if only black and white occur\\n', 'Pixmap.is_unicolor\\ncheck if only one color occurs\\n', 'Pixmap.irect\\nIRect of the pixmap\\n', 'Pixmap.n\\nbytes per pixel\\n', 'Pixmap.samples_mv\\nmemoryview of pixel area\\n', 'Pixmap.samples_ptr\\nPython pointer to pixel area\\n', 'Pixmap.samples\\nbytes copy of pixel area\\n', 'Pixmap.size\\npixmap’s total length\\n', 'Pixmap.stride\\nsize of one image row\\n', 'Pixmap.width\\npixmap width\\n', 'Pixmap.x\\nX-coordinate of top-left corner\\n', 'Pixmap.xres\\nresolution in X-direction\\n', 'Pixmap.y\\nY-coordinate of top-left corner\\n', 'Pixmap.yres\\nresolution in Y-direction\\n', 'Class API\\n', 'class Pixmap\\n', '__init__(self, colorspace, irect, alpha)\\n', 'New empty pixmap: Create an empty pixmap of size and origin given by the rectangle. So, irect.top_left\\ndesignates the top left corner of the pixmap, and its width and height are irect.width resp. irect.height. Note\\nthat the image area is not initialized and will contain crap data – use eg. clear_with() or set_rect()\\nto be sure.\\n', 'Parameters\\n', '• colorspace (Colorspace) – colorspace.\\n', '• irect (irect_like) – The pixmap’s position and dimension.\\n', '• alpha (bool) – Specifies whether transparency bytes should be included. Default\\nis False.\\n', '__init__(self, colorspace, source)\\n', 'Copy and set colorspace: Copy source pixmap converting colorspace. Any colorspace combination is\\npossible, but source colorspace must not be None.\\n', 'Parameters\\n', '• colorspace (Colorspace) – desired target colorspace. This may also be None.\\nIn this case, a “masking” pixmap is created: its Pixmap.samples will consist of\\nthe source’s alpha bytes only.\\n', '• source (Pixmap) – the source pixmap.\\n', '__init__(self, source, mask)\\n', '• New in v1.18.18\\n', 'Copy and add image mask: Copy source pixmap, add an alpha channel with transparency data from a\\nmask pixmap.\\n', 'Parameters\\n', '• source (Pixmap) – pixmap without alpha channel.\\n', '312\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• mask (Pixmap) – a mask pixmap. Must be a graysale pixmap.\\n', '__init__(self, source, width, height[, clip])\\n', 'Copy and scale: Copy source pixmap, scaling new width and height values – the image will appear\\nstretched or shrunk accordingly. Supports partial copying. The source colorspace may be None.\\n', 'Parameters\\n', '• source (Pixmap) – the source pixmap.\\n', '• width (float) – desired target width.\\n', '• height (float) – desired target height.\\n', '• clip (irect_like) – restrict the resulting pixmap to this region of the scaled\\npixmap.\\n', 'Note:\\nIf width or height do not represent integers (i.e. value.is_integer() != True), then the\\nresulting pixmap will have an alpha channel.\\n', '__init__(self, source, alpha=1)\\n', 'Copy and add or drop alpha: Copy source and add or drop its alpha channel. Identical copy if alpha\\nequals source.alpha. If an alpha channel is added, its values will be set to 255.\\n', 'Parameters\\n', '• source (Pixmap) – source pixmap.\\n', '• alpha (bool) – whether the target will have an alpha channel, default and manda-\\ntory if source colorspace is None.\\n', 'Note:\\nA typical use includes separation of color and transparency bytes in separate pixmaps. Some\\napplications require this like e.g. wx.Bitmap.FromBufferAndAlpha() of wxPython:\\n', "">>> # 'pix' is an RGBA pixmap\\n>>> pixcolors = fitz.Pixmap(pix, 0)\\n# extract the RGB part (drop alpha)\\n"", '>>> pixalpha = fitz.Pixmap(None, pix)\\n# extract the alpha part\\n', '>>> bm = wx.Bitmap.FromBufferAndAlpha(pix.width, pix.height, pixcolors.samples,\\n', '˓→ pixalpha.samples)\\n', '__init__(self, filename)\\n', 'From a file: Create a pixmap from filename. All properties are inferred from the input. The origin of the\\nresulting pixmap is (0, 0).\\n', 'Parameters\\n', 'filename (str) – Path of the image file.\\n', '__init__(self, stream)\\n', 'From memory: Create a pixmap from a memory area. All properties are inferred from the input. The\\norigin of the resulting pixmap is (0, 0).\\n', 'Parameters\\n', 'stream (bytes,bytearray,BytesIO) – Data containing a complete, valid image.\\nCould have been created by e.g. stream = bytearray(open(‘image.file’, ‘rb’).read()).\\nType bytes is supported in Python 3 only, because bytes == str in Python 2 and the\\nmethod will interpret the stream as a filename.\\n', '19.15. Pixmap\\n313\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Changed in version 1.14.13: io.BytesIO is now also supported.\\n', '__init__(self, colorspace, width, height, samples, alpha)\\n', 'From plain pixels: Create a pixmap from samples. Each pixel must be represented by a number of bytes\\nas controlled by the colorspace and alpha parameters. The origin of the resulting pixmap is (0, 0). This\\nmethod is useful when raw image data are provided by some other program – see FAQ.\\n', 'Parameters\\n', '• colorspace (Colorspace) – Colorspace of image.\\n', '• width (int) – image width\\n', '• height (int) – image height\\n', '• samples (bytes,bytearray,BytesIO) – an area containing all pixels of the im-\\nage. Must include alpha values if specified.\\n', 'Changed in version 1.14.13: (1) io.BytesIO can now also be used. (2) Data are now\\ncopied to the pixmap, so may safely be deleted or become unavailable.\\n', '• alpha (bool) – whether a transparency channel is included.\\n', 'Note:\\n', '1. The following equation must be true: (colorspace.n + alpha) * width * height == len(samples).\\n', '2. Starting with version 1.14.13, the samples data are copied to the pixmap.\\n', '__init__(self, doc, xref )\\n', 'From a PDF image: Create a pixmap from an image contained in PDF doc identified by its xref. All\\npimap properties are set by the image. Have a look at extract-img1.py and extract-img2.py to see how this\\ncan be used to recover all of a PDF’s images.\\n', 'Parameters\\n', '• doc (Document) – an opened PDF document.\\n', '• xref (int) – the xref of an image object. For example, you can make a list of\\nimages used on a particular page with Document.get_page_images(), which\\nalso shows the xref numbers of each image.\\n', 'clear_with([value[, irect]])\\n', 'Initialize the samples area.\\n', 'Parameters\\n', '• value (int) – if specified, values from 0 to 255 are valid. Each color byte of each\\npixel will be set to this value, while alpha will be set to 255 (non-transparent) if\\npresent. If omitted, then all bytes (including any alpha) are cleared to 0x00.\\n', '• irect (irect_like) – the area to be cleared. Omit to clear the whole pixmap.\\nCan only be specified, if value is also specified.\\n', 'tint_with(black, white)\\n', 'Colorize a pixmap by replacing black and / or white with colors given as sRGB integer values. Only\\ncolorspaces CS_GRAY and CS_RGB are supported, others are ignored with a warning.\\n', 'If the colorspace is CS_GRAY, the average (red + green + blue)/3 will be taken. The pixmap will be changed\\nin place.\\n', 'Parameters\\n', '314\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• black (int) – replace black with this value.\\nSpecifying 0x000000 makes no\\nchanges.\\n', '• white (int) – replace white with this value. Specifying 0xFFFFFF makes no\\nchanges.\\n', 'Examples:\\n', '• tint_with(0x000000, 0xFFFFFF) is a no-op.\\n', '• tint_with(0x00FF00, 0xFFFFFF) changes black to green, leaves white intact.\\n', '• tint_with(0xFF0000, 0x0000FF) changes black to red and white to blue.\\n', 'gamma_with(gamma)\\n', 'Apply a gamma factor to a pixmap, i.e. lighten or darken it. Pixmaps with colorspace None are ignored\\nwith a warning.\\n', 'Parameters\\n', 'gamma (float) – gamma = 1.0 does nothing, gamma < 1.0 lightens, gamma > 1.0\\ndarkens the image.\\n', 'shrink(n)\\n', 'Shrink the pixmap by dividing both, its width and height by 2:sup:n.\\n', 'Parameters\\n', 'n (int) – determines the new pixmap (samples) size. For example, a value of 2 divides\\nwidth and height by 4 and thus results in a size of one 16th of the original. Values less\\nthan 1 are ignored with a warning.\\n', 'Note:\\nUse this methods to reduce a pixmap’s size retaining its proportion. The pixmap is changed “in\\nplace”. If you want to keep original and also have more granular choices, use the resp. copy constructor\\nabove.\\n', 'pixel(x, y)\\n', 'New in version:: 1.14.5: Return the value of the pixel at location (x, y) (column, line).\\n', 'Parameters\\n', '• x (int) – the column number of the pixel. Must be in range(pix.width).\\n', '• y (int) – the line number of the pixel, Must be in range(pix.height).\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of color values and, potentially the alpha value. Its length and content depend on\\nthe pixmap’s colorspace and the presence of an alpha. For RGBA pixmaps the result\\nwould e.g. be [r, g, b, a]. All items are integers in range(256).\\n', 'set_pixel(x, y, color)\\n', 'New in version 1.14.7: Manipulate the pixel at location (x, y) (column, line).\\n', 'Parameters\\n', '• x (int) – the column number of the pixel. Must be in range(pix.width).\\n', '• y (int) – the line number of the pixel. Must be in range(pix.height).\\n', '19.15. Pixmap\\n315\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• color (sequence) – the desired pixel value given as a sequence of integers in\\nrange(256). The length of the sequence must equal Pixmap.n, which includes\\nany alpha byte.\\n', 'set_rect(irect, color)\\n', 'New in version 1.14.8: Set the pixels of a rectangle to a value.\\n', 'Parameters\\n', '• irect (irect_like) – the rectangle to be filled with the value. The actual area is\\nthe intersection of this parameter and Pixmap.irect. For an empty intersection\\n(or an invalid parameter), no change will happen.\\n', '• color (sequence) – the desired value, given as a sequence of integers in\\nrange(256). The length of the sequence must equal Pixmap.n, which includes\\nany alpha byte.\\n', 'Return type\\n', 'bool\\n', 'Returns\\n', 'False if the rectangle was invalid or had an empty intersection with Pixmap.irect, else\\nTrue.\\n', 'Note:\\n', '1. This method is equivalent to Pixmap.set_pixel() executed for each pixel in the rectangle, but is\\nobviously very much faster if many pixels are involved.\\n', '2. This method can be used similar to Pixmap.clear_with() to initialize a pixmap with a certain\\ncolor like this: pix.set_rect(pix.irect, (255, 255, 0)) (RGB example, colors the complete pixmap with\\nyellow).\\n', 'set_origin(x, y)\\n', '• New in v1.17.7\\n', 'Set the x and y values of the pixmap’s top-left point.\\n', 'Parameters\\n', '• x (int) – x coordinate\\n', '• y (int) – y coordinate\\n', 'set_dpi(xres, yres)\\n', '• New in v1.16.17\\n', '• Changed in v1.18.0: When saving as a PNG image, these values will be stored now.\\n', 'Set the resolution (dpi) in x and y direction.\\n', 'Parameters\\n', '• xres (int) – resolution in x direction.\\n', '• yres (int) – resolution in y direction.\\n', 'set_alpha(alphavalues, premultiply=1, opaque=None)\\n', '• Changed in v 1.18.13\\n', '316\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Change the alpha values. The pixmap must have an alpha channel.\\n', 'Parameters\\n', '• alphavalues (bytes,bytearray,BytesIO) – the new alpha values. If provided,\\nits length must be at least width * height. If omitted (None), all alpha values are\\nset to 255 (no transparency). Changed in version 1.14.13: io.BytesIO is now also\\naccepted.\\n', '• premultiply (bool) – New in v1.18.13: whether to premultiply color components\\nwith the alpha value.\\n', '• opaque (list,tuple) – ignore the alpha value and set this color to fully transpar-\\nent. A sequence of integers in range(256) with a length of Pixmap.n. Default\\nis None. For example, a typical choice for RGB would be opaque=(255, 255,\\n255) (white).\\n', 'invert_irect([irect])\\n', 'Invert the color of all pixels in IRect irect. Will have no effect if colorspace is None.\\n', 'Parameters\\n', 'irect (irect_like) – The area to be inverted. Omit to invert everything.\\n', 'copy(source, irect)\\n', 'Copy the irect part of the source pixmap into the corresponding area of this one. The two pixmaps may\\nhave different dimensions and can each have CS_GRAY or CS_RGB colorspaces, but they currently must\\nhave the same alpha property2. The copy mechanism automatically adjusts discrepancies between source\\nand target like so:\\n', 'If copying from CS_GRAY to CS_RGB, the source gray-shade value will be put into each of the three rgb\\ncomponent bytes. If the other way round, (r + g + b) / 3 will be taken as the gray-shade value of the target.\\n', 'Between irect and the target pixmap’s rectangle, an “intersection” is calculated at first. This takes into\\naccount the rectangle coordinates and the current attribute values Pixmap.x and Pixmap.y (which you\\nare free to modify for this purpose via Pixmap.set_origin()). Then the corresponding data of this\\nintersection are copied. If the intersection is empty, nothing will happen.\\n', 'Parameters\\n', '• source (Pixmap) – source pixmap.\\n', '• irect (irect_like) – The area to be copied.\\n', 'Note:\\nExample: Suppose you have two pixmaps, pix1 and pix2 and you want to copy the lower right\\nquarter of pix2 to pix1 such that it starts at the top-left point of pix1. Use the following snippet:\\n', '>>> # safeguard: set top-left of pix1 and pix2 to (0, 0)\\n>>> pix1.set_origin(0, 0)\\n>>> pix2.set_origin(0, 0)\\n>>> # compute top-left coordinates of pix2 region to copy\\n>>> x1 = int(pix2.width / 2)\\n>>> y1 = int(pix2.height / 2)\\n>>> # shift top-left of pix2 such, that the to-be-copied\\n>>> # area starts at (0, 0):\\n>>> pix2.set_origin(-x1, -y1)\\n>>> # now copy ...\\n>>> pix1.copy(pix2, (0, 0, x1, y1))\\n', '2 To also set the alpha property, add an additional step to this method by dropping or adding an alpha channel to the result.\\n', '19.15. Pixmap\\n317\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'save(filename, output=None, jpg_quality=95)\\n', '• Changed in v1.22.0: Added direct support of JPEG images. Image quality can be controlled via\\nparameter “jpg_quality”.\\n', 'Save pixmap as an image file. Depending on the output chosen, only some or all colorspaces are supported\\nand different file extensions can be chosen. Please see the table below.\\n', 'Parameters\\n', '• filename (str,Path,file) – The file to save to. May be provided as a string, as\\na pathlib.Path or as a Python file object. In the latter two cases, the filename is\\ntaken from the resp. object. The filename’s extension determines the image format,\\nwhich can be overruled by the output parameter.\\n', '• output (str) – The desired image format. The default is the filename’s extension.\\nIf both, this value and the file extension are unsupported, an exception is raised. For\\npossible values see Supported Output Image Formats.\\n', '• jpg_quality (int) – The desired image quality, default 95. Only applies to JPEG\\nimages, else ignored. This parameter trades quality against file size. A value of 98\\nis close to lossless. Higher values should not lead to better quality.\\n', 'Raises\\n', 'ValueError – For unsupported image formats.\\n', ""tobytes(output='png', jpg_quality=95)\\n"", '• New in version 1.14.5: Return the pixmap as a bytes memory object of the specified format – similar\\nto save().\\n', '• Changed in v1.22.0: Added direct JPEG support. Image quality can be influenced via new param-\\neter “jpg_quality”.\\n', 'Parameters\\n', '• output (str) – The desired image format. The default is “png”. For possible\\nvalues see Supported Output Image Formats.\\n', '• jpg_quality (int) – The desired image quality, default 95. Only applies to JPEG\\nimages, else ignored. This parameter trades quality against file size. A value of 98\\nis close to lossless. Higher values should not lead to better quality.\\n', '• output – The requested image format. The default is “png”. For other possible\\nvalues see Supported Output Image Formats.\\n', 'Raises\\n', 'ValueError – For unsupported image formats.\\n', 'Return type\\n', 'bytes\\n', '318\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', ""pdfocr_save(filename, compress=True, language='eng', tessdata=None)\\n"", '• New in v1.19.0\\n', '• Changed in v1.22.5: Support of new parameter for Tesseract’s tessdata.\\n', 'Perform text recognition using Tesseract and save the image as a 1-page PDF with an OCR text layer.\\n', 'Parameters\\n', '• filename (str,fp) – identifies the file to save to. May be either a string or a\\npointer to a file opened with “wb” (includes io.BytesIO() objects).\\n', '• compress (bool) – whether to compress the resulting PDF, default is True.\\n', '• language (str) – the languages occurring in the image. This must be specified\\nin Tesseract format. Default is “eng” for English. Use “+”-separated Tesseract\\nlanguage codes for multiple languages, like “eng+spa” for English and Spanish.\\n', '• tessdata (str) – folder name of Tesseract’s language support. If omitted, this\\ninformation must be present as environment variable TESSDATA_PREFIX.\\n', 'Note: Will fail if Tesseract is not installed or if the environment variable “TESSDATA_PREFIX” is not\\nset to the tessdata folder name and not provided as parameter.\\n', ""pdfocr_tobytes(compress=True, language='eng', tessdata=None)\\n"", '• New in v1.19.0\\n', '• Changed in v1.22.5: Support of new parameter for Tesseract’s tessdata.\\n', 'Perform text recognition using Tesseract and convert the image to a 1-page PDF with an OCR text layer.\\nInternally invokes Pixmap.pdfocr_save().\\n', 'Returns\\n', 'A 1-page PDF file in memory. Could be opened like doc=fitz.open(""pdf"", pix.\\npdfocr_tobytes()), and text extractions could be performed on its page=doc[0].\\n', 'Note: Another possible use is insertion into some pdf. The following snippet reads the\\nimages of a folder and stores them as pages in a new PDF that contain an OCR text layer:\\n', 'doc = fitz.open()\\nfor imgfile in os.listdir(folder):\\npix = fitz.Pixmap(imgfile)\\nimgpdf = fitz.open(""pdf"", pix.pdfocr_tobytes())\\ndoc.insert_pdf(imgpdf)\\npix = None\\nimgpdf.close()\\ndoc.save(""ocr-images.pdf"")\\n', 'pil_save(*args, unmultiply=False, **kwargs)\\n', '• New in v1.17.3\\n', 'Write the pixmap as an image file using Pillow. Use this method for output unsupported by MuPDF.\\nExamples are\\n', '• Formats JPX, J2K, WebP, etc.\\n', '19.15. Pixmap\\n319\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Storing EXIF information.\\n', '• If you do not provide dpi information, the values xres, yres stored with the pixmap are automatically\\nused.\\n', 'A simple example: pix.pil_save(""some.webp"", optimize=True, dpi=(150, 150)).\\n', 'Parameters\\n', 'unmultiply (bool) – If the pixmap’s colorspace is RGB with transparency, the alpha\\nvalues may or may not already be multiplied into the color components ref/green/blue\\n(called “premultiplied”). To enforce undoing premultiplication, set this parameter to\\nTrue. To learn about some background, e.g. look for “Premultiplied alpha” here.\\n', 'For details on other parameters see the Pillow documentation.\\n', 'Since v1.22.0, PyMuPDF supports JPEG output directly. We recommended to no longer use this method\\nfor JPEG output – for performance reasons and for avoiding unnecessary external dependencies.\\n', 'Raises\\n', 'ImportError – if Pillow is not installed.\\n', 'pil_tobytes(*args, unmultiply=False, **kwargs)\\n', '• New in v1.17.3\\n', 'Return an image as a bytes object in the specified format using Pillow. For example stream = pix.\\npil_tobytes(format=""WEBP"", optimize=True, dpi=(150, 150)). Also see above. For details\\non other parameters see the Pillow documentation.\\n', 'Raises\\n', 'ImportError – if Pillow is not installed.\\n', 'Return type\\n', 'bytes\\n', 'warp(quad, width, height)\\n', '• New in v1.19.3\\n', 'Return a new pixmap by “warping” the quad such that the quad corners become the new pixmap’s corners.\\nThe target pixmap’s IRect will be (0, 0, width, height).\\n', 'Parameters\\n', '• quad (quad_like) – a convex quad with coordinates inside Pixmap.irect (in-\\ncluding the border points).\\n', '• width (int) – desired resulting width.\\n', '• height (int) – desired resulting height.\\n', 'Returns\\n', 'A new pixmap where the quad corners are mapped to the pixmap corners in a clockwise\\nfashion: quad.ul -> irect.tl, quad.ur -> irect.tr, etc.\\n', 'Return type\\n', '320\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Pixmap\\n', 'color_count(colors=False, clip=None)\\n', '• New in v1.19.2\\n', '• Changed in v1.19.3\\n', 'Determine the pixmap’s unique colors and their count.\\n', 'Parameters\\n', '• colors (bool) – (changed in v1.19.3) If True return a dictionary of color pixels\\nand their usage count, else just the number of unique colors.\\n', '• clip (rect_like) – a rectangle inside Pixmap.irect. If provided, only those\\npixels are considered. This allows inspecting sub-rectangles of a given pixmap\\ndirectly – instead of building sub-pixmaps.\\n', 'Return type\\n', 'dict or int\\n', 'Returns\\n', 'either the number of colors, or a dictionary with the items pixel:\\ncount. The pixel\\nkey is a bytes object of length Pixmap.n.\\n', 'Note:\\nTo recover the tuple of a pixel, use tuple(colors.keys()[i]) for the i-th\\nitem.\\n', '• The response time depends on the pixmap’s samples size and may be more than a\\nsecond for very large pixmaps.\\n', '• Where applicable, pixels with different alpha values will be treated as different col-\\nors.\\n', 'color_topusage(clip=None)\\n', '• New in v1.19.3\\n', 'Return the most frequently used color and its relative frequency.\\n', 'Parameters\\n', 'clip (rect_like) – A rectangle inside Pixmap.irect. If provided, only those pix-\\nels are considered. This allows inspecting sub-rectangles of a given pixmap directly –\\ninstead of building sub-pixmaps.\\n', 'Return type\\n', 'tuple\\n', 'Returns\\n', 'A tuple (ratio, pixel) where 0 < ratio <= 1 and pixel is the pixel value of\\n', '19.15. Pixmap\\n321\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'the color. Use this to decide if the image is “almost” unicolor: a response (0.95,\\nb""x00x00x00"") means that 95% of all pixels are black. See an example here How to\\nUse Pixmaps: Checking Text Visibility.\\n', 'alpha\\n', 'Indicates whether the pixmap contains transparency information.\\n', 'Type\\n', 'bool\\n', 'digest\\n', 'The MD5 hashcode (16 bytes) of the pixmap. This is a technical value used for unique identifications.\\n', 'Type\\n', 'bytes\\n', 'colorspace\\n', 'The colorspace of the pixmap. This value may be None if the image is to be treated as a so-called image\\nmask or stencil mask (currently happens for extracted PDF document images only).\\n', 'Type\\n', 'Colorspace\\n', 'stride\\n', 'Contains the length of one row of image data in Pixmap.samples. This is primarily used for calculation\\npurposes. The following expressions are true:\\n', '• len(samples) == height * stride\\n', '• width * n == stride\\n', 'Type\\n', 'int\\n', 'is_monochrome\\n', '• New in v1.19.2\\n', 'Is True for a gray pixmap which only has the colors black and white.\\n', 'Type\\n', 'bool\\n', 'is_unicolor\\n', '• New in v1.19.2\\n', 'Is True if all pixels are identical (any colorspace). Where applicable, pixels with different alpha values\\nwill be treated as different colors.\\n', 'Type\\n', 'bool\\n', 'irect\\n', 'Contains the IRect of the pixmap.\\n', 'Type\\n', 'IRect\\n', '322\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'samples\\n', 'The color and (if Pixmap.alpha is true) transparency values for all pixels. It is an area of width *\\nheight * n bytes. Each n bytes define one pixel. Each successive n bytes yield another pixel in scanline\\norder. Subsequent scanlines follow each other with no padding. E.g. for an RGBA colorspace this means,\\nsamples is a sequence of bytes like ..., R, G, B, A, ..., and the four byte values R, G, B, A define one pixel.\\n', 'This area can be passed to other graphics libraries like PIL (Python Imaging Library) to do additional\\nprocessing like saving the pixmap in other image formats.\\n', 'Note:\\n', '• The underlying data is typically a large memory area, from which a bytes copy is made for this\\nattribute ... each time you access it: for example an RGB-rendered letter page has a samples size of\\nalmost 1.4 MB. So consider assigning a new variable to it or use the memoryview version Pixmap.\\nsamples_mv (new in v1.18.17).\\n', '• Any changes to the underlying data are available only after accessing this attribute again. This is\\ndifferent from using the memoryview version.\\n', 'Type\\n', 'bytes\\n', 'samples_mv\\n', '• New in v1.18.17\\n', 'Like Pixmap.samples, but in Python memoryview format. It is built pointing to the memory in the\\npixmap – not from a copy of it. So its creation speed is independent from the pixmap size, and any\\nchanges to pixels will be available immediately.\\n', 'Copies like bytearray(pix.samples_mv), or bytes(pixmap.samples_mv) are equivalent to and can\\nbe used in place of pix.samples.\\n', 'We also have len(pix.samples) == len(pix.samples_mv).\\n', 'Look at this example from a 2 MB JPEG: the memoryview is ten thousand times faster:\\n', 'In [3]: %timeit len(pix.samples_mv)\\n367 ns ± 1.75 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\\nIn [4]: %timeit len(pix.samples)\\n3.52 ms ± 57.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\\n', 'Type\\n', 'memoryview\\n', 'samples_ptr\\n', '• New in v1.18.17\\n', 'Python pointer to the pixel area. This is a special integer format, which can be used by supporting appli-\\ncations (such as PyQt) to directly address the samples area and thus build their images extremely fast. For\\nexample:\\n', 'img = QtGui.QImage(pix.samples, pix.width, pix.height, format) # (1)\\nimg = QtGui.QImage(pix.samples_ptr, pix.width, pix.height, format) # (2)\\n', '19.15. Pixmap\\n323\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Both of the above lead to the same Qt image, but (2) can be many hundred times faster, because it avoids\\nan additional copy of the pixel area.\\n', 'Type\\n', 'int\\n', 'size\\n', 'Contains len(pixmap). This will generally equal len(pix.samples) plus some platform-specific value for\\ndefining other attributes of the object.\\n', 'Type\\n', 'int\\n', 'width\\n', 'w\\n', 'Width of the region in pixels.\\n', 'Type\\n', 'int\\n', 'height\\n', 'h\\n', 'Height of the region in pixels.\\n', 'Type\\n', 'int\\n', 'x\\n', 'X-coordinate of top-left corner in pixels. Cannot directly be changed – use Pixmap.set_origin().\\n', 'Type\\n', 'int\\n', 'y\\n', 'Y-coordinate of top-left corner in pixels. Cannot directly be changed – use Pixmap.set_origin().\\n', 'Type\\n', 'int\\n', 'n\\n', 'Number of components per pixel. This number depends on colorspace and alpha. If colorspace is not\\nNone (stencil masks), then Pixmap.n - Pixmap.alpha == pixmap.colorspace.n is true. If colorspace is\\nNone, then n == alpha == 1.\\n', 'Type\\n', 'int\\n', 'xres\\n', 'Horizontal resolution in dpi (dots per inch). Please also see resolution. Cannot directly be changed –\\nuse Pixmap.set_dpi().\\n', 'Type\\n', 'int\\n', 'yres\\n', 'Vertical resolution in dpi (dots per inch). Please also see resolution. Cannot directly be changed – use\\nPixmap.set_dpi().\\n', '324\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Type\\n', 'int\\n', 'interpolate\\n', 'An information-only boolean flag set to True if the image will be drawn using “linear interpolation”. If\\nFalse “nearest neighbour sampling” will be used.\\n', 'Type\\n', 'bool\\n', '19.15.1 Supported Input Image Formats\\n', 'The following file types are supported as input to construct pixmaps: BMP, JPEG, GIF, TIFF, JXR, JPX, PNG,\\nPAM and all of the Portable Anymap family (PBM, PGM, PNM, PPM). This support is two-fold:\\n', '1. Directly create a pixmap with Pixmap(filename) or Pixmap(byterray). The pixmap will then have properties as\\ndetermined by the image.\\n', '2. Open such files with fitz.open(...). The result will then appear as a document containing one single page. Cre-\\nating a pixmap of this page offers all the options available in this context: apply a matrix, choose colorspace and\\nalpha, confine the pixmap to a clip area, etc.\\n', 'SVG images are only supported via method 2 above, not directly as pixmaps. But remember: the result of this is a\\nraster image as is always the case with pixmaps1.\\n', '19.15.2 Supported Output Image Formats\\n', 'A number of image output formats are supported. You have the option to either write an image directly to a file\\n(Pixmap.save()), or to generate a bytes object (Pixmap.tobytes()). Both methods accept a string identifying the\\ndesired format (Format column below). Please note that not all combinations of pixmap colorspace, transparency\\nsupport (alpha) and image format are possible.\\n', 'Format\\nColorspaces\\nalpha\\nExtensions\\nDescription\\n', 'jpg, jpeg\\ngray, rgb, cmyk\\nno\\n.jpg, .jpeg\\nJoint Photographic Experts Group\\n', 'pam\\ngray, rgb, cmyk\\nyes\\n.pam\\nPortable Arbitrary Map\\n', 'pbm\\ngray, rgb\\nno\\n.pbm\\nPortable Bitmap\\n', 'pgm\\ngray, rgb\\nno\\n.pgm\\nPortable Graymap\\n', 'png\\ngray, rgb\\nyes\\n.png\\nPortable Network Graphics\\n', 'pnm\\ngray, rgb\\nno\\n.pnm\\nPortable Anymap\\n', 'ppm\\ngray, rgb\\nno\\n.ppm\\nPortable Pixmap\\n', 'ps\\ngray, rgb, cmyk\\nno\\n.ps\\nAdobe PostScript Image\\n', 'psd\\ngray, rgb, cmyk\\nyes\\n.psd\\nAdobe Photoshop Document\\n', 'Note:\\n', '• Not all image file types are supported (or at least common) on all OS platforms. E.g. PAM and the Portable\\nAnymap formats are rare or even unknown on Windows.\\n', '• Especially pertaining to CMYK colorspaces, you can always convert a CMYK pixmap to an RGB pixmap with\\nrgb_pix = fitz.Pixmap(fitz.csRGB, cmyk_pix) and then save that in the desired format.\\n', '1 If you need a vector image from the SVG, you must first convert it to a PDF. Try Document.convert_to_pdf(). If this is not good enough,\\nlook for other SVG-to-PDF conversion tools like the Python packages svglib, CairoSVG, Uniconvertor or the Java solution Apache Batik. Have a\\nlook at our Wiki for more examples.\\n', '19.15. Pixmap\\n325\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• As can be seen, MuPDF’s image support range is different for input and output. Among those supported both\\nways, PNG and JPEG are probably the most popular.\\n', '• We also recommend using “ppm” formats as input to tkinter’s PhotoImage method like this: tkimg = tkin-\\nter.PhotoImage(data=pix.tobytes(“ppm”)) (also see the tutorial). This is very fast (60 times faster than PNG).\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.16 Point\\n', 'Point represents a point in the plane, defined by its x and y coordinates.\\n', 'Attribute / Method\\nDescription\\n', 'Point.distance_to()\\ncalculate distance to point or rect\\n', 'Point.norm()\\nthe Euclidean norm\\n', 'Point.transform()\\ntransform point with a matrix\\n', 'Point.abs_unit\\nsame as unit, but positive coordinates\\n', 'Point.unit\\npoint coordinates divided by abs(point)\\n', 'Point.x\\nthe X-coordinate\\n', 'Point.y\\nthe Y-coordinate\\n', 'Class API\\n', 'class Point\\n', '__init__(self )\\n', '__init__(self, x, y)\\n', '__init__(self, point)\\n', '__init__(self, sequence)\\n', 'Overloaded constructors.\\n', 'Without parameters, Point(0, 0) will be created.\\n', 'With another point specified, a new copy will be created, “sequence” is a Python sequence of\\n2 numbers (see Using Python Sequences as Arguments in PyMuPDF).\\n', 'Parameters\\n', '• x (float) – x coordinate of the point\\n', '• y (float) – y coordinate of the point\\n', 'distance_to(x[, unit])\\n', 'Calculate the distance to x, which may be point_like or rect_like. The distance is given\\nin units of either pixels (default), inches, centimeters or millimeters.\\n', 'Parameters\\n', '326\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• x (point_like,rect_like) – to which to compute the distance.\\n', '• unit (str) – the unit to be measured in. One of “px”, “in”, “cm”, “mm”.\\n', 'Return type\\n', 'float\\n', 'Returns\\n', 'the distance to x. If this is rect_like, then the distance\\n', '• is the length of the shortest line connecting to one of the rectangle sides\\n', '• is calculated to the finite version of it\\n', '• is zero if it contains the point\\n', 'norm()\\n', '• New in version 1.16.0\\n', 'Return the Euclidean norm (the length) of the point as a vector. Equals result of function abs().\\n', 'transform(m)\\n', 'Apply a matrix to the point and replace it with the result.\\n', 'Parameters\\n', 'm (matrix_like) – The matrix to be applied.\\n', 'Return type\\n', 'Point\\n', 'unit\\n', 'Result of dividing each coordinate by norm(point), the distance of the point to (0,0). This is a vector of\\nlength 1 pointing in the same direction as the point does. Its x, resp. y values are equal to the cosine, resp.\\nsine of the angle this vector (and the point itself) has with the x axis.\\n', 'Type\\n', 'Point\\n', '19.16. Point\\n327\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'abs_unit\\n', 'Same as unit above, replacing the coordinates with their absolute values.\\n', 'Type\\n', 'Point\\n', 'x\\n', 'The x coordinate\\n', 'Type\\n', 'float\\n', 'y\\n', 'The y coordinate\\n', 'Type\\n', 'float\\n', 'Note:\\n', '• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also\\nrefer to Using Python Sequences as Arguments in PyMuPDF.\\n', '• Rectangles can be used with arithmetic operators – see chapter Operator Algebra for Geometry Objects.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.17 Quad\\n', 'Represents a four-sided mathematical shape (also called “quadrilateral” or “tetragon”) in the plane, defined as a se-\\nquence of four Point objects ul, ur, ll, lr (conveniently called upper left, upper right, lower left, lower right).\\n', 'Quads can be obtained as results of text search methods (Page.search_for()), and they are used to define text\\nmarker annotations (see e.g. Page.add_squiggly_annot() and friends), and in several draw methods (like Page.\\ndraw_quad() / Shape.draw_quad(), Page.draw_oval()/ Shape.draw_quad()).\\n', 'Note:\\n', '• If the corners of a rectangle are transformed with a rotation, scale or translation Matrix, then the resulting quad\\nis rectangular (= congruent to a rectangle), i.e. all of its corners again enclose angles of 90 degrees. Property\\nQuad.is_rectangular checks whether a quad can be thought of being the result of such an operation.\\n', '• This is not true for all matrices: e.g. shear matrices produce parallelograms, and non-invertible matrices deliver\\n“degenerate” tetragons like triangles or lines.\\n', '• Attribute Quad.rect obtains the enveloping rectangle. Vice versa, rectangles now have attributes Rect.quad,\\nresp. IRect.quad to obtain their respective tetragon versions.\\n', '328\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Methods / Attributes\\nShort Description\\n', 'Quad.transform()\\ntransform with a matrix\\n', 'Quad.morph()\\ntransform with a point and matrix\\n', 'Quad.ul\\nupper left point\\n', 'Quad.ur\\nupper right point\\n', 'Quad.ll\\nlower left point\\n', 'Quad.lr\\nlower right point\\n', 'Quad.is_convex\\ntrue if quad is a convex set\\n', 'Quad.is_empty\\ntrue if quad is an empty set\\n', 'Quad.is_rectangular\\ntrue if quad is congruent to a rectangle\\n', 'Quad.rect\\nsmallest containing Rect\\n', 'Quad.width\\nthe longest width value\\n', 'Quad.height\\nthe longest height value\\n', 'Class API\\n', 'class Quad\\n', '__init__(self )\\n', '__init__(self, ul, ur, ll, lr)\\n', '__init__(self, quad)\\n', '__init__(self, sequence)\\n', 'Overloaded constructors: “ul”, “ur”, “ll”, “lr” stand for point_like objects (the four corners), “sequence”\\nis a Python sequence with four point_like objects.\\n', 'If “quad” is specified, the constructor creates a new copy of it.\\n', 'Without parameters, a quad consisting of 4 copies of Point(0, 0) is created.\\n', 'transform(matrix)\\n', 'Modify the quadrilateral by transforming each of its corners with a matrix.\\n', 'Parameters\\n', 'matrix (matrix_like) – the matrix.\\n', 'morph(fixpoint, matrix)\\n', '(New in version 1.17.0) “Morph” the quad with a matrix-like using a point-like as fixed point.\\n', 'Parameters\\n', '• fixpoint (point_like) – the point.\\n', '• matrix (matrix_like) – the matrix.\\n', 'Returns\\n', 'a new quad (no operation if this is the infinite quad).\\n', 'rect\\n', 'The smallest rectangle containing the quad, represented by the blue area in the following picture.\\n', '19.17. Quad\\n329\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Type\\n', 'Rect\\n', 'ul\\n', 'Upper left point.\\n', 'Type\\n', 'Point\\n', 'ur\\n', 'Upper right point.\\n', 'Type\\n', 'Point\\n', 'll\\n', 'Lower left point.\\n', 'Type\\n', 'Point\\n', 'lr\\n', 'Lower right point.\\n', 'Type\\n', 'Point\\n', 'is_convex\\n', '• New in version 1.16.1\\n', 'Checks if for any two points of the quad, all points on their connecting line also belong to the quad.\\n', '330\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Type\\n', 'bool\\n', 'is_empty\\n', 'True if enclosed area is zero, which means that at least three of the four corners are on the same line. If\\nthis is false, the quad may still be degenerate or not look like a tetragon at all (triangles, parallelograms,\\ntrapezoids, ...).\\n', 'Type\\n', 'bool\\n', 'is_rectangular\\n', 'True if all corner angles are 90 degrees. This implies that the quad is convex and not empty.\\n', 'Type\\n', 'bool\\n', 'width\\n', 'The maximum length of the top and the bottom side.\\n', 'Type\\n', 'float\\n', 'height\\n', 'The maximum length of the left and the right side.\\n', 'Type\\n', 'float\\n', '19.17.1 Remark\\n', 'This class adheres to the sequence protocol, so components can be dealt with via their indices, too. Also refer to Using\\nPython Sequences as Arguments in PyMuPDF.\\n', '19.17.2 Algebra and Containment Checks\\n', 'Starting with v1.19.6, quads can be used in algebraic expressions like the other geometry object – the respective re-\\nstrictions have been lifted. In particular, all the following combinations of containment checking are now possible:\\n', '{Point | IRect | Rect | Quad} in {IRect | Rect | Quad}\\n', 'Please note the following interesting detail:\\n', 'For a rectangle, only its top-left point belongs to it. Since v1.19.0, rectangles are defined to be “open”, such that its\\nbottom and its right edge do not belong to it – including the respective corners. But for quads there exists no such\\nnotion like “openness”, so we have the following somewhat surprising implication:\\n', '>>> rect.br in rect\\nFalse\\n>>> # but:\\n>>> rect.br in rect.quad\\nTrue\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.17. Quad\\n331\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.18 Rect\\n', 'Rect represents a rectangle defined by four floating point numbers x0, y0, x1, y1. They are treated as being coordinates\\nof two diagonally opposite points. The first two numbers are regarded as the “top left” corner P(x0,y0) and P(x1,y1) as the\\n“bottom right” one. However, these two properties need not coincide with their intuitive meanings – read on.\\n', 'The following remarks are also valid for IRect objects:\\n', '• A rectangle in the sense of (Py-) MuPDF (and PDF) always has borders parallel to the x- resp. y-axis. A\\ngeneral orthogonal tetragon is not a rectangle – in contrast to the mathematical definition.\\n', '• The constructing points can be (almost! – see below) anywhere in the plane – they need not even be different,\\nand e.g. “top left” need not be the geometrical “north-western” point.\\n', '• Units are in points, where 72 points is 1 inch.\\n', '• For any given quadruple of numbers, the geometrically “same” rectangle can be defined in four different\\nways:\\n', '1. Rect(P(x0,y0), P(x1,y1))\\n', '2. Rect(P(x1,y1), P(x0,y0))\\n', '3. Rect(P(x0,y1), P(x1,y0))\\n', '4. Rect(P(x1,y0), P(x0,y1))\\n', '(Changed in v1.19.0) Hence some classification:\\n', '• A rectangle is called valid if x0 <= x1 and y0 <= y1 (i.e. the bottom right point is “south-eastern” to the top\\nleft one), otherwise invalid. Of the four alternatives above, only the first is valid. Please take into account, that\\nin MuPDF’s coordinate system, the y-axis is oriented from top to bottom. Invalid rectangles have been called\\ninfinite in earlier versions.\\n', '• A rectangle is called empty if x0 >= x1 or y0 >= y1. This implies, that invalid rectangles are also always\\nempty. And width (resp. height) is set to zero if x0 > x1 (resp. y0 > y1). In previous versions, a rectangle\\nwas empty only if one of width or height was zero.\\n', '• Rectangle coordinates cannot be outside the number range from FZ_MIN_INF_RECT = -2147483648 to\\nFZ_MAX_INF_RECT = 2147483520. Both values have been chosen, because they are the smallest / largest 32bit\\nintegers that survive C float conversion roundtrips. In previous versions there was no limit for coordinate values.\\n', '• There is exactly one “infinite” rectangle, defined by x0 = y0 = FZ_MIN_INF_RECT and x1 = y1 =\\nFZ_MAX_INF_RECT. It contains every other rectangle. It is mainly used for technical purposes – e.g. when a\\nfunction call should ignore a formally required rectangle argument. This rectangle is not empty.\\n', '• Rectangles are (semi-) open: The right and the bottom edges (including the resp. corners) are not considered\\npart of the rectangle. This implies, that only the top-left corner (x0, y0) can ever belong to the rectangle - the\\nother three corners never do. An empty rectangle contains no corners at all.\\n', '• Here is an overview of the changes.\\n', '332\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Notion\\nVersions < 1.19.0\\nVersions 1.19.*\\n', 'empty\\nx0 = x1 or y0 = y1\\nx0 >= x1 or y0 >= y1 – includes invalid rects\\n', 'valid\\nn/a\\nx0 <= x1 and y0 <= y1\\n', 'infinite\\nall rects where x0 > x1 or y1\\n> y0\\n', 'exactly one infinite rect / irect!\\n', 'coordinate\\nvalues\\n', 'all numbers\\nFZ_MIN_INF_RECT <= number <=\\nFZ_MAX_INF_RECT\\n', 'borders,\\ncorners\\n', 'are parts of the rectangle\\nright and bottom corners and edges are outside\\n', '• There are new top level functions defining infinite and standard empty rectangles and quads, see\\n', 'INFINITE_RECT() and friends.\\n', 'Methods / Attributes\\nShort Description\\n', 'Rect.contains()\\nchecks containment of point_likes and rect_likes\\n', 'Rect.get_area()\\ncalculate rectangle area\\n', 'Rect.include_point()\\nenlarge rectangle to also contain a point\\n', 'Rect.include_rect()\\nenlarge rectangle to also contain another one\\n', 'Rect.intersect()\\ncommon part with another rectangle\\n', 'Rect.intersects()\\nchecks for non-empty intersections\\n', 'Rect.morph()\\ntransform with a point and a matrix\\n', 'Rect.torect()\\nthe matrix that transforms to another rectangle\\n', 'Rect.norm()\\nthe Euclidean norm\\n', 'Rect.normalize()\\nmakes a rectangle valid\\n', 'Rect.round()\\ncreate smallest IRect containing rectangle\\n', 'Rect.transform()\\ntransform rectangle with a matrix\\n', 'Rect.bottom_left\\nbottom left point, synonym bl\\n', 'Rect.bottom_right\\nbottom right point, synonym br\\n', 'Rect.height\\nrectangle height\\n', 'Rect.irect\\nequals result of method round()\\n', 'Rect.is_empty\\nwhether rectangle is empty\\n', 'Rect.is_valid\\nwhether rectangle is valid\\n', 'Rect.is_infinite\\nwhether rectangle is infinite\\n', 'Rect.top_left\\ntop left point, synonym tl\\n', 'Rect.top_right\\ntop_right point, synonym tr\\n', 'Rect.quad\\nQuad made from rectangle corners\\n', 'Rect.width\\nrectangle width\\n', 'Rect.x0\\nleft corners’ x coordinate\\n', 'Rect.x1\\nright corners’ x -coordinate\\n', 'Rect.y0\\ntop corners’ y coordinate\\n', 'Rect.y1\\nbottom corners’ y coordinate\\n', 'Class API\\n', 'class Rect\\n', '__init__(self )\\n', '__init__(self, x0, y0, x1, y1)\\n', '__init__(self, top_left, bottom_right)\\n', '19.18. Rect\\n333\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '__init__(self, top_left, x1, y1)\\n', '__init__(self, x0, y0, bottom_right)\\n', '__init__(self, rect)\\n', '__init__(self, sequence)\\n', 'Overloaded constructors: top_left, bottom_right stand for point_like objects, “sequence” is a Python\\nsequence type of 4 numbers (see Using Python Sequences as Arguments in PyMuPDF), “rect” means\\nanother rect_like, while the other parameters mean coordinates.\\n', 'If “rect” is specified, the constructor creates a new copy of it.\\n', 'Without parameters, the empty rectangle Rect(0.0, 0.0, 0.0, 0.0) is created.\\n', 'round()\\n', 'Creates the smallest containing IRect. This is not the same as simply rounding the rectangle’s edges: The\\ntop left corner is rounded upwards and to the left while the bottom right corner is rounded downwards and\\nto the right.\\n', '>>> fitz.Rect(0.5, -0.01, 123.88, 455.123456).round()\\nIRect(0, -1, 124, 456)\\n', '1. If the rectangle is empty, the result is also empty.\\n', '2. Possible paradox: The result may be empty, even if the rectangle is not empty! In such cases, the\\nresult obviously does not contain the rectangle. This is because MuPDF’s algorithm allows for a\\nsmall tolerance (1e-3). Example:\\n', '>>> r = fitz.Rect(100, 100, 200, 100.001)\\n>>> r.is_empty\\n# rect is NOT empty\\n', 'False\\n>>> r.round()\\n# but its irect IS empty!\\n', 'fitz.IRect(100, 100, 200, 100)\\n>>> r.round().is_empty\\nTrue\\n', 'Return type\\n', 'IRect\\n', 'transform(m)\\n', 'Transforms the rectangle with a matrix and replaces the original. If the rectangle is empty or infinite, this\\nis a no-operation.\\n', 'Parameters\\n', 'm (Matrix) – The matrix for the transformation.\\n', 'Return type\\n', 'Rect\\n', 'Returns\\n', 'the smallest rectangle that contains the transformed original.\\n', 'intersect(r)\\n', 'The intersection (common rectangular area, largest rectangle contained in both) of the current rectangle\\nand r is calculated and replaces the current rectangle. If either rectangle is empty, the result is also empty.\\n', '334\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'If r is infinite, this is a no-operation. If the rectangles are (mathematically) disjoint sets, then the result is\\ninvalid. If the result is valid but empty, then the rectangles touch each other in a corner or (part of) a side.\\n', 'Parameters\\n', 'r (Rect) – Second rectangle\\n', 'include_rect(r)\\n', 'The smallest rectangle containing the current one and r is calculated and replaces the current one. If\\neither rectangle is infinite, the result is also infinite. If one is empty, the other one will be taken as the\\nresult.\\n', 'Parameters\\n', 'r (Rect) – Second rectangle\\n', 'include_point(p)\\n', 'The smallest rectangle containing the current one and point p is calculated and replaces the current one.\\nThe infinite rectangle remains unchanged. To create a rectangle containing a series of points, start with\\n(the empty) fitz.Rect(p1, p1) and successively include the remaining points.\\n', 'Parameters\\n', 'p (Point) – Point to include.\\n', 'get_area([unit])\\n', 'Calculate the area of the rectangle and, with no parameter, equals abs(rect). Like an empty rectangle, the\\narea of an infinite rectangle is also zero. So, at least one of fitz.Rect(p1, p2) and fitz.Rect(p2, p1) has a zero\\narea.\\n', 'Parameters\\n', 'unit (str) – Specify required unit: respective squares of px (pixels, default), in (inches),\\ncm (centimeters), or mm (millimeters).\\n', 'Return type\\n', 'float\\n', 'contains(x)\\n', 'Checks whether x is contained in the rectangle. It may be an IRect, Rect, Point or number. If x is an empty\\nrectangle, this is always true. If the rectangle is empty this is always False for all non-empty rectangles\\nand for all points. x in rect and rect.contains(x) are equivalent.\\n', 'Parameters\\n', 'x (rect_like or point_like.) – the object to check.\\n', 'Return type\\n', 'bool\\n', 'intersects(r)\\n', 'Checks whether the rectangle and a rect_like “r” contain a common non-empty Rect. This will always\\nbe False if either is infinite or empty.\\n', 'Parameters\\n', 'r (rect_like) – the rectangle to check.\\n', 'Return type\\n', 'bool\\n', 'torect(rect)\\n', '• New in version 1.19.3\\n', 'Compute the matrix which transforms this rectangle to a given one.\\n', '19.18. Rect\\n335\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'rect (rect_like) – the target rectangle. Must not be empty or infinite.\\n', 'Return type\\n', 'Matrix\\n', 'Returns\\n', 'a matrix mat such that self * mat = rect. Can for example be used to transform\\nbetween the page and the pixmap coordinates. See an example use here How to Use\\nPixmaps: Checking Text Visibility.\\n', 'morph(fixpoint, matrix)\\n', '• New in version 1.17.0\\n', 'Return a new quad after applying a matrix to the rectangle using the fixed point fixpoint.\\n', 'Parameters\\n', '• fixpoint (point_like) – the fixed point.\\n', '• matrix (matrix_like) – the matrix.\\n', 'Returns\\n', 'a new Quad. This a wrapper for the same-named quad method. If infinite, the infinite\\nquad is returned.\\n', 'norm()\\n', '• New in version 1.16.0\\n', 'Return the Euclidean norm of the rectangle treated as a vector of four numbers.\\n', 'normalize()\\n', 'Replace the rectangle with its valid version. This is done by shuffling the rectangle corners. After com-\\npletion of this method, the bottom right corner will indeed be south-eastern to the top left one (but may\\nstill be empty).\\n', 'irect\\n', 'Equals result of method round().\\n', 'top_left\\n', 'tl\\n', 'Equals Point(x0, y0).\\n', 'Type\\n', 'Point\\n', 'top_right\\n', 'tr\\n', 'Equals Point(x1, y0).\\n', 'Type\\n', 'Point\\n', 'bottom_left\\n', 'bl\\n', 'Equals Point(x0, y1).\\n', '336\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Type\\n', 'Point\\n', 'bottom_right\\n', 'br\\n', 'Equals Point(x1, y1).\\n', 'Type\\n', 'Point\\n', 'quad\\n', 'The quadrilateral Quad(rect.tl, rect.tr, rect.bl, rect.br).\\n', 'Type\\n', 'Quad\\n', 'width\\n', 'Width of the rectangle. Equals max(x1 - x0, 0).\\n', 'Return type\\n', 'float\\n', 'height\\n', 'Height of the rectangle. Equals max(y1 - y0, 0).\\n', 'Return type\\n', 'float\\n', 'x0\\n', 'X-coordinate of the left corners.\\n', 'Type\\n', 'float\\n', 'y0\\n', 'Y-coordinate of the top corners.\\n', 'Type\\n', 'float\\n', 'x1\\n', 'X-coordinate of the right corners.\\n', 'Type\\n', 'float\\n', 'y1\\n', 'Y-coordinate of the bottom corners.\\n', 'Type\\n', 'float\\n', 'is_infinite\\n', 'True if this is the infinite rectangle.\\n', 'Type\\n', 'bool\\n', '19.18. Rect\\n337\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'is_empty\\n', 'True if rectangle is empty.\\n', 'Type\\n', 'bool\\n', 'is_valid\\n', 'True if rectangle is valid.\\n', 'Type\\n', 'bool\\n', 'Note:\\n', '• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also\\nrefer to Using Python Sequences as Arguments in PyMuPDF.\\n', '• Rectangles can be used with arithmetic operators – see chapter Operator Algebra for Geometry Objects.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.19 Shape\\n', 'This class allows creating interconnected graphical elements on a PDF page. Its methods have the same meaning and\\nname as the corresponding Page methods.\\n', 'In fact, each Page draw method is just a convenience wrapper for (1) one shape draw method, (2) the Shape.finish()\\nmethod, and (3) the Shape.commit() method. For page text insertion, only the Shape.commit() method is invoked.\\nIf many draw and text operations are executed for a page, you should always consider using a Shape object.\\n', 'Several draw methods can be executed in a row and each one of them will contribute to one drawing. Once the drawing is\\ncomplete, the Shape.finish() method must be invoked to apply color, dashing, width, morphing and other attributes.\\n', 'Draw methods of this class (and Shape.insert_textbox()) are logging the area they are covering in a rectangle\\n(Shape.rect). This property can for instance be used to set Page.cropbox_position.\\n', 'Text insertions Shape.insert_text() and Shape.insert_textbox() implicitly execute a “finish” and therefore\\nonly require Shape.commit() to become effective. As a consequence, both include parameters for controlling prop-\\nerties like colors, etc.\\n', '338\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Method / Attribute\\nDescription\\n', 'Shape.commit()\\nupdate the page’s contents\\n', 'Shape.draw_bezier()\\ndraw a cubic Bezier curve\\n', 'Shape.draw_circle()\\ndraw a circle around a point\\n', 'Shape.draw_curve()\\ndraw a cubic Bezier using one helper point\\n', 'Shape.draw_line()\\ndraw a line\\n', 'Shape.draw_oval()\\ndraw an ellipse\\n', 'Shape.draw_polyline()\\nconnect a sequence of points\\n', 'Shape.draw_quad()\\ndraw a quadrilateral\\n', 'Shape.draw_rect()\\ndraw a rectangle\\n', 'Shape.draw_sector()\\ndraw a circular sector or piece of pie\\n', 'Shape.draw_squiggle()\\ndraw a squiggly line\\n', 'Shape.draw_zigzag()\\ndraw a zigzag line\\n', 'Shape.finish()\\nfinish a set of draw commands\\n', 'Shape.insert_text()\\ninsert text lines\\n', 'Shape.insert_textbox()\\nfit text into a rectangle\\n', 'Shape.doc\\nstores the page’s document\\n', 'Shape.draw_cont\\ndraw commands since last Shape.finish()\\n', 'Shape.height\\nstores the page’s height\\n', 'Shape.lastPoint\\nstores the current point\\n', 'Shape.page\\nstores the owning page\\n', 'Shape.rect\\nrectangle surrounding drawings\\n', 'Shape.text_cont\\naccumulated text insertions\\n', 'Shape.totalcont\\naccumulated string to be stored in contents\\n', 'Shape.width\\nstores the page’s width\\n', 'Class API\\n', 'class Shape\\n', '__init__(self, page)\\n', 'Create a new drawing. During importing PyMuPDF, the fitz.Page object is being given the convenience\\nmethod new_shape() to construct a Shape object. During instantiation, a check will be made whether we\\ndo have a PDF page. An exception is otherwise raised.\\n', 'Parameters\\n', 'page (Page) – an existing page of a PDF document.\\n', 'draw_line(p1, p2)\\n', 'Draw a line from point_like objects p1 to p2.\\n', 'Parameters\\n', '• p1 (point_like) – starting point\\n', '• p2 (point_like) – end point\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'the end point, p2.\\n', 'draw_squiggle(p1, p2, breadth=2)\\n', 'Draw a squiggly (wavy, undulated) line from point_like objects p1 to p2. An integer number of full\\nwave periods will always be drawn, one period having a length of 4 * breadth. The breadth parameter will\\n', '19.19. Shape\\n339\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'be adjusted as necessary to meet this condition. The drawn line will always turn “left” when leaving p1\\nand always join p2 from the “right”.\\n', 'Parameters\\n', '• p1 (point_like) – starting point\\n', '• p2 (point_like) – end point\\n', '• breadth (float) – the amplitude of each wave. The condition 2 * breadth <\\nabs(p2 - p1) must be true to fit in at least one wave. See the following picture,\\nwhich shows two points connected by one full period.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'the end point, p2.\\n', 'Here is an example of three connected lines, forming a closed, filled triangle. Little arrows indicate the\\nstroking direction.\\n', '>>> import fitz\\n>>> doc=fitz.open()\\n>>> page=doc.new_page()\\n>>> r = fitz.Rect(100, 100, 300, 200)\\n>>> shape=page.new_shape()\\n>>> shape.draw_squiggle(r.tl, r.tr)\\n>>> shape.draw_squiggle(r.tr, r.br)\\n>>> shape.draw_squiggle(r.br, r.tl)\\n>>> shape.finish(color=(0, 0, 1), fill=(1, 1, 0))\\n>>> shape.commit()\\n>>> doc.save(""x.pdf"")\\n', '340\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: Waves drawn are not trigonometric (sine / cosine). If you need that, have a look at draw.py.\\n', 'draw_zigzag(p1, p2, breadth=2)\\n', 'Draw a zigzag line from point_like objects p1 to p2.\\nOtherwise works exactly like Shape.\\ndraw_squiggle().\\n', 'Parameters\\n', '• p1 (point_like) – starting point\\n', '• p2 (point_like) – end point\\n', '• breadth (float) – the amplitude of the movement. The condition 2 * breadth <\\nabs(p2 - p1) must be true to fit in at least one period.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'the end point, p2.\\n', 'draw_polyline(points)\\n', 'Draw several connected lines between points contained in the sequence points. This can be used for cre-\\nating arbitrary polygons by setting the last item equal to the first one.\\n', 'Parameters\\n', 'points (sequence) – a sequence of point_like objects. Its length must at least be 2\\n(in which case it is equivalent to draw_line()).\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'points[-1] – the last point in the argument sequence.\\n', 'draw_bezier(p1, p2, p3, p4)\\n', 'Draw a standard cubic Bézier curve from p1 to p4, using p2 and p3 as control points.\\n', '19.19. Shape\\n341\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'All arguments are point_like s.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'the end point, p4.\\n', 'Note: The points do not need to be different – experiment a bit with some of them being equal!\\n', 'Example:\\n', 'draw_oval(tetra)\\n', 'Draw an “ellipse” inside the given tetragon (quadrilateral). If it is a square, a regular circle is drawn, a\\ngeneral rectangle will result in an ellipse. If a quadrilateral is used instead, a plethora of shapes can be the\\nresult.\\n', 'The drawing starts and ends at the middle point of the line bottom-left -> top-left corners in an\\nanti-clockwise movement.\\n', 'Parameters\\n', 'tetra (rect_like,quad_like) – rect_like or quad_like.\\n', 'Changed in version 1.14.5: Quads are now also supported.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'the middle point of line rect.bl -> rect.tl, or resp. quad.ll -> quad.ul. Look\\nat just a few examples here, or at the quad-show?.py scripts in the PyMuPDF-Utilities\\nrepository.\\n', '342\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'draw_circle(center, radius)\\n', 'Draw a circle given its center and radius. The drawing starts and ends at point center - (radius, 0)\\nin an anti-clockwise movement. This point is the middle of the enclosing square’s left side.\\n', 'This is a shortcut for draw_sector(center, start, 360, fullSector=False). To draw the same\\ncircle in a clockwise movement, use -360 as degrees.\\n', 'Parameters\\n', '• center (point_like) – the center of the circle.\\n', '• radius (float) – the radius of the circle. Must be positive.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'Point(center.x - radius, center.y).\\n', 'draw_curve(p1, p2, p3)\\n', 'A special case of draw_bezier(): Draw a cubic Bezier curve from p1 to p3. On each of the two lines p1 ->\\np2 and p3 -> p2 one control point is generated. Both control points will therefore be on the same side\\nof the line p1 -> p3. This guaranties that the curve’s curvature does not change its sign. If the lines to\\np2 intersect with an angle of 90 degrees, then the resulting curve is a quarter ellipse (resp. quarter circle,\\nif of same length).\\n', 'All arguments are point_like.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'the\\nend\\npoint,\\np3.\\nThe\\nfollowing\\nis\\na\\nfilled\\nquarter\\nel-\\nlipse\\nsegment.\\nThe\\nyellow\\narea\\nis\\noriented\\nclockwise:\\n', 'draw_sector(center, point, angle, fullSector=True)\\n', 'Draw a circular sector, optionally connecting the arc to the circle’s center (like a piece of pie).\\n', 'Parameters\\n', '19.19. Shape\\n343\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• center (point_like) – the center of the circle.\\n', '• point (point_like) – one of the two end points of the pie’s arc segment. The\\nother one is calculated from the angle.\\n', '• angle (float) – the angle of the sector in degrees. Used to calculate the other end\\npoint of the arc. Depending on its sign, the arc is drawn anti-clockwise (positive)\\nor clockwise.\\n', '• fullSector (bool) – whether to draw connecting lines from the ends of the arc to\\nthe circle center. If a fill color is specified, the full “pie” is colored, otherwise just\\nthe sector.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'the other end point of the arc.\\nCan be used as starting point for a fol-\\nlowing\\ninvocation\\nto\\ncreate\\nlogically\\nconnected\\npies\\ncharts.\\nExamples:\\n', 'draw_rect(rect, *, radius=None)\\n', '• Changed in v1.22.0: Added parameter radius.\\n', 'Draw a rectangle. The drawing starts and ends at the top-left corner in an anti-clockwise movement.\\n', 'Parameters\\n', '• rect (rect_like) – where to put the rectangle on the page.\\n', '• radius (multiple) – draw rounded rectangle corners. If not None, specifies the\\nradius of the curvature as a percentage of a rectangle side length. This must one\\nor (a tuple of) two floats 0 < radius <= 0.5, where 0.5 corresponds to 50% of\\nthe respective side. If a float, the radius of the curvature is computed as radius\\n* min(width, height), drawing the corner’s perimeter as a quarter circle. If a\\ntuple (rx, ry) is given, then the curvature is asymmetric with respect to the hor-\\nizontal and vertical directions. A value of radius=(0.5, 0.5) draws an ellipse.\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'top-left corner of the rectangle.\\n', 'draw_quad(quad)\\n', 'Draw a quadrilateral. The drawing starts and ends at the top-left corner (Quad.ul) in an anti-clockwise\\nmovement. It is a shortcut of Shape.draw_polyline() with the argument (ul, ll, lr, ur, ul).\\n', 'Parameters\\n', 'quad (quad_like) – where to put the tetragon on the page.\\n', '344\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'Point\\n', 'Returns\\n', 'Quad.ul.\\n', 'finish(width=1, color=None, fill=None, lineCap=0, lineJoin=0, dashes=None, closePath=True,\\neven_odd=False, morph=(fixpoint, matrix), stroke_opacity=1, fill_opacity=1, oc=0)\\n', 'Finish a set of draw*() methods by applying Common Parameters to all of them.\\n', 'It has no effect on Shape.insert_text() and Shape.insert_textbox().\\n', 'The method also supports morphing the compound drawing using Point fixpoint and Matrix matrix.\\n', 'Parameters\\n', '• morph (sequence) – morph the text or the compound drawing around some arbi-\\ntrary Point fixpoint by applying Matrix matrix to it. This implies that fixpoint is a\\nfixed point of this operation: it will not change its position. Default is no morphing\\n(None). The matrix can contain any values in its first 4 components, matrix.e ==\\nmatrix.f == 0 must be true, however. This means that any combination of scaling,\\nshearing, rotating, flipping, etc. is possible, but translations are not.\\n', '• stroke_opacity (float) – (new in v1.18.1) set transparency for stroke colors.\\nValue < 0 or > 1 will be ignored. Default is 1 (intransparent).\\n', '• fill_opacity (float) – (new in v1.18.1) set transparency for fill colors. Default\\nis 1 (intransparent).\\n', '• even_odd (bool) – request the “even-odd rule” for filling operations. Default\\nis False, so that the “nonzero winding number rule” is used. These rules are\\nalternative methods to apply the fill color where areas overlap. Only with fairly\\ncomplex shapes a different behavior is to be expected with these rules. For an in-\\ndepth explanation, see Adobe PDF References, pp. 137 ff. Here is an example to\\ndemonstrate the difference.\\n', '• oc (int) – (new in v1.18.4) the xref number of an OCG or OCMD to make this\\ndrawing conditionally displayable.\\n', '19.19. Shape\\n345\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: For each pixel in a shape, the following will happen:\\n', '1. Rule “even-odd” counts, how many areas contain the pixel. If this count is odd, the pixel is regarded\\ninside the shape, if it is even, the pixel is outside.\\n', '2. The default rule “nonzero winding” in addition looks at the “orientation” of each area containing\\nthe pixel: it adds 1 if an area is drawn anti-clockwise and it subtracts 1 for clockwise areas. If the\\nresult is zero, the pixel is regarded outside, pixels with a non-zero count are inside the shape.\\n', 'Of the four shapes in above image, the top two each show three circles drawn in standard manner (anti-\\nclockwise, look at the arrows). The lower two shapes contain one (the top-left) circle drawn clockwise.\\nAs can be seen, area orientation is irrelevant for the right column (even-odd rule).\\n', ""insert_text(point, text, fontsize=11, fontname='helv', fontfile=None, set_simple=False,\\nencoding=TEXT_ENCODING_LATIN, color=None, lineheight=None, fill=None,\\nrender_mode=0, border_width=1, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1,\\noc=0)\\n"", 'Insert text lines start at point.\\n', '346\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', '• point (point_like) – the bottom-left position of the first character of text\\nin pixels.\\nIt is important to understand, how this works in conjunction with\\nthe rotate parameter.\\nPlease have a look at the following picture.\\nThe small\\nred dots indicate the positions of point in each of the four possible cases.\\n', '• text (str/sequence) – the text to be inserted. May be specified as either a string\\ntype or as a sequence type. For sequences, or strings containing line breaks n,\\nseveral lines will be inserted. No care will be taken if lines are too wide, but the\\nnumber of inserted lines will be limited by “vertical” space on the page (in the\\nsense of reading direction as established by the rotate parameter). Any rest of text\\nis discarded – the return code however contains the number of inserted lines.\\n', '• lineheight (float) – a factor to override the line height calculated from font\\nproperties. If not None, a line height of fontsize * lineheight will be used.\\n', '• stroke_opacity (float) – (new in v1.18.1) set transparency for stroke colors (the\\nborder line of a character). Only 0 <= value <= 1 will be considered. Default\\nis 1 (intransparent).\\n', '• fill_opacity (float) – (new in v1.18.1) set transparency for fill colors. Default\\nis 1 (intransparent). Use this value to control transparency of the text color. Stroke\\nopacity only affects the border line of characters.\\n', '• rotate (int) – determines whether to rotate the text. Acceptable values are multi-\\nples of 90 degrees. Default is 0 (no rotation), meaning horizontal text lines oriented\\nfrom left to right. 180 means text is shown upside down from right to left. 90\\nmeans anti-clockwise rotation, text running upwards. 270 (or -90) means clock-\\nwise rotation, text running downwards. In any case, point specifies the bottom-left\\ncoordinates of the first character’s rectangle. Multiple lines, if present, always fol-\\nlow the reading direction established by this parameter. So line 2 is located above\\nline 1 in case of rotate = 180, etc.\\n', '• oc (int) – (new in v1.18.4) the xref number of an OCG or OCMD to make this text\\nconditionally displayable.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'number of lines inserted.\\n', 'For a description of the other parameters see Common Parameters.\\n', '19.19. Shape\\n347\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', ""insert_textbox(rect, buffer, fontsize=11, fontname='helv', fontfile=None, set_simple=False,\\nencoding=TEXT_ENCODING_LATIN, color=None, fill=None, render_mode=0,\\nborder_width=1, expandtabs=8, align=TEXT_ALIGN_LEFT, rotate=0, lineheight=None,\\nmorph=None, stroke_opacity=1, fill_opacity=1, oc=0)\\n"", 'PDF only: Insert text into the specified rectangle. The text will be split into lines and words and then filled\\ninto the available space, starting from one of the four rectangle corners, which depends on rotate. Line\\nfeeds and multiple space will be respected.\\n', 'Parameters\\n', '• rect (rect_like) – the area to use. It must be finite and not empty.\\n', '• buffer (str/sequence) – the text to be inserted. Must be specified as a string or\\na sequence of strings. Line breaks are respected also when occurring in a sequence\\nentry.\\n', '• align (int) – align each text line. Default is 0 (left). Centered, right and justified\\nare the other supported options, see Text Alignment. Please note that the effect of\\nparameter value TEXT_ALIGN_JUSTIFY is only achievable with “simple” (single-\\nbyte) fonts (including the PDF Base 14 Fonts).\\n', '• lineheight (float) – a factor to override the line height calculated from font\\nproperties. If not None, a line height of fontsize * lineheight will be used.\\n', 'arg int expandtabs\\n', 'controls\\nhandling\\nof\\ntab\\ncharacters\\n\\\\t\\nusing\\nthe\\nstring.\\nexpandtabs() method per each line.\\n', '• stroke_opacity (float) – (new in v1.18.1) set transparency for stroke colors.\\nNegative values and values > 1 will be ignored. Default is 1 (intransparent).\\n', '• fill_opacity (float) – (new in v1.18.1) set transparency for fill colors. Default\\nis 1 (intransparent). Use this value to control transparency of the text color. Stroke\\nopacity only affects the border line of characters.\\n', '• rotate (int) – requests text to be rotated in the rectangle. This value must be a\\nmultiple of 90 degrees. Default is 0 (no rotation). Effectively, the four values 0, 90,\\n180 and 270 (= -90) are processed, each causing the text to start in a different rect-\\nangle corner. Bottom-left is 90, bottom-right is 180, and -90 / 270 is top-right.\\nSee the example how text is filled in a rectangle. This argument takes precedence\\nover morphing. See the second example, which shows text first rotated left by 90\\ndegrees and then the whole rectangle rotated clockwise around is lower left corner.\\n', '• oc (int) – (new in v1.18.4) the xref number of an OCG or OCMD to make this text\\nconditionally displayable.\\n', 'Return type\\n', 'float\\n', 'Returns\\n', 'If positive or zero: successful execution. The value returned is the unused rectangle\\nline space in pixels. This may safely be ignored – or be used to optimize the rectangle,\\nposition subsequent items, etc.\\n', 'If negative: no execution. The value returned is the space deficit to store text lines.\\nEnlarge rectangle, decrease fontsize, decrease text amount, etc.\\n', '348\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'For a description of the other parameters see Common Parameters.\\n', 'commit(overlay=True)\\n', 'Update the page’s contents with the accumulated drawings, followed by any text insertions. If text over-\\nlaps drawings, it will be written on top of the drawings.\\n', 'Warning: Do not forget to execute this method:\\n', 'If a shape is not committed, it will be ignored and the page will not be changed!\\n', 'The method will reset attributes Shape.rect, lastPoint, draw_cont, text_cont and totalcont.\\nAfterwards, the shape object can be reused for the same page.\\n', 'Parameters\\n', 'overlay (bool) – determine whether to put content in foreground (default) or back-\\nground. Relevant only, if the page already has a non-empty contents object.\\n', '———- Attributes ———-\\n', 'doc\\n', 'For reference only: the page’s document.\\n', 'Type\\n', 'Document\\n', 'page\\n', 'For reference only: the owning page.\\n', 'Type\\n', 'Page\\n', '19.19. Shape\\n349\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'height\\n', 'Copy of the page’s height\\n', 'Type\\n', 'float\\n', 'width\\n', 'Copy of the page’s width.\\n', 'Type\\n', 'float\\n', 'draw_cont\\n', 'Accumulated command buffer for draw methods since last finish. Every finish method will append its\\ncommands to Shape.totalcont.\\n', 'Type\\n', 'str\\n', 'text_cont\\n', 'Accumulated text buffer. All text insertions go here. This buffer will be appended to totalcont Shape.\\ncommit(), so that text will never be covered by drawings in the same Shape.\\n', 'Type\\n', 'str\\n', 'rect\\n', 'Rectangle surrounding drawings. This attribute is at your disposal and may be changed at any time.\\nIts value is set to None when a shape is created or committed.\\nEvery draw* method, and Shape.\\ninsert_textbox() update this property (i.e. enlarge the rectangle as needed). Morphing operations,\\nhowever (Shape.finish(), Shape.insert_textbox()) are ignored.\\n', 'A typical use of this attribute would be setting Page.cropbox_position to this value, when you are\\ncreating shapes for later or external use. If you have not manipulated the attribute yourself, it should\\nreflect a rectangle that contains all drawings so far.\\n', 'If you have used morphing and need a rectangle containing the morphed objects, use the following code:\\n', '>>> # assuming ...\\n>>> morph = (point, matrix)\\n>>> # ... recalculate the shape rectangle like so:\\n>>> shape.rect = (shape.rect - fitz.Rect(point, point)) * ~matrix + fitz.\\n', '˓→Rect(point, point)\\n', 'Type\\n', 'Rect\\n', 'totalcont\\n', 'Total accumulated command buffer for draws and text insertions. This will be used by Shape.commit().\\n', 'Type\\n', 'str\\n', 'lastPoint\\n', 'For reference only: the current point of the drawing path. It is None at Shape creation and after each finish()\\nand commit().\\n', 'Type\\n', 'Point\\n', '350\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.19.1 Usage\\n', 'A drawing object is constructed by shape = page.new_shape(). After this, as many draw, finish and text insertions\\nmethods as required may follow. Each sequence of draws must be finished before the drawing is committed. The\\noverall coding pattern looks like this:\\n', '>>> shape = page.new_shape()\\n>>> shape.draw1(...)\\n>>> shape.draw2(...)\\n>>> ...\\n>>> shape.finish(width=..., color=..., fill=..., morph=...)\\n>>> shape.draw3(...)\\n>>> shape.draw4(...)\\n>>> ...\\n>>> shape.finish(width=..., color=..., fill=..., morph=...)\\n>>> ...\\n>>> shape.insert_text*\\n>>> ...\\n>>> shape.commit()\\n>>> ....\\n', 'Note:\\n', '1. Each finish() combines the preceding draws into one logical shape, giving it common colors, line width, morph-\\ning, etc. If closePath is specified, it will also connect the end point of the last draw with the starting point of the\\nfirst one.\\n', '2. To successfully create compound graphics, let each draw method use the end point of the previous one as its\\nstarting point. In the above pseudo code, draw2 should hence use the returned Point of draw1 as its starting\\npoint. Failing to do so, would automatically start a new path and finish() may not work as expected (but it won’t\\ncomplain either).\\n', '3. Text insertions may occur anywhere before the commit (they neither touch Shape.draw_cont nor Shape.\\nlastPoint). They are appended to Shape.totalcont directly, whereas draws will be appended by Shape.finish.\\n', '4. Each commit takes all text insertions and shapes and places them in foreground or background on the page – thus\\nproviding a way to control graphical layers.\\n', '5. Only commit will update the page’s contents, the other methods are basically string manipulations.\\n', '19.19.2 Examples\\n', '1. Create a full circle of pieces of pie in different colors:\\n', 'shape = page.new_shape()\\n# start a new shape\\n', 'cols = (...)\\n# a sequence of RGB color triples\\n', 'pieces = len(cols)\\n# number of pieces to draw\\n', 'beta = 360. / pieces\\n# angle of each piece of pie\\n', 'center = fitz.Point(...)\\n# center of the pie\\n', 'p0 = fitz.Point(...)\\n# starting point\\n', 'for i in range(pieces):\\np0 = shape.draw_sector(center, p0, beta,\\nfullSector=True) # draw piece\\n', '(continues on next page)\\n', '19.19. Shape\\n351\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '# now fill it but do not connect ends of the arc\\nshape.finish(fill=cols[i], closePath=False)\\nshape.commit()\\n# update the page\\n', 'Here is an example for 5 colors:\\n', '2. Create a regular n-edged polygon (fill yellow, red border). We use draw_sector() only to calculate the points on\\nthe circumference, and empty the draw command buffer again before drawing the polygon:\\n', 'shape = page.new_shape() # start a new shape\\nbeta = -360.0 / n\\n# our angle, drawn clockwise\\n', 'center = fitz.Point(...)\\n# center of circle\\n', 'p0 = fitz.Point(...)\\n# start here (1st edge)\\n', 'points = [p0]\\n# store polygon edges\\n', 'for i in range(n):\\n# calculate the edges\\n', 'p0 = shape.draw_sector(center, p0, beta)\\npoints.append(p0)\\nshape.draw_cont = """"\\n# do not draw the circle sectors\\n', 'shape.draw_polyline(points)\\n# draw the polygon\\n', 'shape.finish(color=(1,0,0), fill=(1,1,0), closePath=False)\\nshape.commit()\\n', 'Here is the polygon for n = 7:\\n', '352\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.19.3 Common Parameters\\n', 'fontname (str)\\n', 'In general, there are three options:\\n', '1. Use one of the standard PDF Base 14 Fonts. In this case, fontfile must not be specified and “Hel-\\nvetica” is used if this parameter is omitted, too.\\n', '2. Choose a font already in use by the page. Then specify its reference name prefixed with a slash “/”,\\nsee example below.\\n', '3. Specify a font file present on your system. In this case choose an arbitrary, but new name for this\\nparameter (without “/” prefix).\\n', 'If inserted text should re-use one of the page’s fonts, use its reference name appearing in Page.\\nget_fonts() like so:\\n', 'Suppose the font list has the item [1024, 0, ‘Type1’, ‘NimbusMonL-Bold’, ‘R366’], then specify fontname\\n= “/R366”, fontfile = None to use font NimbusMonL-Bold.\\n', 'fontfile (str)\\n', 'File path of a font existing on your computer. If you specify fontfile, make sure you use a fontname not\\noccurring in the above list. This new font will be embedded in the PDF upon doc.save(). Similar to new\\nimages, a font file will be embedded only once. A table of MD5 codes for the binary font contents is used\\nto ensure this.\\n', 'set_simple (bool)\\n', 'Fonts installed from files are installed as Type0 fonts by default. If you want to use 1-byte characters only,\\nset this to true. This setting cannot be reverted. Subsequent changes are ignored.\\n', 'fontsize (float)\\n', 'Font size of text, see: fontsize.\\n', 'dashes (str)\\n', 'Causes lines to be drawn dashed. The general format is ""[n m] p"" of (up to) 3 floats denoting pixel\\nlengths. n is the dash length, m (optional) is the subsequent gap length, and p (the “phase” - required,\\neven if 0!) specifies how many pixels should be skipped before the dashing starts. If m is omitted, it defaults\\nto n.\\n', 'A continuous line (no dashes) is drawn with ""[] 0"" or None or """". Examples:\\n', '• Specifying ""[3 4] 0"" means dashes of 3 and gaps of 4 pixels following each other.\\n', '• ""[3 3] 0"" and ""[3] 0"" do the same thing.\\n', 'For (the rather complex) details on how to achieve sophisticated dashing effects, see Adobe PDF Refer-\\nences, page 217.\\n', 'color / fill (list, tuple)\\n', '19.19. Shape\\n353\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Stroke and fill colors can be specified as tuples or list of of floats from 0 to 1. These sequences must have a\\nlength of 1 (GRAY), 3 (RGB) or 4 (CMYK). For GRAY colorspace, a single float instead of the unwieldy\\n(float,) or [float] is also accepted. Accept (default) or use None to not use the parameter.\\n', 'To simplify color specification, method getColor() in fitz.utils may be used to get predefined RGB color\\ntriples by name. It accepts a string as the name of the color and returns the corresponding triple. The\\nmethod knows over 540 color names – see section Color Database.\\n', 'Please note that the term color usually means “stroke” color when used in conjunction with fill color.\\n', 'If letting default a color parameter to None, then no resp. color selection command will be generated. If fill\\nand color are both None, then the drawing will contain no color specification. But it will still be “stroked”,\\nwhich causes PDF’s default color “black” be used by Adobe Acrobat and all other viewers.\\n', 'stroke_opacity / fill_opacity (floats)\\n', 'Both values are floats in range [0, 1]. Negative values or values > 1 will ignored (in most cases). Both set\\nthe transparency such that a value 0.5 corresponds to 50% transparency, 0 means invisible and 1 means\\nintransparent. For e.g. a rectangle the stroke opacity applies to its border and fill opacity to its interior.\\n', 'For text insertions (Shape.insert_text() and Shape.insert_textbox()), use fill_opacity for the\\ntext. At first sight this seems surprising, but it becomes obvious when you look further down to ren-\\nder_mode: fill_opacity applies to the yellow and stroke_opacity applies to the blue color.\\n', 'border_width (float)\\n', 'Set the border width for text insertions. New in v1.14.9. Relevant only if the render mode argument is\\nused with a value greater zero.\\n', 'render_mode (int)\\n', 'New in version 1.14.9: Integer in range(8) which controls the text appearance (Shape.insert_text()\\nand Shape.insert_textbox()). See page 246 in Adobe PDF References. New in v1.14.9. These\\nmethods now also differentiate between fill and stroke colors.\\n', '• For default 0, only the text fill color is used to paint the text. For backward compatibility, using the\\ncolor parameter instead also works.\\n', '• For render mode 1, only the border of each glyph (i.e. text character) is drawn with a thickness\\nas set in argument border_width. The color chosen in the color argument is taken for this, the fill\\nparameter is ignored.\\n', '• For render mode 2, the glyphs are filled and stroked, using both color parameters and the specified\\nborder width. You can use this value to simulate bold text without using another font: choose the\\nsame value for fill and color and an appropriate value for border_width.\\n', '• For render mode 3, the glyphs are neither stroked nor filled: the text becomes invisible.\\n', 'The following examples use border_width=0.3, together with a fontsize of 15. Stroke color is blue and fill\\ncolor is some yellow.\\n', '354\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'overlay (bool)\\n', 'Causes the item to appear in foreground (default) or background.\\n', 'morph (sequence)\\n', 'Causes “morphing” of either a shape, created by the draw*() methods, or the text inserted by page methods\\ninsert_textbox() / insert_text(). If not None, it must be a pair (fixpoint, matrix), where fixpoint is a Point\\nand matrix is a Matrix. The matrix can be anything except translations, i.e. matrix.e == matrix.f == 0\\nmust be true. The point is used as a fixed point for the matrix operation. For example, if matrix is a rotation\\nor scaling, then fixpoint is its center. Similarly, if matrix is a left-right or up-down flip, then the mirroring\\naxis will be the vertical, respectively horizontal line going through fixpoint, etc.\\n', 'Note:\\nSeveral methods contain checks whether the to be inserted items will actually fit into the page\\n(like Shape.insert_text(), or Shape.draw_rect()). For the result of a morphing operation there is\\nhowever no such guaranty: this is entirely the programmer’s responsibility.\\n', 'lineCap (deprecated: “roundCap”) (int)\\n', 'Controls the look of line ends. The default value 0 lets each line end at exactly the given coordinate in a\\nsharp edge. A value of 1 adds a semi-circle to the ends, whose center is the end point and whose diameter\\nis the line width. Value 2 adds a semi-square with an edge length of line width and a center of the line end.\\n', 'Changed in version 1.14.15\\n', 'lineJoin (int)\\n', 'New in version 1.14.15: Controls the way how line connections look like. This may be either as a sharp\\nedge (0), a rounded join (1), or a cut-off edge (2, “butt”).\\n', 'closePath (bool)\\n', 'Causes the end point of a drawing to be automatically connected with the starting point (by a straight line).\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.19. Shape\\n355\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.20 Story\\n', '• New in v1.21.0\\n', 'Method / Attribute\\nShort Description\\n', 'Story.reset()\\n“rewind” story output to its beginning\\n', 'Story.place()\\ncompute story content to fit in provided rectangle\\n', 'Story.draw()\\nwrite the computed content to current page\\n', 'Story.element_positions()\\ncallback function logging currently processed story content\\n', 'Story.body\\nthe story’s underlying body\\n', 'Story.write()\\nplaces and draws Story to a DocumentWriter\\n', 'Story.write_stabilized()\\niterative layout of html content to a DocumentWriter\\n', 'Story.write_with_links()\\nlike write() but also creates PDF links\\n', 'Story.write_stabilized_with_links()\\nlike write_stabilized() but also creates PDF links\\n', 'Story.fit()\\nFinds optimal rect that contains the story self.\\n', 'Story.fit_scale()\\nStory.fit_height()\\nStory.fit_width()\\n', 'Class API\\n', 'class Story\\n', '__init__(self, html=None, user_css=None, em=12, archive=None)\\n', 'Create a story, optionally providing HTML and CSS source. The HTML is parsed, and held within the\\nStory as a DOM (Document Object Model).\\n', 'This structure may be modified: content (text, images) may be added, copied, modified or removed by\\nusing methods of the Xml class.\\n', 'When finished, the story can be written to any device; in typical usage the device may be provided by a\\nDocumentWriter to make new pages.\\n', 'Here are some general remarks:\\n', '• The Story constructor parses and validates the provided HTML to create the DOM.\\n', '• PyMuPDF provides a number of ways to manipulate the HTML source by providing access to the\\nnodes of the underlying DOM. Documents can be completely built from ground up programmati-\\ncally, or the existing DOM can be modified pretty arbitrarily. For details of this interface, please see\\nthe Xml class.\\n', '• If no (or no more) changes to the DOM are required, the story is ready to be laid out and to be fed\\nto a series of devices (typically devices provided by a DocumentWriter to produce new pages).\\n', '• The next step is to place the story and write it out. This can either be done directly, by looping around\\ncalling place() and draw(), or alternatively, the looping can handled for you using the write()\\nor write_stabilised() methods. Which method you choose is largely a matter of taste.\\n', '– To work in the first of these styles, the following loop should be used:\\n', '1. Obtain a suitable device to write to; typically by requesting a new, empty page from a\\n', 'DocumentWriter.\\n', '2. Determine one or more rectangles on the page, that should receive story data. Note that\\nnot every page needs to have the same set of rectangles.\\n', '356\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '3. Pass each rectangle to the story to place it, learning what part of that rectangle has been\\nfilled, and whether there is more story data that did not fit. This step can be repeated\\nseveral times with adjusted rectangles until the caller is happy with the results.\\n', '4. Optionally, at this point, we can request details of where interesting items have been\\nplaced, by calling the element_positions() method. Items are deemed to be inter-\\nesting if their integer heading attribute is a non-zero (corresponding to HTML tags h1\\n- h6), if their id attribute is not None (corresponding to HTML tag id), or if their href\\nattribute is not None (responding to HTML tag href ). This can conveniently be used for\\nautomatic generation of a Table of Contents, an index of images or the like.\\n', '5. Next, draw that rectangle out to the device with the draw() method.\\n', '6. If the most recent call to place() indicated that all the story data had fitted, stop now.\\n', '7. Otherwise, we can loop back. If there are more rectangles to be placed on the current\\ndevice (page), we jump back to step 3 - if not, we jump back to step 1 to get a new device.\\n', '– Alternatively, in the case where you are using a DocumentWriter, the write() or\\n', 'write_stabilized() methods can be used. These handle all the looping for you, in ex-\\nchange for being provided with callbacks that control the behaviour (notably a callback that\\nenumerates the rectangles/pages to use).\\n', '• Which part of the story will land on which rectangle / which page, is fully under control of the Story\\n', 'object and cannot be predicted.\\n', '• Images may be part of a story. They will be placed together with any surrounding text.\\n', '• Multiple stories may - independently from each other - write to the same page. For example, one\\nmay have separate stories for page header, page footer, regular text, comment boxes, etc.\\n', 'Parameters\\n', '• html (str) – HTML source code. If omitted, a basic minimum is generated (see\\nbelow). If provided, not a complete HTML document is needed. The in-built source\\nparser will forgive (many / most) HTML syntax errors and also accepts HTML\\nfragments like ""<b>Hello, <i>World!</i></b>"".\\n', '• user_css (str) – CSS source code. If provided, must contain valid CSS specifi-\\ncations.\\n', '• em (float) – the default text font size.\\n', '• archive – an Archive from which to load resources for rendering. Currently sup-\\nported resource types are images and text fonts. If omitted, the story will not try to\\nlook up any such data and may thus produce incomplete output.\\n', 'Note:\\nInstead of an actual archive, valid arguments for creating an Archive can\\nalso be provided – in which case an archive will temporarily be constructed. So, in-\\nstead of story = fitz.Story(archive=fitz.Archive(""myfolder"")), one\\ncan also shorter write story = fitz.Story(archive=""myfolder"").\\n', 'place(where)\\n', 'Calculate that part of the story’s content, that will fit in the provided rectangle. The method maintains a\\npointer which part of the story’s content has already been written and upon the next invocation resumes\\nfrom that pointer’s position.\\n', '19.20. Story\\n357\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'where (rect_like) – layout the current part of the content to fit into this rectangle.\\nThis must be a sub-rectangle of the page’s MediaBox.\\n', 'Return type\\n', 'tuple[bool, rect_like]\\n', 'Returns\\n', 'a bool (int) more and a rectangle filled. If more == 0, all content of the story has\\nbeen written, otherwise more is waiting to be written to subsequent rectangles / pages.\\nRectangle filled is the part of where that has actually been filled.\\n', 'draw(dev, matrix=None)\\n', 'Write the content part prepared by Story.place() to the page.\\n', 'Parameters\\n', '• dev – the Device created by dev = writer.begin_page(mediabox). The de-\\nvice knows how to call all MuPDF functions needed to write the content.\\n', '• matrix (matrix_like) – a matrix for transforming content when writing to the\\npage. An example may be writing rotated text. The default means no transformation\\n(i.e. the Identity matrix).\\n', 'element_positions(function, args=None)\\n', 'Let the Story provide positioning information about certain HTML elements once their place on the current\\npage has been computed - i.e. invoke this method directly after Story.place().\\n', 'Story will pass position information to function. This information can for example be used to generate a\\nTable of Contents.\\n', 'Parameters\\n', '• function (callable) – a Python function accepting an ElementPosition ob-\\nject. It will be invoked by the Story object to process positioning information. The\\nfunction must be a callable accepting exactly one argument.\\n', '• args (dict) – an optional dictionary with any additional information that should\\nbe added to the ElementPosition instance passed to function. Like for example\\nthe current output page number. Every key in this dictionary must be a string that\\nconforms to the rules for a valid Python identifier. The complete set of information\\nis explained below.\\n', 'reset()\\n', 'Rewind the story’s document to the beginning for starting over its output.\\n', 'body\\n', 'The body part of the story’s DOM. This attribute contains the Xml node of body. All relevant content for\\nPDF production is contained between “<body>” and “</body>”.\\n', 'write(writer, rectfn, positionfn=None, pagefn=None)\\n', 'Places and draws Story to a DocumentWriter. Avoids the need for calling code to implement a loop that\\ncalls Story.place() and Story.draw() etc, at the expense of having to provide at least the rectfn()\\ncallback.\\n', 'Parameters\\n', '• writer – a DocumentWriter or None.\\n', '• rectfn – a callable taking (rect_num:\\nint, filled:\\nRect) and returning\\n(mediabox, rect, ctm):\\n', '358\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– mediabox: None or rect for new page.\\n', '– rect: The next rect into which content should be placed.\\n', '– ctm: None or a Matrix.\\n', '• positionfn – None, or a callable taking (position:\\nElementPosition):\\n', '– position:\\n', 'An ElementPosition with an extra .page_num member.\\n', 'Typically called multiple times as we generate elements that are headings or have\\nan id.\\n', '• pagefn – None, or a callable taking (page_num, mediabox, dev, after);\\ncalled at start (after=0) and end (after=1) of each page.\\n', 'static write_stabilized(writer, contentfn, rectfn, user_css=None, em=12, positionfn=None,\\npagefn=None, archive=None, add_header_ids=True)\\n', 'Static method that does iterative layout of html content to a DocumentWriter.\\n', 'For example this allows one to add a table of contents section while ensuring that page numbers are patched\\nup until stable.\\n', 'Repeatedly creates a new Story from (contentfn(), user_css, em, archive) and lays it out with\\ninternal call to Story.write(); uses a None writer and extracts the list of ElementPosition’s which\\nis passed to the next call of contentfn().\\n', 'When the html from contentfn() becomes unchanged, we do a final iteration using writer.\\n', 'Parameters\\n', '• writer – A DocumentWriter.\\n', '• contentfn – A function taking a list of ElementPositions and returning a string\\ncontaining html. The returned html can depend on the list of positions, for example\\nwith a table of contents near the start.\\n', '• rectfn – A callable taking (rect_num:\\nint, filled:\\nRect) and returning\\n(mediabox, rect, ctm):\\n', '– mediabox: None or rect for new page.\\n', '– rect: The next rect into which content should be placed.\\n', '– ctm: A Matrix.\\n', '• pagefn – None, or a callable taking (page_num, medibox, dev, after);\\ncalled at start (after=0) and end (after=1) of each page.\\n', '• archive –\\n', '• add_header_ids – If true, we add unique ids to all header tags that don’t already\\nhave an id. This can help automatic generation of tables of contents.\\n', 'Returns:\\n', 'None.\\n', 'write_with_links(rectfn, positionfn=None, pagefn=None)\\n', 'Similar to write() except that we don’t have a writer arg and we return a PDF Document in which links\\nhave been created for each internal html link.\\n', '19.20. Story\\n359\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'static write_stabilized_with_links(contentfn, rectfn, user_css=None, em=12, positionfn=None,\\npagefn=None, archive=None, add_header_ids=True)\\n', 'Similar to write_stabilized() except that we don’t have a writer arg and instead return a PDF Doc-\\nument in which links have been created for each internal html link.\\n', 'class FitResult\\n', 'The result from a Story.fit*() method.\\n', 'Members:\\n', 'big_enough:\\n', 'True if the fit succeeded.\\n', 'filled:\\n', 'From the last call to Story.place().\\n', 'more:\\n', 'False if the fit succeeded.\\n', 'numcalls:\\n', 'Number of calls made to self.place().\\n', 'parameter:\\n', 'The successful parameter value, or the largest failing value.\\n', 'Rect:\\n', 'The rect created from parameter.\\n', 'fit(self, fn, pmin=None, pmax=None, delta=0.001, verbose=False)\\n', 'Finds optimal rect that contains the story self.\\n', 'Returns a Story.FitResult instance.\\n', 'On success, the last call to self.place() will have been with the returned rectangle, so self.draw()\\ncan be used directly.\\n', 'Parameters\\n', '• fn – A callable taking a floating point parameter and returning a fitz.Rect().\\nIf the rect is empty, we assume the story will not fit and do not call self.place().\\n', 'Must guarantee that self.place() behaves monotonically when given rect\\nfn(parameter) as parameter increases. This usually means that both width and\\nheight increase or stay unchanged as parameter increases.\\n', '• pmin – Minimum parameter to consider; None for -infinity.\\n', '• pmax – Maximum parameter to consider; None for +infinity.\\n', '• delta – Maximum error in returned parameter.\\n', '• verbose – If true we output diagnostics.\\n', 'fit_scale(self, rect, scale_min=0, scale_max=None, delta=0.001, verbose=False)\\n', 'Finds smallest value scale in range scale_min..scale_max where scale * rect is large enough to\\ncontain the story self.\\n', 'Returns a Story.FitResult instance.\\n', 'Parameters\\n', '• width – width of rect.\\n', '• height – height of rect.\\n', '360\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• scale_min – Minimum scale to consider; must be >= 0.\\n', '• scale_max – Maximum scale to consider, must be >= scale_min or None for infi-\\nnite.\\n', '• delta – Maximum error in returned scale.\\n', '• verbose – If true we output diagnostics.\\n', 'fit_height(self, width, height_min=0, height_max=None, origin=(0, 0), delta=0.001, verbose=False)\\n', 'Finds smallest height in range height_min..height_max where a rect with size (width, height) is\\nlarge enough to contain the story self.\\n', 'Returns a Story.FitResult instance.\\n', 'Parameters\\n', '• width – width of rect.\\n', '• height_min – Minimum height to consider; must be >= 0.\\n', '• height_max – Maximum height to consider, must be >= height_min or None for\\ninfinite.\\n', '• origin – (x0, y0) of rect.\\n', '• delta – Maximum error in returned height.\\n', '• verbose – If true we output diagnostics.\\n', 'fit_width(self, height, width_min=0, width_max=None, origin=(0, 0), delta=0.001, verbose=False)\\n', 'Finds smallest width in range width_min..width_max where a rect with size (width, height) is large\\nenough to contain the story self.\\n', 'Returns a Story.FitResult instance.\\n', 'Parameters\\n', '• height – height of rect.\\n', '• width_min – Minimum width to consider; must be >= 0.\\n', '• width_max – Maximum width to consider, must be >= width_min or None for\\ninfinite.\\n', '• origin – (x0, y0) of rect.\\n', '• delta – Maximum error in returned width.\\n', '• verbose – If true we output diagnostics.\\n', '19.20.1 Element Positioning CallBack function\\n', 'The callback function can be used to log information about story output. The function’s access to the information is\\nread-only: it has no way to influence the story’s output.\\n', 'A typical loop for executing a story with using this method would look like this:\\n', 'HTML = """"""\\n<html>\\n', '<head></head>\\n<body>\\n', '<h1>Header level 1</h1>\\n', '(continues on next page)\\n', '19.20. Story\\n361\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '<h2>Header level 2</h2>\\n<p>Hello MuPDF!</p>\\n', '</body>\\n', '</html>\\n""""""\\nMEDIABOX = fitz.paper_rect(""letter"")\\n# size of a page\\n', 'WHERE = MEDIABOX + (36, 36, -36, -36)\\n# leave borders of 0.5 inches\\n', 'story =\\nfitz.Story(html=HTML)\\n# make the story\\n', 'writer = fitz.DocumentWriter(""test.pdf"")\\n# make the writer\\n', 'pno = 0 # current page number\\nmore = 1\\n# will be set to 0 when done\\n', 'while more:\\n# loop until all story content is processed\\n', 'dev = writer.begin_page(MEDIABOX)\\n# make a device to write on the page\\n', 'more, filled = story.place(WHERE)\\n# compute content positions on page\\n', 'story.element_positions(recorder, {""page"": pno})\\n# provide page number in addition\\n', 'story.draw(dev)\\nwriter.end_page()\\npno += 1\\n# increase page number\\n', 'writer.close()\\n# close output file\\n', 'def recorder(elpos):\\n', 'pass\\n', 'Attributes of the ElementPosition class\\n', 'Exactly one parameter must be passed to the function provided by Story.element_positions(). It is an object with\\nthe following attributes:\\n', 'The parameter passed to the recorder function is an object with the following attributes:\\n', '• elpos.depth (int) – depth of this element in the box structure.\\n', '• elpos.heading (int) – the header level, 0 if no header, 1-6 for h1 - h6.\\n', '• elpos.href (str) – value of the href attribute, or None if not defined.\\n', '• elpos.id (str) – value of the id attribute, or None if not defined.\\n', '• elpos.rect (tuple) – element position on page.\\n', '• elpos.text (str) – immediate text of the element.\\n', '• elpos.open_close (int bit field) – bit 0 set: opens element, bit 1 set: closes element. Relevant for elements\\nthat may contain other elements and thus may not immediately be closed after being created / opened.\\n', '• elpos.rect_num (int) – count of rectangles filled by the story so far.\\n', '• elpos.page_num (int) – page number; only present when using fitz.Story.write*() functions.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '362\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.21 TextPage\\n', 'This class represents text and images shown on a document page. All MuPDF document types are supported.\\n', 'The usual ways to create a textpage are DisplayList.get_textpage() and Page.get_textpage(). Because there\\nis a limited set of methods in this class, there exist wrappers in Page which are handier to use. The last column of this\\ntable shows these corresponding Page methods.\\n', 'For a description of what this class is all about, see Appendix 2.\\n', 'Method\\nDescription\\npage get_text or search method\\n', 'extractText()\\nextract plain text\\n“text”\\n', 'extractTEXT()\\nsynonym of previous\\n“text”\\n', 'extractBLOCKS()\\nplain text grouped in blocks\\n“blocks”\\n', 'extractWORDS()\\nall words with their bbox\\n“words”\\n', 'extractHTML()\\npage content in HTML format\\n“html”\\n', 'extractXHTML()\\npage content in XHTML format\\n“xhtml”\\n', 'extractXML()\\npage text in XML format\\n“xml”\\n', 'extractDICT()\\npage content in dict format\\n“dict”\\n', 'extractJSON()\\npage content in JSON format\\n“json”\\n', 'extractRAWDICT()\\npage content in dict format\\n“rawdict”\\n', 'extractRAWJSON()\\npage content in JSON format\\n“rawjson”\\n', 'search()\\nSearch for a string in the page\\nPage.search_for()\\n', 'Class API\\n', 'class TextPage\\n', 'extractText(sort=False)\\n', 'extractTEXT(sort=False)\\n', 'Return a string of the page’s complete text. The text is UTF-8 unicode and in the same sequence as specified\\nat the time of document creation.\\n', 'Parameters\\n', 'sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.\\nIn many cases, this should suffice to generate a “natural” reading order.\\n', 'Return type\\n', 'str\\n', 'extractBLOCKS()\\n', 'Textpage content as a list of text lines grouped by block. Each list items looks like this:\\n', '(x0, y0, x1, y1, ""lines in the block"", block_no, block_type)\\n', 'The first four entries are the block’s bbox coordinates, block_type is 1 for an image block, 0 for text.\\nblock_no is the block sequence number. Multiple text lines are joined via line breaks.\\n', 'For an image block, its bbox and a text line with some image meta information is included – not the image\\ncontent.\\n', 'This is a high-speed method with just enough information to output plain text in desired reading sequence.\\n', 'Return type\\n', 'list\\n', '19.21. TextPage\\n363\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'extractWORDS(delimiters=None)\\n', '• Changed in v1.23.5: added delimiters parameter\\n', 'Textpage content as a list of single words with bbox information. An item of this list looks like this:\\n', '(x0, y0, x1, y1, ""word"", block_no, line_no, word_no)\\n', 'Parameters\\n', 'delimiters (str) – (new in v1.23.5) use these characters as additional word sep-\\narators. By default, all white spaces (including the non-breaking space 0xA0) indi-\\ncate start and end of a word.\\nNow you can specify more characters causing this.\\nFor instance, the default will return ""john.doe@outlook.com"" as one word.\\nIf\\nyou specify delimiters=""@."" then the four words ""john"", ""doe"", ""outlook"",\\n""com"" will be returned. Other possible uses include ignoring punctuation characters\\ndelimiters=string.punctuation. The “word” strings will not contain any delim-\\niting character.\\n', 'This is a high-speed method which e.g. allows extracting text from within given areas or recovering the\\ntext reading sequence.\\n', 'Return type\\n', 'list\\n', 'extractHTML()\\n', 'Textpage content as a string in HTML format. This version contains complete formatting and positioning\\ninformation. Images are included (encoded as base64 strings). You need an HTML package to interpret\\nthe output in Python. Your internet browser should be able to adequately display this information, but see\\nControlling Quality of HTML Output.\\n', 'Return type\\n', 'str\\n', 'extractDICT(sort=False)\\n', 'Textpage content as a Python dictionary. Provides same information detail as HTML. See below for the\\nstructure.\\n', 'Parameters\\n', 'sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.\\nIn many cases, this should suffice to generate a “natural” reading order.\\n', 'Return type\\n', 'dict\\n', 'extractJSON(sort=False)\\n', 'Textpage content as a JSON string. Created by json.dumps(TextPage.extractDICT()). It is included\\nfor backlevel compatibility. You will probably use this method ever only for outputting the result to some\\nfile. The method detects binary image data and converts them to base64 encoded strings.\\n', 'Parameters\\n', 'sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.\\nIn many cases, this should suffice to generate a “natural” reading order.\\n', 'Return type\\n', 'str\\n', '364\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'extractXHTML()\\n', 'Textpage content as a string in XHTML format.\\nText information detail is comparable with\\n', 'extractTEXT(), but also contains images (base64 encoded). This method makes no attempt to re-create\\nthe original visual appearance.\\n', 'Return type\\n', 'str\\n', 'extractXML()\\n', 'Textpage content as a string in XML format. This contains complete formatting information about every\\nsingle character on the page: font, size, line, paragraph, location, color, etc. Contains no images. You need\\nan XML package to interpret the output in Python.\\n', 'Return type\\n', 'str\\n', 'extractRAWDICT(sort=False)\\n', 'Textpage content as a Python dictionary – technically similar to extractDICT(), and it contains that\\ninformation as a subset (including any images). It provides additional detail down to each character, which\\nmakes using XML obsolete in many cases. See below for the structure.\\n', 'Parameters\\n', 'sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.\\nIn many cases, this should suffice to generate a “natural” reading order.\\n', 'Return type\\n', 'dict\\n', 'extractRAWJSON(sort=False)\\n', 'Textpage content as a JSON string. Created by json.dumps(TextPage.extractRAWDICT()). You will\\nprobably use this method ever only for outputting the result to some file. The method detects binary image\\ndata and converts them to base64 encoded strings.\\n', 'Parameters\\n', 'sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.\\nIn many cases, this should suffice to generate a “natural” reading order.\\n', 'Return type\\n', 'str\\n', 'search(needle, quads=False)\\n', '• Changed in v1.18.2\\n', 'Search for string and return a list of found locations.\\n', 'Parameters\\n', '• needle (str) – the string to search for. Upper and lower cases will all match if\\nneedle consists of ASCII letters only – it does not yet work for “Ä” versus “ä”, etc.\\n', '• quads (bool) – return quadrilaterals instead of rectangles.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of Rect or Quad objects, each surrounding a found needle occurrence. As the search\\nstring may contain spaces, its parts may be found on different lines. In this case, more\\nthan one rectangle (resp. quadrilateral) are returned. (Changed in v1.18.2) The method\\nnow supports dehyphenation, so it will find e.g. “method”, even if it was hyphenated\\n', '19.21. TextPage\\n365\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'in two parts “meth-” and “od” across two lines. The two returned rectangles will contain\\n“meth” (no hyphen) and “od”.\\n', 'Note: Overview of changes in v1.18.2:\\n', '1. The hit_max parameter has been removed: all hits are always returned.\\n', '2. The Rect parameter of the TextPage is now respected: only text inside this area is examined. Only\\ncharacters with fully contained bboxes are considered. The wrapper method Page.search_for()\\ncorrespondingly supports a clip parameter.\\n', '3. Hyphenated words are now found.\\n', '4. Overlapping rectangles in the same line are now automatically joined. We assume that such sepa-\\nrations are an artifact created by multiple marked content groups, containing parts of the same search\\nneedle.\\n', 'Example Quad versus Rect: when searching for needle “pymupdf”, then the corresponding entry will either\\nbe the blue rectangle, or, if quads was specified, the quad Quad(ul, ur, ll, lr).\\n', 'rect\\n', 'The rectangle associated with the text page. This either equals the rectangle of the creating page or the\\nclip parameter of Page.get_textpage() and text extraction / searching methods.\\n', 'Note: The output of text searching and most text extractions is restricted to this rectangle. (X)HTML\\nand XML output will however always extract the full page.\\n', '366\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.21.1 Structure of Dictionary Outputs\\n', 'Methods\\nTextPage.extractDICT(),\\nTextPage.extractJSON(),\\nTextPage.extractRAWDICT(),\\nand\\n', 'TextPage.extractRAWJSON() return dictionaries, containing the page’s text and image content.\\nThe dictio-\\nnary structures of all four methods are almost equal. They strive to map the text page’s information hierarchy of\\nblocks, lines, spans and characters as precisely as possible, by representing each of these by its own sub-dictionary:\\n', '• A page consists of a list of block dictionaries.\\n', '• A (text) block consists of a list of line dictionaries.\\n', '• A line consists of a list of span dictionaries.\\n', '• A span either consists of the text itself or, for the RAW variants, a list of character dictionaries.\\n', '• RAW variants: a character is a dictionary of its origin, bbox and unicode.\\n', 'All PyMuPDF geometry objects herein (points, rectangles, matrices) are represented by there “like” formats: a\\nrect_like tuple is used instead of a Rect, etc. The reasons for this are performance and memory considerations:\\n', '• This code is written in C, where Python tuples can easily be generated. The geometry objects on the other hand\\nare defined in Python source only. A conversion of each Python tuple into its corresponding geometry object\\nwould add significant – and largely unnecessary – execution time.\\n', '• A 4-tuple needs about 168 bytes, the corresponding Rect 472 bytes - almost three times the size. A “dict”\\ndictionary for a text-heavy page contains 300+ bbox objects – which thus require about 50 KB storage as 4-\\ntuples versus 140 KB as Rect objects. A “rawdict” output for such a page will however contain 4 to 5 thousand\\nbboxes, so in this case we talk about 750 KB versus 2 MB.\\n', 'Please also note, that only bboxes (= rect_like 4-tuples) are returned, whereas a TextPage actually has the full\\nposition information – in Quad format. The reason for this decision is again a memory consideration: a quad_like\\nneeds 488 bytes (3 times the size of a rect_like). Given the mentioned amounts of generated bboxes, returning\\nquad_like information would have a significant impact.\\n', 'In the vast majority of cases, we are dealing with horizontal text only, where bboxes provide entirely sufficient infor-\\nmation.\\n', 'In addition, the full quad information is not lost: it can be recovered as needed for lines, spans, and characters by\\nusing the appropriate function from the following list:\\n', '• recover_quad() – the quad of a complete span\\n', '• recover_span_quad() – the quad of a character subset of a span\\n', '• recover_line_quad() – the quad of a line\\n', '• recover_char_quad() – the quad of a character\\n', 'As mentioned, using these functions is ever only needed, if the text is not written horizontally – line[""dir""] !=\\n(1, 0) – and you need the quad for text marker annotations (Page.add_highlight_annot() and friends).\\n', '19.21. TextPage\\n367\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Page Dictionary\\n', 'Key\\nValue\\n', 'width\\nwidth of the clip rectangle (float)\\n', 'height\\nheight of the clip rectangle (float)\\n', 'blocks\\nlist of block dictionaries\\n', 'Block Dictionaries\\n', 'Block dictionaries come in two different formats for image blocks and for text blocks.\\n', '• (Changed in v1.18.0) – new dict key number, the block number.\\n', '• (Changed in v1.18.11) – new dict key transform, the image transformation matrix for image blocks.\\n', '• (Changed in v1.18.11) – new dict key size, the size of the image in bytes for image blocks.\\n', 'Image block:\\n', '368\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Key\\nValue\\n', 'type\\n1 = image (int)\\n', 'bbox\\nimage bbox on page (rect_like)\\n', 'number\\nblock count (int)\\n', 'ext\\nimage type (str), as file extension, see below\\n', 'width\\noriginal image width (int)\\n', 'height\\noriginal image height (int)\\n', 'colorspace\\ncolorspace component count (int)\\n', 'xres\\nresolution in x-direction (int)\\n', 'yres\\nresolution in y-direction (int)\\n', 'bpc\\nbits per component (int)\\n', 'transform\\nmatrix transforming image rect to bbox (matrix_like)\\n', 'size\\nsize of the image in bytes (int)\\n', 'image\\nimage content (bytes)\\n', 'Possible values of the “ext” key are “bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000), “jxr” (JPEG XR), “png”, “pnm”, and\\n“tiff”.\\n', 'Note:\\n', '1. An image block is generated for all and every image occurrence on the page. Hence there may be duplicates,\\nif an image is shown at different locations.\\n', '2. TextPage and corresponding method Page.get_text() are available for all document types. Only for PDF\\ndocuments, methods Document.get_page_images() / Page.get_images() offer some overlapping func-\\ntionality as far as image lists are concerned. But both lists may or may not contain the same items. Any\\ndifferences are most probably caused by one of the following:\\n', '• “Inline” images (see page 214 of the Adobe PDF References) of a PDF page are contained in a textpage,\\nbut do not appear in Page.get_images().\\n', '• Annotations may also contain images – these will not appear in Page.get_images().\\n', '• Image blocks in a textpage are generated for every image location – whether or not there are any duplicates.\\nThis is in contrast to Page.get_images(), which will list each image only once (per reference name).\\n', '• Images mentioned in the page’s object definition will always appear in Page.get_images()1. But it\\nmay happen, that there is no “display” command in the page’s contents (erroneously or on purpose). In\\nthis case the image will not appear in the textpage.\\n', '3. The image’s “transformation matrix” is defined as the matrix, for which the expression bbox / transform ==\\nfitz.Rect(0, 0, 1, 1) is true, lookup details here: Image Transformation Matrix.\\n', 'Text block:\\n', 'Key\\nValue\\n', 'type\\n0 = text (int)\\n', 'bbox\\nblock rectangle, rect_like\\n', 'number\\nblock count (int)\\n', 'lines\\nlist of text line dictionaries\\n', '1 Image specifications for a PDF page are done in a page’s (sub-) dictionary, called /Resources. Resource dictionaries can be inherited\\nfrom any of the page’s parent objects (usually the catalog – the top-level parent). The PDF creator may e.g. define one /Resources on file level,\\nnaming all images and / or all fonts ever used by any page. In these cases, Page.get_images() and Page.get_fonts() will consequently return\\nthe same lists for all pages. If desired, this situation can be reverted using Page.clean_contents(). After execution, the page’s object definition\\nwill show fonts and images that are actually used.\\n', '19.21. TextPage\\n369\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Line Dictionary\\n', 'Key\\nValue\\n', 'bbox\\nline rectangle, rect_like\\n', 'wmode\\nwriting mode (int): 0 = horizontal, 1 = vertical\\n', 'dir\\nwriting direction, point_like\\n', 'spans\\nlist of span dictionaries\\n', 'The value of key “dir” is the unit vector dir = (cosine, -sine) of the angle, which the text has relative to the\\nx-axis2. See the following picture: The word in each quadrant (counter-clockwise from top-right to bottom-right) is\\nrotated by 30, 120, 210 and 300 degrees respectively.\\n', 'Span Dictionary\\n', 'Spans contain the actual text. A line contains more than one span only, if it contains text with different font properties.\\n', '• Changed in version 1.14.17 Spans now also have a bbox key (again).\\n', '• Changed in version 1.17.6 Spans now also have an origin key.\\n', '2 The coordinate systems of MuPDF and PDF are different in that MuPDF uses the page’s top-left point as (0, 0). In PDF, this is the bottom-left\\npoint. Therefore, the positive direction for MuPDF’s y-axis is from top to bottom. This causes the sign change for the sine value here: a negative\\nvalue indicates anti-clockwise rotation of the text.\\n', '370\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Key\\nValue\\n', 'bbox\\nspan rectangle, rect_like\\n', 'origin\\nthe first character’s origin, point_like\\n', 'font\\nfont name (str)\\n', 'ascender\\nascender of the font (float)\\n', 'descender\\ndescender of the font (float)\\n', 'size\\nfont size (float)\\n', 'flags\\nfont characteristics (int)\\n', 'color\\ntext color in sRGB format (int)\\n', 'text\\n(only for extractDICT()) text (str)\\n', 'chars\\n(only for extractRAWDICT()) list of character dictionaries\\n', '(New in version 1.16.0): “color” is the text color encoded in sRGB (int) format, e.g. 0xFF0000 for red. There are\\nfunctions for converting this integer back to formats (r, g, b) (PDF with float values from 0 to 1) sRGB_to_pdf(), or\\n(R, G, B), sRGB_to_rgb() (with integer values from 0 to 255).\\n', '(New in v1.18.5): “ascender” and “descender” are font properties, provided relative to fontsize 1. Note that de-\\nscender is a negative value. The following picture shows the relationship to other values and properties.\\n', 'These numbers may be used to compute the minimum height of a character (or span) – as opposed to the standard\\nheight provided in the “bbox” values (which actually represents the line height). The following code recalculates the\\nspan bbox to have a height of fontsize exactly fitting the text inside:\\n', '>>> a = span[""ascender""]\\n>>> d = span[""descender""]\\n>>> r = fitz.Rect(span[""bbox""])\\n>>> o = fitz.Point(span[""origin""])\\n# its y-value is the baseline\\n', '>>> r.y1 = o.y - span[""size""] * d / (a - d)\\n>>> r.y0 = r.y1 - span[""size""]\\n>>> # r now is a rectangle of height \\'fontsize\\'\\n', 'Caution: The above calculation may deliver a larger height! This may e.g. happen for OCRed documents, where\\nthe risk of all sorts of text artifacts is high. MuPDF tries to come up with a reasonable bbox height, indepen-\\ndently from the fontsize found in the PDF. So please ensure that the height of span[""bbox""] is larger than\\nspan[""size""].\\n', '19.21. TextPage\\n371\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\nYou may request PyMuPDF to do all of the above automatically by executing fitz.TOOLS.\\nset_small_glyph_heights(True). This sets a global parameter so that all subsequent text searches and text ex-\\ntractions are based on reduced glyph heights, where meaningful.\\n', 'The following shows the original span rectangle in red and the rectangle with re-computed height in blue.\\n', '“flags” is an integer, which represents font properties except for the first bit 0. They are to be interpreted like this:\\n', '• bit 0: superscripted (20) – not a font property, detected by MuPDF code.\\n', '• bit 1: italic (21)\\n', '• bit 2: serifed (22)\\n', '• bit 3: monospaced (23)\\n', '• bit 4: bold (24)\\n', 'Test these characteristics like so:\\n', '>>> if flags & 2**1: print(""italic"")\\n>>> # etc.\\n', 'Bits 1 thru 4 are font properties, i.e. encoded in the font program. Please note, that this information is not necessarily\\ncorrect or complete: fonts quite often contain wrong data here.\\n', 'Character Dictionary for extractRAWDICT()\\n', 'Key\\nValue\\n', 'origin\\ncharacter’s left baseline point, point_like\\n', 'bbox\\ncharacter rectangle, rect_like\\n', 'c\\nthe character (unicode)\\n', 'This image shows the relationship between a character’s bbox and its quad:\\n', 'This documentation covers all versions up to 1.23.25.\\n', '372\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.22 TextWriter\\n', '• New in v1.16.18\\n', 'This class represents a MuPDF text object. The basic idea is to decouple (1) text preparation, and (2) text output to\\nPDF pages.\\n', 'During preparation, a text writer stores any number of text pieces (“spans”) together with their positions and individual\\nfont information. The output of the writer’s prepared content may happen multiple times to any PDF page with a\\ncompatible page size.\\n', 'A text writer is an elegant alternative to methods Page.insert_text() and friends:\\n', '• Improved text positioning: Choose any point where insertion of text should start. Storing text returns the\\n“cursor position” after the last character of the span.\\n', '• Free font choice: Each text span has its own font and fontsize. This lets you easily switch when composing\\na larger text.\\n', '• Automatic fallback fonts: If a character is not supported by the chosen font, alternative fonts are automatically\\nsearched. This significantly reduces the risk of seeing unprintable symbols in the output (“TOFUs” – looking\\nlike a small rectangle). PyMuPDF now also comes with the universal font “Droid Sans Fallback Regular”,\\nwhich supports all Latin characters (including Cyrillic and Greek), and all CJK characters (Chinese, Japanese,\\nKorean).\\n', '• Cyrillic and Greek Support: The PDF Base 14 Fonts have integrated support of Cyrillic and Greek characters\\nwithout specifying encoding. Your text may be a mixture of Latin, Greek and Cyrillic.\\n', '• Transparency support: Parameter opacity is supported. This offers a handy way to create watermark-style text.\\n', '• Justified text: Supported for any font – not just simple fonts as in Page.insert_textbox().\\n', '• Reusability: A TextWriter object exists independent from PDF pages. It can be written multiple times, either to\\nthe same or to other pages, in the same or in different PDFs, choosing different colors or transparency.\\n', 'Using this object entails three steps:\\n', '1. When created, a TextWriter requires a fixed page rectangle in relation to which it calculates text positions. A\\ntext writer can write to pages of this size only.\\n', '2. Store text in the TextWriter using methods TextWriter.append(),\\nTextWriter.appendv() and\\n', 'TextWriter.fill_textbox() as often as is desired.\\n', '3. Output the TextWriter object on some PDF page(s).\\n', 'Note:\\n', '• Starting with version 1.17.0, TextWriters do support text rotation via the morph parameter of TextWriter.\\nwrite_text().\\n', '• There also exists Page.write_text() which combines one or more TextWriters and jointly writes them to a\\ngiven rectangle and with a given rotation angle – much like Page.show_pdf_page().\\n', '19.22. TextWriter\\n373\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Method / Attribute\\nShort Description\\n', 'append()\\nAdd text in horizontal write mode\\n', 'appendv()\\nAdd text in vertical write mode\\n', 'fill_textbox()\\nFill rectangle (horizontal write mode)\\n', 'write_text()\\nOutput TextWriter to a PDF page\\n', 'color\\nText color (can be changed)\\n', 'last_point\\nLast written character ends here\\n', 'opacity\\nText opacity (can be changed)\\n', 'rect\\nPage rectangle used by this TextWriter\\n', 'text_rect\\nArea occupied so far\\n', 'Class API\\n', 'class TextWriter\\n', '__init__(self, rect, opacity=1, color=None)\\n', 'Parameters\\n', '• rect (rect-like) – rectangle internally used for text positioning computations.\\n', '• opacity (float) – sets the transparency for the text to store here. Values outside\\nthe interval [0, 1) will be ignored. A value of e.g. 0.5 means 50% transparency.\\n', '• color (float,sequ) – the color of the text. All colors are specified as floats 0\\n<= color <= 1. A single float represents some gray level, a sequence implies the\\ncolorspace via its length.\\n', 'append(pos, text, font=None, fontsize=11, language=None, right_to_left=False, small_caps=0)\\n', '• Changed in v1.18.9\\n', '• Changed in v1.18.15\\n', 'Add some new text in horizontal writing.\\n', 'Parameters\\n', '• pos (point_like) – start position of the text, the bottom left point of the first\\ncharacter.\\n', '• text (str) – a string of arbitrary length. It will be written starting at position “pos”.\\n', '• font – a Font. If omitted, fitz.Font(""helv"") will be used.\\n', '• fontsize (float) – the fontsize, a positive number, default 11.\\n', '• language (str) – the language to use, e.g. “en” for English. Meaningful values\\nshould be compliant with the ISO 639 standards 1, 2, 3 or 5. Reserved for future\\nuse: currently has no effect as far as we know.\\n', '• right_to_left (bool) – (New in v1.18.9) whether the text should be written from\\nright to left. Applicable for languages like Arabian or Hebrew. Default is False.\\nIf True, any Latin parts within the text will automatically converted. There are\\nno other consequences, i.e. TextWriter.last_point will still be the rightmost\\ncharacter, and there neither is any alignment taking place. Hence you may want to\\nuse TextWriter.fill_textbox() instead.\\n', '• small_caps (bool) – (New in v1.18.15) look for the character’s Small Capital ver-\\nsion in the font. If present, take that value instead. Otherwise the original character\\n', '374\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(this font or the fallback font) will be taken. The fallback font will never return small\\ncaps. For example, this snippet:\\n', '>>> doc = fitz.open()\\n>>> page = doc.new_page()\\n>>> text = ""PyMuPDF: the Python bindings for MuPDF""\\n>>> font = fitz.Font(""figo"")\\n# choose a font with small caps\\n', '>>> tw = fitz.TextWriter(page.rect)\\n>>> tw.append((50,100), text, font=font, small_caps=True)\\n>>> tw.write_text(page)\\n>>> doc.ez_save(""x.pdf"")\\n', 'will produce this PDF text:\\n', 'Returns\\n', 'text_rect and last_point. (Changed in v1.18.0:) Raises an exception for an unsup-\\nported font – checked via Font.is_writable.\\n', 'appendv(pos, text, font=None, fontsize=11, language=None, small_caps=0)\\n', 'Changed in v1.18.15\\n', 'Add some new text in vertical, top-to-bottom writing.\\n', 'Parameters\\n', '• pos (point_like) – start position of the text, the bottom left point of the first\\ncharacter.\\n', '• text (str) – a string. It will be written starting at position “pos”.\\n', '• font – a Font. If omitted, fitz.Font(""helv"") will be used.\\n', '• fontsize (float) – the fontsize, a positive float, default 11.\\n', '• language (str) – the language to use, e.g. “en” for English. Meaningful values\\nshould be compliant with the ISO 639 standards 1, 2, 3 or 5. Reserved for future\\nuse: currently has no effect as far as we know.\\n', '• small_caps (bool) – (New in v1.18.15) see append().\\n', 'Returns\\n', 'text_rect and last_point. (Changed in v1.18.0:) Raises an exception for an unsup-\\nported font – checked via Font.is_writable.\\n', 'fill_textbox(rect, text, *, pos=None, font=None, fontsize=11, align=0, right_to_left=False, warn=None,\\nsmall_caps=0)\\n', '• Changed in 1.17.3: New parameter pos to specify where to start writing within rectangle.\\n', '• Changed in v1.18.9: Return list of lines which do not fit in rectangle. Support writing right-to-left\\n(e.g. Arabian, Hebrew).\\n', '• Changed in v1.18.15: Prefer small caps if supported by the font.\\n', 'Fill a given rectangle with text in horizontal writing mode. This is a convenience method to use as an\\nalternative for append().\\n', 'Parameters\\n', '• rect (rect_like) – the area to fill. No part of the text will appear outside of this.\\n', '19.22. TextWriter\\n375\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• text (str,sequ) – the text. Can be specified as a (UTF-8) string or a list / tuple\\nof strings. A string will first be converted to a list using splitlines(). Every list item\\nwill begin on a new line (forced line breaks).\\n', '• pos (point_like) – (new in v1.17.3) start storing at this point. Default is a point\\nnear rectangle top-left.\\n', '• font – the Font, default fitz.Font(""helv"").\\n', '• fontsize (float) – the fontsize.\\n', '• align\\n(int)\\n–\\ntext\\nalignment.\\nUse\\none\\nof\\nTEXT_ALIGN_LEFT,\\nTEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT or TEXT_ALIGN_JUSTIFY.\\n', '• right_to_left (bool) – (New in v1.18.9) whether the text should be written from\\nright to left. Applicable for languages like Arabian or Hebrew. Default is False. If\\nTrue, any Latin parts are automatically reverted. You must still set the alignment (if\\nyou want right alignment), it does not happen automatically – the other alignment\\noptions remain available as well.\\n', '• warn (bool) – on text overflow do nothing, warn, or raise an exception. Overflow\\ntext will never be written. Changed in v1.18.9:\\n', '– Default is None.\\n', '– The list of overflow lines will be returned.\\n', '• small_caps (bool) – (New in v1.18.15) see append().\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'New in v1.18.9 – List of lines that did not fit in the rectangle. Each item is a tuple (text,\\nlength) containing a string and its length (on the page).\\n', 'Note: Use these methods as often as is required – there is no technical limit (except memory constraints of your\\nsystem). You can also mix append() and text boxes and have multiple of both. Text positioning is exclusively\\ncontrolled by the insertion point. Therefore there is no need to adhere to any order. (Changed in v1.18.0:) Raise\\nan exception for an unsupported font – checked via Font.is_writable.\\n', 'write_text(page, opacity=None, color=None, morph=None, overlay=True, oc=0, render_mode=0)\\n', 'Write the TextWriter text to a page, which is the only mandatory parameter. The other parameters can be\\nused to temporarily override the values used when the TextWriter was created.\\n', 'Parameters\\n', '• page – write to this Page.\\n', '• opacity (float) – override the value of the TextWriter for this output.\\n', '• color (sequ) – override the value of the TextWriter for this output.\\n', '• morph (sequ) – modify the text appearance by applying a matrix to it. If provided,\\nthis must be a sequence (fixpoint, matrix) with a point-like fixpoint and a matrix-like\\nmatrix. A typical example is rotating the text around fixpoint.\\n', '• overlay (bool) – put in foreground (default) or background.\\n', '• oc (int) – (new in v1.18.4) the xref of an OCG or OCMD.\\n', '376\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• render_mode (int) – The PDF Tr operator value. Values: 0 (default), 1, 2, 3\\n', '(invisible).\\n', 'text_rect\\n', 'The area currently occupied.\\n', 'Return type\\n', 'Rect\\n', 'last_point\\n', 'The “cursor position” – a Point – after the last written character (its bottom-right).\\n', 'Return type\\n', 'Point\\n', 'opacity\\n', 'The text opacity (modifiable).\\n', 'Return type\\n', 'float\\n', 'color\\n', 'The text color (modifiable).\\n', 'Return type\\n', 'float,tuple\\n', 'rect\\n', 'The page rectangle for which this TextWriter was created. Must not be modified.\\n', 'Return type\\n', 'Rect\\n', 'Note: To see some demo scripts dealing with TextWriter, have a look at this repository.\\n', '1. Opacity and color apply to all the text in this object.\\n', '2. If you need different colors / transparency, you must create a separate TextWriter. Whenever you determine\\nthe color should change, simply append the text to the respective TextWriter using the previously returned\\nlast_point as position for the new text span.\\n', '3. Appending items or text boxes can occur in arbitrary order: only the position parameter controls where text\\nappears.\\n', '4. Font and fontsize can freely vary within the same TextWriter. This can be used to let text with different\\nproperties appear on the same displayed line: just specify pos accordingly, and e.g. set it to last_point of the\\npreviously added item.\\n', '19.22. TextWriter\\n377\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '5. You can use the pos argument of TextWriter.fill_textbox() to set the position of the first text character.\\nThis allows filling the same textbox with contents from different TextWriter objects, thus allowing for multiple\\ncolors, opacities, etc.\\n', '6. MuPDF does not support all fonts with this feature, e.g. no Type3 fonts. Starting with v1.18.0 this can be checked\\nvia the font attribute Font.is_writable. This attribute is also checked when using TextWriter methods.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.23 Tools\\n', 'This class is a collection of utility methods and attributes, mainly around memory management. To simplify and speed\\nup its use, it is automatically instantiated under the name TOOLS when PyMuPDF is imported.\\n', 'Method / Attribute\\nDescription\\n', 'Tools.gen_id()\\ngenerate a unique identifier\\n', 'Tools.store_shrink()\\nshrink the storables cache1\\n', 'Tools.mupdf_warnings()\\nreturn the accumulated MuPDF warnings\\n', 'Tools.mupdf_display_errors()\\nreturn the accumulated MuPDF warnings\\n', 'Tools.reset_mupdf_warnings()\\nempty MuPDF messages on STDOUT\\n', 'Tools.set_aa_level()\\nset the anti-aliasing values\\n', 'Tools.set_annot_stem()\\nset the prefix of new annotation / link ids\\n', 'Tools.set_small_glyph_heights()\\nsearch and extract using small bbox heights\\n', 'Tools.set_subset_fontnames()\\ncontrol suppression of subset fontname tags\\n', 'Tools.show_aa_level()\\nreturn the anti-aliasing values\\n', 'Tools.unset_quad_corrections()\\ndisable PyMuPDF-specific code\\n', 'Tools.fitz_config\\nconfiguration settings of PyMuPDF\\n', 'Tools.store_maxsize\\nmaximum storables cache size\\n', 'Tools.store_size\\ncurrent storables cache size\\n', 'Class API\\n', 'class Tools\\n', 'gen_id()\\n', 'A convenience method returning a unique positive integer which will increase by 1 on every invocation.\\nExample usages include creating unique keys in databases - its creation should be faster than using times-\\ntamps by an order of magnitude.\\n', 'Note: MuPDF has dropped support for this in v1.14.0, so we have re-implemented a similar function with\\nthe following differences:\\n', '• It is not part of MuPDF’s global context and not threadsafe (not an issue because we do not support\\nthreads in PyMuPDF anyway).\\n', '1 This memory area is internally used by MuPDF, and it serves as a cache for objects that have already been read and interpreted, thus improving\\nperformance. The most bulky object types are images and also fonts. When an application starts up the MuPDF library (in our case this happens as\\npart of import fitz), it must specify a maximum size for this area. PyMuPDF’s uses the default value (256 MB) to limit memory consumption. Use\\nthe methods here to control or investigate store usage. For example: even after a document has been closed and all related objects have been deleted,\\nthe store usage may still not drop down to zero. So you might want to enforce that before opening another document.\\n', '378\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• It is implemented as int. This means that the maximum number is sys.maxsize. Should this number\\never be exceeded, the counter starts over again at 1.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'a unique positive integer.\\n', 'set_annot_stem(stem=None)\\n', '• New in v1.18.6\\n', 'Set or inquire the prefix for the id of new annotations, fields or links.\\n', 'Parameters\\n', 'stem (str) – if omitted, the current value is returned, default is “fitz”. Annotations,\\nfields / widgets and links technically are subtypes of the same type of object (/Annot) in\\nPDF documents. An /Annot object may be given a unique identifier within a page. For\\neach of the applicable subtypes, PyMuPDF generates identifiers “stem-Annn”, “stem-\\nWnnn” or “stem-Lnnn” respectively. The number “nnn” is used to enforce the required\\nuniqueness.\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'the current value.\\n', 'set_small_glyph_heights(on=None)\\n', '• New in v1.18.5\\n', 'Set or inquire reduced bbox heights in text extract and text search methods.\\n', 'Parameters\\n', 'on (bool) – if omitted or None, the current setting is returned. For other values the bool()\\nfunction is applied to set a global variable. If True, Page.search_for() and Page.\\nget_text() methods return character, span, line or block bboxes that have a height of\\nfont size. If False (standard setting when PyMuPDF is imported), bbox height will be\\nbased on font properties and normally equal line height.\\n', 'Return type\\n', 'bool\\n', 'Returns\\n', 'True or False.\\n', 'Note:\\nText extraction options “xml”, “xhtml” and “html”, which directly wrap MuPDF code, are not\\ninfluenced by this.\\n', 'set_subset_fontnames(on=None)\\n', '• New in v1.18.9\\n', 'Control suppression of subset fontname tags in text extractions.\\n', '19.23. Tools\\n379\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'on (bool) – if omitted / None, the current setting is returned. Arguments evaluat-\\ning to True or False set a global variable. If True, options “dict”, “json”, “raw-\\ndict” and “rawjson” will return e.g.\\n""NOHSJV+Calibri-Light"", otherwise only\\n""Calibri-Light"" (the default). The setting remains in effect until changed again.\\n', 'Return type\\n', 'bool\\n', 'Returns\\n', 'True or False.\\n', 'Note: Except mentioned above, no other text extraction variants are influenced by this. This is especially\\ntrue for the options “xml”, “xhtml” and “html”, which are based on MuPDF code. They extract the font\\nname ""Calibri-Light"", or even just the family name – Calibri in this example.\\n', 'unset_quad_corrections(on=None)\\n', '• New in v1.18.10\\n', 'Enable / disable PyMuPDF-specific code, that tries to rebuild valid character quads when encountering\\nnonsense in Page.get_text() text extractions. This code depends on certain font properties (ascender\\nand descender), which do not exist in rare situations and cause segmentation faults when trying to access\\nthem. This method sets a global parameter in PyMuPDF, which suppresses execution of this code.\\n', 'Parameters\\n', 'on (bool) – if omitted or None, the current setting is returned. For other values the\\nbool() function is applied to set a global variable. If True, PyMuPDF will not try to\\naccess the resp. font properties and use values ascender=0.8 and descender=-0.2\\ninstead.\\n', 'Return type\\n', 'bool\\n', 'Returns\\n', 'True or False.\\n', 'store_shrink(percent)\\n', 'Reduce the storables cache by a percentage of its current size.\\n', 'Parameters\\n', 'percent (int) – the percentage of current size to free. If 100+ the store will be emptied,\\nif zero, nothing will happen. MuPDF’s caching strategy is “least recently used”, so low-\\nusage elements get deleted first.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'the new current store size. Depending on the situation, the size reduction may be larger\\nthan the requested percentage.\\n', 'show_aa_level()\\n', '• New in version 1.16.14\\n', 'Return the current anti-aliasing values. These values control the rendering quality of graphics and text\\nelements.\\n', '380\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'dict\\n', 'Returns\\n', ""A dictionary with the following initial content: {'graphics':\\n8, 'text':\\n8,\\n'graphics_min_line_width':\\n0.0}.\\n"", 'set_aa_level(level)\\n', '• New in version 1.16.14\\n', 'Set the new number of bits to use for anti-aliasing. The same value is taken currently for graphics and text\\nrendering. This might change in a future MuPDF release.\\n', 'Parameters\\n', 'level (int) – an integer ranging between 0 and 8. Value outside this range will be\\nsilently changed to valid values. The value will remain in effect throughout the current\\nsession or until changed again.\\n', 'reset_mupdf_warnings()\\n', '• New in version 1.16.0\\n', 'Empty MuPDF warnings message buffer.\\n', 'mupdf_display_errors(value=None)\\n', '• New in version 1.16.8\\n', 'Show or set whether MuPDF errors should be displayed.\\n', 'Parameters\\n', 'value (bool) – if not a bool, the current setting is returned. If true, MuPDF errors\\nwill be shown on sys.stderr, otherwise suppressed. In any case, messages continue to be\\nstored in the warnings store. Upon import of PyMuPDF this value is True.\\n', 'Returns\\n', 'True or False\\n', 'mupdf_warnings(reset=True)\\n', '• New in version 1.16.0\\n', 'Return all stored MuPDF messages as a string with interspersed line-breaks.\\n', 'Parameters\\n', 'reset (bool) – (new in version 1.16.7) whether to automatically empty the store.\\n', 'fitz_config\\n', 'A dictionary containing the actual values used for configuring PyMuPDF and MuPDF. Also refer to the\\ninstallation chapter. This is an overview of the keys, each of which describes the status of a support aspect.\\n', '19.23. Tools\\n381\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Key\\nSupport included for ...\\n', 'plotter-g\\nGray colorspace rendering\\n', 'plotter-rgb\\nRGB colorspace rendering\\n', 'plotter-cmyk\\nCMYK colorspcae rendering\\n', 'plotter-n\\noverprint rendering\\n', 'pdf\\nPDF documents\\n', 'xps\\nXPS documents\\n', 'svg\\nSVG documents\\n', 'cbz\\nCBZ documents\\n', 'img\\nIMG documents\\n', 'html\\nHTML documents\\n', 'epub\\nEPUB documents\\n', 'jpx\\nJPEG2000 images\\n', 'js\\nJavaScript\\n', 'tofu\\nall TOFU fonts\\n', 'tofu-cjk\\nCJK font subset (China, Japan, Korea)\\n', 'tofu-cjk-ext\\nCJK font extensions\\n', 'tofu-cjk-lang\\nCJK font language extensions\\n', 'tofu-emoji\\nTOFU emoji fonts\\n', 'tofu-historic\\nTOFU historic fonts\\n', 'tofu-symbol\\nTOFU symbol fonts\\n', 'tofu-sil\\nTOFU SIL fonts\\n', 'icc\\nICC profiles\\n', 'py-memory\\nusing Python memory management2\\n', 'base14\\nBase-14 fonts (should always be true)\\n', 'For an explanation of the term “TOFU” see this Wikipedia article:\\n', ""In [1]: import fitz\\nIn [2]: TOOLS.fitz_config\\nOut[2]:\\n{'plotter-g': True,\\n"", ""'plotter-rgb': True,\\n'plotter-cmyk': True,\\n'plotter-n': True,\\n'pdf': True,\\n'xps': True,\\n'svg': True,\\n'cbz': True,\\n'img': True,\\n'html': True,\\n'epub': True,\\n'jpx': True,\\n'js': True,\\n'tofu': False,\\n'tofu-cjk': True,\\n'tofu-cjk-ext': False,\\n'tofu-cjk-lang': False,\\n'tofu-emoji': False,\\n"", '(continues on next page)\\n', '2 By default PyMuPDF and MuPDF use malloc()/free() for dynamic memory management. One can instead force them to use the Python\\nallocation functions PyMem_New()/PyMem_Del(), by modifying fitz/fitz.i to do #define JM_MEMORY 1 and rebuilding PyMuPDF.\\n', '382\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""'tofu-historic': False,\\n'tofu-symbol': False,\\n'tofu-sil': False,\\n'icc': True,\\n'py-memory': False,\\n'base14': True}\\n"", 'Return type\\n', 'dict\\n', 'store_maxsize\\n', 'Maximum storables cache size in bytes. PyMuPDF is generated with a value of 268’435’456 (256 MB,\\nthe default value), which you should therefore always see here. If this value is zero, then an “unlimited”\\ngrowth is permitted.\\n', 'Return type\\n', 'int\\n', 'store_size\\n', 'Current storables cache size in bytes. This value may change (and will usually increase) with every use of\\na PyMuPDF function. It will (automatically) decrease only when Tools.store_maxsize is going to be\\nexceeded: in this case, MuPDF will evict low-usage objects until the value is again in range.\\n', 'Return type\\n', 'int\\n', '19.23.1 Example Session\\n', '>>> import fitz\\n# print the maximum and current cache sizes\\n>>> fitz.TOOLS.store_maxsize\\n268435456\\n>>> fitz.TOOLS.store_size\\n0\\n>>> doc = fitz.open(""demo1.pdf"")\\n# pixmap creation puts lots of object in cache (text, images, fonts),\\n# apart from the pixmap itself\\n>>> pix = doc[0].get_pixmap(alpha=False)\\n>>> fitz.TOOLS.store_size\\n454519\\n# release (at least) 50% of the storage\\n>>> fitz.TOOLS.store_shrink(50)\\n13471\\n>>> fitz.TOOLS.store_size\\n13471\\n# get a few unique numbers\\n>>> fitz.TOOLS.gen_id()\\n1\\n>>> fitz.TOOLS.gen_id()\\n2\\n>>> fitz.TOOLS.gen_id()\\n', '(continues on next page)\\n', '19.23. Tools\\n383\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '3\\n# close document and see how much cache is still in use\\n>>> doc.close()\\n>>> fitz.TOOLS.store_size\\n0\\n>>>\\n', 'This documentation covers all versions up to 1.23.25.\\n', '19.24 Widget\\n', 'This class represents a PDF Form field, also called a “widget”. Throughout this documentation, we are using these terms\\nsynonymously. Fields technically are a special case of PDF annotations, which allow users with limited permissions to\\nenter information in a PDF. This is primarily used for filling out forms.\\n', 'Like annotations, widgets live on PDF pages. Similar to annotations, the first widget on a page is accessible via Page.\\nfirst_widget and subsequent widgets can be accessed via the Widget.next property.\\n', '(Changed in version 1.16.0) MuPDF no longer treats widgets as a subset of general annotations. Consequently, Page.\\nfirst_annot and Annot.next() will deliver non-widget annotations exclusively, and be None if only form fields\\nexist on a page. Vice versa, Page.first_widget and Widget.next() will only show widgets. This design decision\\nis purely internal to MuPDF; technically, links, annotations and fields have a lot in common and also continue to share\\nthe better part of their code within (Py-) MuPDF.\\n', 'Class API\\n', 'class Widget\\n', 'button_states()\\n', 'New in version 1.18.15\\n', 'Return the names of On / Off (i.e. selected / clicked or not) states a button field may have.\\nWhile the ‘Off’ state usually is also named like so, the ‘On’ state is often given a name relating\\nto the functional context, for example ‘Yes’, ‘Female’, etc.\\n', 'This method helps finding out the possible values of field_value in these cases.\\n', 'returns\\n', 'a dictionary with the names of ‘On’ and ‘Off’ for the normal and the pressed-\\ndown appearance of button widgets. The following example shows that the\\n“selected” value is “Male”:\\n', "">>> print(field.field_name, field.button_states())\\nGender Second person {'down': ['Male', 'Off'], 'normal': [\\n"", ""˓→'Male', 'Off']}\\n"", 'on_state()\\n', '• New in version 1.22.2\\n', 'Return the value of the “ON” state of check boxes and radio buttons. For check boxes this is\\nalways the value “Yes”. For radio buttons, this is the value to select / activate the button.\\n', '384\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'returns\\n', 'the value that sets the button to “selected”.\\nFor non-checkbox, non-\\nradiobutton fields, always None is returned. For check boxes the return is\\nTrue. For radio buttons this is the value “Male” in the following example:\\n', "">>> print(field.field_name, field.button_states())\\nGender Second person {'down': ['Male', 'Off'], 'normal': [\\n"", ""˓→'Male', 'Off']}\\n>>> print(field.on_state())\\nMale\\n"", 'So for check boxes and radio buttons, the recommended method to set them\\nto “selected”, or to check the state is the following:\\n', '>>> field.field_value = field.on_state()\\n>>> field.field_value == field.on_state()\\nTrue\\n', 'update()\\n', 'After any changes to a widget, this method must be used to store them in the PDF1.\\n', 'reset()\\n', 'Reset the field’s value to its default – if defined – or remove it. Do not forget to issue update() afterwards.\\n', 'next\\n', 'Point to the next form field on the page. The last widget returns None.\\n', 'border_color\\n', 'A list of up to 4 floats defining the field’s border color. Default value is None which causes border style\\nand border width to be ignored.\\n', 'border_style\\n', 'A string defining the line style of the field’s border. See Annot.border. Default is “s” (“Solid”) – a\\ncontinuous line. Only the first character (upper or lower case) will be regarded when creating a widget.\\n', 'border_width\\n', 'A float defining the width of the border line. Default is 1.\\n', 'border_dashes\\n', 'A list/tuple of integers defining the dash properties of the border line. This is only meaningful if bor-\\nder_style == “D” and border_color is provided.\\n', 'choice_values\\n', 'Python sequence of strings defining the valid choices of list boxes and combo boxes. For these widget\\ntypes, this property is mandatory and must contain at least two items. Ignored for other types.\\n', 'field_name\\n', 'A mandatory string defining the field’s name. No checking for duplicates takes place.\\n', 'field_label\\n', 'An optional string containing an “alternate” field name. Typically used for any notes, help on field usage,\\netc. Default is the field name.\\n', '1 If you intend to re-access a new or updated field (e.g. for making a pixmap), make sure to reload the page first. Either close and re-open the\\ndocument, or load another page first, or simply do page = doc.reload_page(page).\\n', '19.24. Widget\\n385\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'field_value\\n', 'The value of the field.\\n', 'field_flags\\n', 'An integer defining a large amount of properties of a field. Be careful when changing this attribute as this\\nmay change the field type.\\n', 'field_type\\n', 'A mandatory integer defining the field type. This is a value in the range of 0 to 6. It cannot be changed\\nwhen updating the widget.\\n', 'field_type_string\\n', 'A string describing (and derived from) the field type.\\n', 'fill_color\\n', 'A list of up to 4 floats defining the field’s background color.\\n', 'button_caption\\n', 'The caption string of a button-type field.\\n', 'is_signed\\n', 'A bool indicating the signing status of a signature field, else None.\\n', 'rect\\n', 'The rectangle containing the field.\\n', 'text_color\\n', 'A list of 1, 3 or 4 floats defining the text color. Default value is black ([0, 0, 0]).\\n', 'text_font\\n', 'A string defining the font to be used. Default and replacement for invalid values is “Helv”. For valid font\\nreference names see the table below.\\n', 'text_fontsize\\n', 'A float defining the text fontsize. Default value is zero, which causes PDF viewer software to dynami-\\ncally choose a size suitable for the annotation’s rectangle and text amount.\\n', 'text_maxlen\\n', 'An integer defining the maximum number of text characters. PDF viewers will (should) not accept a longer\\ntext.\\n', 'text_type\\n', 'An integer defining acceptable text types (e.g. numeric, date, time, etc.). For reference only for the time\\nbeing – will be ignored when creating or updating widgets.\\n', 'xref\\n', 'The PDF xref of the widget.\\n', 'script\\n', '• New in version 1.16.12\\n', 'JavaScript text (unicode) for an action associated with the widget, or None. This is the only script action\\nsupported for button type widgets.\\n', 'script_stroke\\n', '• New in version 1.16.12\\n', '386\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'JavaScript text (unicode) to be performed when the user types a key-stroke into a text field or combo box\\nor modifies the selection in a scrollable list box. This action can check the keystroke for validity and reject\\nor modify it. None if not present.\\n', 'script_format\\n', '• New in version 1.16.12\\n', 'JavaScript text (unicode) to be performed before the field is formatted to display its current value. This\\naction can modify the field’s value before formatting. None if not present.\\n', 'script_change\\n', '• New in version 1.16.12\\n', 'JavaScript text (unicode) to be performed when the field’s value is changed. This action can check the new\\nvalue for validity. None if not present.\\n', 'script_calc\\n', '• New in version 1.16.12\\n', 'JavaScript text (unicode) to be performed to recalculate the value of this field when that of another field\\nchanges. None if not present.\\n', 'script_blur\\n', '• New in version 1.22.6\\n', 'JavaScript text (unicode) to be performed on losing the focus of this field. None if not present.\\n', 'script_focus\\n', '• New in version 1.22.6\\n', 'JavaScript text (unicode) to be performed on focusing this field. None if not present.\\n', 'Note:\\n', '1. For adding or changing one of the above scripts,\\n', 'just put the appropriate JavaScript source code in the widget attribute. To remove a script, set the\\nrespective attribute to None.\\n', '2. Button fields only support script.\\n', 'Other script entries will automatically be set to None.\\n', '3. It is worthwhile to look at this manual with lots of information about Adobe’s standard scripts for various\\nfield types. For example, if you want to add a text field representing a date, you may want to store the\\nfollowing scripts. They will ensure pattern-compatible date formats and display date pickers in supporting\\nviewers:\\n', 'widget.script_format = \\'AFDate_FormatEx(""mm/dd/yyyy"");\\'\\nwidget.script_stroke = \\'AFDate_KeystrokeEx(""mm/dd/yyyy"");\\'\\n', '19.24. Widget\\n387\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.24.1 Standard Fonts for Widgets\\n', 'Widgets use their own resources object /DR. A widget resources object must at least contain a /Font object. Widget\\nfonts are independent from page fonts. We currently support the 14 PDF base fonts using the following fixed reference\\nnames, or any name of an already existing field font. When specifying a text font for new or changed widgets, either\\nchoose one in the first table column (upper and lower case supported), or one of the already existing form fonts. In the\\nlatter case, spelling must exactly match.\\n', 'To find out already existing field fonts, inspect the list Document.FormFonts.\\n', 'Reference\\nBase14 Fontname\\n', 'CoBI\\nCourier-BoldOblique\\n', 'CoBo\\nCourier-Bold\\n', 'CoIt\\nCourier-Oblique\\n', 'Cour\\nCourier\\n', 'HeBI\\nHelvetica-BoldOblique\\n', 'HeBo\\nHelvetica-Bold\\n', 'HeIt\\nHelvetica-Oblique\\n', 'Helv\\nHelvetica (default)\\n', 'Symb\\nSymbol\\n', 'TiBI\\nTimes-BoldItalic\\n', 'TiBo\\nTimes-Bold\\n', 'TiIt\\nTimes-Italic\\n', 'TiRo\\nTimes-Roman\\n', 'ZaDb\\nZapfDingbats\\n', 'You are generally free to use any font for every widget. However, we recommend using ZaDb (“ZapfDingbats”) and\\nfontsize 0 for check boxes: typical viewers will put a correctly sized tickmark in the field’s rectangle, when it is\\nclicked.\\n', '19.24.2 Supported Widget Types\\n', 'PyMuPDF supports the creation and update of many, but not all widget types.\\n', '• text (PDF_WIDGET_TYPE_TEXT)\\n', '• push button (PDF_WIDGET_TYPE_BUTTON)\\n', '• check box (PDF_WIDGET_TYPE_CHECKBOX)\\n', '• combo box (PDF_WIDGET_TYPE_COMBOBOX)\\n', '• list box (PDF_WIDGET_TYPE_LISTBOX)\\n', '• radio button (PDF_WIDGET_TYPE_RADIOBUTTON): PyMuPDF does not currently support the creation of groups\\nof (interconnected) radio buttons, where setting one automatically unsets the other buttons in the group. The\\nwidget object also does not reflect the presence of a button group. However: consistently selecting (or unse-\\nlecting) a radio button is supported. This includes correctly setting the value maintained in the owning button\\ngroup. Selecting a radio button may be done by either assigning True or field.on_state() to the field value.\\nDe-selecting the button should be done assigning False.\\n', '• signature (PDF_WIDGET_TYPE_SIGNATURE) read only.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '388\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.25 Xml\\n', '• New in v1.21.0\\n', 'This represents an HTML or an XML node. It is a helper class intended to access the DOM (Document Object Model)\\ncontent of a Story object.\\n', 'There is no need to ever directly construct an Xml object: after creating a Story, simply take Story.body – which is\\nan Xml node – and use it to navigate your way through the story’s DOM.\\n', 'Method / Attribute\\nDescription\\n', 'add_bullet_list()\\nAdd a ul tag - bulleted list, context manager.\\n', 'add_codeblock()\\nAdd a pre tag, context manager.\\n', 'add_description_list()\\nAdd a dl tag, context manager.\\n', 'add_division()\\nadd a div tag (renamed from “section”), context manager.\\n', 'add_header()\\nAdd a header tag (one of h1 to h6), context manager.\\n', 'add_horizontal_line()\\nAdd a hr tag.\\n', 'add_image()\\nAdd a img tag.\\n', 'add_link()\\nAdd a a tag.\\n', 'add_number_list()\\nAdd a ol tag, context manager.\\n', 'add_paragraph()\\nAdd a p tag.\\n', 'add_span()\\nAdd a span tag, context manager.\\n', 'add_subscript()\\nAdd subscript text(sub tag) - inline element, treated like text.\\n', 'add_superscript()\\nAdd subscript text (sup tag) - inline element, treated like text.\\n', 'add_code()\\nAdd code text (code tag) - inline element, treated like text.\\n', 'add_var()\\nAdd code text (code tag) - inline element, treated like text.\\n', 'add_samp()\\nAdd code text (code tag) - inline element, treated like text.\\n', 'add_kbd()\\nAdd code text (code tag) - inline element, treated like text.\\n', 'add_text()\\nAdd a text string. Line breaks n are honored as br tags.\\n', 'append_child()\\nAppend a child node.\\n', 'clone()\\nMake a copy if this node.\\n', 'create_element()\\nMake a new node with a given tag name.\\n', 'create_text_node()\\nCreate direct text for the current node.\\n', 'find()\\nFind a sub-node with given properties.\\n', 'find_next()\\nRepeat previous “find” with the same criteria.\\n', 'insert_after()\\nInsert an element after current node.\\n', 'insert_before()\\nInsert an element before current node.\\n', 'remove()\\nRemove this node.\\n', 'set_align()\\nSet the alignment using a CSS style spec. Only works for block-level tags.\\n', 'set_attribute()\\nSet an arbitrary key to some value (which may be empty).\\n', 'set_bgcolor()\\nSet the background color. Only works for block-level tags.\\n', 'set_bold()\\nSet bold on or off or to some string value.\\n', 'set_color()\\nSet text color.\\n', 'set_columns()\\nSet the number of columns. Argument may be any valid number or string.\\n', 'set_font()\\nSet the font-family, e.g. “sans-serif”.\\n', 'set_fontsize()\\nSet the font size. Either a float or a valid HTML/CSS string.\\n', 'set_id()\\nSet a id. A check for uniqueness is performed.\\n', 'set_italic()\\nSet italic on or off or to some string value.\\n', 'set_leading()\\nSet inter-block text distance (-mupdf-leading), only works on block-level nodes.\\n', 'set_lineheight()\\nSet height of a line. Float like 1.5, which sets to 1.5 * fontsize.\\n', 'set_margins()\\nSet the margin(s), float or string with up to 4 values.\\n', 'set_pagebreak_after()\\nInsert a page break after this node.\\n', 'continues on next page\\n', '19.25. Xml\\n389\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 5 – continued from previous page\\n', 'Method / Attribute\\nDescription\\n', 'set_pagebreak_before()\\nInsert a page break before this node.\\n', 'set_properties()\\nSet any or all desired properties in one call.\\n', 'add_style()\\nSet (add) a “style” that is not supported by its own set_ method.\\n', 'add_class()\\nSet (add) a “class” attribute.\\n', 'set_text_indent()\\nSet indentation for first textblock line. Only works for block-level nodes.\\n', 'tagname\\nEither the HTML tag name like p or None if a text node.\\n', 'text\\nEither the node’s text or None if a tag node.\\n', 'is_text\\nCheck if the node is a text.\\n', 'first_child\\nContains the first node one level below this one (or None).\\n', 'last_child\\nContains the last node one level below this one (or None).\\n', 'next\\nThe next node at the same level (or None).\\n', 'previous\\nThe previous node at the same level.\\n', 'root\\nThe top node of the DOM, which hence has the tagname html.\\n', 'Class API\\n', 'class Xml\\n', 'add_bullet_list()\\n', 'Add an ul tag - bulleted list, context manager. See ul.\\n', 'add_codeblock()\\n', 'Add a pre tag, context manager. See pre.\\n', 'add_description_list()\\n', 'Add a dl tag, context manager. See dl.\\n', 'add_division()\\n', 'Add a div tag, context manager. See div.\\n', 'add_header(value)\\n', 'Add a header tag (one of h1 to h6), context manager. See headings.\\n', 'Parameters\\n', 'value (int) – a value 1 - 6.\\n', 'add_horizontal_line()\\n', 'Add a hr tag. See hr.\\n', 'add_image(name, width=None, height=None)\\n', 'Add an img tag. This causes the inclusion of the named image in the DOM.\\n', 'Parameters\\n', '• name (str) – the filename of the image. This must be the member name of some\\nentry of the Archive parameter of the Story constructor.\\n', '• width – if provided, either an absolute (int) value, or a percentage string like “30%”.\\nA percentage value refers to the width of the specified where rectangle in Story.\\nplace(). If this value is provided and height is omitted, the image will be in-\\ncluded keeping its aspect ratio.\\n', '• height – if provided, either an absolute (int) value, or a percentage string like\\n“30%”. A percentage value refers to the height of the specified where rectangle in\\nStory.place(). If this value is provided and width is omitted, the image’s aspect\\nratio will be honored.\\n', '390\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'add_link(href, text=None)\\n', 'Add an a tag - inline element, treated like text.\\n', 'Parameters\\n', '• href (str) – the URL target.\\n', '• text (str) – the text to display. If omitted, the href text is shown instead.\\n', 'add_number_list()\\n', 'Add an ol tag, context manager.\\n', 'add_paragraph()\\n', 'Add a p tag, context manager.\\n', 'add_span()\\n', 'Add a span tag, context manager. See span\\n', 'add_subscript(text)\\n', 'Add “subscript” text(sub tag) - inline element, treated like text.\\n', 'add_superscript(text)\\n', 'Add “superscript” text (sup tag) - inline element, treated like text.\\n', 'add_code(text)\\n', 'Add “code” text (code tag) - inline element, treated like text.\\n', 'add_var(text)\\n', 'Add “variable” text (var tag) - inline element, treated like text.\\n', 'add_samp(text)\\n', 'Add “sample output” text (samp tag) - inline element, treated like text.\\n', 'add_kbd(text)\\n', 'Add “keyboard input” text (kbd tag) - inline element, treated like text.\\n', 'add_text(text)\\n', 'Add a text string. Line breaks n are honored as br tags.\\n', 'set_align(value)\\n', 'Set the text alignment. Only works for block-level tags.\\n', 'Parameters\\n', 'value – either one of the Text Alignment or the text-align values.\\n', 'set_attribute(key, value=None)\\n', 'Set an arbitrary key to some value (which may be empty).\\n', 'Parameters\\n', '• key (str) – the name of the attribute.\\n', '• value (str) – the (optional) value of the attribute.\\n', 'get_attributes()\\n', 'Retrieve all attributes of the current nodes as a dictionary.\\n', 'Returns\\n', 'a dictionary with the attributes and their values of the node.\\n', '19.25. Xml\\n391\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'get_attribute_value(key)\\n', 'Get the attribute value of key.\\n', 'Parameters\\n', 'key (str) – the name of the attribute.\\n', 'Returns\\n', 'a string with the value of key.\\n', 'remove_attribute(key)\\n', 'Remove the attribute key from the node.\\n', 'Parameters\\n', 'key (str) – the name of the attribute.\\n', 'set_bgcolor(value)\\n', 'Set the background color. Only works for block-level tags.\\n', 'Parameters\\n', 'value – either an RGB value like (255, 0, 0) (for “red”) or a valid background-color\\nvalue.\\n', 'set_bold(value)\\n', 'Set bold on or off or to some string value.\\n', 'Parameters\\n', 'value – True, False or a valid font-weight value.\\n', 'set_color(value)\\n', 'Set the color of the text following.\\n', 'Parameters\\n', 'value – either an RGB value like (255, 0, 0) (for “red”) or a valid color value.\\n', 'set_columns(value)\\n', 'Set the number of columns.\\n', 'Parameters\\n', 'value – a valid columns value.\\n', 'Note: Currently ignored - supported in a future MuPDF version.\\n', 'set_font(value)\\n', 'Set the font-family.\\n', 'Parameters\\n', 'value (str) – e.g. “sans-serif”.\\n', 'set_fontsize(value)\\n', 'Set the font size for text following.\\n', 'Parameters\\n', 'value – a float or a valid font-size value.\\n', 'set_id(unqid)\\n', 'Set a id. This serves as a unique identification of the node within the DOM. Use it to easily locate the node\\nto inspect or modify it. A check for uniqueness is performed.\\n', 'Parameters\\n', 'unqid (str) – id string of the node.\\n', '392\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'set_italic(value)\\n', 'Set italic on or off or to some string value for the text following it.\\n', 'Parameters\\n', 'value – True, False or some valid font-style value.\\n', 'set_leading(value)\\n', 'Set inter-block text distance (-mupdf-leading), only works on block-level nodes.\\n', 'Parameters\\n', 'value (float) – the distance in points to the previous block.\\n', 'set_lineheight(value)\\n', 'Set height of a line.\\n', 'Parameters\\n', 'value – a float like 1.5 (which sets to 1.5 * fontsize), or some valid line-height\\nvalue.\\n', 'set_margins(value)\\n', 'Set the margin(s).\\n', 'Parameters\\n', 'value – float or string with up to 4 values. See CSS documentation.\\n', 'set_pagebreak_after()\\n', 'Insert a page break after this node.\\n', 'set_pagebreak_before()\\n', 'Insert a page break before this node.\\n', 'set_properties(align=None, bgcolor=None, bold=None, color=None, columns=None, font=None,\\nfontsize=None, indent=None, italic=None, leading=None, lineheight=None,\\nmargins=None, pagebreak_after=False, pagebreak_before=False, unqid=None,\\ncls=None)\\n', 'Set any or all desired properties in one call. The meaning of argument values equal the values of the\\ncorresponding set_ methods.\\n', 'Note:\\nThe properties set by this method are directly attached to the node, whereas every set_ method\\ngenerates a new span below the current node that has the respective property. So to e.g. “globally” set\\nsome property for the body, this method must be used.\\n', 'add_style(value)\\n', 'Set (add) some style attribute not supported by its own set_ method.\\n', 'Parameters\\n', 'value (str) – any valid CSS style value.\\n', 'add_class(value)\\n', 'Set (add) some “class” attribute.\\n', 'Parameters\\n', 'value (str) – the name of the class. Must have been defined in either the HTML or the\\nCSS source of the DOM.\\n', 'set_text_indent(value)\\n', 'Set indentation for the first textblock line. Only works for block-level nodes.\\n', '19.25. Xml\\n393\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'value – a valid text-indent value. Please note that negative values do not work.\\n', 'append_child(node)\\n', 'Append a child node. This is a low-level method used by other methods like Xml.add_paragraph().\\n', 'Parameters\\n', 'node – the Xml node to append.\\n', 'create_text_node(text)\\n', 'Create direct text for the current node.\\n', 'Parameters\\n', 'text (str) – the text to append.\\n', 'Return type\\n', 'Xml\\n', 'Returns\\n', 'the created element.\\n', 'create_element(tag)\\n', 'Create a new node with a given tag.\\nThis a low-level method used by other methods like Xml.\\nadd_paragraph().\\n', 'Parameters\\n', 'tag (str) – the element tag.\\n', 'Return type\\n', 'Xml\\n', 'Returns\\n', 'the created element. To actually bind it to the DOM, use Xml.append_child().\\n', 'insert_before(elem)\\n', 'Insert the given element elem before this node.\\n', 'Parameters\\n', 'elem – some Xml element.\\n', 'insert_after(elem)\\n', 'Insert the given element elem after this node.\\n', 'Parameters\\n', 'elem – some Xml element.\\n', 'clone()\\n', 'Make a copy of this node, which then may be appended (using Xml.append_child()) or inserted (using\\none of Xml.insert_before(), Xml.insert_after()) in this DOM.\\n', 'Returns\\n', 'the clone (Xml) of the current node.\\n', 'remove()\\n', 'Remove this node from the DOM.\\n', 'debug()\\n', 'For debugging purposes, print this node’s structure in a simplified form.\\n', '394\\nChapter 19. Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'find(tag, att, match)\\n', 'Under the current node, find the first node with the given tag, attribute att and value match.\\n', 'Parameters\\n', '• tag (str) – restrict search to this tag. May be None for unrestricted searches.\\n', '• att (str) – check this attribute. May be None.\\n', '• match (str) – the desired attribute value to match. May be None.\\n', 'Return type\\n', 'Xml.\\n', 'Returns\\n', 'None if nothing found, otherwise the first matching node.\\n', 'find_next(tag, att, match)\\n', 'Continue a previous Xml.find() (or find_next()) with the same values.\\n', 'Return type\\n', 'Xml.\\n', 'Returns\\n', 'None if none more found, otherwise the next matching node.\\n', 'tagname\\n', 'Either the HTML tag name like p or None if a text node.\\n', 'text\\n', 'Either the node’s text or None if a tag node.\\n', 'is_text\\n', 'Check if a text node.\\n', 'first_child\\n', 'Contains the first node one level below this one (or None).\\n', 'last_child\\n', 'Contains the last node one level below this one (or None).\\n', 'next\\n', 'The next node at the same level (or None).\\n', 'previous\\n', 'The previous node at the same level.\\n', 'root\\n', 'The top node of the DOM, which hence has the tagname html.\\n', '19.25.1 Setting Text properties\\n', 'In HTML tags can be nested such that innermost text inherits properties from the tag enveloping its parent tag. For\\nexample <p>.\\n', 'To achieve the same effect, methods like Xml.set_bold() and Xml.set_italic() each open a temporary span with\\nthe desired property underneath the current node.\\n', 'In addition, these methods return there parent node, so they can be concatenated with each other.\\n', '19.25. Xml\\n395\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '19.25.2 Context Manager support\\n', 'The standard way to add nodes to a DOM is this:\\n', 'body = story.body\\npara = body.add_paragraph()\\n# add a paragraph\\n', 'para.set_bold()\\n# text that follows will be bold\\n', 'para.add_text(""some bold text"")\\npara.set_italic()\\n# text that follows will additionally be italic\\n', 'para.add_txt(""this is bold and italic"")\\npara.set_italic(False).set_bold(False)\\n# all following text will be regular\\n', 'para.add_text(""regular text"")\\n', 'Methods that are flagged as “context managers” can conveniently be used in this way:\\n', 'body = story.body\\nwith body.add_paragraph() as para:\\npara.set_bold().add_text(""some bold text"")\\npara.set_italic().add_text(""this is bold and italic"")\\npara.set_italic(False).set_bold(False).add_text(""regular text"")\\npara.add_text(""more regular text"")\\n', 'This documentation covers all versions up to 1.23.25.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '396\\nChapter 19. Classes\\n', 'CHAPTER\\n', 'TWENTY\\n', 'OPERATOR ALGEBRA FOR GEOMETRY OBJECTS\\n', 'Instances of classes Point, IRect, Rect, Quad and Matrix are collectively also called “geometry” objects.\\n', 'They all are special cases of Python sequences, see Using Python Sequences as Arguments in PyMuPDF for more\\nbackground.\\n', 'We have defined operators for these classes that allow dealing with them (almost) like ordinary numbers in terms of\\naddition, subtraction, multiplication, division, and some others.\\n', 'This chapter is a synopsis of what is possible.\\n', '20.1 General Remarks\\n', '1. Operators can be either binary (i.e. involving two objects) or unary.\\n', '2. The resulting type of binary operations is either a new object of the left operand’s class or a bool.\\n', '3. The result of unary operations is either a new object of the same class, a bool or a float.\\n', '4. The binary operators +, -, *, / are defined for all classes. They roughly do what you would expect – except, that\\nthe second operand ...\\n', '• may always be a number which then performs the operation on every component of the first one,\\n', '• may always be a numeric sequence of the same length (2, 4 or 6) – we call such sequences point_like,\\n', 'rect_like, quad_like or matrix_like, respectively.\\n', '5. Rectangles support additional binary operations: intersection (operator “&”), union (operator “|”) and con-\\ntainment checking.\\n', '6. Binary operators fully support in-place operations, so expressions like a /= b are valid if b is numeric or\\n“a_like”.\\n', '20.2 Unary Operations\\n', 'Oper.\\nResult\\n', 'bool(OBJ)\\nis false exactly if all components of OBJ are zero\\n', 'abs(OBJ)\\nthe rectangle area – equal to norm(OBJ) for the other types\\n', 'norm(OBJ)\\nsquare root of the component squares (Euclidean norm)\\n', '+OBJ\\nnew copy of OBJ\\n', '-OBJ\\nnew copy of OBJ with negated components\\n', '~m\\ninverse of matrix “m”, or the null matrix if not invertible\\n', '397\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '20.3 Binary Operations\\n', 'For every geometry object “a” and every number “b”, the operations “a ° b” and “a °= b” are always defined for the\\noperators +, -, *, /. The respective operation is simply executed for each component of “a”. If the second operand is\\nnot a number, then the following is defined:\\n', 'Oper. Result\\na+b,\\na-b\\n', 'component-wise execution, “b” must be “a-like”.\\n', 'a*m,\\na/m\\n', '“a” can be a point, rectangle or matrix, but “m” must be matrix_like. “a/m” is treated as “a*~m” (see\\nnote below for non-invertible matrices). If “a” is a point or a rectangle, then “a.transform(m)” is executed.\\nIf “a” is a matrix, then matrix concatenation takes place.\\n', 'a&b\\nintersection rectangle: “a” must be a rectangle and “b” rect_like. Delivers the largest rectangle con-\\ntained in both operands.\\n', 'a|b\\nunion rectangle: “a” must be a rectangle, and “b” may be point_like or rect_like. Delivers the smallest\\nrectangle containing both operands.\\n', 'b in\\na\\n', 'if “b” is a number, then b in tuple(a) is returned. If “b” is point_like, rect_like or quad_like,\\nthen “a” must be a rectangle, and a.contains(b) is returned.\\n', 'a\\n==\\nb\\n', 'True if bool(a-b) is False (“b” may be “a-like”).\\n', 'Note: Please note an important difference to usual arithmetic:\\n', 'Matrix multiplication is not commutative, i.e. in general we have m*n != n*m for two matrices. Also, there are non-\\nzero matrices which have no inverse, for example m = Matrix(1, 0, 1, 0, 1, 0). If you try to divide by any of\\nthese, you will receive a ZeroDivisionError exception using operator “/”, e.g. for the expression fitz.Identity\\n/ m. But if you formulate fitz.Identity * ~m, the result will be fitz.Matrix() (the null matrix).\\n', 'Admittedly, this represents an inconsistency, and we are considering to remove it. For the time being, you can choose\\nto avoid an exception and check whether ~m is the null matrix, or accept a potential ZeroDivisionError by using fitz.\\nIdentity / m.\\n', 'Note:\\n', '• With these conventions, all the usual algebra rules apply. For example, arbitrarily using brackets (among objects\\nof the same class!) is possible: if r1, r2 are rectangles and m1, m2 are matrices, you can do this (r1 + r2) *\\nm1 * m2.\\n', '• For all objects of the same class, a + b + c == (a + b) + c == a + (b + c) is true.\\n', '• For matrices in addition the following is true: (m1 + m2) * m3 == m1 * m3 + m2 * m3 (distributivity prop-\\nerty).\\n', '• But the sequence of applying matrices is important: If r is a rectangle and m1, m2 are matrices, then –\\ncaution!:\\n', '– r * m1 * m2 == (r * m1) * m2 != r * (m1 * m2)\\n', '398\\nChapter 20. Operator Algebra for Geometry Objects\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '20.4 Some Examples\\n', '20.4.1 Manipulation with numbers\\n', 'For the usual arithmetic operations, numbers are always allowed as second operand. In addition, you can formulate ""x\\nin OBJ"", where x is a number. It is implemented as ""x in tuple(OBJ)"":\\n', '>>> fitz.Rect(1, 2, 3, 4) + 5\\nfitz.Rect(6.0, 7.0, 8.0, 9.0)\\n>>> 3 in fitz.Rect(1, 2, 3, 4)\\nTrue\\n>>>\\n', 'The following will create the upper left quarter of a document page rectangle:\\n', '>>> page.rect\\nRect(0.0, 0.0, 595.0, 842.0)\\n>>> page.rect / 2\\nRect(0.0, 0.0, 297.5, 421.0)\\n>>>\\n', 'The following will deliver the middle point of a line that connects two points p1 and p2:\\n', '>>> p1 = fitz.Point(1, 2)\\n>>> p2 = fitz.Point(4711, 3141)\\n>>> mp = (p1 + p2) / 2\\n>>> mp\\nPoint(2356.0, 1571.5)\\n>>>\\n', '20.4.2 Manipulation with “like” Objects\\n', 'The second operand of a binary operation can always be “like” the left operand. “Like” in this context means “a\\nsequence of numbers of the same length”. With the above examples:\\n', '>>> p1 + p2\\nPoint(4712.0, 3143.0)\\n>>> p1 + (4711, 3141)\\nPoint(4712.0, 3143.0)\\n>>> p1 += (4711, 3141)\\n>>> p1\\nPoint(4712.0, 3143.0)\\n>>>\\n', 'To shift a rectangle for 5 pixels to the right, do this:\\n', '>>> fitz.Rect(100, 100, 200, 200) + (5, 0, 5, 0)\\n# add 5 to the x coordinates\\n', 'Rect(105.0, 100.0, 205.0, 200.0)\\n>>>\\n', 'Points, rectangles and matrices can be transformed with matrices. In PyMuPDF, we treat this like a “multiplication”\\n(or resp. “division”), where the second operand may be “like” a matrix. Division in this context means “multiplication\\nwith the inverted matrix”:\\n', '20.4. Some Examples\\n399\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '>>> m = fitz.Matrix(1, 2, 3, 4, 5, 6)\\n>>> n = fitz.Matrix(6, 5, 4, 3, 2, 1)\\n>>> p = fitz.Point(1, 2)\\n>>> p * m\\nPoint(12.0, 16.0)\\n>>> p * (1, 2, 3, 4, 5, 6)\\nPoint(12.0, 16.0)\\n>>> p / m\\nPoint(2.0, -2.0)\\n>>> p / (1, 2, 3, 4, 5, 6)\\nPoint(2.0, -2.0)\\n>>>\\n>>> m * n\\n# matrix multiplication\\n', 'Matrix(14.0, 11.0, 34.0, 27.0, 56.0, 44.0)\\n>>> m / n\\n# matrix division\\n', 'Matrix(2.5, -3.5, 3.5, -4.5, 5.5, -7.5)\\n>>>\\n>>> m / m\\n# result is equal to the Identity matrix\\n', 'Matrix(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\\n>>>\\n>>> # look at this non-invertible matrix:\\n>>> m = fitz.Matrix(1, 0, 1, 0, 1, 0)\\n>>> ~m\\nMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\\n>>> # we try dividing by it in two ways:\\n>>> p = fitz.Point(1, 2)\\n>>> p * ~m\\n# this delivers point (0, 0):\\n', 'Point(0.0, 0.0)\\n>>> p / m\\n# but this is an exception:\\n', 'Traceback (most recent call last):\\n', 'File ""<pyshell#6>"", line 1, in <module>\\n', 'p / m\\nFile ""... /site-packages/fitz/fitz.py"", line 869, in __truediv__\\n', 'raise ZeroDivisionError(""matrix not invertible"")\\n', 'ZeroDivisionError: matrix not invertible\\n>>>\\n', 'As a specialty, rectangles support additional binary operations:\\n', '• intersection – the common area of rectangle-likes, operator “&”\\n', '• inclusion – enlarge to include a point-like or rect-like, operator “|”\\n', '• containment check – whether a point-like or rect-like is inside\\n', 'Here is an example for creating the smallest rectangle enclosing given points:\\n', '>>> # first define some point-likes\\n>>> points = []\\n>>> for i in range(10):\\n', 'for j in range(10):\\n', 'points.append((i, j))\\n', '>>>\\n>>> # now create a rectangle containing all these 100 points\\n>>> # start with an empty rectangle\\n', '(continues on next page)\\n', '400\\nChapter 20. Operator Algebra for Geometry Objects\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '>>> r = fitz.Rect(points[0], points[0])\\n>>> for p in points[1:]:\\n# and include remaining points one by one\\n', 'r |= p\\n', '>>> r\\n# here is the to be expected result:\\n', 'Rect(0.0, 0.0, 9.0, 9.0)\\n>>> (4, 5) in r\\n# this point-like lies inside the rectangle\\n', 'True\\n>>> # and this rect-like is also inside\\n>>> (4, 4, 5, 5) in r\\nTrue\\n>>>\\n', 'This documentation covers all versions up to 1.23.25.\\n', '20.4. Some Examples\\n401\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '402\\nChapter 20. Operator Algebra for Geometry Objects\\n', 'CHAPTER\\n', 'TWENTYONE\\n', 'LOW LEVEL FUNCTIONS AND CLASSES\\n', 'Contains a number of functions and classes for the experienced user. To be used for special needs or performance\\nrequirements.\\n', '21.1 Functions\\n', 'The following are miscellaneous functions and attributes on a fairly low-level technical detail.\\n', 'Some functions provide detail access to PDF structures. Others are stripped-down, high performance versions of other\\nfunctions which provide more information.\\n', 'Yet others are handy, general-purpose utilities.\\n', 'Function\\nShort Description\\n', 'Annot.apn_bbox\\nPDF only: bbox of the appearance object\\n', 'Annot.apn_matrix\\nPDF only: the matrix of the appearance object\\n', 'Page.is_wrapped\\ncheck whether contents wrapping is present\\n', 'adobe_glyph_names()\\nlist of glyph names defined in Adobe Glyph List\\n', 'adobe_glyph_unicodes()\\nlist of unicodes defined in Adobe Glyph List\\n', 'Annot.clean_contents()\\nPDF only: clean the annot’s contents object\\n', 'Annot.set_apn_bbox()\\nPDF only: set the bbox of the appearance object\\n', 'Annot.set_apn_matrix()\\nPDF only: set the matrix of the appearance object\\n', 'ConversionHeader()\\nreturn header string for get_text methods\\n', 'ConversionTrailer()\\nreturn trailer string for get_text methods\\n', 'Document.del_xml_metadata()\\nPDF only: remove XML metadata\\n', 'Document.get_char_widths()\\nPDF only: return a list of glyph widths of a font\\n', 'Document.get_new_xref()\\nPDF only: create and return a new xref entry\\n', 'Document.is_stream()\\nPDF only: check whether an xref is a stream object\\n', 'Document.xml_metadata_xref()\\nPDF only: return XML metadata xref number\\n', 'Document.xref_length()\\nPDF only: return length of xref table\\n', 'EMPTY_IRECT()\\nreturn the (standard) empty / invalid rectangle\\n', 'EMPTY_QUAD()\\nreturn the (standard) empty / invalid quad\\n', 'EMPTY_RECT()\\nreturn the (standard) empty / invalid rectangle\\n', 'get_pdf_now()\\nreturn the current timestamp in PDF format\\n', 'get_pdf_str()\\nreturn PDF-compatible string\\n', 'get_text_length()\\nreturn string length for a given font & fontsize\\n', 'glyph_name_to_unicode()\\nreturn unicode from a glyph name\\n', 'image_profile()\\nreturn a dictionary of basic image properties\\n', 'INFINITE_IRECT()\\nreturn the (only existing) infinite rectangle\\n', 'continues on next page\\n', '403\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Table 1 – continued from previous page\\n', 'Function\\nShort Description\\n', 'INFINITE_QUAD()\\nreturn the (only existing) infinite quad\\n', 'INFINITE_RECT()\\nreturn the (only existing) infinite rectangle\\n', 'make_table()\\nsplit rectangle in sub-rectangles\\n', 'Page.clean_contents()\\nPDF only: clean the page’s contents objects\\n', 'Page.get_bboxlog()\\nlist of rectangles that envelop text, drawing or image objects\\n', 'Page.get_contents()\\nPDF only: return a list of content xref numbers\\n', 'Page.get_displaylist()\\ncreate the page’s display list\\n', 'Page.get_text_blocks()\\nextract text blocks as a Python list\\n', 'Page.get_text_words()\\nextract text words as a Python list\\n', 'Page.get_texttrace()\\nlow-level text information\\n', 'Page.read_contents()\\nPDF only: get complete, concatenated /Contents source\\n', 'Page.run()\\nrun a page through a device\\n', 'Page.set_contents()\\nPDF only: set page’s contents to some xref\\n', 'Page.wrap_contents()\\nwrap contents with stacking commands\\n', 'css_for_pymupdf_font()\\ncreate CSS source for a font in package pymupdf_fonts\\n', 'paper_rect()\\nreturn rectangle for a known paper format\\n', 'paper_size()\\nreturn width, height for a known paper format\\n', 'paper_sizes()\\ndictionary of pre-defined paper formats\\n', 'planish_line()\\nmatrix to map a line to the x-axis\\n', 'recover_char_quad()\\ncompute the quad of a char (“rawdict”)\\n', 'recover_line_quad()\\ncompute the quad of a subset of line spans\\n', 'recover_quad()\\ncompute the quad of a span (“dict”, “rawdict”)\\n', 'recover_span_quad()\\ncompute the quad of a subset of span characters\\n', 'sRGB_to_pdf()\\nreturn PDF RGB color tuple from an sRGB integer\\n', 'sRGB_to_rgb()\\nreturn (R, G, B) color tuple from an sRGB integer\\n', 'unicode_to_glyph_name()\\nreturn glyph name from a unicode\\n', 'get_tessdata()\\nlocates the language support of the Tesseract-OCR installation\\n', 'fitz_fontdescriptors\\ndictionary of available supplement fonts\\n', 'TESSDATA_PREFIX\\na copy of os.environ[""TESSDATA_PREFIX""]\\n', 'pdfcolor\\ndictionary of almost 500 RGB colors in PDF format.\\n', 'paper_size(s)\\n', 'Convenience function to return width and height of a known paper format code. These values are\\ngiven in pixels for the standard resolution 72 pixels = 1 inch.\\n', 'Currently defined formats include ‘A0’ through ‘A10’, ‘B0’ through ‘B10’, ‘C0’ through ‘C10’,\\n‘Card-4x6’, ‘Card-5x7’, ‘Commercial’, ‘Executive’, ‘Invoice’, ‘Ledger’, ‘Legal’, ‘Legal-13’,\\n‘Letter’, ‘Monarch’ and ‘Tabloid-Extra’, each in either portrait or landscape format.\\n', 'A format name must be supplied as a string (case in sensitive), optionally suffixed with “-L” (land-\\nscape) or “-P” (portrait). No suffix defaults to portrait.\\n', 'Parameters\\n', 's (str) – any format name from above in upper or lower case, like “A4” or “letter-\\nl”.\\n', 'Return type\\n', 'tuple\\n', 'Returns\\n', '(width, height) of the paper format. For an unknown format (-1, -1) is returned.\\nExamples: fitz.paper_size(“A4”) returns (595, 842) and fitz.paper_size(“letter-l”)\\ndelivers (792, 612).\\n', '404\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'paper_rect(s)\\n', 'Convenience function to return a Rect for a known paper format.\\n', 'Parameters\\n', 's (str) – any format name supported by paper_size().\\n', 'Return type\\n', 'Rect\\n', 'Returns\\n', 'fitz.Rect(0, 0, width, height) with width, height=fitz.paper_size(s).\\n', '>>> import fitz\\n>>> fitz.paper_rect(""letter-l"")\\nfitz.Rect(0.0, 0.0, 792.0, 612.0)\\n>>>\\n', 'sRGB_to_pdf(srgb)\\n', 'New in v1.17.4\\n', 'Convenience function returning a PDF color triple (red, green, blue) for a given sRGB color integer\\nas it occurs in Page.get_text() dictionaries “dict” and “rawdict”.\\n', 'Parameters\\n', 'srgb (int) – an integer of format RRGGBB, where each color component is an\\ninteger in range(255).\\n', 'Returns\\n', 'a tuple (red, green, blue) with float items in interval 0 <= item <= 1 representing\\nthe same color. Example sRGB_to_pdf(0xff0000) = (1, 0, 0) (red).\\n', 'sRGB_to_rgb(srgb)\\n', 'New in v1.17.4\\n', 'Convenience function returning a color (red, green, blue) for a given sRGB color integer.\\n', 'Parameters\\n', 'srgb (int) – an integer of format RRGGBB, where each color component is an\\ninteger in range(255).\\n', 'Returns\\n', 'a tuple (red, green, blue) with integer items in range(256) representing the same\\ncolor. Example sRGB_to_pdf(0xff0000) = (255, 0, 0) (red).\\n', 'glyph_name_to_unicode(name)\\n', 'New in v1.18.0\\n', 'Return the unicode number of a glyph name based on the Adobe Glyph List.\\n', 'Parameters\\n', 'name (str) – the name of some glyph. The function is based on the Adobe Glyph\\nList.\\n', '21.1. Functions\\n405\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'the unicode. Invalid name entries return 0xfffd (65533).\\n', 'Note: A similar functionality is provided by package fontTools in its agl sub-package.\\n', 'unicode_to_glyph_name(ch)\\n', 'New in v1.18.0\\n', 'Return the glyph name of a unicode number, based on the Adobe Glyph List.\\n', 'Parameters\\n', 'ch (int) – the unicode given by e.g. ord(""ß""). The function is based on the\\nAdobe Glyph List.\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'the glyph name.\\nE.g.\\nfitz.unicode_to_glyph_name(ord(""Ä"")) returns\\n\\'Adieresis\\'.\\n', 'Note: A similar functionality is provided by package fontTools: in its agl sub-package.\\n', 'adobe_glyph_names()\\n', 'New in v1.18.0\\n', 'Return a list of glyph names defined in the Adobe Glyph List.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'list of strings.\\n', 'Note: A similar functionality is provided by package fontTools in its agl sub-package.\\n', 'adobe_glyph_unicodes()\\n', 'New in v1.18.0\\n', 'Return a list of unicodes for there exists a glyph name in the Adobe Glyph List.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'list of integers.\\n', '406\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: A similar functionality is provided by package fontTools in its agl sub-package.\\n', 'css_for_pymupdf_font(fontcode, *, CSS=None, archive=None, name=None)\\n', 'New in v1.21.0\\n', 'Utility function for use with “Story” applications.\\n', 'Create CSS @font-face items for the given fontcode in pymupdf-fonts. Creates a CSS font-family\\nfor all fonts starting with string “fontcode”.\\n', 'The font naming convention in package pymupdf-fonts is “fontcode<sf>”, where the suffix “sf” is\\none of “” (empty), “it”/”i”, “bo”/”b” or “bi”. These suffixes thus represent the regular, italic, bold\\nor bold-italic variants of that font.\\n', 'For example, font code “notos” refers to fonts\\n', '• “notos” - “Noto Sans Regular”\\n', '• “notosit” - “Noto Sans Italic”\\n', '• “notosbo” - “Noto Sans Bold”\\n', '• “notosbi” - “Noto Sans Bold Italic”\\n', 'The function creates (up to) four CSS @font-face definitions and collectively assigns the\\nfont-family name “notos” to them (or the “name” value if provided). Associated font buffers\\nare placed / added to the provided archive.\\n', 'To use the font in the Python API for Story, execute .set_font(fontcode) (or “name” if given).\\nThe correct font weight or style will automatically be selected as required.\\n', 'For example to replace the “sans-serif” HTML standard (i.e. Helvetica) with the above “notos”,\\nexecute the following. Whenever “sans-serif” is used (whether explicitly or implicitly), the Noto\\nSans fonts will be selected.\\n', 'CSS = fitz.css_for_pymupdf_font(""notos"", name=""sans-serif"", archive=...)\\n', 'Expects and returns the CSS source, with the new CSS definitions appended.\\n', 'Parameters\\n', '• fontcode (str) – one of the font codes present in package pymupdf-fonts\\n', '(usually) representing the regular version of the font family.\\n', '• CSS (str) – any already existing CSS source, or None. The function will\\nappend its new definitions to this. This is the string that must be used as\\nuser_css when creating the Story.\\n', '• archive – Archive, mandatory. All font binaries (i.e. up to four) found for\\n“fontcode” will be added to the archive. This is the archive that must be used\\nas Archive when creating the Story.\\n', '• name (str) – the name under which the “fontcode” fonts should be found. If\\nomitted, “fontcode” will be used.\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'Modified CSS, with appended @font-face statements for each font variant\\nof fontcode.\\nFontbuffers associated with “fontcode” will have been added\\n', '21.1. Functions\\n407\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', ""to ‘archive’.\\nThe function will automatically find up to 4 font variants.\\nAll pymupdf-fonts (that are no special purpose like math or music, etc.)\\nhave regular, bold, italic and bold-italic variants.\\nTo see currently available\\nfont codes check fitz.fitz_fontdescriptors.keys().\\nThis will show\\nsomething like dict_keys(['cascadia', 'cascadiai', 'cascadiab',\\n'cascadiabi', 'figbo', 'figo', 'figbi', 'figit', 'fimbo',\\n'fimo', 'spacembo', 'spacembi', 'spacemit', 'spacemo',\\n'math', 'music', 'symbol1', 'symbol2', 'notosbo', 'notosbi',\\n'notosit', 'notos', 'ubuntu', 'ubuntubo', 'ubuntubi',\\n'ubuntuit', 'ubuntm', 'ubuntmbo', 'ubuntmbi', 'ubuntmit']).\\n"", 'Here is a complete snippet for using the “Noto Sans” font instead of “Helvetica”:\\n', 'arch = fitz.Archive()\\nCSS = fitz.css_for_pymupdf_font(""notos"", name=""sans-serif"", archive=arch)\\nstory = fitz.Story(user_css=CSS, archive=arch)\\n', 'make_table(rect, cols=1, rows=1)\\n', 'New in v1.17.4\\n', 'Convenience function to split a rectangle into sub-rectangles of equal size. Returns a list of rows\\nlists, each containing cols Rect items. Each sub-rectangle can then be addressed by its row and\\ncolumn index.\\n', 'Parameters\\n', '• rect (rect_like) – the rectangle to split.\\n', '• cols (int) – the desired number of columns.\\n', '• rows (int) – the desired number of rows.\\n', 'Returns\\n', 'a list of Rect objects of equal size, whose union equals rect. Here is the layout of\\na 3x4 table created by cell = fitz.make_table(rect, cols=4, rows=3):\\n', 'planish_line(p1, p2)\\n', '• New in version 1.16.2)*\\n', 'Return a matrix which maps the line from p1 to p2 to the x-axis such that p1 will become (0,0) and\\np2 a point with the same distance to (0,0).\\n', 'Parameters\\n', '• p1 (point_like) – starting point of the line.\\n', '• p2 (point_like) – end point of the line.\\n', 'Return type\\n', 'Matrix\\n', '408\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Returns\\n', 'a matrix which combines a rotation and a translation:\\n', '>>> p1 = fitz.Point(1, 1)\\n>>> p2 = fitz.Point(4, 5)\\n>>> abs(p2 - p1)\\n# distance of points\\n', '5.0\\n>>> m = fitz.planish_line(p1, p2)\\n>>> p1 * m\\nPoint(0.0, 0.0)\\n>>> p2 * m\\nPoint(5.0, -5.960464477539063e-08)\\n>>> # distance of the resulting points\\n>>> abs(p2 * m - p1 * m)\\n5.0\\n', 'paper_sizes()\\n', 'A dictionary of pre-defines paper formats. Used as basis for paper_size().\\n', 'fitz_fontdescriptors\\n', '• New in v1.17.5\\n', 'A dictionary of usable fonts from repository pymupdf-fonts. Items are keyed by their reserved font-\\nname and provide information like this:\\n', 'In [2]: fitz.fitz_fontdescriptors.keys()\\nOut[2]: dict_keys([\\'figbo\\', \\'figo\\', \\'figbi\\', \\'figit\\', \\'fimbo\\', \\'fimo\\',\\n\\'spacembo\\', \\'spacembi\\', \\'spacemit\\', \\'spacemo\\', \\'math\\', \\'music\\', \\'symbol1\\',\\n\\'symbol2\\'])\\nIn [3]: fitz.fitz_fontdescriptors[""fimo""]\\nOut[3]:\\n{\\'name\\': \\'Fira Mono Regular\\',\\n\\'size\\': 125712,\\n\\'mono\\': True,\\n\\'bold\\': False,\\n\\'italic\\': False,\\n\\'serif\\': True,\\n\\'glyphs\\': 1485}\\n', '21.1. Functions\\n409\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'If pymupdf-fonts is not installed, the dictionary is empty.\\n', 'The dictionary keys can be used to define a Font via e.g. font = fitz.Font(""fimo"") – just like\\nyou can do it with the builtin fonts “Helvetica” and friends.\\n', 'TESSDATA_PREFIX\\n', '• New in v1.19.4\\n', 'Copy of os.environ[""TESSDATA_PREFIX""] for convenient checking whether there is integrated\\nTesseract OCR support.\\n', 'If this attribute is None, Tesseract-OCR is either not installed, or the environment variable is not set\\nto point to Tesseract’s language support folder.\\n', 'Note: This variable is now checked before OCR functions are tried. This prevents verbose messages\\nfrom MuPDF.\\n', 'pdfcolor\\n', '• New in v1.19.6\\n', 'Contains about 500 RGB colors in PDF format with the color name as key. To see what is there, you\\ncan obviously look at fitz.pdfcolor.keys().\\n', 'Examples:\\n', '• fitz.pdfcolor[""red""] = (1.0, 0.0, 0.0)\\n', '• fitz.pdfcolor[""skyblue""] = (0.5294117647058824, 0.807843137254902,\\n0.9215686274509803)\\n', '• fitz.pdfcolor[""wheat""] = (0.9607843137254902, 0.8705882352941177, 0.\\n7019607843137254)\\n', 'get_pdf_now()\\n', 'Convenience function to return the current local timestamp in PDF compatible format, e.g.\\nD:20170501121525-04’00’ for local datetime May 1, 2017, 12:15:25 in a timezone 4 hours west-\\nward of the UTC meridian.\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'current local PDF timestamp.\\n', ""get_text_length(text, fontname='helv', fontsize=11, encoding=TEXT_ENCODING_LATIN)\\n"", '• New in version 1.14.7\\n', 'Calculate the length of text on output with a given builtin font, fontsize and encoding.\\n', 'Parameters\\n', '410\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• text (str) – the text string.\\n', '• fontname (str) – the fontname. Must be one of either the PDF Base 14\\nFonts or the CJK fonts, identified by their “reserved” fontnames (see table in\\nPage.insert_font()).\\n', '• fontsize (float) – the fontsize.\\n', '• encoding (int) – the encoding to use. Besides 0 = Latin, 1 = Greek and\\n2 = Cyrillic (Russian) are available. Relevant for Base-14 fonts “Helvetica”,\\n“Courier” and “Times” and their variants only. Make sure to use the same\\nvalue as in the corresponding text insertion.\\n', 'Return type\\n', 'float\\n', 'Returns\\n', 'the length in points the string will have (e.g.\\nwhen used in Page.\\ninsert_text()).\\n', 'Note: This function will only do the calculation – it won’t insert font nor text.\\n', 'Note:\\nThe Font class offers a similar method, Font.text_length(), which supports Base-14\\nfonts and any font with a character map (CMap, Type 0 fonts).\\n', 'Warning:\\nIf you use this function to determine the required rectangle width for the (Page or\\n', 'Shape) insert_textbox methods, be aware that they calculate on a by-character level. Because\\nof rounding effects, this will mostly lead to a slightly larger number: sum([fitz.get_text_length(c)\\nfor c in text]) > fitz.get_text_length(text). So either (1) do the same, or (2) use something like\\nfitz.get_text_length(text + “’”) for your calculation.\\n', 'get_pdf_str(text)\\n', 'Make a PDF-compatible string: if the text contains code points ord(c) > 255, then it will be converted\\nto UTF-16BE with BOM as a hexadecimal character string enclosed in “<>” brackets like <feff...>.\\nOtherwise, it will return the string enclosed in (round) brackets, replacing any characters outside the\\nASCII range with some special code. Also, every “(”, “)” or backslash is escaped with a backslash.\\n', 'Parameters\\n', 'text (str) – the object to convert\\n', 'Return type\\n', 'str\\n', 'Returns\\n', 'PDF-compatible string enclosed in either () or <>.\\n', 'image_profile(stream)\\n', '• New in v1.16.7\\n', '• Changed in v1.19.5: also return natural image orientation extracted from EXIF data if present.\\n', '21.1. Functions\\n411\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed in v1.22.5: always return None in error cases instead of an empty dictionary.\\n', 'Show important properties of an image provided as a memory area. Its main purpose is to avoid\\nusing other Python packages just to determine them.\\n', 'Parameters\\n', 'stream (bytes|bytearray|BytesIO|file) – either an image in memory or an\\nopened file. An image in memory may be any of the formats bytes, bytearray\\nor io.BytesIO.\\n', 'Return type\\n', 'dict\\n', 'Returns\\n', 'No exception is ever raised. In case of an error, None is returned. Otherwise, there\\nare the following items:\\n', 'In [2]: fitz.image_profile(open(""nur-ruhig.jpg"", ""rb"").\\n', ""˓→read())\\nOut[2]:\\n{'width': 439,\\n'height': 501,\\n'orientation': 0,\\n# natural orientation (from EXIF)\\n"", ""'transform': (1.0, 0.0, 0.0, 1.0, 0.0, 0.0),\\n# orientation␣\\n"", ""˓→matrix\\n'xres': 96,\\n'yres': 96,\\n'colorspace': 3,\\n'bpc': 8,\\n'ext': 'jpeg',\\n'cs-name': 'DeviceRGB'}\\n"", 'There is the following relation to Exif information encoded in orientation, and\\ncorrespondingly in the transform matrix-like (quoted from MuPDF documen-\\ntation, ccw = counter-clockwise):\\n', '0. Undefined\\n', '1. 0 degree ccw rotation. (Exif = 1)\\n', '2. 90 degree ccw rotation. (Exif = 8)\\n', '3. 180 degree ccw rotation. (Exif = 3)\\n', '4. 270 degree ccw rotation. (Exif = 6)\\n', '5. flip on X. (Exif = 2)\\n', '6. flip on X, then rotate ccw by 90 degrees. (Exif = 5)\\n', '7. flip on X, then rotate ccw by 180 degrees. (Exif = 4)\\n', '8. flip on X, then rotate ccw by 270 degrees. (Exif = 7)\\n', 'Note:\\n', '• For some “exotic” images (FAX encodings, RAW formats and the like), this\\nmethod will not work.\\nYou can however still work with such images in\\nPyMuPDF, e.g. by using Document.extract_image() or create pixmaps\\n', '412\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'via Pixmap(doc, xref). These methods will automatically convert exotic\\nimages to the PNG format before returning results.\\n', '• You can also get the properties of images embedded in a PDF, via\\ntheir xref.\\nIn this case make sure to extract the raw stream: fitz.\\nimage_profile(doc.xref_stream_raw(xref)).\\n', '• Images as returned by the image blocks of Page.get_text() using “dict”\\nor “rawdict” options are also supported.\\n', 'ConversionHeader(""text"", filename=""UNKNOWN"")\\n', 'Return the header string required to make a valid document out of page text outputs.\\n', 'Parameters\\n', '• output (str) – type of document. Use the same as the output parameter of\\nget_text().\\n', '• filename (str) – optional arbitrary name to use in output types “json” and\\n“xml”.\\n', 'Return type\\n', 'str\\n', 'ConversionTrailer(output)\\n', 'Return the trailer string required to make a valid document out of page text outputs. See Page.\\nget_text() for an example.\\n', 'Parameters\\n', 'output (str) – type of document. Use the same as the output parameter of\\nget_text().\\n', 'Return type\\n', 'str\\n', 'Document.del_xml_metadata()\\n', 'Delete an object containing XML-based metadata from the PDF. (Py-) MuPDF does not support\\nXML-based metadata. Use this if you want to make sure that the conventional metadata dictionary\\nwill be used exclusively. Many thirdparty PDF programs insert their own metadata in XML format\\nand thus may override what you store in the conventional dictionary. This method deletes any such\\nreference, and the corresponding PDF object will be deleted during next garbage collection of the\\nfile.\\n', 'Document.xml_metadata_xref()\\n', 'Return the XML-based metadata xref of the PDF if present – also refer to Document.\\ndel_xml_metadata(). You can use it to retrieve the content via Document.xref_stream() and\\nthen work with it using some XML software.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'xref of PDF file level XML metadata – or 0 if none exists.\\n', '21.1. Functions\\n413\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Page.run(dev, transform)\\n', 'Run a page through a device.\\n', 'Parameters\\n', '• dev (Device) – Device, obtained from one of the Device constructors.\\n', '• transform (Matrix) – Transformation to apply to the page. Set it to Identity\\n', 'if no transformation is desired.\\n', 'Page.get_bboxlog(layers=False)\\n', '• New in v1.19.0\\n', '• Changed in v1.22.0: optionally also return the OCG name applicable to the boundary box.\\n', 'Returns\\n', 'a list of rectangles that envelop text, image or drawing objects. Each item is a\\ntuple (type, (x0, y0, x1, y1)) where the second tuple consists of rectangle\\ncoordinates, and type is one of the following values. If layers=True, there is a\\nthird item containing the OCG name or None: (type, (x0, y0, x1, y1),\\nNone).\\n', '• ""fill-text"" – normal text (painted without character borders)\\n', '• ""stroke-text"" – text showing character borders only\\n', '• ""ignore-text"" – text that should not be displayed (e.g. as used by OCR\\ntext layers)\\n', '• ""fill-path"" – drawing with fill color (and no border)\\n', '• ""stroke-path"" – drawing with border (and no fill color)\\n', '• ""fill-image"" – displays an image\\n', '• ""fill-shade"" – display a shading\\n', 'The item sequence represents the sequence in which these commands are exe-\\ncuted to build the page’s appearance. Therefore, if an item’s bbox intersects or\\ncontains that of a previous item, then the previous item may be (partially) covered\\n/ hidden.\\n', 'So this list can be used to detect such situations. An item’s index in this list equals\\nthe value of a ""seqno"" in dictionaries as returned by Page.get_drawings()\\nand Page.get_texttrace().\\n', 'Page.get_texttrace()\\n', '• New in v1.18.16\\n', '• Changed in v1.19.0: added key “seqno”.\\n', '• Changed in v1.19.1: stroke and fill colors now always are either RGB or GRAY\\n', '• Changed in v1.19.3: span and character bboxes are now also correct if dir != (1, 0).\\n', '414\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed in v1.22.0: add new dictionary key “layer”.\\n', 'Return low-level text information of the page. The method is available for all document types. The\\nresult is a list of Python dictionaries with the following content:\\n', '{\\n', ""'ascender': 0.83251953125,\\n# font ascender (1)\\n"", ""'bbox': (458.14019775390625,\\n# span bbox x0 (7)\\n"", '749.4671630859375,\\n# span bbox y0\\n', '467.76458740234375,\\n# span bbox x1\\n', '757.5071411132812),\\n# span bbox y1\\n', ""'bidi': 0,\\n# bidirectional level (1)\\n"", ""'chars': (\\n# char information, tuple[tuple]\\n"", '(45,\\n# unicode (4)\\n', '16,\\n# glyph id (font dependent)\\n', '(458.14019775390625,\\n# origin.x (1)\\n', '755.3758544921875),\\n# origin.y (1)\\n', '(458.14019775390625,\\n# char bbox x0 (6)\\n', '749.4671630859375,\\n# char bbox y0\\n', '462.9649963378906,\\n# char bbox x1\\n', '757.5071411132812)),\\n# char bbox y1\\n', '( ... ),\\n# more characters\\n', '),\\n', ""'color': (0.0,),\\n# text color, tuple[float] (1)\\n"", ""'colorspace': 1,\\n# number of colorspace components␣\\n"", '˓→(1)\\n', ""'descender': -0.30029296875,\\n# font descender (1)\\n"", ""'dir': (1.0, 0.0),\\n# writing direction (1)\\n"", ""'flags': 12,\\n# font flags (1)\\n"", ""'font': 'CourierNewPSMT',\\n# font name (1)\\n"", ""'linewidth': 0.4019999980926514,\\n# current line width value (3)\\n"", ""'opacity': 1.0,\\n# alpha value of the text (5)\\n"", ""'layer': None,\\n# name of Optional Content Group (9)\\n"", ""'seqno': 246,\\n# sequence number (8)\\n"", ""'size': 8.039999961853027,\\n# font size (1)\\n"", ""'spacewidth': 4.824785133358091,\\n# width of space char\\n"", ""'type': 0,\\n# span type (2)\\n"", ""'wmode': 0\\n# writing mode (1)\\n"", '}\\n', 'Details:\\n', '1. Information above tagged with “(1)” has the same meaning and value as explained in TextPage.\\n', '• Please note that the font flags value will never contain a superscript flag bit: the de-\\ntection of superscripts is done within MuPDF TextPage code – it is not a property of any\\nfont.\\n', '• Also note, that the text color is encoded as the usual tuple of floats 0 <= f <= 1 – not in\\nsRGB format. Depending on span[""type""], interpret this as fill color or stroke color.\\n', '2. There are 3 text span types:\\n', '• 0: Filled text – equivalent to PDF text rendering mode 0 (0 Tr, the default in PDF), only\\neach character’s “inside” is shown.\\n', '• 1: Stroked text – equivalent to 1 Tr, only the character borders are shown.\\n', '21.1. Functions\\n415\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• 3: Ignored text – equivalent to 3 Tr (hidden text).\\n', '3. Line width in this context is important only for processing span[""type""] != 0: it deter-\\nmines the thickness of the character’s border line. This value may not be provided at all with\\nthe text data. In this case, a value of 5% of the fontsize (span[""size""] * 0,05) is gen-\\nerated. Often, an “artificial” bold text in PDF is created by 2 Tr. There is no equivalent span\\ntype for this case. Instead, respective text is represented by two consecutive spans – which are\\nidentical in every aspect, except for their types, which are 0, resp 1. It is your responsibility\\nto handle this type of situation - in Page.get_text(), MuPDF is doing this for you.\\n', '4. For data compactness, the character’s unicode is provided here. Use built-in function chr()\\nfor the character itself.\\n', '5. The alpha / opacity value of the span’s text, 0 <= opacity <= 1, 0 is invisible text, 1 (100%)\\nis intransparent. Depending on span[""type""], interpret this value as fill opacity or, resp.\\nstroke opacity.\\n', '6. (Changed in v1.19.0) This value is equal or close to char[""bbox""] of “rawdict”. In particu-\\nlar, the bbox height value is always computed as if “small glyph heights” had been requested.\\n', '7. (New in v1.19.0) This is the union of all character bboxes.\\n', '8. (New in v1.19.0) Enumerates the commands that build up the page’s appearance. Can be used\\nto find out whether text is effectively hidden by objects, which are painted “later”, or over\\nsome object. So if there is a drawing or image with a higher sequence number, whose bbox\\noverlaps (parts of) this text span, one may assume that such an object hides the resp. text.\\nDifferent text spans have identical sequence numbers if they were created in one go.\\n', '9. (New in v1.22.0) The name of the Optional Content Group (OCG) if applicable or None.\\n', 'Here is a list of similarities and differences of page.get_texttrace() compared to page.\\nget_text(""rawdict""):\\n', '• The method is up to twice as fast, compared to “rawdict” extraction. Depends on the amount\\nof text.\\n', '• The returned data is very much smaller in size – although it provides more information.\\n', '• Additional types of text invisibility can be detected: opacity = 0 or type > 1 or overlapping\\nbbox of an object with a higher sequence number.\\n', '• If MuPDF returns unicode 0xFFFD (65533) for unrecognized characters, you may still be able\\nto deduct desired information from the glyph id.\\n', '• The span[""chars""] contains no spaces, except the document creator has explicitly coded\\nthem. They will never be generated like it happens in Page.get_text() methods. To\\nprovide some help for doing your own computations here, the width of a space character is\\ngiven. This value is derived from the font where possible. Otherwise the value of a fallback\\nfont is taken.\\n', '• There is no effort to organize text like it happens for a TextPage (the hierarchy of blocks, lines,\\nspans, and characters). Characters are simply extracted in sequence, one by one, and put in a\\nspan. Whenever any of the span’s characteristics changes, a new span is started. So you may\\nfind characters with different origin.y values in the same span (which means they would\\nappear in different lines). You cannot assume, that span characters are sorted in any particular\\norder – you must make sense of the info yourself, taking span[""dir""], span[""wmode""],\\netc. into account.\\n', '• Ligatures are represented like this:\\n', '416\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– MuPDF handles the following ligatures: “fi”, “ff”, “fl”, “ft”, “st”, “ffi”, and “ffl”\\n(only the first 3 are mostly ever used). If the page contains e.g. ligature “fi”, you\\nwill find the following two character items subsequent to each other:\\n', '(102, glyph, (x, y), (x0, y0, x1, y1))\\n# 102 = ord(""f"")\\n', '(105, -1, (x, y), (x0, y0, x0, y1))\\n# 105 = ord(""i""),␣\\n', '˓→empty bbox!\\n', '– This means that the bbox of the first ligature character is the area containing the\\ncomplete, compound glyph. Subsequent ligature components are recognizable by\\ntheir glyph value -1 and a bbox of width zero.\\n', '– You may want to replace those 2 or 3 char tuples by one, that represents the ligature\\nitself. Use the following mapping of ligatures to unicodes:\\n', '∗ ""ff"" -> 0xFB00\\n', '∗ ""fi"" -> 0xFB01\\n', '∗ ""fl"" -> 0xFB02\\n', '∗ ""ffi"" -> 0xFB03\\n', '∗ ""ffl"" -> 0xFB04\\n', '∗ ""ft"" -> 0xFB05\\n', '∗ ""st"" -> 0xFB06\\n', 'So you may want to replace the two example tuples above by the following\\nsingle one: (0xFB01, glyph, (x, y), (x0, y0, x1, y1)) (there is\\nusually no need to lookup the correct glyph id for 0xFB01 in the resp. font,\\nbut you may execute font.has_glyph(0xFB01) and use its return value).\\n', '• Changed in v1.19.3: Similar to other text extraction methods, the character and span\\nbboxes envelop the character quads.\\nTo recover the quads, follow the same methods\\n', 'recover_quad(), recover_char_quad() or recover_span_quad() as explained in\\nStructure of Dictionary Outputs. Use either None or span[""dir""] for the writing direction.\\n', '• Changed in v1.21.1: If applicable, the name of the OCG is shown in ""layer"".\\n', 'Page.wrap_contents()\\n', 'Put string pair “q” / “Q” before, resp. after a page’s /Contents object(s) to ensure that any “geometry”\\nchanges are local only.\\n', 'Use this method as an alternative, minimalist version of Page.clean_contents(). Its advantage\\nis a small footprint in terms of processing time and impact on the data size of incremental saves.\\nMultiple executions of this method are no problem and have no functional impact: b""q q contents\\nQ Q"" is treated like b""q contents Q"".\\n', 'Page.is_wrapped\\n', 'Indicate whether Page.wrap_contents() may be required for object insertions in standard PDF\\ngeometry. Note that this is a quick, basic check only: a value of False may still be a false alarm. But\\nnevertheless executing Page.wrap_contents() will have no negative side effects.\\n', 'Return type\\n', 'bool\\n', '21.1. Functions\\n417\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Page.get_text_blocks(flags=None)\\n', 'Deprecated wrapper for TextPage.extractBLOCKS(). Use Page.get_text() with the “blocks”\\noption instead.\\n', 'Return type\\n', 'list[tuple]\\n', 'Page.get_text_words(flags=None, delimiters=None)\\n', 'Deprecated wrapper for TextPage.extractWORDS(). Use Page.get_text() with the “words”\\noption instead.\\n', 'Return type\\n', 'list[tuple]\\n', 'Page.get_displaylist()\\n', 'Run a page through a list device and return its display list.\\n', 'Return type\\n', 'DisplayList\\n', 'Returns\\n', 'the display list of the page.\\n', 'Page.get_contents()\\n', 'PDF only: Retrieve a list of xref of contents objects of a page. May be empty or contain multi-\\nple integers. If the page is cleaned (Page.clean_contents()), it will be one entry at most. The\\n“source” of each /Contents object can be individually read by Document.xref_stream() us-\\ning an item of this list. Method Page.read_contents() in contrast walks through this list and\\nconcatenates the corresponding sources into one bytes object.\\n', 'Return type\\n', 'list[int]\\n', 'Page.set_contents(xref )\\n', 'PDF only: Let the page’s /Contents key point to this xref. Any previously used contents objects\\nwill be ignored and can be removed via garbage collection.\\n', 'Page.clean_contents(sanitize=True)\\n', '• Changed in v1.17.6\\n', 'PDF only: Clean and concatenate all contents objects associated with this page. “Cleaning” in-\\ncludes syntactical corrections, standardizations and “pretty printing” of the contents stream. Dis-\\ncrepancies between contents and resources objects will also be corrected if sanitize is true. See\\nPage.get_contents() for more details.\\n', 'Changed in version 1.16.0 Annotations are no longer implicitly cleaned by this method. Use Annot.\\nclean_contents() separately.\\n', '418\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Parameters\\n', 'sanitize (bool) – (new in v1.17.6) if true, synchronization between resources\\nand their actual use in the contents object is snychronized. For example, if a font\\nis not actually used for any text of the page, then it will be deleted from the /\\nResources/Font object.\\n', 'Warning:\\nThis is a complex function which may generate large amounts of new data and\\nrender old data unused. It is not recommended using it together with the incremental save\\noption. Also note that the resulting singleton new /Contents object is uncompressed. So you\\nshould save to a new file using options “deflate=True, garbage=3”.\\n', 'Page.read_contents()\\n', 'New in version 1.17.0. Return the concatenation of all contents objects associated with the page\\n– without cleaning or otherwise modifying them. Use this method whenever you need to parse this\\nsource in its entirety without having to bother how many separate contents objects exist.\\n', 'Return type\\n', 'bytes\\n', 'Annot.clean_contents(sanitize=True)\\n', 'Clean the contents streams associated with the annotation. This is the same type of action which\\nPage.clean_contents() performs – just restricted to this annotation.\\n', 'Document.get_char_widths(xref=0, limit=256)\\n', 'Return a list of character glyphs and their widths for a font that is present in the document. A font\\nmust be specified by its PDF cross reference number xref. This function is called automatically\\nfrom Page.insert_text() and Page.insert_textbox(). So you should rarely need to do this\\nyourself.\\n', 'Parameters\\n', '• xref (int) – cross reference number of a font embedded in the PDF. To find\\na font xref, use e.g. doc.get_page_fonts(pno) of page number pno and take\\nthe first entry of one of the returned list entries.\\n', '• limit (int) – limits the number of returned entries. The default of 256 is\\nenforced for all fonts that only support 1-byte characters, so-called “simple\\nfonts” (checked by this method). All PDF Base 14 Fonts are simple fonts.\\n', 'Return type\\n', 'list\\n', 'Returns\\n', 'a list of limit tuples. Each character c has an entry (g, w) in this list with an index\\nof ord(c). Entry g (integer) of the tuple is the glyph id of the character, and float w\\nis its normalized width. The actual width for some fontsize can be calculated\\nas w * fontsize. For simple fonts, the g entry can always be safely ignored. In all\\nother cases g is the basis for graphically representing c.\\n', 'This function calculates the pixel width of a string called text:\\n', '21.1. Functions\\n419\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'def pixlen(text, widthlist, fontsize):\\n', 'try:\\n', 'return sum([widthlist[ord(c)] for c in text]) * fontsize\\n', 'except IndexError:\\n', 'raise ValueError:(""max. code point found: %i, increase limit"" %␣\\n', '˓→ord(max(text)))\\n', 'Document.is_stream(xref )\\n', '• New in version 1.14.14\\n', 'PDF only: Check whether the object represented by xref is a stream type. Return is False if not\\na PDF or if the number is outside the valid xref range.\\n', 'Parameters\\n', 'xref (int) – xref number.\\n', 'Returns\\n', 'True if the object definition is followed by data wrapped in keyword pair stream,\\nendstream.\\n', 'Document.get_new_xref()\\n', 'Increase the xref by one entry and return that number. This can then be used to insert a new object.\\n', 'Return type\\n', 'int :returns: the number of the new xref entry. Please note, that only a new entry\\nin the PDF’s cross reference table is created. At this point, there will not yet exist\\na PDF object associated with it. To create an (empty) object with this number use\\ndoc.update_xref(xref, ""<<>>"").\\n', 'Document.xref_length()\\n', 'Return length of xref table.\\n', 'Return type\\n', 'int\\n', 'Returns\\n', 'the number of entries in the xref table.\\n', 'recover_quad(line_dir, span)\\n', 'Compute the quadrilateral of a text span extracted via options “dict” or “rawdict” of Page.\\nget_text().\\n', 'Parameters\\n', '• line_dir (tuple) – line[""dir""] of the owning line. Use None for a span\\nfrom Page.get_texttrace().\\n', '• span (dict) – the span.\\n', 'Returns\\n', 'the Quad of the span, usable for text marker annotations (‘Highlight’, etc.).\\n', '420\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'recover_char_quad(line_dir, span, char)\\n', 'Compute the quadrilateral of a text character extracted via option “rawdict” of Page.get_text().\\n', 'Parameters\\n', '• line_dir (tuple) – line[""dir""] of the owning line. Use None for a span\\nfrom Page.get_texttrace().\\n', '• span (dict) – the span.\\n', '• char (dict) – the character.\\n', 'Returns\\n', 'the Quad of the character, usable for text marker annotations (‘Highlight’, etc.).\\n', 'recover_span_quad(line_dir, span, chars=None)\\n', 'Compute the quadrilateral of a subset of characters of a span extracted via option “rawdict” of Page.\\nget_text().\\n', 'Parameters\\n', '• line_dir (tuple) – line[""dir""] of the owning line. Use None for a span\\nfrom Page.get_texttrace().\\n', '• span (dict) – the span.\\n', '• chars (list) – the characters to consider. If given, the selected extraction\\noption must be “rawdict”.\\n', 'Returns\\n', 'the Quad of the selected characters, usable for text marker annotations (‘High-\\nlight’, etc.).\\n', 'recover_line_quad(line, spans=None)\\n', 'Compute the quadrilateral of a subset of spans of a text line extracted via options “dict” or “rawdict”\\nof Page.get_text().\\n', 'Parameters\\n', '• line (dict) – the line.\\n', '• spans (list) – a sub-list of line[""spans""]. If omitted, the full line quad\\nwill be returned.\\n', 'Returns\\n', 'the Quad of the selected line spans, usable for text marker annotations (‘High-\\nlight’, etc.).\\n', 'get_tessdata()\\n', 'Return the name of Tesseract’s language support folder. Use this function if the environment variable\\nTESSDATA_PREFIX has not been set.\\n', 'Returns\\n', 'os.getenv(""TESSDATA_PREFIX"") if not None. Otherwise, if Tesseract-OCR is\\ninstalled, locate the name of tessdata. If no installation is found, return False.\\n', '21.1. Functions\\n421\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'The\\nfolder\\nname\\ncan\\nbe\\nused\\nas\\nparameter\\ntessdata\\nin\\nmethods\\n', 'Page.get_textpage_ocr(),\\nPixmap.pdfocr_save()\\nand\\nPixmap.\\npdfocr_tobytes().\\n', 'INFINITE_QUAD()\\n', 'INFINITE_RECT()\\n', 'INFINITE_IRECT()\\n', 'Return the (unique) infinite rectangle Rect(-2147483648.0, -2147483648.0, 2147483520.\\n0, 2147483520.0), resp. the IRect and Quad counterparts. It is the largest possible rectangle: all\\nvalid rectangles are contained in it.\\n', 'EMPTY_QUAD()\\n', 'EMPTY_RECT()\\n', 'EMPTY_IRECT()\\n', 'Return the “standard” empty and invalid rectangle Rect(2147483520.0, 2147483520.0,\\n-2147483648.0, -2147483648.0) resp. quad. Its top-left and bottom-right point values are\\nreversed compared to the infinite rectangle. It will e.g. be used to indicate empty bboxes in page.\\nget_text(""dict"") dictionaries. There are however infinitely many empty or invalid rectangles.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '21.2 Device\\n', 'The different format handlers (pdf, xps, etc.) interpret pages to a “device”. Devices are the basis for everything that\\ncan be done with a page: rendering, text extraction and searching. The device type is determined by the selected\\nconstruction method.\\n', 'Class API\\n', 'class Device\\n', '__init__(self, object, clip)\\n', 'Constructor for either a pixel map or a display list device.\\n', 'Parameters\\n', '• object (Pixmap or DisplayList) – either a Pixmap or a DisplayList.\\n', '• clip (IRect) – An optional IRect for Pixmap devices to restrict rendering to a cer-\\ntain area of the page. If the complete page is required, specify None. For display\\nlist devices, this parameter must be omitted.\\n', '422\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '__init__(self, textpage, flags=0)\\n', 'Constructor for a text page device.\\n', 'Parameters\\n', '• textpage (TextPage) – TextPage object\\n', '• flags (int) – control the way how text is parsed into the text page. Currently 3\\noptions can be coded into this parameter, see Text Extraction Flags. To set these\\noptions use something like flags=0 | TEXT_PRESERVE_LIGATURES | ....\\n', 'This documentation covers all versions up to 1.23.25.\\n', '21.3 Working together: DisplayList and TextPage\\n', 'Here are some instructions on how to use these classes together.\\n', 'In some situations, performance improvements may be achievable, when you fall back to the detail level explained here.\\n', '21.3.1 Create a DisplayList\\n', 'A DisplayList represents an interpreted document page. Methods for pixmap creation, text extraction and text search\\nare – behind the curtain – all using the page’s display list to perform their tasks. If a page must be rendered several\\ntimes (e.g. because of changed zoom levels), or if text search and text extraction should both be performed, overhead\\ncan be saved, if the display list is created only once and then used for all other tasks.\\n', '>>> dl = page.get_displaylist()\\n# create the display list\\n', 'You can also create display lists for many pages “on stack” (in a list), may be during document open, during idling\\ntimes, or you store it when a page is visited for the first time (e.g. in GUI scripts).\\n', 'Note, that for everything what follows, only the display list is needed – the corresponding Page object could have been\\ndeleted.\\n', '21.3.2 Generate Pixmap\\n', 'The following creates a Pixmap from a DisplayList. Parameters are the same as for Page.get_pixmap().\\n', "">>> pix = dl.get_pixmap()\\n# create the page's pixmap\\n"", 'The execution time of this statement may be up to 50% shorter than that of Page.get_pixmap().\\n', '21.3. Working together: DisplayList and TextPage\\n423\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '21.3.3 Perform Text Search\\n', 'With the display list from above, we can also search for text.\\n', 'For this we need to create a TextPage.\\n', '>>> tp = dl.get_textpage()\\n# display list from above\\n', '>>> rlist = tp.search(""needle"")\\n# look up ""needle"" locations\\n', '>>> for r in rlist:\\n# work with the found locations, e.g.\\n', 'pix.invert_irect(r.irect)\\n# invert colors in the rectangles\\n', '21.3.4 Extract Text\\n', 'With the same TextPage object from above, we can now immediately use any or all of the 5 text extraction methods.\\n', 'Note: Above, we have created our text page without argument. This leads to a default argument of 3 (ligatures and\\nwhite-space are preserved), IAW images will not be extracted – see below.\\n', '>>> txt\\n= tp.extractText()\\n# plain text format\\n', '>>> json = tp.extractJSON()\\n# json format\\n', '>>> html = tp.extractHTML()\\n# HTML format\\n', '>>> xml\\n= tp.extractXML()\\n# XML format\\n', '>>> xml\\n= tp.extractXHTML()\\n# XHTML format\\n', '21.3.5 Further Performance improvements\\n', 'Pixmap\\n', 'As explained in the Page chapter:\\n', 'If you do not need transparency set alpha = 0 when creating pixmaps. This will save 25% memory (if RGB, the most\\ncommon case) and possibly 5% execution time (depending on the GUI software).\\n', 'TextPage\\n', 'If you do not need images extracted alongside the text of a page, you can set the following option:\\n', '>>> flags = fitz.TEXT_PRESERVE_LIGATURES | fitz.TEXT_PRESERVE_WHITESPACE\\n>>> tp = dl.get_textpage(flags)\\n', 'This will save ca. 25% overall execution time for the HTML, XHTML and JSON text extractions and hugely reduce\\nthe amount of storage (both, memory and disk space) if the document is graphics oriented.\\n', 'If you however do need images, use a value of 7 for flags:\\n', '>>> flags = fitz.TEXT_PRESERVE_LIGATURES | fitz.TEXT_PRESERVE_WHITESPACE | fitz.TEXT_\\n', '˓→PRESERVE_IMAGES\\n', 'This documentation covers all versions up to 1.23.25.\\n', '424\\nChapter 21. Low Level Functions and Classes\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'This documentation covers all versions up to 1.23.25.\\n', '21.3. Working together: DisplayList and TextPage\\n425\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '426\\nChapter 21. Low Level Functions and Classes\\n', 'CHAPTER\\n', 'TWENTYTWO\\n', 'GLOSSARY\\n', 'coordinate\\n', 'This is an esential general mathematical / geometrical term for understanding this documentation. Please see\\nthis section for a more detailed discussion: Coordinates.\\n', 'matrix_like\\n', 'A Python sequence of 6 numbers.\\n', 'rect_like\\n', 'A Python sequence of 4 numbers.\\n', 'irect_like\\n', 'A Python sequence of 4 integers.\\n', 'point_like\\n', 'A Python sequence of 2 numbers.\\n', 'quad_like\\n', 'A Python sequence of 4 point_like items.\\n', 'inheritable\\n', 'A number of values in a PDF can inherited by objects further down in a parent-child relationship. The mediabox\\n(physical size) of pages may for example be specified only once or in some node(s) of the pagetree and will\\nthen be taken as value for all kids, that do not specify their own value.\\n', 'MediaBox\\n', 'A PDF array of 4 floats specifying a physical page size – (inheritable, mandatory). This rectangle should\\ncontain all other PDF – optional – page rectangles, which may be specified in addition: CropBox, TrimBox,\\nArtBox and BleedBox. Please consult Adobe PDF References for details. The MediaBox is the only rectangle,\\nfor which there is no difference between MuPDF and PDF coordinate systems: Page.mediabox will always\\nshow the same coordinates as the /MediaBox key in a page’s object definition. For all other rectangles, MuPDF\\ntransforms y coordinates such that the top border is the point of reference. This can sometimes be confusing –\\nyou may for example encounter a situation like this one:\\n', '• The page definition contains the following identical values: /MediaBox [ 36 45 607.5 765 ], /\\nCropBox [ 36 45 607.5 765 ].\\n', '• PyMuPDF accordingly shows page.mediabox = Rect(36.0, 45.0, 607.5, 765.0).\\n• BUT: page.cropbox = Rect(36.0, 0.0, 607.5, 720.0), because the two y-coordinates have been\\ntransformed (45 subtracted from both of them).\\n', 'CropBox\\n', 'A PDF array of 4 floats specifying a page’s visible area – (inheritable, optional). It is the default for TrimBox,\\nArtBox and BleedBox. If not present, it defaults to MediaBox. This value is not affected if the page is rotated\\n– in contrast to Page.rect. Also, other than the page rectangle, the top-left corner of the cropbox may or may\\nnot be (0, 0).\\n', '427\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'catalog\\n', 'A central PDF dictionary – also called the “root” – containing document-wide parameters and pointers to\\nmany other information. Its xref is returned by Document.pdf_catalog().\\n', 'trailer\\n', 'More precisely, the PDF trailer contains information in dictionary format. It is usually located at the file’s\\nend. In this dictionary, you will find things like the xrefs of the catalog and the metadata, the number of xref\\nnumbers, etc. Here is the definition of the PDF spec:\\n', '“The trailer of a PDF file enables an application reading the file to quickly find the cross-reference table and\\ncertain special objects. Applications should read a PDF file from its end.”\\n', 'To access the trailer in PyMuPDF, use the usual methods Document.xref_object(), Document.\\nxref_get_key() and Document.xref_get_keys() with -1 instead of a positive xref number.\\n', 'contents\\n', 'A content stream is a PDF object with an attached stream, whose data consists of a sequence of instructions\\ndescribing the graphical elements to be painted on a page, see “Stream Objects” on page 19 of Adobe PDF\\nReferences. For an overview of the mini-language used in these streams, see chapter “Operator Summary” on\\npage 643 of the Adobe PDF References. A PDF page can have none to many contents objects. If it has none,\\nthe page is empty (but still may show annotations). If it has several, they will be interpreted in sequence as if\\ntheir instructions had been present in one such object (i.e. like in a concatenated string). It should be noted\\nthat there are more stream object types which use the same syntax: e.g. appearance dictionaries associated with\\nannotations and Form XObjects.\\n', 'PyMuPDF provides a number of methods to deal with contents of PDF pages:\\n', '• Page.read_contents() – reads and concatenates all page contents into one bytes object.\\n• Page.clean_contents() – a wrapper of a MuPDF function that reads, concatenates and syntax-cleans\\nall page contents. After this, only one /Contents object will exist. In addition, page resources will\\nhave been synchronized with it such that it will contain exactly those images, fonts and other objects that\\nthe page actually references.\\n', '• Page.get_contents() – return a list of xref numbers of a page’s contents objects. May be empty.\\nUse Document.xref_stream() with one of these xrefs to read the resp. contents section.\\n', '• Page.set_contents() – set a page’s /Contents key to the provided xref number.\\n', 'resources\\n', 'A dictionary containing references to any resources (like images or fonts) required by a PDF page (required,\\ninheritable, Adobe PDF References p. 81) and certain other objects (Form XObjects). This dictionary appears\\nas a sub-dictionary in the object definition under the key /Resources. Being an inheritable object type, there may\\nexist “parent” resources for all pages or certain subsets of pages.\\n', 'dictionary\\n', 'A PDF object type, which is somewhat comparable to the same-named Python notion: “A dictionary object\\nis an associative table containing pairs of objects, known as the dictionary’s entries. The first element of each\\nentry is the key and the second element is the value. The key must be a name (...). The value can be any kind\\nof object, including another dictionary. A dictionary entry whose value is null (...) is equivalent to an absent\\nentry.” (Adobe PDF References p. 18).\\n', 'Dictionaries are the most important object type in PDF. Here is an example (describing a page):\\n', '<<\\n/Contents 40 0 R\\n% value: an indirect object\\n', '/Type/Page\\n% value: a name object\\n', '/MediaBox[0 0 595.32 841.92]\\n% value: an array object\\n', '/Rotate 0\\n% value: a number object\\n', '/Parent 12 0 R\\n% value: an indirect object\\n', '(continues on next page)\\n', '428\\nChapter 22. Glossary\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '/Resources<<\\n% value: a dictionary object\\n', '/ExtGState<</R7 26 0 R>>\\n/Font<<\\n', '/R8 27 0 R/R10 21 0 R/R12 24 0 R/R14 15 0 R\\n/R17 4 0 R/R20 30 0 R/R23 7 0 R /R27 20 0 R\\n>>\\n', '/ProcSet[/PDF/Text]\\n% value: array of two name objects\\n', '>>\\n', '/Annots[55 0 R]\\n% value: array, one entry (indirect object)\\n', '>>\\n', 'Contents, Type, MediaBox, etc. are keys, 40 0 R, Page, [0 0 595.32 841.92], etc. are the respective values. The\\nstrings “<<” and “>>” are used to enclose object definitions.\\n', 'This example also shows the syntax of nested dictionary values: Resources has an object as its value, which in\\nturn is a dictionary with keys like ExtGState (with the value <</R7 26 0 R>>, which is another dictionary), etc.\\n', 'page\\n', 'A PDF page is a dictionary object which defines one page in a PDF, see Adobe PDF References p. 71.\\n', 'pagetree\\n', 'The pages of a document are accessed through a structure known as the page tree, which defines the ordering\\nof pages in the document. The tree structure allows PDF consumer applications, using only limited memory,\\nto quickly open a document containing thousands of pages. The tree contains nodes of two types: intermediate\\nnodes, called page tree nodes, and leaf nodes, called page objects. (Adobe PDF References p. 75).\\n', 'While it is possible to list all page references in just one array, PDFs with many pages are often created using\\nbalanced tree structures (“page trees”) for faster access to any single page. In relation to the total number of\\npages, this can reduce the average page access time by page number from a linear to some logarithmic order of\\nmagnitude.\\n', 'For fast page access, MuPDF can use its own array in memory – independently from what may or may not be\\npresent in the document file. This array is indexed by page number and therefore much faster than even the access\\nvia a perfectly balanced page tree.\\n', 'object\\n', 'Similar to Python, PDF supports the notion object, which can come in eight basic types: boolean values (“true”\\nor “false”), integer and real numbers, strings (always enclosed in brackets – either “()”, or “<>” to indicate hex-\\nadecimal), names (must always start with a “/”, e.g. /Contents), arrays (enclosed in brackets “[]”), dictionaries\\n(enclosed in brackets “<<>>”), streams (enclosed by keywords “stream” / “endstream”), and the null object\\n(“null”) (Adobe PDF References p. 13). Objects can be made identifiable by assigning a label. This label is\\nthen called indirect object. PyMuPDF supports retrieving definitions of indirect objects via their cross reference\\nnumber via Document.xref_object().\\n', 'stream\\n', 'A PDF dictionary object type which is followed by a sequence of bytes, similar to Python bytes. “However,\\na PDF application can read a stream incrementally, while a string must be read in its entirety. Furthermore, a\\nstream can be of unlimited length, whereas a string is subject to an implementation limit. For this reason, objects\\nwith potentially large amounts of data, such as images and page descriptions, are represented as streams.” “A\\nstream consists of a dictionary followed by zero or more bytes bracketed between the keywords stream and\\nendstream”:\\n', 'nnn 0 obj\\n<<\\n', 'dictionary definition\\n', '(continues on next page)\\n', '429\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '>>\\nstream\\n(zero or more bytes)\\nendstream\\nendobj\\n', 'See Adobe PDF References p.\\n19.\\nPyMuPDF supports retrieving stream content via Document.\\nxref_stream(). Use Document.is_stream() to determine whether an object is of stream type.\\n', 'unitvector\\n', 'A mathematical notion meaning a vector of norm (“length”) 1 – usually the Euclidean norm is implied. In\\nPyMuPDF, this term is restricted to Point objects, see Point.unit.\\n', 'xref\\n', 'Abbreviation for cross-reference number: this is an integer unique identification for objects in a PDF. There\\nexists a cross-reference table (which may physically consist of several separate segments) in each PDF, which\\nstores the relative position of each object for quick lookup. The cross-reference table is one entry longer than\\nthe number of existing object: item zero is reserved and must not be used in any way. Many PyMuPDF classes\\nhave an xref attribute (which is zero for non-PDFs), and one can find out the total number of objects in a PDF\\nvia Document.xref_length() - 1.\\n', 'fontsize\\n', 'When referring to font size this metric is measured in points where 1 inch = 72 points.\\n', 'resolution\\n', 'Images and Pixmap objects may contain resolution information provided as “dots per inch”, dpi, in each direction\\n(horizontal and vertical). When MuPDF reads an image from a file or from a PDF object, it will parse this\\ninformation and put it in Pixmap.xres, Pixmap.yres, respectively. If it finds no meaningful information in\\nthe input (like non-positive values or values exceeding 4800), it will use “sane” defaults instead. The usual default\\nvalue is 96, but it may also be 72 in some cases (e.g. for JPX images).\\n', 'OCPD\\n', 'Optional content properties dictionary - a sub dictionary of the PDF catalog. The central place to store op-\\ntional content information, which is identified by the key /OCProperties. This dictionary has two required and\\none optional entry: (1) /OCGs, required, an array listing all optional content groups, (2) /D, required, the default\\noptional content configuration dictionary (OCCD), (3) /Configs, optional, an array of alternative OCCDs.\\n', 'OCCD\\n', 'Optional content configuration dictionary - a PDF dictionary inside the PDF OCPD. It stores a setting of ON\\n/ OFF states of OCGs and how they are presented to a PDF viewer program. Selecting a configuration is quick\\nway to achieve temporary mass visibility state changes. After opening a PDF, the /D configuration of the OCPD\\nis always activated. Viewer should offer a way to switch between the /D, or one of the optional configurations\\ncontained in array /Configs.\\n', 'OCG\\n', 'Optional content group – a dictionary object used to control the visibility of other PDF objects like images\\nor annotations. Independently on which page they are defined, objects with the same OCG can simultaneously\\nbe shown or hidden by setting their OCG to ON or OFF. This can be achieved via the user interface provided by\\nmany PDF viewers (Adobe Acrobat), or programmatically.\\n', 'OCMD\\n', 'Optional content membership dictionary – a dictionary object which can be used like an OCG: it has a visibility\\nstate. The visibility of an OCMD is computed: it is a logical expression, which uses the state of one or more\\nOCGs to produce a boolean value. The expression’s result is interpreted as ON (true) or OFF (false).\\n', '430\\nChapter 22. Glossary\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'ligature\\n', 'Some frequent character combinations are represented by their own special glyphs in more advanced fonts. Typ-\\nical examples are “fi”, “fl”, “ffi” and “ffl”. These compounds are called ligatures. In PyMuPDF text extractions,\\nthere is the option to either return the corresponding unicode unchanged, or split ligatures up into their constituent\\nparts: “fi” ==> “f” + “i”, etc.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '431\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '432\\nChapter 22. Glossary\\n', 'CHAPTER\\n', 'TWENTYTHREE\\n', 'CONSTANTS AND ENUMERATIONS\\n', 'Constants and enumerations of MuPDF as implemented by PyMuPDF. Each of the following variables is accessible\\nas fitz.variable.\\n', '23.1 Constants\\n', 'Base14_Fonts\\n', 'Predefined Python list of valid PDF Base 14 Fonts.\\n', 'Return type\\n', 'list\\n', 'csRGB\\n', 'Predefined RGB colorspace fitz.Colorspace(fitz.CS_RGB).\\n', 'Return type\\n', 'Colorspace\\n', 'csGRAY\\n', 'Predefined GRAY colorspace fitz.Colorspace(fitz.CS_GRAY).\\n', 'Return type\\n', 'Colorspace\\n', 'csCMYK\\n', 'Predefined CMYK colorspace fitz.Colorspace(fitz.CS_CMYK).\\n', 'Return type\\n', 'Colorspace\\n', 'CS_RGB\\n', '1 – Type of Colorspace is RGBA\\n', 'Return type\\n', 'int\\n', 'CS_GRAY\\n', '2 – Type of Colorspace is GRAY\\n', 'Return type\\n', 'int\\n', 'CS_CMYK\\n', '3 – Type of Colorspace is CMYK\\n', 'Return type\\n', 'int\\n', '433\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'VersionBind\\n', '‘x.xx.x’ – version of PyMuPDF (these bindings)\\n', 'Return type\\n', 'string\\n', 'VersionFitz\\n', '‘x.xxx’ – version of MuPDF\\n', 'Return type\\n', 'string\\n', 'VersionDate\\n', 'ISO timestamp YYYY-MM-DD HH:MM:SS when these bindings were built.\\n', 'Return type\\n', 'string\\n', 'Note: The docstring of fitz contains information of the above which can be retrieved like so: print(fitz.__doc__), and\\nshould look like: PyMuPDF 1.10.0: Python bindings for the MuPDF 1.10 library, built on 2016-11-30 13:09:13.\\n', 'version\\n', '(VersionBind, VersionFitz, timestamp) – combined version information where timestamp is the generation point\\nin time formatted as “YYYYMMDDhhmmss”.\\n', 'Return type\\n', 'tuple\\n', '23.2 Document Permissions\\n', 'Code\\nPermitted Action\\n', 'PDF_PERM_PRINT\\nPrint the document\\n', 'PDF_PERM_MODIFY\\nModify the document’s contents\\n', 'PDF_PERM_COPY\\nCopy or otherwise extract text and graphics\\n', 'PDF_PERM_ANNOTATE\\nAdd or modify text annotations and interactive form fields\\n', 'PDF_PERM_FORM\\nFill in forms and sign the document\\n', 'PDF_PERM_ACCESSIBILITY\\nObsolete, always permitted\\n', 'PDF_PERM_ASSEMBLE\\nInsert, rotate, or delete pages, bookmarks, thumbnail images\\n', 'PDF_PERM_PRINT_HQ\\nHigh quality printing\\n', '23.3 PDF Optional Content Codes\\n', 'Code\\nMeaning\\n', 'PDF_OC_ON\\nSet an OCG to ON temporarily\\n', 'PDF_OC_TOGGLE\\nToggle OCG status temporarily\\n', 'PDF_OC_OFF\\nSet an OCG to OFF temporarily\\n', '434\\nChapter 23. Constants and Enumerations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '23.4 PDF encryption method codes\\n', 'Code\\nMeaning\\n', 'PDF_ENCRYPT_KEEP\\ndo not change\\n', 'PDF_ENCRYPT_NONE\\nremove any encryption\\n', 'PDF_ENCRYPT_RC4_40\\nRC4 40 bit\\n', 'PDF_ENCRYPT_RC4_128\\nRC4 128 bit\\n', 'PDF_ENCRYPT_AES_128\\nAdvanced Encryption Standard 128 bit\\n', 'PDF_ENCRYPT_AES_256\\nAdvanced Encryption Standard 256 bit\\n', 'PDF_ENCRYPT_UNKNOWN\\nunknown\\n', '23.5 Font File Extensions\\n', 'The table show file extensions you should use when saving fontfile buffers extracted from a PDF. This string is returned\\nby Document.get_page_fonts(), Page.get_fonts() and Document.extract_font().\\n', 'Ext\\nDescription\\n', 'ttf\\nTrueType font\\n', 'pfa\\nPostscript for ASCII font (various subtypes)\\n', 'cff\\nType1C font (compressed font equivalent to Type1)\\n', 'cid\\ncharacter identifier font (postscript format)\\n', 'otf\\nOpenType font\\n', 'n/a\\nnot extractable, e.g. PDF Base 14 Fonts, Type 3 fonts and others\\n', '23.6 Text Alignment\\n', 'TEXT_ALIGN_LEFT\\n', '0 – align left.\\n', 'TEXT_ALIGN_CENTER\\n', '1 – align center.\\n', 'TEXT_ALIGN_RIGHT\\n', '2 – align right.\\n', 'TEXT_ALIGN_JUSTIFY\\n', '3 – align justify.\\n', '23.7 Text Extraction Flags\\n', 'Option bits controlling the amount of data, that are parsed into a TextPage – this class is mainly used only internally in\\nPyMuPDF.\\n', 'For the PyMuPDF programmer, some combination (using Python’s | operator, or simply use +) of these values are\\naggregated in the flags integer, a parameter of all text search and text extraction methods. Depending on the individual\\nmethod, different default combinations of the values are used. Please use a value that meets your situation. Especially\\nmake sure to switch off image extraction unless you really need them. The impact on performance and memory is\\nsignificant!\\n', '23.4. PDF encryption method codes\\n435\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'TEXT_PRESERVE_LIGATURES\\n', '1 – If set, ligatures are passed through to the application in their original form. Otherwise ligatures are expanded\\ninto their constituent parts, e.g. the ligature “ffi” is expanded into three eparate characters f, f and i. Default is\\n“on” in PyMuPDF. MuPDF supports the following 7 ligatures: “ff”, “fi”, “fl”, “ffi”, “ffl”, , “ft”, “st”.\\n', 'TEXT_PRESERVE_WHITESPACE\\n', '2 – If set, whitespace is passed through. Otherwise any type of horizontal whitespace (including horizontal tabs)\\nwill be replaced with space characters of variable width. Default is “on” in PyMuPDF.\\n', 'TEXT_PRESERVE_IMAGES\\n', '4 – If set, then images will be stored in the TextPage. This causes the presence of (usually large!) binary image\\ncontent in the output of text extractions of types “blocks”, “dict”, “json”, “rawdict”, “rawjson”, “html”, and\\n“xhtml” and is the default there. If used with “blocks” however, only image metadata will be returned, not the\\nimage itself.\\n', 'TEXT_INHIBIT_SPACES\\n', '8 – If set, Mupdf will not try to add missing space characters where there are large gaps between characters. In\\nPDF, the creator often does not insert spaces to point to the next character’s position, but will provide the direct\\nlocation address. The default in PyMuPDF is “off” – so spaces will be generated.\\n', 'TEXT_DEHYPHENATE\\n', '16 – Ignore hyphens at line ends and join with next line. Used internally with the text search functions. However,\\nit is generally available: if on, text extractions will return joined text lines (or spans) with the ending hyphen\\nof the first line eliminated. So two separate spans “first meth-” and “od leads to wrong results” on different\\nlines will be joined to one span “first method leads to wrong results” and correspondingly updated bboxes:\\nthe characters of the resulting span will no longer have identical y-coordinates.\\n', 'TEXT_PRESERVE_SPANS\\n', '32 – Generate a new line for every span. Not used (“off”) in PyMuPDF, but available for your use. Every line in\\n“dict”, “json”, “rawdict”, “rawjson” will contain exactly one span.\\n', 'TEXT_MEDIABOX_CLIP\\n', '64 – If set, characters entirely outside a page’s mediabox will be ignored. This is default in PyMuPDF.\\n', 'The following constants represent the default combinations of the above for text extraction and searching:\\n', 'TEXTFLAGS_TEXT\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP\\n', 'TEXTFLAGS_WORDS\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP\\n', 'TEXTFLAGS_BLOCKS\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP\\n', 'TEXTFLAGS_DICT\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |\\nTEXT_PRESERVE_IMAGES\\n', 'TEXTFLAGS_RAWDICT\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |\\nTEXT_PRESERVE_IMAGES\\n', 'TEXTFLAGS_HTML\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |\\nTEXT_PRESERVE_IMAGES\\n', '436\\nChapter 23. Constants and Enumerations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'TEXTFLAGS_XHTML\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |\\nTEXT_PRESERVE_IMAGES\\n', 'TEXTFLAGS_XML\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP\\n', 'TEXTFLAGS_SEARCH\\n', 'TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |\\nTEXT_DEHYPHENATE\\n', '23.8 Link Destination Kinds\\n', 'Possible values of linkDest.kind (link destination kind).\\n', 'LINK_NONE\\n', '0 – No destination. Indicates a dummy link.\\n', 'Return type\\n', 'int\\n', 'LINK_GOTO\\n', '1 – Points to a place in this document.\\n', 'Return type\\n', 'int\\n', 'LINK_URI\\n', '2 – Points to a URI – typically a resource specified with internet syntax.\\n', 'Return type\\n', 'int\\n', 'LINK_LAUNCH\\n', '3 – Launch (open) another file (of any “executable” type).\\n', 'Return type\\n', 'int\\n', 'LINK_NAMED\\n', '4 – points to a named location.\\n', 'Return type\\n', 'int\\n', 'LINK_GOTOR\\n', '5 – Points to a place in another PDF document.\\n', 'Return type\\n', 'int\\n', '23.8. Link Destination Kinds\\n437\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '23.9 Link Destination Flags\\n', 'Note: The rightmost byte of this integer is a bit field, so test the truth of these bits with the & operator.\\n', 'LINK_FLAG_L_VALID\\n', '1 (bit 0) Top left x value is valid\\n', 'Return type\\n', 'bool\\n', 'LINK_FLAG_T_VALID\\n', '2 (bit 1) Top left y value is valid\\n', 'Return type\\n', 'bool\\n', 'LINK_FLAG_R_VALID\\n', '4 (bit 2) Bottom right x value is valid\\n', 'Return type\\n', 'bool\\n', 'LINK_FLAG_B_VALID\\n', '8 (bit 3) Bottom right y value is valid\\n', 'Return type\\n', 'bool\\n', 'LINK_FLAG_FIT_H\\n', '16 (bit 4) Horizontal fit\\n', 'Return type\\n', 'bool\\n', 'LINK_FLAG_FIT_V\\n', '32 (bit 5) Vertical fit\\n', 'Return type\\n', 'bool\\n', 'LINK_FLAG_R_IS_ZOOM\\n', '64 (bit 6) Bottom right x is a zoom figure\\n', 'Return type\\n', 'bool\\n', '23.10 Annotation Related Constants\\n', 'See chapter 8.4.5, pp. 615 of the Adobe PDF References for details.\\n', '438\\nChapter 23. Constants and Enumerations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '23.10.1 Annotation Types\\n', 'These identifiers also cover links and widgets: the PDF specification technically handles them all in the same way,\\nwhereas MuPDF (and PyMuPDF) treats them as three basically different types of objects.\\n', 'PDF_ANNOT_TEXT 0\\nPDF_ANNOT_LINK 1\\n# <=== Link object in PyMuPDF\\n', 'PDF_ANNOT_FREE_TEXT 2\\nPDF_ANNOT_LINE 3\\nPDF_ANNOT_SQUARE 4\\nPDF_ANNOT_CIRCLE 5\\nPDF_ANNOT_POLYGON 6\\nPDF_ANNOT_POLY_LINE 7\\nPDF_ANNOT_HIGHLIGHT 8\\nPDF_ANNOT_UNDERLINE 9\\nPDF_ANNOT_SQUIGGLY 10\\nPDF_ANNOT_STRIKE_OUT 11\\nPDF_ANNOT_REDACT 12\\nPDF_ANNOT_STAMP 13\\nPDF_ANNOT_CARET 14\\nPDF_ANNOT_INK 15\\nPDF_ANNOT_POPUP 16\\nPDF_ANNOT_FILE_ATTACHMENT 17\\nPDF_ANNOT_SOUND 18\\nPDF_ANNOT_MOVIE 19\\nPDF_ANNOT_RICH_MEDIA 20\\nPDF_ANNOT_WIDGET 21\\n# <=== Widget object in PyMuPDF\\n', 'PDF_ANNOT_SCREEN 22\\nPDF_ANNOT_PRINTER_MARK 23\\nPDF_ANNOT_TRAP_NET 24\\nPDF_ANNOT_WATERMARK 25\\nPDF_ANNOT_3D 26\\nPDF_ANNOT_PROJECTION 27\\nPDF_ANNOT_UNKNOWN -1\\n', '23.10.2 Annotation Flag Bits\\n', 'PDF_ANNOT_IS_INVISIBLE 1 << (1-1)\\nPDF_ANNOT_IS_HIDDEN 1 << (2-1)\\nPDF_ANNOT_IS_PRINT 1 << (3-1)\\nPDF_ANNOT_IS_NO_ZOOM 1 << (4-1)\\nPDF_ANNOT_IS_NO_ROTATE 1 << (5-1)\\nPDF_ANNOT_IS_NO_VIEW 1 << (6-1)\\nPDF_ANNOT_IS_READ_ONLY 1 << (7-1)\\nPDF_ANNOT_IS_LOCKED 1 << (8-1)\\nPDF_ANNOT_IS_TOGGLE_NO_VIEW 1 << (9-1)\\nPDF_ANNOT_IS_LOCKED_CONTENTS 1 << (10-1)\\n', '23.10. Annotation Related Constants\\n439\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '23.10.3 Annotation Line Ending Styles\\n', 'PDF_ANNOT_LE_NONE 0\\nPDF_ANNOT_LE_SQUARE 1\\nPDF_ANNOT_LE_CIRCLE 2\\nPDF_ANNOT_LE_DIAMOND 3\\nPDF_ANNOT_LE_OPEN_ARROW 4\\nPDF_ANNOT_LE_CLOSED_ARROW 5\\nPDF_ANNOT_LE_BUTT 6\\nPDF_ANNOT_LE_R_OPEN_ARROW 7\\nPDF_ANNOT_LE_R_CLOSED_ARROW 8\\nPDF_ANNOT_LE_SLASH 9\\n', '23.11 Widget Constants\\n', '23.11.1 Widget Types (field_type)\\n', 'PDF_WIDGET_TYPE_UNKNOWN 0\\nPDF_WIDGET_TYPE_BUTTON 1\\nPDF_WIDGET_TYPE_CHECKBOX 2\\nPDF_WIDGET_TYPE_COMBOBOX 3\\nPDF_WIDGET_TYPE_LISTBOX 4\\nPDF_WIDGET_TYPE_RADIOBUTTON 5\\nPDF_WIDGET_TYPE_SIGNATURE 6\\nPDF_WIDGET_TYPE_TEXT 7\\n', '23.11.2 Text Widget Subtypes (text_format)\\n', 'PDF_WIDGET_TX_FORMAT_NONE 0\\nPDF_WIDGET_TX_FORMAT_NUMBER 1\\nPDF_WIDGET_TX_FORMAT_SPECIAL 2\\nPDF_WIDGET_TX_FORMAT_DATE 3\\nPDF_WIDGET_TX_FORMAT_TIME 4\\n', '23.11.3 Widget flags (field_flags)\\n', 'Common to all field types:\\n', 'PDF_FIELD_IS_READ_ONLY 1\\nPDF_FIELD_IS_REQUIRED 1 << 1\\nPDF_FIELD_IS_NO_EXPORT 1 << 2\\n', 'Text widgets:\\n', 'PDF_TX_FIELD_IS_MULTILINE\\n1 << 12\\n', 'PDF_TX_FIELD_IS_PASSWORD\\n1 << 13\\n', 'PDF_TX_FIELD_IS_FILE_SELECT\\n1 << 20\\n', '(continues on next page)\\n', '440\\nChapter 23. Constants and Enumerations\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'PDF_TX_FIELD_IS_DO_NOT_SPELL_CHECK\\n1 << 22\\n', 'PDF_TX_FIELD_IS_DO_NOT_SCROLL\\n1 << 23\\n', 'PDF_TX_FIELD_IS_COMB\\n1 << 24\\n', 'PDF_TX_FIELD_IS_RICH_TEXT\\n1 << 25\\n', 'Button widgets:\\n', 'PDF_BTN_FIELD_IS_NO_TOGGLE_TO_OFF\\n1 << 14\\n', 'PDF_BTN_FIELD_IS_RADIO\\n1 << 15\\n', 'PDF_BTN_FIELD_IS_PUSHBUTTON\\n1 << 16\\n', 'PDF_BTN_FIELD_IS_RADIOS_IN_UNISON\\n1 << 25\\n', 'Choice widgets:\\n', 'PDF_CH_FIELD_IS_COMBO\\n1 << 17\\n', 'PDF_CH_FIELD_IS_EDIT\\n1 << 18\\n', 'PDF_CH_FIELD_IS_SORT\\n1 << 19\\n', 'PDF_CH_FIELD_IS_MULTI_SELECT\\n1 << 21\\n', 'PDF_CH_FIELD_IS_DO_NOT_SPELL_CHECK\\n1 << 22\\n', 'PDF_CH_FIELD_IS_COMMIT_ON_SEL_CHANGE\\n1 << 26\\n', '23.12 PDF Standard Blend Modes\\n', 'For an explanation see Adobe PDF References, page 324:\\n', 'PDF_BM_Color ""Color""\\nPDF_BM_ColorBurn ""ColorBurn""\\nPDF_BM_ColorDodge ""ColorDodge""\\nPDF_BM_Darken ""Darken""\\nPDF_BM_Difference ""Difference""\\nPDF_BM_Exclusion ""Exclusion""\\nPDF_BM_HardLight ""HardLight""\\nPDF_BM_Hue ""Hue""\\nPDF_BM_Lighten ""Lighten""\\nPDF_BM_Luminosity ""Luminosity""\\nPDF_BM_Multiply ""Multiply""\\nPDF_BM_Normal ""Normal""\\nPDF_BM_Overlay ""Overlay""\\nPDF_BM_Saturation ""Saturation""\\nPDF_BM_Screen ""Screen""\\nPDF_BM_SoftLight ""Softlight""\\n', '23.12. PDF Standard Blend Modes\\n441\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '23.13 Stamp Annotation Icons\\n', 'MuPDF has defined the following icons for rubber stamp annotations:\\n', 'STAMP_Approved 0\\nSTAMP_AsIs 1\\nSTAMP_Confidential 2\\nSTAMP_Departmental 3\\nSTAMP_Experimental 4\\nSTAMP_Expired 5\\nSTAMP_Final 6\\nSTAMP_ForComment 7\\nSTAMP_ForPublicRelease 8\\nSTAMP_NotApproved 9\\nSTAMP_NotForPublicRelease 10\\nSTAMP_Sold 11\\nSTAMP_TopSecret 12\\nSTAMP_Draft 13\\n', 'This documentation covers all versions up to 1.23.25.\\n', '442\\nChapter 23. Constants and Enumerations\\n', 'CHAPTER\\n', 'TWENTYFOUR\\n', 'COLOR DATABASE\\n', 'Since the introduction of methods involving colors (like Page.draw_circle()), a requirement may be to have access\\nto predefined colors.\\n', 'The fabulous GUI package wxPython has a database of over 540 predefined RGB colors, which are given more or less\\nmemorizable names. Among them are not only standard names like “green” or “blue”, but also “turquoise”, “skyblue”,\\nand 100 (not only 50 ...) shades of “gray”, etc.\\n', 'We have taken the liberty to copy this database (a list of tuples) modified into PyMuPDF and make its colors available\\nas PDF compatible float triples: for wxPython’s (“WHITE”, 255, 255, 255) we return (1, 1, 1), which can be directly\\nused in color and fill parameters. We also accept any mixed case of “wHiTe” to find a color.\\n', '24.1 Function getColor()\\n', 'As the color database may not be needed very often, one additional import statement seems acceptable to get access to\\nit:\\n', '>>> # ""getColor"" is the only method you really need\\n>>> from fitz.utils import getColor\\n>>> getColor(""aliceblue"")\\n(0.9411764705882353, 0.9725490196078431, 1.0)\\n>>> #\\n>>> # to get a list of all existing names\\n>>> from fitz.utils import getColorList\\n>>> cl = getColorList()\\n>>> cl\\n[\\'ALICEBLUE\\', \\'ANTIQUEWHITE\\', \\'ANTIQUEWHITE1\\', \\'ANTIQUEWHITE2\\', \\'ANTIQUEWHITE3\\',\\n\\'ANTIQUEWHITE4\\', \\'AQUAMARINE\\', \\'AQUAMARINE1\\'] ...\\n>>> #\\n>>> # to see the full integer color coding\\n>>> from fitz.utils import getColorInfoList\\n>>> il = getColorInfoList()\\n>>> il\\n[(\\'ALICEBLUE\\', 240, 248, 255), (\\'ANTIQUEWHITE\\', 250, 235, 215),\\n(\\'ANTIQUEWHITE1\\', 255, 239, 219), (\\'ANTIQUEWHITE2\\', 238, 223, 204),\\n(\\'ANTIQUEWHITE3\\', 205, 192, 176), (\\'ANTIQUEWHITE4\\', 139, 131, 120),\\n(\\'AQUAMARINE\\', 127, 255, 212), (\\'AQUAMARINE1\\', 127, 255, 212)] ...\\n', '443\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '24.2 Printing the Color Database\\n', 'If you want to actually see how the many available colors look like, use scripts print by RGB or print by HSV in\\nthe examples directory. They create PDFs (already existing in the same directory) with all these colors. Their only\\ndifference is sorting order: one takes the RGB values, the other one the Hue-Saturation-Values as sort criteria. This is\\na screen print of what these files look like.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '444\\nChapter 24. Color Database\\n', 'CHAPTER\\n', 'TWENTYFIVE\\n', 'APPENDIX 1: DETAILS ON TEXT EXTRACTION\\n', 'This chapter provides background on the text extraction methods of PyMuPDF.\\n', 'Information of interest are\\n', '• what do they provide?\\n', '• what do they imply (processing time / data sizes)?\\n', '25.1 General structure of a TextPage\\n', 'TextPage is one of (Py-) MuPDF’s classes. It is normally created (and destroyed again) behind the curtain, when Page\\ntext extraction methods are used, but it is also available directly and can be used as a persistent object. Other than its\\nname suggests, images may optionally also be part of a text page:\\n', '<page>\\n', '<text block>\\n', '<line>\\n', '<span>\\n', '<char>\\n', '<image block>\\n', '<img>\\n', 'A text page consists of blocks (= roughly paragraphs).\\n', 'A block consists of either lines and their characters, or an image.\\n', 'A line consists of spans.\\n', 'A span consists of adjacent characters with identical font properties: name, size, flags and color.\\n', '25.2 Plain Text\\n', 'Function TextPage.extractText() (or Page.get_text(“text”)) extracts a page’s plain text in original order as spec-\\nified by the creator of the document.\\n', 'An example output:\\n', '>>> print(page.get_text(""text""))\\nSome text on first page.\\n', '445\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note:\\nThe output may not equal an accustomed “natural” reading order. However, you can request a reordering\\nfollowing the scheme “top-left to bottom-right” by executing page.get_text(""text"", sort=True).\\n', '25.3 BLOCKS\\n', 'Function TextPage.extractBLOCKS() (or Page.get_text(“blocks”)) extracts a page’s text blocks as a list of items\\nlike:\\n', '(x0, y0, x1, y1, ""lines in block"", block_no, block_type)\\n', 'Where the first 4 items are the float coordinates of the block’s bbox. The lines within each block are concatenated by\\na new-line character.\\n', 'This is a high-speed method, which by default also extracts image meta information: Each image appears as a block\\nwith one text line, which contains meta information. The image itself is not shown.\\n', 'As with simple text output above, the sort argument can be used as well to obtain a reading order.\\n', 'Example output:\\n', '>>> print(page.get_text(""blocks"", sort=False))\\n[(50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375,\\n\\'Some text on first page.\\', 0, 0)]\\n', '25.4 WORDS\\n', 'Function TextPage.extractWORDS() (or Page.get_text(“words”)) extracts a page’s text words as a list of items like:\\n', '(x0, y0, x1, y1, ""word"", block_no, line_no, word_no)\\n', 'Where the first 4 items are the float coordinates of the words’s bbox. The last three integers provide some more infor-\\nmation on the word’s whereabouts.\\n', 'This is a high-speed method. As with the previous methods, argument sort=True will reorder the words.\\n', 'Example output:\\n', '>>> for word in page.get_text(""words"", sort=False):\\n', 'print(word)\\n', ""(50.0, 88.17500305175781, 78.73200225830078, 103.28900146484375,\\n'Some', 0, 0, 0)\\n(81.79000091552734, 88.17500305175781, 99.5219955444336, 103.28900146484375,\\n'text', 0, 0, 1)\\n(102.57999420166016, 88.17500305175781, 114.8119888305664, 103.28900146484375,\\n'on', 0, 0, 2)\\n(117.86998748779297, 88.17500305175781, 135.5909881591797, 103.28900146484375,\\n'first', 0, 0, 3)\\n(138.64898681640625, 88.17500305175781, 166.1709747314453, 103.28900146484375,\\n'page.', 0, 0, 4)\\n"", '446\\nChapter 25. Appendix 1: Details on Text Extraction\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '25.5 HTML\\n', 'TextPage.extractHTML() (or Page.get_text(“html”) output fully reflects the structure of the page’s TextPage – much\\nlike DICT / JSON below. This includes images, font information and text positions. If wrapped in HTML header and\\ntrailer code, it can readily be displayed by an internet browser. Our above example:\\n', '>>> for line in page.get_text(""html"").splitlines():\\n', 'print(line)\\n', '<div id=""page0"" style=""position:relative;width:300pt;height:350pt;\\nbackground-color:white"">\\n<p style=""position:absolute;white-space:pre;margin:0;padding:0;top:88pt;\\nleft:50pt""><span style=""font-family:Helvetica,sans-serif;\\nfont-size:11pt"">Some text on first page.</span></p>\\n</div>\\n', '25.6 Controlling Quality of HTML Output\\n', 'While HTML output has improved a lot in MuPDF v1.12.0, it is not yet bug-free: we have found problems in the areas\\nfont support and image positioning.\\n', '• HTML text contains references to the fonts used of the original document. If these are not known to the browser\\n(a fat chance!), it will replace them with others; the results will probably look awkward. This issue varies greatly\\nby browser – on my Windows machine, MS Edge worked just fine, whereas Firefox looked horrible.\\n', '• For PDFs with a complex structure, images may not be positioned and / or sized correctly. This seems to be the\\ncase for rotated pages and pages, where the various possible page bbox variants do not coincide (e.g. MediaBox\\n!= CropBox). We do not know yet, how to address this – we filed a bug at MuPDF’s site.\\n', 'To address the font issue, you can use a simple utility script to scan through the HTML file and replace font references.\\nHere is a little example that replaces all fonts with one of the PDF Base 14 Fonts: serifed fonts will become “Times”,\\nnon-serifed “Helvetica” and monospaced will become “Courier”. Their respective variations for “bold”, “italic”, etc.\\nare hopefully done correctly by your browser:\\n', 'import sys\\nfilename = sys.argv[1]\\notext = open(filename).read()\\n# original html text string\\n', 'pos1 = 0\\n# search start poition\\n', 'font_serif = ""font-family:Times""\\n# enter ...\\n', 'font_sans\\n= ""font-family:Helvetica""\\n# ... your choices ...\\n', 'font_mono\\n= ""font-family:Courier""\\n# ... here\\n', 'found_one\\n= False\\n# true if search successful\\n', 'while True:\\npos0 = otext.find(""font-family:"", pos1)\\n# start of a font spec\\n', 'if pos0 < 0:\\n# none found - we are done\\n', 'break\\n', 'pos1 = otext.find("";"", pos0)\\n# end of font spec\\n', 'test = otext[pos0 : pos1]\\n# complete font spec string\\n', 'testn = """"\\n# the new font spec string\\n', 'if test.endswith("",serif""):\\n# font with serifs?\\n', 'testn = font_serif\\n# use Times instead\\n', '(continues on next page)\\n', '25.5. HTML\\n447\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', 'elif test.endswith("",sans-serif""):\\n# sans serifs font?\\n', 'testn = font_sans\\n# use Helvetica\\n', 'elif test.endswith("",monospace""):\\n# monospaced font?\\n', 'testn = font_mono\\n# becomes Courier\\n', 'if testn != """":\\n# any of the above found?\\n', 'otext = otext.replace(test, testn)\\n# change the source\\n', 'found_one = True\\npos1 = 0\\n# start over\\n', 'if found_one:\\nofile = open(filename + "".html"", ""w"")\\nofile.write(otext)\\nofile.close()\\n', 'else:\\n', 'print(""Warning: could not find any font specs!"")\\n', '25.7 DICT (or JSON)\\n', 'TextPage.extractDICT() (or Page.get_text(“dict”, sort=False)) output fully reflects the structure of a TextPage and\\nprovides image content and position detail (bbox – boundary boxes in pixel units) for every block, line and span. Images\\nare stored as bytes for DICT output and base64 encoded strings for JSON output.\\n', 'For a visualization of the dictionary structure have a look at Structure of Dictionary Outputs.\\n', 'Here is how this looks like:\\n', '{\\n', '""width"": 300.0,\\n""height"": 350.0,\\n""blocks"": [{\\n', '""type"": 0,\\n""bbox"": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375),\\n""lines"": ({\\n', '""wmode"": 0,\\n""dir"": (1.0, 0.0),\\n""bbox"": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375),\\n""spans"": ({\\n', '""size"": 11.0,\\n""flags"": 0,\\n""font"": ""Helvetica"",\\n""color"": 0,\\n""origin"": (50.0, 100.0),\\n""text"": ""Some text on first page."",\\n""bbox"": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375)\\n})\\n}]\\n}]\\n}\\n', '448\\nChapter 25. Appendix 1: Details on Text Extraction\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '25.8 RAWDICT (or RAWJSON)\\n', 'TextPage.extractRAWDICT() (or Page.get_text(“rawdict”, sort=False)) is an information superset of DICT and\\ntakes the detail level one step deeper. It looks exactly like the above, except that the “text” items (string) in the spans\\nare replaced by the list “chars”. Each “chars” entry is a character dict. For example, here is what you would see in\\nplace of item “text”: “Text in black color.” above:\\n', '""chars"": [{\\n', '""origin"": (50.0, 100.0),\\n""bbox"": (50.0, 88.17500305175781, 57.336997985839844, 103.28900146484375),\\n""c"": ""S""\\n', '}, {\\n', '""origin"": (57.33700180053711, 100.0),\\n""bbox"": (57.33700180053711, 88.17500305175781, 63.4530029296875, 103.28900146484375),\\n""c"": ""o""\\n', '}, {\\n', '""origin"": (63.4530029296875, 100.0),\\n""bbox"": (63.4530029296875, 88.17500305175781, 72.61600494384766, 103.28900146484375),\\n""c"": ""m""\\n', '}, {\\n', '""origin"": (72.61600494384766, 100.0),\\n""bbox"": (72.61600494384766, 88.17500305175781, 78.73200225830078, 103.\\n', '˓→28900146484375),\\n', '""c"": ""e""\\n', '}, {\\n', '""origin"": (78.73200225830078, 100.0),\\n""bbox"": (78.73200225830078, 88.17500305175781, 81.79000091552734, 103.\\n', '˓→28900146484375),\\n', '""c"": "" ""\\n', '< ... deleted ... >\\n}, {\\n', '""origin"": (163.11297607421875, 100.0),\\n""bbox"": (163.11297607421875, 88.17500305175781, 166.1709747314453, 103.\\n', '˓→28900146484375),\\n', '""c"": "".""\\n', '}],\\n', '25.9 XML\\n', 'The TextPage.extractXML() (or Page.get_text(“xml”)) version extracts text (no images) with the detail level of\\nRAWDICT:\\n', '>>> for line in page.get_text(""xml"").splitlines():\\n', 'print(line)\\n', '<page id=""page0"" width=""300"" height=""350"">\\n<block bbox=""50 88.175 166.17098 103.289"">\\n<line bbox=""50 88.175 166.17098 103.289"" wmode=""0"" dir=""1 0"">\\n<font name=""Helvetica"" size=""11"">\\n<char quad=""50 88.175 57.336999 88.175 50 103.289 57.336999 103.289"" x=""50""\\ny=""100"" color=""#000000"" c=""S""/>\\n', '(continues on next page)\\n', '25.8. RAWDICT (or RAWJSON)\\n449\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '<char quad=""57.337 88.175 63.453004 88.175 57.337 103.289 63.453004 103.289"" x=""57.337""\\ny=""100"" color=""#000000"" c=""o""/>\\n<char quad=""63.453004 88.175 72.616008 88.175 63.453004 103.289 72.616008 103.289"" x=""63.\\n', '˓→453004""\\ny=""100"" color=""#000000"" c=""m""/>\\n<char quad=""72.616008 88.175 78.732 88.175 72.616008 103.289 78.732 103.289"" x=""72.616008\\n', '˓→""\\ny=""100"" color=""#000000"" c=""e""/>\\n<char quad=""78.732 88.175 81.79 88.175 78.732 103.289 81.79 103.289"" x=""78.732""\\ny=""100"" color=""#000000"" c="" ""/>\\n', '... deleted ...\\n', '<char quad=""163.11298 88.175 166.17098 88.175 163.11298 103.289 166.17098 103.289"" x=\\n', '˓→""163.11298""\\ny=""100"" color=""#000000"" c="".""/>\\n</font>\\n</line>\\n</block>\\n</page>\\n', 'Note: We have successfully tested lxml to interpret this output.\\n', '25.10 XHTML\\n', 'TextPage.extractXHTML() (or Page.get_text(“xhtml”)) is a variation of TEXT but in HTML format, containing the\\nbare text and images (“semantic” output):\\n', '<div id=""page0"">\\n<p>Some text on first page.</p>\\n</div>\\n', '25.11 Text Extraction Flags Defaults\\n', '• New in version 1.16.2: Method Page.get_text() supports a keyword parameter flags (int) to control the\\namount and the quality of extracted data. The following table shows the defaults settings (flags parameter omitted\\nor None) for each extraction variant. If you specify flags with a value other than None, be aware that you must\\nset all desired options. A description of the respective bit settings can be found in Text Extraction Flags.\\n', '• New in v1.19.6: The default combinations in the following table are now available as Python constants:\\n', 'TEXTFLAGS_TEXT, TEXTFLAGS_WORDS, TEXTFLAGS_BLOCKS, TEXTFLAGS_DICT, TEXTFLAGS_RAWDICT,\\nTEXTFLAGS_HTML, TEXTFLAGS_XHTML, TEXTFLAGS_XML, and TEXTFLAGS_SEARCH. You can now easily mod-\\nify a default flag, e.g.\\n', '– include images in a “blocks” output:\\n', 'flags = TEXTFLAGS_BLOCKS | TEXT_PRESERVE_IMAGES\\n', '– exclude images from a “dict” output:\\n', '450\\nChapter 25. Appendix 1: Details on Text Extraction\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'flags = TEXTFLAGS_DICT & ~TEXT_PRESERVE_IMAGES\\n', '– set dehyphenation off in text searches:\\n', 'flags = TEXTFLAGS_SEARCH & ~TEXT_DEHYPHENATE\\n', 'Indicator\\ntext\\nhtml\\nxhtml\\nxml\\ndict\\nrawdict\\nwords\\nblocks\\nsearch\\n', 'preserve ligatures\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n', 'preserve whitespace\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n', 'preserve images\\nn/a\\n1\\n1\\nn/a\\n1\\n1\\nn/a\\n0\\n0\\n', 'inhibit spaces\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n', 'dehyphenate\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n', 'clip to mediabox\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n', '• search refers to the text search function.\\n', '• “json” is handled exactly like “dict” and is hence left out.\\n', '• “rawjson” is handled exactly like “rawdict” and is hence left out.\\n', '• An “n/a” specification means a value of 0 and setting this bit never has any effect on the output (but an adverse\\neffect on performance).\\n', '• If you are not interested in images when using an output variant which includes them by default, then by all\\nmeans set the respective bit off: You will experience a better performance and much lower space requirements.\\n', 'To show the effect of TEXT_INHIBIT_SPACES have a look at this example:\\n', '>>> print(page.get_text(""text""))\\nH a l l o !\\nMo r e\\nt e x t\\n', 'i s\\nf o l l o w i n g\\n', 'i n\\nE n g l i s h\\n', "". . .\\nl e t ' s\\ns e e\\n"", 'w h a t\\nh a p p e n s .\\n', '>>> print(page.get_text(""text"", flags=fitz.TEXT_INHIBIT_SPACES))\\nHallo!\\nMore text\\nis following\\nin English\\n... let\\'s see\\nwhat happens.\\n>>>\\n', '25.12 Performance\\n', 'The text extraction methods differ significantly both: in terms of information they supply, and in terms of resource\\nrequirements and runtimes. Generally, more information of course means, that more processing is required and a\\nhigher data volume is generated.\\n', 'Note: Especially images have a very significant impact. Make sure to exclude them (via the flags parameter) whenever\\nyou do not need them. To process the below mentioned 2’700 total pages with default flags settings required 160 seconds\\nacross all extraction methods. When all images where excluded, less than 50% of that time (77 seconds) were needed.\\n', '25.12. Performance\\n451\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'To begin with, all methods are very fast in relation to other products out there in the market. In terms of processing\\nspeed, we are not aware of a faster (free) tool. Even the most detailed method, RAWDICT, processes all 1’310 pages\\nof the Adobe PDF References in less than 5 seconds (simple text needs less than 2 seconds here).\\n', 'The following table shows average relative speeds (“RSpeed”, baseline 1.00 is TEXT), taken across ca. 1400 text-heavy\\nand 1300 image-heavy pages.\\n', 'Method\\nRSpeed\\nComments\\nno images\\n', 'TEXT\\n1.00\\nno images, plain text, line breaks\\n1.00\\n', 'BLOCKS\\n1.00\\nimage bboxes (only), block level text with bboxes, line breaks\\n1.00\\n', 'WORDS\\n1.02\\nno images, word level text with bboxes\\n1.02\\n', 'XML\\n2.72\\nno images, char level text, layout and font details\\n2.72\\n', 'XHTML\\n3.32\\nbase64 images, span level text, no layout info\\n1.00\\n', 'HTML\\n3.54\\nbase64 images, span level text, layout and font details\\n1.01\\n', 'DICT\\n3.93\\nbinary images, span level text, layout and font details\\n1.04\\n', 'RAWDICT\\n4.50\\nbinary images, char level text, layout and font details\\n1.68\\n', 'As mentioned: when excluding image extraction (last column), the relative speeds are changing drastically: except\\nRAWDICT and XML, the other methods are almost equally fast, and RAWDICT requires 40% less execution time\\nthan the now slowest XML.\\n', 'Look at chapter Appendix 1 for more performance information.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '452\\nChapter 25. Appendix 1: Details on Text Extraction\\n', 'CHAPTER\\n', 'TWENTYSIX\\n', 'APPENDIX 2: CONSIDERATIONS ON EMBEDDED FILES\\n', 'This chapter provides some background on embedded files support in PyMuPDF.\\n', '26.1 General\\n', 'Starting with version 1.4, PDF supports embedding arbitrary files as part (“Embedded File Streams”) of a PDF docu-\\nment file (see chapter “7.11.4 Embedded File Streams”, pp. 103 of the Adobe PDF References).\\n', 'In many aspects, this is comparable to concepts also found in ZIP files or the OLE technique in MS Windows. PDF\\nembedded files do, however, not support directory structures as does the ZIP format. An embedded file can in turn\\ncontain embedded files itself.\\n', 'Advantages of this concept are that embedded files are under the PDF umbrella, benefitting from its permissions /\\npassword protection and integrity aspects: all data, which a PDF may reference or even may be dependent on, can be\\nbundled into it and so form a single, consistent unit of information.\\n', 'In addition to embedded files, PDF 1.7 adds collections to its support range. This is an advanced way of storing and\\npresenting meta information (i.e. arbitrary and extensible properties) of embedded files.\\n', '26.2 MuPDF Support\\n', 'After adding initial support for collections (portfolios) and /EmbeddedFiles in MuPDF version 1.11, this support was\\ndropped again in version 1.15.\\n', 'As a consequence, the cli utility mutool no longer offers access to embedded files.\\n', 'PyMuPDF – having implemented an /EmbeddedFiles API in response in its version 1.11.0 – was therefore forced to\\nchange gears starting with its version 1.16.0 (we never published a MuPDF v1.15.x compatible PyMuPDF).\\n', 'We are now maintaining our own code basis supporting embedded files. This code makes use of basic MuPDF dictio-\\nnary and array functions only.\\n', '453\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '26.3 PyMuPDF Support\\n', 'We continue to support the full old API with respect to embedded files – with only minor, cosmetic changes.\\n', 'There even also is a new function, which delivers a list of all names under which embedded data are registered in a\\nPDF, Document.embfile_names().\\n', 'This documentation covers all versions up to 1.23.25.\\n', '454\\nChapter 26. Appendix 2: Considerations on Embedded Files\\n', 'CHAPTER\\n', 'TWENTYSEVEN\\n', 'APPENDIX 3: ASSORTED TECHNICAL INFORMATION\\n', 'This section deals with various technical topics, that are not necessarily related to each other.\\n', '27.1 Image Transformation Matrix\\n', 'Starting with version 1.18.11, the image transformation matrix is returned by some methods for text and image extrac-\\ntion: Page.get_text() and Page.get_image_bbox().\\n', 'The transformation matrix contains information about how an image was transformed to fit into the rectangle (its\\n“boundary box” = “bbox”) on some document page. By inspecting the image’s bbox on the page and this matrix, one\\ncan determine for example, whether and how the image is displayed scaled or rotated on a page.\\n', 'The relationship between image dimension and its bbox on a page is the following:\\n', '1. Using the original image’s width and height,\\n', '• define the image rectangle imgrect = fitz.Rect(0, 0, width, height)\\n', '• define the “shrink matrix” shrink = fitz.Matrix(1/width, 0, 0, 1/height, 0, 0).\\n', '2. Transforming the image rectangle with its shrink matrix, will result in the unit rectangle: imgrect * shrink\\n= fitz.Rect(0, 0, 1, 1).\\n', '3. Using the image transformation matrix “transform”, the following steps will compute the bbox:\\n', 'imgrect = fitz.Rect(0, 0, width, height)\\nshrink = fitz.Matrix(1/width, 0, 0, 1/height, 0, 0)\\nbbox = imgrect * shrink * transform\\n', '4. Inspecting the matrix product shrink * transform will reveal all information about what happened to the\\nimage rectangle to make it fit into the bbox on the page: rotation, scaling of its sides and translation of its origin.\\nLet us look at an example:\\n', '>>> imginfo = page.get_images()[0]\\n# get an image item on a page\\n', "">>> imginfo\\n(5, 0, 439, 501, 8, 'DeviceRGB', '', 'fzImg0', 'DCTDecode')\\n>>> #------------------------------------------------\\n>>> # define image shrink matrix and rectangle\\n>>> #------------------------------------------------\\n>>> shrink = fitz.Matrix(1 / 439, 0, 0, 1 / 501, 0, 0)\\n>>> imgrect = fitz.Rect(0, 0, 439, 501)\\n>>> #------------------------------------------------\\n"", '(continues on next page)\\n', '455\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', '>>> # determine image bbox and transformation matrix:\\n>>> #------------------------------------------------\\n>>> bbox, transform = page.get_image_bbox(""fzImg0"", transform=True)\\n>>> #------------------------------------------------\\n>>> # confirm equality - permitting rounding errors\\n>>> #------------------------------------------------\\n>>> bbox\\nRect(100.0, 112.37525939941406, 300.0, 287.624755859375)\\n>>> imgrect * shrink * transform\\nRect(100.0, 112.375244140625, 300.0, 287.6247253417969)\\n>>> #------------------------------------------------\\n>>> shrink * transform\\nMatrix(0.0, -0.39920157194137573, 0.3992016017436981, 0.0, 100.0, 287.6247253417969)\\n>>> #------------------------------------------------\\n>>> # the above shows:\\n>>> # image sides are scaled by same factor ~0.4,\\n>>> # and the image is rotated by 90 degrees clockwise\\n>>> # compare this with fitz.Matrix(-90) * 0.4\\n>>> #------------------------------------------------\\n', '27.2 PDF Base 14 Fonts\\n', 'The following 14 builtin font names must be supported by every PDF viewer application. They are available as a\\ndictionary, which maps their full names amd their abbreviations in lower case to the full font basename. Wherever a\\nfontname must be provided in PyMuPDF, any key or value from the dictionary may be used:\\n', ""In [2]: fitz.Base14_fontdict\\nOut[2]:\\n{'courier': 'Courier',\\n'courier-oblique': 'Courier-Oblique',\\n'courier-bold': 'Courier-Bold',\\n'courier-boldoblique': 'Courier-BoldOblique',\\n'helvetica': 'Helvetica',\\n'helvetica-oblique': 'Helvetica-Oblique',\\n'helvetica-bold': 'Helvetica-Bold',\\n'helvetica-boldoblique': 'Helvetica-BoldOblique',\\n'times-roman': 'Times-Roman',\\n'times-italic': 'Times-Italic',\\n'times-bold': 'Times-Bold',\\n'times-bolditalic': 'Times-BoldItalic',\\n'symbol': 'Symbol',\\n'zapfdingbats': 'ZapfDingbats',\\n'helv': 'Helvetica',\\n'heit': 'Helvetica-Oblique',\\n'hebo': 'Helvetica-Bold',\\n'hebi': 'Helvetica-BoldOblique',\\n'cour': 'Courier',\\n'coit': 'Courier-Oblique',\\n'cobo': 'Courier-Bold',\\n"", '(continues on next page)\\n', '456\\nChapter 27. Appendix 3: Assorted Technical Information\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '(continued from previous page)\\n', ""'cobi': 'Courier-BoldOblique',\\n'tiro': 'Times-Roman',\\n'tibo': 'Times-Bold',\\n'tiit': 'Times-Italic',\\n'tibi': 'Times-BoldItalic',\\n'symb': 'Symbol',\\n'zadb': 'ZapfDingbats'}\\n"", 'In contrast to their obligation, not all PDF viewers support these fonts correctly and completely – this is especially true\\nfor Symbol and ZapfDingbats. Also, the glyph (visual) images will be specific to every reader.\\n', 'To see how these fonts can be used – including the CJK built-in fonts – look at the table in Page.insert_font().\\n', '27.3 Adobe PDF References\\n', 'This PDF Reference manual published by Adobe is frequently quoted throughout this documentation. It can be viewed\\nand downloaded from here.\\n', 'Note: For a long time, an older version was also available under this link. It seems to be taken off of the web site in\\nOctober 2021. Earlier (pre 1.19.*) versions of the PyMuPDF documentation used to refer to this document. We have\\nundertaken an effort to replace referrals to the current specification above.\\n', '27.4 Using Python Sequences as Arguments in PyMuPDF\\n', 'When PyMuPDF objects and methods require a Python list of numerical values, other Python sequence types are also\\nallowed. Python classes are said to implement the sequence protocol, if they have a __getitem__() method.\\n', 'This basically means, you can interchangeably use Python list or tuple or even array.array, numpy.array and bytearray\\ntypes in these cases.\\n', 'For example, specifying a sequence ""s"" in any of the following ways\\n', '• s = [1, 2] – a list\\n', '• s = (1, 2) – a tuple\\n', '• s = array.array(""i"", (1, 2)) – an array.array\\n', '• s = numpy.array((1, 2)) – a numpy array\\n', '• s = bytearray((1, 2)) – a bytearray\\n', 'will make it usable in the following example expressions:\\n', '• fitz.Point(s)\\n', '• fitz.Point(x, y) + s\\n', '• doc.select(s)\\n', '27.3. Adobe PDF References\\n457\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Similarly with all geometry objects Rect, IRect, Matrix and Point.\\n', 'Because all PyMuPDF geometry classes themselves are special cases of sequences, they (with the exception of Quad\\n– see below) can be freely used where numerical sequences can be used, e.g. as arguments for functions like list(),\\ntuple(), array.array() or numpy.array(). Look at the following snippet to see this work.\\n', '>>> import fitz, array, numpy as np\\n>>> m = fitz.Matrix(1, 2, 3, 4, 5, 6)\\n>>>\\n>>> list(m)\\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\\n>>>\\n>>> tuple(m)\\n(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)\\n>>>\\n>>> array.array(""f"", m)\\narray(\\'f\\', [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\\n>>>\\n>>> np.array(m)\\narray([1., 2., 3., 4., 5., 6.])\\n', 'Note:\\nQuad is a Python sequence object as well and has a length of 4. Its items however are point_like – not\\nnumbers. Therefore, the above remarks do not apply.\\n', '27.5 Ensuring Consistency of Important Objects in PyMuPDF\\n', 'PyMuPDF is a Python binding for the C library MuPDF. While a lot of effort has been invested by MuPDF’s creators\\nto approximate some sort of an object-oriented behavior, they certainly could not overcome basic shortcomings of the\\nC language in that respect.\\n', 'Python on the other hand implements the OO-model in a very clean way. The interface code between PyMuPDF and\\nMuPDF consists of two basic files: fitz.py and fitz_wrap.c. They are created by the excellent SWIG tool for each new\\nversion.\\n', 'When you use one of PyMuPDF’s objects or methods, this will result in execution of some code in fitz.py, which in\\nturn will call some C code compiled with fitz_wrap.c.\\n', 'Because SWIG goes a long way to keep the Python and the C level in sync, everything works fine, if a certain set of\\nrules is being strictly followed. For example: never access a Page object, after you have closed (or deleted or set to\\nNone) the owning Document. Or, less obvious: never access a page or any of its children (links or annotations) after\\nyou have executed one of the document methods select(), delete_page(), insert_page() ... and more.\\n', 'But just no longer accessing invalidated objects is actually not enough: They should rather be actively deleted entirely,\\nto also free C-level resources (meaning allocated memory).\\n', 'The reason for these rules lies in the fact that there is a hierarchical 2-level one-to-many relationship between a document\\nand its pages and also between a page and its links / annotations. To maintain a consistent situation, any of the above\\nactions must lead to a complete reset – in Python and, synchronously, in C.\\n', 'SWIG cannot know about this and consequently does not do it.\\n', 'The required logic has therefore been built into PyMuPDF itself in the following way.\\n', '458\\nChapter 27. Appendix 3: Assorted Technical Information\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '1. If a page “loses” its owning document or is being deleted itself, all of its currently existing annotations and links\\nwill be made unusable in Python, and their C-level counterparts will be deleted and deallocated.\\n', '2. If a document is closed (or deleted or set to None) or if its structure has changed, then similarly all currently\\nexisting pages and their children will be made unusable, and corresponding C-level deletions will take place.\\n“Structure changes” include methods like select(), delePage(), insert_page(), insert_pdf() and so on: all of these\\nwill result in a cascade of object deletions.\\n', 'The programmer will normally not realize any of this. If he, however, tries to access invalidated objects, exceptions\\nwill be raised.\\n', 'Invalidated objects cannot be directly deleted as with Python statements like del page or page = None, etc. Instead,\\ntheir __del__ method must be invoked.\\n', 'All pages, links and annotations have the property parent, which points to the owning object. This is the property that\\ncan be checked on the application level: if obj.parent == None then the object’s parent is gone, and any reference to\\nits properties or methods will raise an exception informing about this “orphaned” state.\\n', 'A sample session:\\n', '>>> page = doc[n]\\n>>> annot = page.first_annot\\n>>> annot.type\\n# everything works fine\\n', ""[5, 'Circle']\\n>>> page = None\\n# this turns 'annot' into an orphan\\n"", '>>> annot.type\\n<... omitted lines ...>\\nRuntimeError: orphaned object: parent is None\\n>>>\\n>>> # same happens, if you do this:\\n>>> annot = doc[n].first_annot\\n# deletes the page again immediately!\\n', "">>> annot.type\\n# so, 'annot' is 'born' orphaned\\n"", '<... omitted lines ...>\\nRuntimeError: orphaned object: parent is None\\n', 'This shows the cascading effect:\\n', '>>> doc = fitz.open(""some.pdf"")\\n>>> page = doc[n]\\n>>> annot = page.first_annot\\n>>> page.rect\\nfitz.Rect(0.0, 0.0, 595.0, 842.0)\\n>>> annot.type\\n[5, \\'Circle\\']\\n>>> del doc\\n# or doc = None or doc.close()\\n', '>>> page.rect\\n<... omitted lines ...>\\nRuntimeError: orphaned object: parent is None\\n>>> annot.type\\n<... omitted lines ...>\\nRuntimeError: orphaned object: parent is None\\n', 'Note: Objects outside the above relationship are not included in this mechanism. If you e.g. created a table of contents\\nby toc = doc.get_toc(), and later close or change the document, then this cannot and does not change variable toc in\\nany way. It is your responsibility to refresh such variables as required.\\n', '27.5. Ensuring Consistency of Important Objects in PyMuPDF\\n459\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '27.6 Design of Method Page.show_pdf_page()\\n', '27.6.1 Purpose and Capabilities\\n', 'The method displays an image of a (“source”) page of another PDF document within a specified rectangle of the current\\n(“containing”, “target”) page.\\n', '• In contrast to Page.insert_image(), this display is vector-based and hence remains accurate across zooming\\nlevels.\\n', '• Just like Page.insert_image(), the size of the display is adjusted to the given rectangle.\\n', 'The following variations of the display are currently supported:\\n', '• Bool parameter ""keep_proportion"" controls whether to maintain the aspect ratio (default) or not.\\n', '– Rectangle parameter ""clip"" restricts the visible part of the source page rectangle. Default is the\\nfull page.\\n', '• float ""rotation"" rotates the display by an arbitrary angle (degrees). If the angle is not an integer multiple of\\n90, only 2 of the 4 corners may be positioned on the target border if also ""keep_proportion"" is true.\\n', '• Bool parameter ""overlay"" controls whether to put the image on top (foreground, default) of current page content\\nor not (background).\\n', 'Use cases include (but are not limited to) the following:\\n', '1. “Stamp” a series of pages of the current document with the same image, like a company logo or a watermark.\\n', '2. Combine arbitrary input pages into one output page to support “booklet” or double-sided printing (known as\\n“4-up”, “n-up”).\\n', '3. Split up (large) input pages into several arbitrary pieces. This is also called “posterization”, because you e.g. can\\nsplit an A4 page horizontally and vertically, print the 4 pieces enlarged to separate A4 pages, and end up with an\\nA2 version of your original page.\\n', '27.6.2 Technical Implementation\\n', 'This is done using PDF “Form XObjects”, see section 8.10 on page 217 of Adobe PDF References. On execution of\\na Page.show_pdf_page(), the following things happen:\\n', '1. The resources and contents objects of source page in source document are copied over to the target document,\\njointly creating a new Form XObject with the following properties. The PDF xref number of this object is\\nreturned by the method.\\n', 'a. /BBox equals /Mediabox of the source page\\n', 'b. /Matrix equals the identity matrix.\\n', 'c. /Resources equals that of the source page. This involves a “deep-copy” of hierarchically\\nnested other objects (including fonts, images, etc.). The complexity involved here is covered\\nby MuPDF’s grafting1 technique functions.\\n', '1 MuPDF supports “deep-copying” objects between PDF documents. To avoid duplicate data in the target, it uses so-called “graftmaps”, like a\\nform of scratchpad: for each object to be copied, its xref number is looked up in the graftmap. If found, copying is skipped. Otherwise, the new\\nxref is recorded and the copy takes place. PyMuPDF makes use of this technique in two places so far: Document.insert_pdf() and Page.\\nshow_pdf_page(). This process is fast and very efficient, because it prevents multiple copies of typically large and frequently referenced data, like\\n', '460\\nChapter 27. Appendix 3: Assorted Technical Information\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'd. This is a stream object type, and its stream is an exact copy of the combined data of the source\\npage’s contents objects.\\n', 'This Form XObject is only executed once per shown source page. Subsequent displays of the same\\nsource page will skip this step and only create “pointer” Form XObjects (done in next step) to this\\nobject.\\n', '2. A second Form XObject is then created which the target page uses to invoke the display. This object has the\\nfollowing properties:\\n', 'a. /BBox equals the /CropBox of the source page (or ""clip"").\\n', 'b. /Matrix represents the mapping of /BBox to the target rectangle.\\n', 'c. /XObject references the previous Form XObject via the fixed name fullpage.\\n', 'd. The stream of this object contains exactly one fixed statement: /fullpage Do.\\n', 'e. If the method’s ""oc"" argument is given, its value is assigned to this Form XObject as /OC.\\n', '3. The resources and contents objects of the target page are now modified as follows.\\n', 'a. Add an entry to the /XObject dictionary of /Resources with the name fzFrm (with n chosen such that\\nthis entry is unique on the page).\\n', 'b. Depending on ""overlay"", prepend or append a new object to the page’s /Contents array, containing the\\nstatement q /fzFrm<n> Do Q.\\n', 'This design approach ensures that:\\n', '1. The (potentially large) source page is only copied once to the target PDF. Only small “pointer” Form XObjects\\nobjects are created per each target page to show the source page.\\n', '2. Each referring target page can have its own ""oc"" parameter to control the source page’s visibility individually.\\n', '27.7 Redirecting Error and Warning Messages\\n', 'Since MuPDF version 1.16 error and warning messages can be redirected via an official plugin.\\n', 'PyMuPDF will put error messages to sys.stderr prefixed with the string “mupdf:”. Warnings are internally stored\\nand can be accessed via fitz.TOOLS.mupdf_warnings(). There also is a function to empty this store.\\n', '27.8 Coordinates\\n', 'This is one of the most frequently used terms in this documentation. A coordinate generally means a pair of numbers\\n(x, y) referring to some location, like a corner of a rectangle (Rect), a Point and so forth. The two values usually are\\nfloats, but there a objects like images which only allow them to be integers.\\n', 'To actually find a coordinate’s location, we also need to know the reference point for x and y - in other words, we must\\nknow where location (0, 0) is positioned. Once (0, 0) (the “origin”) is known, we speak of a “coordinate system”.\\n', 'Several coordinate systems exist in document processing. For instance, the coordinate systems of a PDF page and the\\nimage created from it are different. We therefore need ways to transform coordinates from one system to another (and\\n', 'images and fonts. However, you may still want to consider using garbage collection (option 4) in any of the following cases:\\n', '1. The target PDF is not new / empty: grafting does not check for resources that already existed (e.g. images, fonts) in the target document before\\nopening it.\\n', '2. Using Page.show_pdf_page() for more than one source document: each grafting occurs within one source PDF only, not across multiple.\\nSo if e.g. the same image exists in pages from different source PDFs, then this will not be detected until garbage collection.\\n', '27.7. Redirecting Error and Warning Messages\\n461\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'also back occasionally). This is the task of a Matrix. It is a mathematical function which works much like a factor\\nthat can be “multiplied” with a point or rectangle to give us the corresponding point / rectangle in another coordinate\\nsystem. The inverse of a transformation matrix can be used to revert the transformation. Much like multiplying by\\nsome factor, say 3, can be reverted by dividing the result by 3 (or multiplying it with 1/3).\\n', '27.8.1 Coordinates and Images\\n', 'Images have a coordinate system with integer coordinates. Origin (0, 0) is the top-left point. x values must be in\\nrange(width), and y values in range(height). Therefore, y values increase if we go downwards. For every image,\\nthere is only a finite number of coordinates, namely width * height. A location in an image is also called a “pixel”.\\n', '• How large an image will be (in centimeters or inches) when e.g. printed, depends on additional information: the\\n“resolution”. This is measured in DPI (dots per inch, or pixels per inch). To find the printed size of some image,\\nwe therefore must divide its width and its height by the corresponding DPI values (there may separate ones for\\nwidth and for height) and will get the respective number of inches.\\n', '27.8.2 Origin Point, Point Size and Y-Axis\\n', 'In PDF, the origin (0, 0) of a page is located at its bottom-left point. In MuPDF, the origin (0, 0) of a page is\\nlocated at its top-left point.\\n', 'Coordinates are float numbers and measured in points, where:\\n', '• one point equals 1/72 inches.\\n', 'Typical document page sizes are ISO A4 and Letter. A Letter page has a size of 8.5 x 11 inches, corresponding to\\n612 x 792 points. In the PDF coordinate system, the top-left point of a Letter page hence has the coordinate (0,\\n792) as the y-axis points upwards. Now we know our document size the MuPDF coordinate system for the bottom\\nright would be coordinate (612, 792) (and for PDF this coordinate would then be (612,0)).\\n', '• Theoretically, there are infinitely many coordinate positions on a PDF page. In practice however, at most the\\nfirst 5 decimal places are sufficient for a reasonable precision.\\n', '462\\nChapter 27. Appendix 3: Assorted Technical Information\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• In MuPDF, multiple document formats are supported - PDF just being one among over a dozen others. Images\\nare also supported as documents in MuPDF (therefore having one page usually). This is one of the reasons why\\nMuPDF uses a coordinate system with the origin (0, 0) being the top-left point of any document page. The\\ny-axis points downwards, like with images. Coordinates in MuPDF in any case are floats, like in PDF.\\n', '• A rectangle Rect(0, 0, 100, 100) for instance in MuPDF (and thus PyMuPDF) therefore is a square with\\nedges of length 100 points (= 1.39 inches or 3.53 centimeters). Its top-left corner is the origin. To switch between\\nthe two coordinate systems PDF to MuPDF, every Page object has a Page.transformation_matrix. Its\\ninverse can be used to compute a rectangle’s PDF coordinates. In this way we can conveniently find that Rect(0,\\n0, 100, 100) in MuPDF is the same as Rect(0, 692, 100, 792) in PDF. See this code snippet:\\n', '>>> page = doc.new_page(width=612, height=792)\\n# make new Letter page\\n', '>>> ptm = page.transformation_matrix\\n>>> # the inverse matrix of ptm is ~ptm\\n>>> fitz.Rect(0, 0, 100, 100) * ~ptm\\nRect(0.0, 692.0, 100.0, 792.0)\\n', 'This documentation covers all versions up to 1.23.25.\\n', '27.8. Coordinates\\n463\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '464\\nChapter 27. Appendix 3: Assorted Technical Information\\n', 'CHAPTER\\n', 'TWENTYEIGHT\\n', 'APPENDIX 4: PERFORMANCE COMPARISON METHODOLOGY\\n', 'This article documents the approach to measure PyMuPDF’s performance and the tools and example files used to do\\ncomparisons.\\n', 'The following three sections deal with different performance aspects:\\n', '• Document Copying - This includes opening and parsing PDFs, then writing them to an output file. Because the\\nsame basic activities are also used for joining (merging) PDFs, the results also apply to these use cases.\\n', '• Text Extraction - This extracts plain text from PDFs and writes it to an output text file.\\n', '• Page Rendering - This converts PDF pages to image files looking identical to the pages. This ability is the basic\\nprerequisite for using a tool in Python GUI scripts to scroll through documents. We have chosen a medium-\\nquality (resolution 150 DPI) version.\\n', 'Please note that in all cases the actual speed in dealing with PDF structures is not directly measured: instead, the\\ntimings also include the durations of writing files to the operating system’s file system. This cannot be avoided because\\ntools other than PyMuPDF do not offer the option to e.g., separate the image creation step from the following step,\\nwhich writes the image into a file.\\n', 'So all timings documented include a common, OS-oriented base effort. Therefore, performance differences per tool\\nare actually larger than the numbers suggest.\\n', '28.1 Files used\\n', 'A set of eight files is used for the performance testing. With each file we have the following information:\\n', '• Name of the file and download link.\\n', '• Size in bytes.\\n', '• Total number of pages in file.\\n', '• Total number of bookmarks (Table of Contents entries).\\n', '• Total number of links.\\n', '• KB size per page.\\n', '• Textsize per page is the amount text in the whole file in KB, divided by the number of pages.\\n', '• Any notes to generally describe the type of file.\\n', '465\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Name\\nSize\\n(bytes)\\n', 'Pages TOC\\nsize\\n', 'Links KB/pageText-\\nsize/page\\n', 'Notes\\n', 'adobe.pdf\\n32,472,771 1,310\\n794\\n32,096 24\\n1,942\\nlinearized, many links / book-\\nmarks\\n', 'artifex-\\nwebsite.pdf\\n', '31,570,732 47\\n46\\n2,035\\n656\\n3,538\\ngraphics oriented\\n', 'db-systems.pdf\\n29,326,355 1,241\\n0\\n0\\n23\\n2,142\\n', 'fontforge.pdf\\n8,222,384\\n214\\n31\\n242\\n38\\n1,058\\nmix of text & graphics\\n', 'pandas.pdf\\n10,585,962 3,071\\n536\\n16,554 3\\n1,539\\nmany pages\\n', 'pymupdf.pdf\\n6,805,176\\n478\\n276\\n5,277\\n14\\n1,937\\ntext oriented\\n', 'pythonbook.pdf\\n9,983,856\\n669\\n198\\n1,953\\n15\\n1,929\\n', 'sample-50-MB-\\npdf-file.pdf\\n', '52,521,850 1\\n0\\n0\\n51,291\\n23,860\\nsingle page, graphics oriented,\\nlarge file size\\n', 'Note:\\nadobe.pdf and pymupdf.pdf are clearly text oriented, artifex-website.pdf and sample-50-MB-pdf-file.pdf\\nare graphics oriented. Other files are a mix of both.\\n', '28.2 Tools used\\n', 'In each section, the same fixed set of PDF files is being processed by a set of tools. The set of tools used per performance\\naspect however varies, depending on the supported tool features.\\n', 'All tools are either platform independent, or at least can run on both, Windows and Unix / Linux.\\n', 'Tool\\nDescription\\n', 'PyMuPDF\\nThe tool of this manual.\\n', 'PDFrw\\nA pure Python tool, being used by rst2pdf, has interface to ReportLab.\\n', 'PyPDF2\\nA pure Python tool with a large function set.\\n', 'PDFMiner\\nA pure Python to extract text and other data from PDF.\\n', 'XPDF\\nA command line utility with multiple functions.\\n', 'PikePDF\\nA Python package similar to PDFrw, but based on C++ library QPDF.\\n', 'PDF2JPG\\nA Python package specialized on rendering PDF pages to JPG images.\\n', '28.3 Copying / Joining / Merging\\n', 'How fast is a PDF file read and its content parsed for further processing? The sheer parsing performance cannot directly\\nbe compared, because batch utilities always execute a requested task completely, in one go, front to end. PDFrw too,\\nhas a lazy strategy for parsing, meaning it only parses those parts of a document that are required in any moment.\\n', 'To find an answer to the question, we therefore measure the time to copy a PDF file to an output file with each tool,\\nand do nothing else.\\n', 'These are the Python commands for how each tool is used:\\n', 'PyMuPDF\\n', '466\\nChapter 28. Appendix 4: Performance Comparison Methodology\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'import fitz\\ndoc = fitz.open(""input.pdf"")\\ndoc.save(""output.pdf"")\\n', 'PDFrw\\n', 'doc = PdfReader(""input.pdf"")\\nwriter = PdfWriter()\\nwriter.trailer = doc\\nwriter.write(""output.pdf"")\\n', 'PikePDF\\n', 'from pikepdf import Pdf\\ndoc = Pdf.open(""input.pdf"")\\ndoc.save(""output.pdf"")\\n', 'PyPDF2\\n', 'pdfmerge = PyPDF2.PdfMerger()\\npdfmerge.append(""input.pdf"")\\npdfmerge.write(""output.pdf"")\\npdfmerge.close()\\n', 'Observations\\n', 'These are our run time findings in seconds along with a base rate summary compared to PyMuPDF:\\n', 'Name\\nPyMuPDF\\nPDFrw\\nPikePDF\\nPyPDF2\\n', 'adobe.pdf\\n1.75\\n5.15\\n22.37\\n374.05\\n', 'artifex-website.pdf\\n0.26\\n0.38\\n1.41\\n2.81\\n', 'db-systems.pdf\\n0.15\\n0.8\\n1.68\\n2.46\\n', 'fontforge.pdf\\n0.09\\n0.14\\n0.28\\n1.1\\n', 'pandas.pdf\\n0.38\\n2.21\\n2.73\\n70.3\\n', 'pymupdf.pdf\\n0.11\\n0.56\\n0.83\\n6.05\\n', 'pythonbook.pdf\\n0.19\\n1.2\\n1.34\\n37.19\\n', 'sample-50-MB-pdf-file.pdf\\n0.12\\n0.1\\n2.93\\n0.08\\n', 'Total\\n3.05\\n10.54\\n33.57\\n494.04\\n', 'Rate compared to PyMuPDF\\n1.0\\n3.5\\n11.0\\n162\\n', '28.4 Text Extraction\\n', 'The following table shows plain text extraction durations. All tools have been used with their most basic functionality\\n- i.e. no layout re-arrangements, etc.\\n', 'Observations\\n', 'These are our run time findings in seconds along with a base rate summary compared to PyMuPDF:\\n', '28.4. Text Extraction\\n467\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Name\\nPyMuPDF\\nXPDF\\nPyPDF2\\nPDFMiner\\n', 'adobe.pdf\\n2.01\\n6.19\\n22.2\\n49.15\\n', 'artifex-website.pdf\\n0.18\\n0.3\\n1.1\\n4.06\\n', 'db-systems.pdf\\n1.57\\n4.26\\n25.75\\n42.19\\n', 'fontforge.pdf\\n0.24\\n0.47\\n2.69\\n4.2\\n', 'pandas.pdf\\n2.41\\n10.54\\n25.38\\n76.56\\n', 'pymupdf.pdf\\n0.49\\n2.34\\n6.44\\n13.55\\n', 'pythonbook.pdf\\n0.84\\n2.88\\n9.28\\n24.27\\n', 'sample-50-MB-pdf-file.pdf\\n0.27\\n0.44\\n8.8\\n13.29\\n', 'Total\\n8.01\\n27.42\\n101.64\\n227.27\\n', 'Rate compared to PyMuPDF\\n1.0\\n3.42\\n12.69\\n28.37\\n', '28.5 Page Rendering\\n', 'We have tested rendering speed of PyMuPDF against pdf2jpg and XPDF at a resolution of 150 DPI,\\n', 'These are the Python commands for how each tool is used:\\n', 'PyMuPDF\\n', 'def ProcessFile(datei):\\nprint ""processing:"", datei\\ndoc=fitz.open(datei)\\nfor p in fitz.Pages(doc):\\npix = p.get_pixmap(dpi=150)\\npix.save(""t-%s.png"" % p.number)\\npix = None\\n', 'doc.close()\\nreturn\\n', 'XPDF\\n', 'pdftopng.exe -r 150 file.pdf ./\\n', 'PDF2JPG\\n', 'def ProcessFile(datei):\\n', 'print(""processing:"", datei)\\npdf2jpg.convert_pdf2jpg(datei, ""images"", pages=""ALL"", dpi=150)\\nreturn\\n', 'Observations\\n', 'These are our run time findings in seconds along with a base rate summary compared to PyMuPDF:\\n', '468\\nChapter 28. Appendix 4: Performance Comparison Methodology\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Name\\nPyMuPDF\\nXPDF\\nPDF2JPG\\n', 'adobe.pdf\\n51.33\\n98.16\\n75.71\\n', 'artifex-website.pdf\\n26.35\\n51.28\\n54.11\\n', 'db-systems.pdf\\n84.59\\n143.16\\n405.22\\n', 'fontforge.pdf\\n12.23\\n22.18\\n20.14\\n', 'pandas.pdf\\n138.74\\n241.67\\n202.06\\n', 'pymupdf.pdf\\n22.35\\n39.11\\n33.38\\n', 'pythonbook.pdf\\n30.44\\n49.12\\n55.68\\n', 'sample-50-MB-pdf-file.pdf\\n1.01\\n1.32\\n5.22\\n', 'Total\\n367.04\\n646\\n851.52\\n', 'Rate compared to PyMuPDF\\n1.0\\n1.76\\n2.32\\n', 'This documentation covers all versions up to 1.23.25.\\n', '28.5. Page Rendering\\n469\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '470\\nChapter 28. Appendix 4: Performance Comparison Methodology\\n', 'CHAPTER\\n', 'TWENTYNINE\\n', 'CHANGE LOG\\n', 'Changes in version 1.23.25 (2024-02-20)\\n', '• Fixed issues:\\n', '– Fixed 3182: Pixmap.invert_irect argument type error\\n', '– Fixed 3186: extractText() extracts broken text from pdf\\n', '– Fixed 3191: Error on .find_tables()\\n', '• Other:\\n', '– When\\nbuilding,\\nbe\\nable\\nto\\nspecify\\npython-config\\ndirectly,\\nwith\\nenvironment\\nvariable\\nPIPCL_PYTHON_CONFIG.\\n', 'Changes in version 1.23.24 (2024-02-19)\\n', '• Fixed issues:\\n', '– Fixed 3148: Table extraction - vertical text not handled correctly\\n', '– Fixed 3179: Table Detection: Incorrect Separation of Vector Graphics Clusters\\n', '– Fixed 3180: Cannot show optional content group: AttributeError: module ‘fitz.mupdf’ has no attribute\\n‘pdf_array_push_drop’\\n', '• Other:\\n', '– Be able to test system install using sudo pip install instead of a venv.\\n', 'Changes in version 1.23.23 (2024-02-18)\\n', '• Fixed issues:\\n', '– Fixed 3126: Initialising Archive with a pathlib.Path fails.\\n', '– Fixed 3131: Calling the next attribute of an Annot raises a “No attribute .parent” warning\\n', '– Fixed 3134: Using an IRect as clip parameter in Page.get_pixmap no longer works since 1.23.9\\n', '– Fixed 3140: PDF document stays in use after closing\\n', '– Fixed 3150: doc.select() hangs on this doc.\\n', '– Fixed 3163: AssertionError on using fitz.IRect\\n', '– Fixed 3177: fitz.Pixmap(None, pix) Unrecognised args for constructing Pixmap\\n', '• Other:\\n', '– Improved\\nDocument.select() by using new MuPDF function �pdf_rearrange_pages().\\nThis is a more complete (and faster) implementation of what needs to be done here in that not only pages\\n', '471\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'will be rearranged, but also consequential changes will be made to the table of contents, links to removed\\npages and affected entries in the Optional Content definitions.\\n', '– TextWriter.appendv(): added small_caps arg.\\n', '– Fixed some valgrind errors with MuPDF master.\\n', '– Fixed Document.insert_image() when build with MuPDF master.\\n', 'Changes in version 1.23.22 (2024-02-12)\\n', '• Fixed issues:\\n', '– Fixed 3143: Difference in decoding of OCGs names between doc.get_ocgs() and page.get_drawings()\\n', '– Fixed 3139: Pixmap resizing needs positional arg “clip” - even if None.\\n', '• Other:\\n', '– Removed the use of MuPDF function fz_image_size() from PyMuPDF.\\n', 'Changes in version 1.23.21 (2024-02-01)\\n', '• Fixed issues:\\n', '• Other:\\n', '– Fixed bug in set_xml_metadata(), PR `3112 https://github.com/pymupdf/PyMuPDF/pull/3112>`_: Fix\\npdf_add_stream metadata error\\n', '– Fixed lack of .parent member in TextPage from Annot.get_textpage().\\n', '– Fixed bug in Page.add_widget().\\n', 'Changes in version 1.23.20 (2024-01-29)\\n', '• Bug fixes:\\n', '– Fixed 3100: Wrong internal property accessed in get_xml_metadata\\n', '• Other:\\n', '– Significantly improved speed of Document.get_toc().\\n', 'Changes in version 1.23.19 (2024-01-25)\\n', '• Bug fixes:\\n', '– Fixed 3087: Exception in insert_image with mask specified\\n', '– Fixed 3094: TypeError: ‘<’ not supported between instances of ‘FzLocation’ and ‘int’ in doc.delete_pages\\n', '• Other:\\n', '– When finding tables:\\n', '∗ Allow addition of user-defined “virtual” vector graphics when finding tables.\\n', '∗ Confirm that the enveloping bboxes of vector graphics are inside the clip rectangle.\\n', '∗ Avoid slow finding of rectangle intersections.\\n', '– Added Font.bbox property.\\n', 'Changes in version 1.23.18 (2024-01-23)\\n', '• Bug fixes:\\n', '– Fixed 3081: doc.close() not closing the document\\n', '• Other:\\n', '472\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Reduced size of sdist to fit on pypi.org (by reducing size of two test files).\\n', '– Fix Annot.file_info() if no Desc item.\\n', 'Changes in version 1.23.17 (2024-01-22)\\n', '• Bug fixes:\\n', '– Fixed 3062: page_rotation_reset does not return page to original rotation\\n', '– Fixed 3070: update_link(): AttributeError: ‘Page’ object has no attribute ‘super’\\n', '• Other:\\n', '– Fixed bug in Page.links() (PR #3075).\\n', '– Fixed bug in Page.get_bboxlog() with layers.\\n', '– Add support for timeouts in scripts/ and tests/run_compound.py.\\n', 'Changes in version 1.23.16 (2024-01-18)\\n', '• Bug fixes:\\n', '– Fixed 3058: Pixmap created from CMYK JPEG delivers RGB format\\n', '• Other:\\n', '– In table detection strategy “lines_strict”, exclude fill-only vector graphics.\\n', '– Fixed sysinstall test failure.\\n', '– In documentation, update feature matrix with item about text writing.\\n', 'Changes in version 1.23.15 (2024-01-16)\\n', '• Bug fixes:\\n', '– Fixed 3050: python3.9 pix.set_pixel has something wrong in c.append( ord(i))\\n', '• Other:\\n', '– Improved docs for Page.find_tables().\\n', 'Changes in version 1.23.14 (2024-01-15)\\n', '• Bug fixes:\\n', '– Fixed 3038: JM_pixmap_from_display_list > Assertion Error : Checking for wrong type\\n', '– Fixed 3039: Issue with doc.close() not closing the document in PyMuPDF\\n', '• Other:\\n', '– Ensure valid “re” rectangles in Page.get_drawings() with derotated pages.\\n', 'Changes in version 1.23.13 (2024-01-15)\\n', '• Bug fixes:\\n', '– Fixed 2979: list index out of range in to_pandas()\\n', '– Fixed 3001: Calling find_tables() on one document alters the bounding boxes of a subsequent document\\n', '• Other:\\n', '– Fixed Rect.height and Rect.width to never return negative values.\\n', '– Fixed TextPage.extractIMGINFO()’s returned dictkey_yres value.\\n', 'Changes in version 1.23.12 (2024-01-12)\\n', '473\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '•\\n– Fixed 3027: Page.get_text throws Attribute Error for ‘parent’\\n', 'Changes in version 1.23.11 (2024-01-12)\\n', '• Fixed some Pixmap construction bugs.\\n', '• Fixed Pixmap.yres().\\n', 'Changes in version 1.23.10 (2024-01-12)\\n', '• Bug fixes:\\n', '– Fixed 3020: Can’t resize a PixMap\\n', '• Other:\\n', '– Fixed Page.delete_image().\\n', 'Changes in version 1.23.9 (2024-01-11)\\n', '• Default to new “rebased” implementation.\\n', '– The old “classic” implementation is available with import fitz_old as fitz.\\n', '– For more information about why we are changing to the rebased implementation, see: https://github.com/\\npymupdf/PyMuPDF/discussions/2680\\n', '• Use MuPDF-1.23.9.\\n', '• Bug fixes (rebased implementation only):\\n', '– Fixed 2911: Page.derotation_matrix returns a tuple instead of a Matrix with rebased implementation\\n', '– Fixed 2919: Rebased version: KeyError in resolve_names when merging pdfs\\n', '– Fixed 2922: New feature that allows inserting named-destination links doesn’t work\\n', '– Fixed 2943: ZeroDivisionError: float division by zero when use apply_redactions()\\n', '– Fixed 2950: Shelling out to pip during tests is problematic\\n', '– Fixed 2954: Replacement unicode character in text extraction\\n', '– Fixed 2957: apply_redactions() moving text\\n', '– Fixed 2961: Passing a string as a page number raises IndexError instead of TypeError.\\n', '– Fixed 2969: annot.next throws AttributeError\\n', '– Fixed 2978: 1.23.9rc1: module ‘fitz.mupdf’ has no attribute ‘fz_copy_pixmap_rect’\\n', '– Fixed 2907: segfault trying to call clean_contents on certain pdfs with python 3.12\\n', '– Fixed 2905: SystemError: <built-in function TextPage_extractIMGINFO> returned a result with an ex-\\nception set\\n', '– Fixed 2742: Segmentation Fault when inserting three (but not two) copies of the same source page into\\none destination page\\n', '• Other:\\n', '– Add optional setting of opacity to Page.insert_htmlbox().\\n', '– Fixed issue with add_redact_annot() mentioned in #2934.\\n', '– Fixed Page.rotation() to return 0 for non-PDF documents instead of raising an exception.\\n', '– Fixed internal quad detection to cope with any Python sequence.\\n', '– Fixed rebased fitz.pymupdf_version_tuple - was previously set to mupdf version.\\n', '474\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Improved support for Linux system installs, including adding regular testing on Github.\\n', '– Add missing flake8 to scripts/gh_release.py:test_packages.\\n', '– Use newly public functions in MuPDF-1.23.8.\\n', '– Improved scripts/test.py to help investigation of MuPDF issues.\\n', 'Changes in version 1.23.8 (2023-12-19)\\n', '• Bug fixes (rebased implementation only):\\n', '– Fixed 2634: get_toc and set_toc do not behave consistently for rotated pages\\n', '– Fixed 2861: AttributeError in getLinkDict during PDF Merge\\n', '– Fixed 2871: KeyError in getLinkDict during PDF merge\\n', '– Fixed 2886: Error in Skeleton for Named Link Destinations\\n', '• Bug fixes (rebased and classic implementations):\\n', '– Fixed 2885: pymupdf find tables too slow\\n', '• Other:\\n', '– Rebased implementation:\\n', '∗ Page.insert_htmlbox(): new, much more powerful alternative to Page.insert_textbox() or\\n', 'TextWriter.fill_textbox(), using Story.\\n', '∗ Story.fit*(): new methods for fitting a Story into an expanded rect.\\n', '∗ Story.write_with_links(): add support for external links.\\n', '∗ Document.language():\\nfixed\\nto\\nuse\\nMuPDF’s\\nnew\\nmupdf.\\nfz_string_from_text_language2().\\n', '∗ Document.subset_fonts() - fixed.\\n', '∗ Fixed internal Archive._add_treeitem() method.\\n', '∗ Fixed fitz_new.__doc__ to contain PyMuPDF and Python version information, and OS name.\\n', '∗ Removed use of (*args, **kwargs) in API, we now specify keyword args explicitly.\\n', '∗ Work with new MuPDF Python exception classes.\\n', '– Fixed bug where button_states() returns None when /AP points to an indirect object.\\n', '– Fixed pillow test to not ignore all errors, and install pillow when testing.\\n', '– Added test for fitz.css_for_pymupdf_font() (uses package pymupdf-fonts).\\n', '– Simplified Github Actions test specifications.\\n', '– Updated tests/README.md.\\n', 'Changes in version 1.23.7 (2023-11-30)\\n', '• Bug fixes in rebased implementation, not fixed in classic implementation:\\n', '– Fixed 2232: Geometry helper classes should support keyword arguments\\n', '– Fixed 2788: Problem with get_toc in pymupdf 1.23.6\\n', '– Fixed 2791: Experiencing small memory leak in save()\\n', '• Bug fixes (rebased and classic implementations):\\n', '– Fixed 2736: Failure when set cropbox with mediabox negative value\\n', '475\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Fixed 2749: RuntimeError: cycle in structure tree\\n', '– Fixed 2753: Story.write_with_links will ignore everything after the first “page break” in the HTML.\\n', '– Fixed 2812: find_tables on landscape page generates reversed text\\n', '– Fixed 2829: [cannot create /Annot for kind] is still printed despite #2345 is closed.\\n', '– Fixed 2841: Unexpected KeyError when using scrub with fitz_new\\n', '• Use MuPDF-1.23.7.\\n', '• Other:\\n', '– Rebased implementation:\\n', '∗ Added flake8 code checking to test suite, and made various fixes.\\n', '∗ Disable diagnostics during Document constructor to match classic implementation.\\n', '– Additional fix to 2553: Invalid characters in versions >= 1.22\\n', '– Fixed MuPDF Bug 707324: Story: HTML table row background color repeated incorrectly\\n', '– Added scripts/test.py, for simple build+test of PyMuPDF git checkout.\\n', '– Added fitz.pymupdf_version_tuple, e.g. (1, 23, 6).\\n', '– Restored mistakenly-reverted fix for 2345: Turn off print statements in utils.py\\n', '– Include any trailing ... repeated <N> times... text in warnings returned by mupdf_warnings()\\n', '(rebased only).\\n', 'Changes in version 1.23.6 (2023-11-06)\\n', '• Bug fixes:\\n', '– Fixed 2553: Invalid characters in versions >= 1.22\\n', '– Fixed 2608: Incorrect utf32 text extraction (high & low surrogates are split)\\n', '– Fixed 2710: page.rect and text location wrong / differing from older version\\n', '– Fixed 2774: wrong encoding for “?” character when sort=True\\n', '– Fixed 2775: fitz_new does not work with python3.10 or earlier\\n', '– Fixed 2777: With fitz_new, wrong type for Page.mediabox\\n', '• Other:\\n', '– Use MuPDF-1.23.5.\\n', '– Added Document.resolve_names() (rebased implementation only).\\n', 'Changes in version 1.23.5 (2023-10-11)\\n', '• Bug fixes:\\n', '– Fixed 2341: Handling negative values in the zoom section for LINK_GOTO in linkDest\\n', '– Fixed 2522: Typo in set_layer() - NameError: name ‘f’ is not defined\\n', '– Fixed 2548: Fitz freezes on some PDFs when calling the fitz.Page.get_text_blocks method.\\n', '– Fixed 2596: save(garbage=3) breaks get_pixmap() with side effect\\n', '– Fixed 2635: “clean=True” makes objects invisible in the pdf\\n', '– Fixed 2637: Page.insert_textbox incorrectly handles the last word if it starts a new line\\n', '476\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Fixed 2699: extract paragraph with below table\\n', '– Fixed 2703: Wrong fontsize calculation in corner cases (“page.get_texttrace()”)\\n', '– Fixed 2710: page.rect and text location wrong / differing from older version\\n', '– Fixed 2723: When will a Python 3.12 wheel be available?\\n', '– Fixed 2730: persistent get_text() formatting\\n', '• Other:\\n', '– Use MuPDF-1.23.4.\\n', '– Fix optimisation flags with system installs.\\n', '– Fixed the problem that the clip parameter does not take effect during table recognition\\n', '– Support Pillow mode “RGBa”\\n', '– Support extra word delimiters\\n', '– Support checking valid PDF name objects\\n', 'Changes in version 1.23.4 (2023-09-26)\\n', '• Improved build instructions.\\n', '• Fixed Tesseract in rebased implementation.\\n', '• Improvements to build/install with system MuPDF.\\n', '• Fixed Pyodide builds.\\n', '• Fixed rebased bug in _insert_image().\\n', '• Bug fixes:\\n', '– Fixed 2556: Segmentation fault at caling get_cdrawings(extended=True)\\n', '– Fixed 2637: Page.insert_textbox incorrectly handles the last word if it starts a new line\\n', '– Fixed 2683: Windows sdist build failure - non-quoting of path and using UNIX which command\\n', '– Fixed 2691: Page.get_textpage_ocr() bug in rebased fitz_new version\\n', '– Fixed 2692: Page.get_pixmap(clip=Rect()) bug in rebased fitz_new version\\n', 'Changes in version 1.23.3 (2023-08-31)\\n', '• Fixed use of Tesseract for OCR.\\n', 'Changes in version 1.23.2 (2023-08-28)\\n', '• Fixed #2613: release 1.23.0 not MacOS-arm64 compatible\\n', 'Changes in version 1.23.1 (2023-08-24)\\n', '• Updated README and package summary description.\\n', '• Fixed a problem on some Linux installations with Python-3.10 (and possibly earlier versions) where import\\nfitz failed with ImportError:\\nlibcrypt.so.2:\\ncannot open shared object file:\\nNo such\\nfile or directory.\\n', '• Fixed incompatible architecture error on MacOS arm64.\\n', '• Fixed installation warning from Poetry about missing entry in wheels’ RECORD files.\\n', 'Changes in version 1.23.0 (2023-08-22)\\n', '477\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Add method find_tables() to the Page object.\\n', 'This allows locating tables on any supported document page, and extracting table content by cell.\\n', '• New “rebased” implementation of PyMuPDF.\\n', 'The rebased implementation is available as Python module fitz_new. It can be used as a drop-in replacement\\nwith import fitz_new as fitz.\\n', '• Python-independent MuPDF libraries are now in a second wheel called PyMuPDFb that will be automatically\\ninstalled by pip.\\n', 'This is to save space on pypi.org - a full release only needs one PyMuPDFb wheel for each OS.\\n', '• Bug fixes:\\n', '– Fixed #2542: fitz.utils.scrub AttributeError Annot object has no attribute fileUpd inside\\n', '– Fixed #2533: get_texttrace returned a incorrect character bbox\\n', '– Fixed #2537: Validation when setting a grouped RadioButton throws a RuntimeError: path to ‘V’ has\\nindirects\\n', '• Other changes:\\n', '– Dropped support for Python-3.7.\\n', '– Fix for wrong page / annot /Contents cleaning.\\n', 'We need to set pdf_filter_options::no_update to zero.\\n', '– Added new function get_tessdata().\\n', '– Cope with problem /Annot arrays.\\n', 'When copying page annotations in method Document.insert_pdf we previously did not check the validity\\nof members of the /Annots array. For faulty members (like null or non-dictionary items) this could cause\\nunnecessary exceptions. This fix implements more checks and skips such array items.\\n', '– Additional annotation type checks.\\n', 'We did not previously check for annotation type when getting / setting annotation border properties. This\\nis now checked in accordance with MuPDF.\\n', '– Increase fault tolerance.\\n', 'Avoid exceptions in method insert_pdf() when source pages contains invalid items in the /Annots\\narray.\\n', '– Return empty border dict for applicable annots.\\n', 'We previously were returning a non-empty border dictionary even for non-applicable annotation types.\\nWe now return the empty dictionary {} in these cases. This requires some corresponding changes in the\\nannotation .update() method, namely for dashes and border width.\\n', '– Restrict set_rect to applicable annot types.\\n', 'We were insufficiently excluding non-applicable annotation types from set_rect() method. We now let\\nMuPDF catch unsupported annotations and return False in these cases.\\n', '– Wrong fontsize computation in page.get_texttrace().\\n', 'When computing the font size we were using the final text transformation matrix, where we should have\\ntaken span->trm instead. This is corrected here.\\n', '– Updates to cope with changes to latest MuPDF.\\n', 'pdf_lookup_anchor() has been removed.\\n', '478\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Update fill_textbox to better respect rect.width\\n', 'The function norm_words in fill_textbox had a bug in its last loop, appending n+1 characters when actually\\nmeasuring width of n characters. It led to a bug in fill_texbox when you tried to write a single word mostly\\ncomposed of “wide” letters (M,m, W, w...), causing the written text to exceed the given rect.\\n', 'The fix was just to replace n+1 by n.\\n', '– Add script_focus and script_blur options to widget.\\n', 'Changes in version 1.22.5 (2023-06-21)\\n', '• This release uses MuPDF-1.22.2.\\n', '• Bug fixes:\\n', '– Fixed #2365: Incorrect dictionary values for type “fs” drawings.\\n', '– Fixed #2391: Check box automatically uncheck when we update same checkbox more than 1 times.\\n', '– Fixed #2400: Gaps within text of same line not filled with spaces.\\n', '– Fixed #2404: Blacklining an image in PDF won’t remove underlying content in version 1.22.X.\\n', '– Fixed #2430: Incorrectly reducing ref count of Py_None.\\n', '– Fixed #2450: Empty fill color and fill opacity for paths with fill and stroke operations with 1.22.*\\n', '– Fixed #2462: Error at “get_drawing(extended=True )”\\n', '– Fixed #2468: Decode error when trying to get drawings\\n', '– Fixed #2710: page.rect and text location wrong / differing from older version\\n', '– Fixed #2723: When will a Python 3.12 wheel be available?\\n', '• New features:\\n', '– Changed Annotations now support “cloudy” borders. The Annot.border property has the new item\\nclouds, and method Annot.set_border() supports the corresponding clouds argument.\\n', '– Changed Radio button widgets in the same RB group are now consistently updated if the group is defined\\nin the standard way.\\n', '– Added Support for the /Locked key in PDF Optional Content. This array inside the catalog entry /\\nOCProperties can now be extracted and set.\\n', '– Added Support for new parameter tessdata in OCR functions. New function get_tessdata() locates\\nthe language support folder if Tesseract is installed.\\n', 'Changes in version 1.22.3 (2023-05-10)\\n', '• This release uses MuPDF-1.22.0.\\n', '• Bug fixes:\\n', '– Fixed #2333: Unable to set any of button radio group in form\\n', 'Changes in version 1.22.2 (2023-04-26)\\n', '• This release uses MuPDF-1.22.0.\\n', '• Bug fixes:\\n', '– Fixed #2369: Image extraction bugs with newer versions\\n', 'Changes in version 1.22.1 (2023-04-18)\\n', '• This release uses MuPDF-1.22.0.\\n', '479\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Bug fixes:\\n', '– Fixed #2345: Turn off print statements in utils.py\\n', '– Fixed #2348: extract_image returns an extension “flate” instead of “png”\\n', '– Fixed\\n#2350:\\nCan\\nnot\\nmake\\nwidget\\n(checkbox)\\nto\\nread-only\\nby\\nadding\\nflags\\nPDF_FIELD_IS_READ_ONLY\\n', '– Fixed #2355: 1.22.0 error when using get_toc (AttributeError: ‘SwigPyObject’ object has no attribute)\\n', 'Changes in version 1.22.0 (2023-04-14)\\n', '• This release uses MuPDF-1.22.0.\\n', '• Behavioural changes:\\n', '– Text extraction now includes glyphs that overlap with clip rect; previously they were included only if they\\nwere entirely contained within the clip rect.\\n', '• Bug fixes:\\n', '– Fixed #1763: Interactive(smartform) form PDF calculation not working in pymupdf\\n', '– Fixed #1995: RuntimeError: image is too high for a long paged pdf file when trying\\n', '– Fixed #2093: Image in pdf changes color after applying redactions\\n', '– Fixed #2108: Redaction removing more text than expected\\n', '– Fixed #2141: Failed to read JPX header when trying to get blocks\\n', '– Fixed #2144: Replace image throws an error\\n', '– Fixed #2146: Wrong Handling of Reference Count of “None” Object\\n', '– Fixed #2161: Support adding images as pages directly\\n', '– Fixed #2168: page.add_highlight_annot(start=pointa, stop=pointb) not working\\n', '– Fixed #2173: Double free of Colorspace used in Pixmap\\n', '– Fixed #2179: Incorrect documentation for pixmap.tint_with()\\n', '– Fixed #2208: Pushbutton widget appears as check box\\n', '– Fixed #2210: apply_redactions() move pdf text to right after redaction\\n', '– Fixed #2220: Page.delete_image() | object has no attribute is_image\\n', '– Fixed #2228: open some pdf cost too much time\\n', '– Fixed #2238: Bug - can not extract data from file in the newest version 1.21.1\\n', '– Fixed #2242: Python quits silently in Story.element_positions() if callback function prototype is\\nwrong\\n', '– Fixed #2246: TextWriter write text in a wrong position\\n', '– Fixed #2248: After redacting the content, the position of the remaining text changes\\n', '– Fixed #2250: docs: unclear or broken link in page.rst\\n', '– Fixed #2251: mupdf_display_errors does not apply to Pixmap when loading broken image\\n', '– Fixed #2270: Annot.get_text(""words"") - doesn’t return the first line of words\\n', '– Fixed #2275: insert_image: document that rotations are counterclockwise\\n', '480\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Fixed\\n#2278:\\nCan\\nnot\\nmake\\nwidget\\n(checkbox)\\nto\\nread-only\\nby\\nadding\\nflags\\nPDF_FIELD_IS_READ_ONLY\\n', '– Fixed #2290: Different image format/data from Page.get_text(“dict”) and Fitz.get_page_images()\\n', '– Fixed #2293: 68 failed tests when installing from sdist on my box\\n', '– Fixed #2300: Too much recursion in tree (parents), makes program terminate\\n', '– Fixed #2322: add_highlight_annot using clip generates “A Number is Out of Range” error in PDF\\n', '• Other:\\n', '– Add key “/AS (Yes)” to the underlying annot object of a selected button form field.\\n', '– Remove unused Document methods has_xref_streams() and has_old_style_xrefs() as MuPDF\\nequivalents have been removed.\\n', '– Add new Document methods and properties for getting/setting /PageMode, /PageLayout and /\\nMarkInfo.\\n', '– New Document property version_count, which contains the number of incremental saves plus one.\\n', '– New Document property is_fast_webaccess which tells whether the document is linearized.\\n', '– DocumentWriter is now a context manager.\\n', '– Add support for Pixmap JPEG output.\\n', '– Add support for drawing rectangles with rounded corners.\\n', '– get_drawings(): added optional extended arg.\\n', '– Fixed issue where trace devices’ state was not being initialised correctly; data returned from things like\\nfitz.Page.get_texttrace() might be slightly altered, e.g. linewidth values.\\n', '– Output warning to stderr if it looks like we are being used with current directory containing an invalid\\nfitz/ directory, because this can break import of fitz module. For example this happens if one attempts\\nto use fitz when current directory is a PyMuPDF checkout.\\n', '• Documentation:\\n', '– General rework:\\n', '∗ Introduces a new home page and new table of contents.\\n', '∗ Structural update to include new About section.\\n', '∗ Comparison & performance graphing.\\n', '∗ Includes performance methodology in appendix.\\n', '∗ Updates conf.py to understand single back-ticks as code.\\n', '∗ Converts double back-ticks to single back-ticks.\\n', '∗ Removes redundant files.\\n', '– Improve insert_file() documentation.\\n', '– get_bboxlog(): aded optional layers to get_bboxlog().\\n', '– Page.get_texttrace(): add new dictionary key layer, name of Optional Content Group.\\n', '– Mention use of Python venv in installation documentation.\\n', '– Added missing fix for #2057 to release 1.21.1’s changelog.\\n', '– Fixes many links to the PyMuPDF-Utilities repo scripts.\\n', '481\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Avoid duplication of changes.txt and docs/changes.rst.\\n', '• Build\\n', '– Added pyproject.toml file to improve builds using pip etc.\\n', 'Changes in Version 1.21.1 (2022-12-13)\\n', '• This release uses MuPDF-1.21.1.\\n', '• Bug fixes:\\n', '– Fixed #2110: Fully embedded font is extracted only partially if it occupies more than one object\\n', '– Fixed #2094: Rectangle Detection Logic\\n', '– Fixed #2088: Destination point not set for named links in toc\\n', '– Fixed #2087: Image with Filter “[/FlateDecode/JPXDecode]” not extracted\\n', '– Fixed #2086: Document.save() owner_pw & user_pw has buffer overflow bug\\n', '– Fixed #2076: Segfault in fitz.py\\n', '– Fixed #2057: Document.save garbage parameter not working in PyMuPDF 1.21.0\\n', '– Fixed #2051: Missing DPI Parameter\\n', '– Fixed #2048: Invalid size of TextPage and bbox with newest version 1.21.0\\n', '– Fixed #2045: SystemError: <built-in function Page_get_texttrace> returned a result with an error set\\n', '– Fixed #2039: 1.21.0 fails to build against system libmupdf\\n', '– Fixed #2036: Archive::Archive defined twice\\n', '• Other\\n', '– Swallow “&zoom=nan” in link uri strings.\\n', '– Add new Page utility methods Page.replace_image() and Page.delete_image().\\n', '• Documentation:\\n', '– #2040: Added note about test failure with non-default build of MuPDF, to tests/README.md.\\n', '– #2037: In docs/installation.rst, mention incompatibility with chocolatey.org on Windows.\\n', '– #2061: Fixed description of Annot.file_info.\\n', '– #2065: Show how to insert internal PDF link.\\n', '– Improved description of building from source without an sdist.\\n', '– Added information about running tests.\\n', '– #2084: Fixed broken link to PyMuPDF-Utilities.\\n', 'Changes in Version 1.21.0 (2022-11-8)\\n', '• This release uses MuPDF-1.21.0.\\n', '• New feature: Stories.\\n', '• Added wheels for Python-3.11.\\n', '• Bug fixes:\\n', '– Fixed #1701: Broken custom image insertion.\\n', '– Fixed #1854: Document.delete_pages() declines keyword arguments.\\n', '482\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '– Fixed #1868: Access Violation Error at page.apply_redactions().\\n', '– Fixed #1909: Adding text with fontname=""Helvetica"" can silently fail.\\n', '– Fixed #1913: draw_rect(): does not respect width if color is not specified.\\n', '– Fixed #1917: subset_fonts(): make it possible to silence the stdout.\\n', '– Fixed #1936: Rectangle detection can be incorrect producing wrong output.\\n', '– Fixed #1945: Segmentation fault when saving with clean=True.\\n', '– Fixed #1965: pdfocr_save() Hard Crash.\\n', '– Fixed #1971: Segmentation fault when using get_drawings().\\n', '– Fixed #1946: block_no and block_type switched in get_text() docs.\\n', '– Fixed #2013: AttributeError: ‘Widget’ object has no attribute ‘_annot’ in delete widget.\\n', '• Misc changes to core code:\\n', '– Fixed various compiler warnings and a sequence-point bug.\\n', '– Added support for Memento builds.\\n', '– Fixed leaks detected by Memento in test suite.\\n', '– Fixed handling of exceptions in set_name() and set_rect().\\n', '– Allow build with latest MuPDF, for regular testing of PyMuPDF master.\\n', '– Cope with new MuPDF exceptions when setting rect for some Annot types.\\n', '– Reduced cosmetic differences between MuPDF’s config.h and PyMuPDF’s _config.h.\\n', '– Cope with various changes to MuPDF API.\\n', '• Other:\\n', '– Fixed various broken links and typos in docs.\\n', '– Mention install of swig-python on MacOS for #875.\\n', '– Added (untested) wheels for macos-arm64.\\n', 'Changes in Version 1.20.2\\n', '• This release uses MuPDF-1.20.3.\\n', '• Fixed #1787. Fix linking issues on Unix systems.\\n', '• Fixed #1824. SegFault when applying redactions overlapping a transparent image. (Fixed in MuPDF-1.20.3.)\\n', '• Improvements to documentation:\\n', '– Improved information about building from source in docs/installation.rst.\\n', '– Clarified memory allocation setting JM_MEMORY� in ��docs/tools.rst.\\n', '– Fixed link to PDF Reference manual in docs/app3.rst.\\n', '– Fixed building of html documentation on OpenBSD.\\n', '– Moved old docs/faq.rst into separate docs/recipes-* files.\\n', '• Removed some unused files and directories:\\n', '– installation/\\n', '– docs/wheelnames.txt\\n', '483\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Changes in Version 1.20.1\\n', '• Fixed #1724. Fix for building on FreeBSD.\\n', '• Fixed #1771. linkDest() had a broken call to re.match(), introduced in 1.20.0.\\n', '• Fixed #1751. get_drawings() and get_cdrawings() previously always returned with closePath=False.\\n', '• Fixed #1645. Default FreeText annotation text color is now black.\\n', '• Improvements to sphinx-generated documentation:\\n', '– Use readthedocs theme with enhancements.\\n', '– Renamed the .txt files to have .rst suffixes.\\n', 'Changes in Version 1.20.0\\n', 'This release uses MuPDF-1.20.0, released 2022-06-15.\\n', '• Cope\\nwith\\nnew\\nMuPDF\\nlink\\nuri\\nformat,\\nchanged\\nfrom\\n#<int>,<int>,<int>\\nto\\n#page=<int>&zoom=<float>,<float>,<float>.\\n', '• In tests/test_insertpdf.py, use new reference output joined-1.20.pdf. We also check that new output\\nvalues are approximately the same as the old ones.\\n', '• Fixed #1738. Leak of pdf_graft_map. Also fixed a SEGV issue that this seemed to expose, caused by incorrect\\nfreeing of underlying fz_document.\\n', '• Fixed #1733. Fixed ownership of Annotation.get_pixmap().\\n', 'Changes to build/release process:\\n', '• If pip builds from source because an appropriate wheel is not available, we no longer require MuPDF to be pre-\\ninstalled. Instead the required MuPDF source is embedded in the sdist and automatically built into PyMuPDF.\\n', '• Various changes to setup.py to download the required MuPDF release as required. See comments at start of\\nsetup.py for details.\\n', '• Added .github/workflows/build_wheels.yml to control building of wheels on Github.\\n', 'Changes in Version 1.19.6\\n', '• Fixed #1620. The TextPage created by Page.get_textpage() will now be freed correctly (removed memory\\nleak).\\n', '• Fixed #1601. Document open errors should now be more concise and easier to interpret. In the course of this,\\ntwo PyMuPDF-specific Python exceptions have been added:\\n', '– EmptyFileError – raised when trying to create a Document (fitz.open()) from an empty file or zero-\\nlength memory.\\n', '– FileDataError – raised when MuPDF encounters irrecoverable document structure issues.\\n', '• Added Page.load_widget() given a PDF field’s xref.\\n', '• Added Dictionary pdfcolor which provide the about 500 colors defined as PDF color values with the lower\\ncase color name as key.\\n', '• Added algebra functionality to the Quad class. These objects can now also be added and subtracted among\\nthemselves, and be multiplied by numbers and matrices.\\n', '• Added new constants defining the default text extraction flags for more comfortable handling. Their naming\\nconvention is like TEXTFLAGS_WORDS for page.get_text(""words""). See Text Extraction Flags Defaults.\\n', '484\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed Page.annots() and Page.widgets() to detect and prevent reloading the page (illegally) inside the\\niterator loops via Document.reload_page(). Doing this brings down the interpretor. Documented clean ways\\nto do annotation and widget mass updates within properly designed loops.\\n', '• Changed several internal utility functions to become standalone (“SWIG inline”) as opposed to be part of the\\n', 'Tools class. This, among other things, increases the performance of geometry object creation.\\n', '• Changed Document.update_stream() to always accept stream updates - whether or not the dictionary object\\nbehind the xref already is a stream. Thus the former new parameter is now ignored and will be removed in\\nv1.20.0.\\n', 'Changes in Version 1.19.5\\n', '• Fixed #1518. A limited “fix”: in some cases, rectangles and quadrupels were not correctly encoded to support\\nre-drawing by Shape.\\n', '• Fixed #1521. This had the same ultimate reason behind issue #1510.\\n', '• Fixed #1513. Some Optional Content functions did not support non-ASCII characters.\\n', '• Fixed #1510. Support more soft-mask image subtypes.\\n', '• Fixed #1507. Immunize against items in the outlines chain, that are ""null"" objects.\\n', '• Fixed re-opened #1417.\\n(“too many open files”).\\nThis was due to insufficient calls to MuPDF’s\\nfz_drop_document(). This also fixes #1550.\\n', '• Fixed several undocumented issues in relation to incorrectly setting the text span origin point_like.\\n', '• Fixed undocumented error computing the character bbox in method Page.get_texttrace() when text is\\nflipped (as opposed to just rotated).\\n', '• Added items to the dictionary returned by image_properties(): orientation and transform report the\\nnatural image orientation (EXIF data).\\n', '• Added method Document.xref_copy(). It will make a given target PDF object an exact copy of a source\\nobject.\\n', 'Changes in Version 1.19.4\\n', '• Fixed #1505. Immunize against circular outline items.\\n', '• Fixed #1484. Correct CropBox coordinates are now returned in all situations.\\n', '• Fixed #1479.\\n', '• Fixed #1474. TextPage objects are now properly deleted again.\\n', '• Added Page methods and attributes for PDF /ArtBox, /BleedBox, /TrimBox.\\n', '• Added global attribute TESSDATA_PREFIX for easy checking of OCR support.\\n', '• Changed Document.xref_set_key() such that dictionary keys will physically be removed if set to value\\n""null"".\\n', '• Changed Document.extract_font() to optionally return a dictionary (instead of a tuple).\\n', 'Changes in Version 1.19.3\\n', 'This patch version implements minor improvements for Pixmap and also some important fixes.\\n', '• Fixed #1351. Reverted code that introduced the memory growth in v1.18.15.\\n', '485\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Fixed #1417. Developped circumvention for growth of open file handles using Document.insert_pdf().\\n', '• Fixed #1418. Developped circumvention for memory growth using Document.insert_pdf().\\n', '• Fixed #1430. Developped circumvention for mass pixmap generations of document pages.\\n', '• Fixed #1433. Solves a bbox error for some Type 3 font in PyMuPDF text processing.\\n', '• Added Pixmap.color_topusage() to determine the share of the most frequently used color. Solves #1397.\\n', '• Added Pixmap.warp() which makes a new pixmap from a given arbitrary convex quad inside the pixmap.\\n', '• Added Annot.irt_xref and Annot.set_irt_xref() to inquire or set the /IRT (“In Responde To”) property\\nof an annotation. Implements #1450.\\n', '• Added Rect.torect() and IRect.torect() which compute a matrix that transforms to a given other rect-\\nangle.\\n', '• Changed Pixmap.color_count() to also return the count of each color.\\n', '• Changed Page.get_texttrace() to also return correct span and character bboxes if span[""dir""] != (1,\\n0).\\n', 'Changes in Version 1.19.2\\n', 'This patch version implements minor improvements for Page.get_drawings() and also some important fixes.\\n', '• Fixed #1388. Fixed intermittent memory corruption when insert or updating annotations.\\n', '• Fixed #1375. Inconsistencies between line numbers as returned by the “words” and the “dict” options of Page.\\nget_text() have been corrected.\\n', '• Fixed #1364. The check for being a ""rawdict"" span in recover_span_quad() now works correctly.\\n', '• Fixed #1342. Corrected the check for rectangle infiniteness in Page.show_pdf_page().\\n', '• Changed Page.get_drawings(), Page.get_cdrawings() to return an indicator on the area orientation cov-\\nered by a rectangle. This implements #1355. Also, the recognition rate for rectangles and quads has been sig-\\nnificantly improved.\\n', '• Changed all text search and extraction methods to set the new flags option TEXT_MEDIABOX_CLIP to ON by\\ndefault. That bit causes the automatic suppression of all characters that are completely outside a page’s mediabox\\n(in as far as that notion is supported for a document type). This eliminates the need for using clip=page.rect\\nor similar for omitting text outside the visible area.\\n', '• Added parameter ""dpi"" to Page.get_pixmap() and Annot.get_pixmap().\\nWhen given, parameter\\n""matrix"" is ignored, and a Pixmap with the desired dots per inch is created.\\n', '• Added attributes Pixmap.is_monochrome and Pixmap.is_unicolor allowing fast checks of pixmap prop-\\nerties. Addresses #1397.\\n', '• Added method Pixmap.color_count() to determine the unique colors in the pixmap.\\n', '• Added boolean parameter ""compress"" to PDF document method Document.update_stream(). Addresses /\\nenables solution for #1408.\\n', 'Changes in Version 1.19.1\\n', 'This is the first patch version to support MuPDF v1.19.0. Apart from one bug fix, it includes important improvements\\nfor OCR support and the option to sort extracted text to the standard reading order “from top-left to bottom-right”.\\n', '• Fixed #1328. “words” text extraction again returns correct (x0, y0) coordinates.\\n', '486\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed Page.get_textpage_ocr(): it now supports parameter dpi to control OCR quality. It is also pos-\\nsible to choose whether the full page should be OCRed or only the images displayed by the page.\\n', '• Changed Page.get_drawings() and Page.get_cdrawings() to automatically convert colors to RGB color\\ntuples. Implements #1332. Similar change was applied to Page.get_texttrace().\\n', '• Changed Page.get_text() to support a parameter sort. If set to True the output is conveniently sorted.\\n', 'Changes in Version 1.19.0\\n', 'This is the first version supporting MuPDF 1.19.*, published 2021-10-05. It introduces many new features compared\\nto the previous version 1.18.*.\\n', 'PyMuPDF has now picked up integrated Tesseract OCR support, which was already present in MuPDF v1.18.0.\\n', '• Supported images can be OCRed via their Pixmap which results in a 1-page PDF with a text layer.\\n', '• All supported document pages (i.e. not only PDFs), can be OCRed using specialized text extraction methods.\\nThe result is a mixture of standard and OCR text (depending on which part of the page was deemed to require\\nOCRing) that can be searched and extracted without restrictions.\\n', '• All this requires an independent installation of Tesseract. MuPDF actually (only) needs the location of Tesseract’s\\n""tessdata"" folder, where its language support data are stored. This location must be available as environment\\nvariable TESSDATA_PREFIX.\\n', 'A new MuPDF feature is journalling PDF updates, which is also supported by this PyMuPDF version. Changes may\\nbe logged, rolled back or replayed, allowing to implement a whole new level of control over PDF document integrity –\\nsimilar to functions present in modern database systems.\\n', 'A third feature (unrelated to the new MuPDF version) includes the ability to detect when page objects cover or hide\\neach other. It is now e.g. possible to see that text is covered by a drawing or an image.\\n', '• Changed terminology and meaning of important geometry concepts: Rectangles are now characterized as finite,\\nvalid or empty, while the definitions of these terms have also changed. Rectangles specifically are now thought\\nof being “open”: not all corners and sides are considered part of the retangle. Please do read the Rect section for\\ndetails.\\n', '• Added new parameter ""no_new_id"" to Document.save() / Document.tobytes() methods. Use it to sup-\\npress updating the second item of the document /ID which in PDF indicates that the original file has been\\nupdated. If the PDF has no /ID at all yet, then no new one will be created either.\\n', '• Added a journalling facility for PDF updates. This allows logging changes, undoing or redoing them, or saving\\nthe journal for later use. Refer to Document.journal_enable() and friends.\\n', '• Added new Pixmap methods Pixmap.pdfocr_save() and Pixmap.pdfocr_tobytes(), which generate a\\n1-page PDF containing the pixmap as PNG image with OCR text layer.\\n', '• Added Page.get_textpage_ocr() which executes optical character recognition for the page, then extracts the\\nresults and stores them together with “normal” page content in a TextPage. Use or reuse this object in subsequent\\ntext extractions and text searches to avoid multiple efforts. The existing text search and text extraction methods\\nhave been extended to support a separately created textpage – see next item.\\n', '• Added a new parameter textpage to text extraction and text search methods. This allows reuse of a previously\\ncreated TextPage and thus achieves significant runtime benefits – which is especially important for the new OCR\\nfeatures. But “normal” text extractions can definitely also benefit.\\n', '• Added Page.get_texttrace(), a technical method delivering low-level text character properties. It was\\npresent before as a private method, but the author felt it now is mature enough to be officially available. It\\nspecifically includes a “sequence number” which indicates the page appearance build operation that painted the\\ntext.\\n', '487\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added Page.get_bboxlog() which delivers the list of rectangles of page objects like text, images or drawings.\\nIts significance lies in its sequence: rectangles intersecting areas with a lower index are covering or hiding them.\\n', '• Changed methods Page.get_drawings() and Page.get_cdrawings() to include a “sequence number” in-\\ndicating the page appearance build operation that created the drawing.\\n', '• Fixed #1311. Field values in comboboxes should now be handled correctly.\\n', '• Fixed #1290. Error was caused by incorrect rectangle emptiness check, which is fixed due to new geometry logic\\nof this version.\\n', '• Fixed #1286. Text alignment for redact annotations is working again.\\n', '• Fixed #1287. Infinite loop issue for non-Windows systems when applying some redactions has been resolved.\\n', '• Fixed #1284. Text layout destruction after applying redactions in some cases has been resolved.\\n', 'Changes in Version 1.18.18 / 1.18.19\\n', '• Fixed issue #1266. Failure to set Pixmap.samples in important cases, was hotfixed in a new version 1.18.19.\\n', '• Fixed issue #1257. Removing the read-only flag from PDF fields is now possible.\\n', '• Fixed issue #1252. Now correctly specifying the zoom value for PDF link annotations.\\n', '• Fixed issue #1244. Now correctly computing the transform matrix in Page.get_image__bbox().\\n', '• Fixed issue #1241. Prevent returning artifact characters in Page.get_textbox(), which happened in certain\\nconstellations.\\n', '• Fixed issue #1234.\\nAvoid creating infinite rectangles in corner cases – Page.get_drawings(), Page.\\nget_cdrawings().\\n', '• Added test data and test scripts to the source PyPI source distribution.\\n', 'Changes in Version 1.18.17\\n', 'Focus of this version are major performance improvements of selected functions.\\n', '• Fixed issue #1199. Using a non-existing page number in Document.get_page_images() and friends will no\\nlonger lead to segfaults.\\n', '• Changed Page.get_drawings() to now differentiate between “stroke”, “fill” and combined paths. Paths con-\\ntaining more than one rectangle (i.e. “re” items) are now supported. Extracting “clipped” paths is now available\\nas an option.\\n', '• Added Page.get_cdrawings(), performance-optimized version of Page.get_drawings().\\n', '• Added Pixmap.samples_mv, memoryview of a pixmap’s pixel area. Does not copy and thus always accesses\\nthe current state of that area.\\n', '• Added Pixmap.samples_ptr, Python “pointer” to a pixmap’s pixel area. Allows much faster creation (factor\\n800+) of Qt images.\\n', 'Changes in Version 1.18.16\\n', '• Fixed issue #1184. Existing PDF widget fonts in a PDF are now accepted (i.e. not forcedly changed to a Base-14\\nfont).\\n', '• Fixed issue #1154. Text search hits should now be correct when clip is specified.\\n', '488\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Fixed issue #1152.\\n', '• Fixed issue #1146.\\n', '• Added Link.flags and Link.set_flags() to the Link class. Implements enhancement requests #1187.\\n', '• Added option to simulate TextWriter.fill_textbox() output for predicting the number of lines, that a given\\ntext would occupy in the textbox.\\n', '• Added text output support as subcommand gettext to the fitz CLI module. Most importantly, original phys-\\nical text layout reproduction is now supported.\\n', 'Changes in Version 1.18.15\\n', '• Fixed issue #1088.\\nRemoving an annotation’s fill color should now work again both ways, using the\\nfill_color=[] argument in Annot.update() as well as fill=[] in Annot.set_colors().\\n', '• Fixed issue #1081. Document.subset_fonts(): fixed an error which created wrong character widths for some\\nfonts.\\n', '• Fixed issue #1078. Page.get_text() and other methods related to text extraction: changed the default value\\nof the TextPage flags parameter. All whitespace and ligatures are now preserved.\\n', '• Fixed issue #1085. The old snake_cased alias of fitz.detTextlength is now defined correctly.\\n', '• Changed Document.subset_fonts() will now correctly prefix font subsets with an appropriate six letter\\nuppercase tag, complying with the PDF specification.\\n', '• Added new method Widget.button_states() which returns the possible values that a button-type field can\\nhave when being set to “on” or “off”.\\n', '• Added support of text with Small Capital letters to the Font and TextWriter classes. This is reflected by an\\nadditional bool parameter small_caps in various of their methods.\\n', 'Changes in Version 1.18.14\\n', '• Finished implementing new, “snake_cased” names for methods and properties, that were “camelCased” and\\nawkward in many aspects. At the end of this documentation, there is section Deprecated Names with more\\nbackground and a mapping of old to new names.\\n', '• Fixed issue #1053. Page.insert_image(): when given, include image mask in the hash computation.\\n', '• Fixed issue #1043. Added Pixmap.getPNGdata to the aliases of Pixmap.tobytes().\\n', '• Fixed an internal error when computing the enveloping rectangle of drawn paths as returned by Page.\\nget_drawings().\\n', '• Fixed an internal error occasionally causing loops when outputting text via TextWriter.fill_textbox().\\n', '• Added Font.char_lengths(), which returns a tuple of character widths of a string.\\n', '• Added more ways to specify pages in Document.delete_pages(). Now a sequence (list, tuple or range) can\\nbe specified, and the Python del statement can be used. In the latter case, Python slices are also accepted.\\n', '• Changed Document.del_toc_item(), which disables a single item of the TOC: previously, the title text was\\nremoved. Instead, now the complete item will be shown grayed-out by supporting viewers.\\n', 'Changes in Version 1.18.13\\n', '• Fixed issue #1014.\\n', '489\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Fixed an internal memory leak when computing image bboxes – Page.get_image_bbox().\\n', '• Added support for low-level access and modification of the PDF trailer.\\nApplies to Document.\\nxref_get_keys(), Document.xref_get_key(), and Document.xref_set_key().\\n', '• Added documentation for maintaining private entries in PDF metadata.\\n', '• Added documentation for handling transparent image insertions, Page.insert_image().\\n', '• Added Page.get_image_rects(), an improved version of Page.get_image_bbox().\\n', '• Changed Document.delete_pages() to support various ways of specifying pages to delete. Implements\\n', '#1042.\\n', '• Changed Page.insert_image() to also accept the xref of an existing image in the file. This allows “copying”\\nimages between pages, and extremely fast mutiple insertions.\\n', '• Changed Page.insert_image() to also accept the integer parameter alpha. To be used for performance\\nimprovements.\\n', '• Changed Pixmap.set_alpha() to support new parameters for pre-multiplying colors with their alpha values\\nand setting a specific color to fully transparent (e.g. white).\\n', '• Changed Document.embfile_add() to automatically set creation and modification date-time. Correspond-\\ningly, Document.embfile_upd() automatically maintains modification date-time (/ModDate PDF key), and\\nDocument.embfile_info() correspondingly reports these data. In addition, the embedded file’s associated\\n“collection item” is included via its xref. This supports the development of PDF portfolio applications.\\n', 'Changes in Version 1.18.11 / 1.18.12\\n', '• Fixed issue #972. Improved layout of source distribution material.\\n', '• Fixed issue #962. Stabilized Linux distribution detection for generating PyMuPDF from sources.\\n', '• Added: Page.get_xobjects() delivers the result of Document.get_page_xobjects().\\n', '• Added: Page.get_image_info() delivers meta information for all images shown on the page.\\n', '• Added: Tools.mupdf_display_warnings() allows setting on / off the display of MuPDF-generated warn-\\nings. The default is off.\\n', '• Added: Document.ez_save() convenience alias of Document.save() with some different defaults.\\n', '• Changed: Image extractions of document pages now also contain the image’s transformation matrix. This\\nconcerns Page.get_image_bbox() and the DICT, JSON, RAWDICT, and RAWJSON variants of Page.\\nget_text().\\n', 'Changes in Version 1.18.10\\n', '• Fixed issue #941. Added old aliases for DisplayList.get_pixmap() and DisplayList.get_textpage().\\n', '• Fixed issue #929. Stabilized removal of JavaScript objects with Document.scrub().\\n', '• Fixed issue #927. Removed a loop in the reworked TextWriter.fill_textbox().\\n', '• Changed Document.xref_get_keys() and Document.xref_get_key() to also allow accessing the PDF\\ntrailer dictionary. This can be done by using -1 as the xref number argument.\\n', '• Added a number of functions for reconstructing the quads for text lines, spans and characters extracted by Page.\\nget_text() options “dict” and “rawdict”. See recover_quad() and friends.\\n', '• Added Tools.unset_quad_corrections() to suppress character quad corrections (occasionally required for\\nerroneous fonts).\\n', '490\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Changes in Version 1.18.9\\n', '• Fixed issue #888. Removed ambiguous statements concerning PyMuPDF’s license, which is now clearly stated\\nto be GNU AGPL V3.\\n', '• Fixed issue #895.\\n', '• Fixed issue #896. Since v1.17.6 PyMuPDF suppresses the font subset tags and only reports the base fontname\\nin text extraction outputs “dict” / “json” / “rawdict” / “rawjson”. Now a new global parameter can request the\\nold behaviour, Tools.set_subset_fontnames().\\n', '• Fixed issue #885. Pixmap creation now also works with filenames given as pathlib.Paths.\\n', '• Changed Document.subset_fonts(): Text is not rewritten any more and should therefore retain all its\\norigial properties – like being hidden or being controlled by Optional Content mechanisms.\\n', '• Changed TextWriter output to also accept text in right to left mode (Arabian, Hebrew): TextWriter.\\nfill_textbox(),\\nTextWriter.append().\\nThese methods now accept a new boolean parameter\\nright_to_left, which is False by default. Implements #897.\\n', '• Changed TextWriter.fill_textbox() to return all lines of text, that did not fit in the given rectangle. Also\\nchanged the default of the warn parameter to no longer print a warning message in overflow situations.\\n', '• Added a utility function recover_quad(), which computes the quadrilateral of a span. This function can be\\nused for correctly marking text extracted with the “dict” or “rawdict” options of Page.get_text().\\n', 'Changes in Version 1.18.8\\n', 'This is a bug fix version only. We are publishing early because of the potentially widely used functions.\\n', '• Fixed issue #881. Fixed a memory leak in Page.insert_image() when inserting images from files or memory.\\n', '• Fixed issue #878. pathlib.Path objects should now correctly handle file path hierarchies.\\n', 'Changes in Version 1.18.7\\n', '• Added an experimental Document.subset_fonts() which reduces the size of eligible fonts based on their use\\nby text in the PDF. Implements #855.\\n', '• Implemented request #870: Document.convert_to_pdf() now also supports PDF documents.\\n', '• Renamed Document.write to Document.tobytes() for greater clarity. But the deprecated name remains\\navailable for some time.\\n', '• Implemented request #843: Document.tobytes() now supports linearized PDF output. Document.save()\\n', 'now also supports writing to Python file objects. In addition, the open function now also supports Python file\\nobjects.\\n', '• Fixed issue #844.\\n', '• Fixed issue #838.\\n', '• Fixed issue #823. More logic for better support of OCRed text output (Tesseract, ABBYY).\\n', '• Fixed issue #818.\\n', '• Fixed issue #814.\\n', '• Added Document.get_page_labels() which returns a list of page label definitions of a PDF.\\n', '491\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added Document.has_annots() and Document.has_links() to check whether these object types are\\npresent anywhere in a PDF.\\n', '• Added expert low-level functions to simplify inquiry and modification of PDF object sources: Document.\\nxref_get_keys() lists the keys of object xref, Document.xref_get_key() returns type and content of\\na key, and Document.xref_set_key() modifies the key’s value.\\n', '• Added parameter thumbnails to Document.scrub() to also allow removing page thumbnail images.\\n', '• Improved documentation for how to add valid text marker annotations for non-horizontal text.\\n', 'We continued the process of renaming methods and properties from “mixedCase” to “snake_case”. Documentation\\nusually mentions the new names only, but old, deprecated names remain available for some time.\\n', 'Changes in Version 1.18.6\\n', '• Fixed issue #812.\\n', '• Fixed issue #793. Invalid document metadata previously prevented opening some documents at all. This error\\nhas been removed.\\n', '• Fixed issue #792. Text search and text extraction will make no rectangle containment checks at all if the default\\nclip=None is used.\\n', '• Fixed issue #785.\\n', '• Fixed issue #780. Corrected a parameter check error.\\n', '• Fixed issue #779. Fixed typo\\n', '• Added an option to set the desired line height for text boxes. Implements #804.\\n', '• Changed text position retrieval to better cope with Tesseract’s glyphless font. Implements #803.\\n', '• Added an option to choose the prefix of new annotations, fields and links for providing unique annotation ids.\\nImplements request #807.\\n', '• Added getting and setting color and text properties for Table of Contents items for PDFs. Implements #779.\\n', '• Added\\nPDF\\npage\\nlabel\\nhandling:\\nPage.get_label()\\nreturns\\nthe\\npage\\nlabel,\\nDocument.\\nget_page_numbers() return all page numbers having a specified label, and Document.set_page_labels()\\nadds or updates a PDF’s page label definition.\\n', 'Note:\\nThis version introduces Python type hinting. The goal is to provide each parameter and the return value of\\nall functions and methods with type information. This still is work in progress although the majority of functions has\\nalready been handled.\\n', 'Changes in Version 1.18.5\\n', 'Apart from several fixes, this version also focusses on several minor, but important feature improvements. Among the\\nlatter is a more precise computation of proper line heights and insertion points for writing / inserting text. As opposed\\nto using font-agnostic constants, these values are now taken from the font’s properties.\\n', 'Also note that this is the first version which does no longer provide pregenerated wheels for Python versions older than\\n3.6. PIP also discontinues support for these by end of this year 2020.\\n', '• Fixed issue #771. By using “small glyph heights” option, the full page text can be extracted.\\n', '• Fixed issue #768.\\n', '492\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Fixed issue #750.\\n', '• Fixed issue #739. The “dict”, “rawdict” and corresponding JSON output variants now have two new span keys:\\n""ascender"" and ""descender"". These floats represent special font properties which can be used to compute\\nbboxes of spans or characters of exactly fontsize height (as opposed to the default line height). An example\\nalgorithm is shown in section “Span Dictionary” here. Also improved the detection and correction of ill-specified\\nascender / descender values encountered in some fonts.\\n', '• Added a new, experimental Tools.set_small_glyph_heights() – also in response to issue #739. This\\nmethod sets or unsets a global parameter to always compute bboxes with fontsize height. If “on”, text searching\\nand all text extractions will returned rectangles, bboxes and quads with a smaller height.\\n', '• Fixed issue #728.\\n', '• Changed fill color logic of ‘Polyline’ annotations: this parameter now only pertains to line end symbols – the\\nannotation itself can no longer have a fill color. Also addresses issue #727.\\n', '• Changed Page.getImageBbox() to also compute the bbox if the image is contained in an XObject.\\n', '• Changed Shape.insertTextbox(), resp. Page.insertTextbox(), resp. TextWriter.fillTextbox() to\\nrespect font’s properties “ascender” / “descender” when computing line height and insertion point. This should\\nno longer lead to line overlaps for multi-line output. These methods used to ignore font specifics and used constant\\nvalues instead.\\n', 'Changes in Version 1.18.4\\n', 'This version adds several features to support PDF Optional Content. Among other things, this includes OCMDs (Op-\\ntional Content Membership Dictionaries) with the full scope of “visibility expressions” (PDF key /VE), text insertions\\n(including the TextWriter class) and drawings.\\n', '• Fixed issue #727. Freetext annotations now support an uncolored rectangle when fill_color=None.\\n', '• Fixed issue #726. UTF-8 encoding errors are now handled for HTML / XML Page.getText() output.\\n', '• Fixed issue #724. Empty values are no longer stored in the PDF /Info metadata dictionary.\\n', '• Added new methods Document.set_oc() and Document.get_oc() to set or get optional content references\\nfor existing image and form XObjects. These methods are similar to the same-named methods of Annot.\\n', '• Added Document.set_ocmd(), Document.get_ocmd() for handling OCMDs.\\n', '• Added Optional Content support for text insertion and drawing.\\n', '• Added new method Page.deleteWidget(), which deletes a form field from a page. This is analogous to\\ndeleting annotations.\\n', '• Added support for Popup annotations. This includes defining the Popup rectangle and setting the Popup to\\nopen or closed. Methods / attributes Annot.set_popup(), Annot.set_open(), Annot.has_popup, Annot.\\nis_open, Annot.popup_rect, Annot.popup_xref.\\n', 'Other changes:\\n', '• The naming of methods and attributes in PyMuPDF is far from being satisfactory: we have CamelCases,\\nmixedCases and lower_case_with_underscores all over the place. With the Annot as the first candidate, we\\nhave started an activity to clean this up step by step, converting to lower case with underscores for methods and\\nattributes while keeping UPPERCASE for the constants.\\n', '– Old names will remain available to prevent code breaks, but they will no longer be mentioned in the\\ndocumentation.\\n', '– New methods and attributes of all classes will be named according to the new standard.\\n', '493\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Changes in Version 1.18.3\\n', 'As a major new feature, this version introduces support for PDF’s Optional Content concept.\\n', '• Fixed issue #714.\\n', '• Fixed issue #711.\\n', '• Fixed issue #707: if a PDF user password, but no owner password is supplied nor present, then the user password\\nis also used as the owner password.\\n', '• Fixed expand and deflate parameters of methods Document.save() and Document.write(). Individual\\nimage and font compression should now finally work. Addresses issue #713.\\n', '• Added a support of PDF optional content. This includes several new Document methods for inquiring and\\nsetting optional content status and adding optional content configurations and groups. In addition, images, form\\nXObjects and annotations now can be bound to optional content specifications. Resolved issue #709.\\n', 'Changes in Version 1.18.2\\n', 'This version contains some interesting improvements for text searching: any number of search hits is now returned and\\nthe hit_max parameter was removed. The new clip parameter in addition allows to restrict the search area. Searching\\nnow detects hyphenations at line breaks and accordingly finds hyphenated words.\\n', '• Fixed issue #575: if using quads=False in text searching, then overlapping rectangles on the same line are\\njoined. Previously, parts of the search string, which belonged to different “marked content” items, each generated\\ntheir own rectangle – just as if occurring on separate lines.\\n', '• Added Document.isRepaired, which is true if the PDF was repaired on open.\\n', '• Added Document.setXmlMetadata() which either updates or creates PDF XML metadata. Implements issue\\n', '#691.\\n', '• Added Document.getXmlMetadata() returns PDF XML metadata.\\n', '• Changed creation of PDF documents: they will now always carry a PDF identification (/ID field) in the docu-\\nment trailer. Implements issue #691.\\n', '• Changed Page.searchFor(): a new parameter clip is accepted to restrict the search to this rectangle. Cor-\\nrespondingly, the attribute TextPage.rect is now respected by TextPage.search().\\n', '• Changed parameter hit_max in Page.searchFor() and TextPage.search() is now obsolete: methods will\\nreturn all hits.\\n', '• Changed character selection criteria in Page.getText(): a character is now considered to be part of a clip\\nif its bbox is fully contained. Before this, a non-empty intersection was sufficient.\\n', '• Changed Document.scrub() to support a new option redact_images. This addresses issue #697.\\n', 'Changes in Version 1.18.1\\n', '• Fixed issue #692. PyMuPDF now detects and recovers from more cyclic resource dependencies in PDF pages\\nand for the first time reports them in the MuPDF warnings store.\\n', '• Fixed issue #686.\\n', '• Added opacity options for the Shape class: Stroke and fill colors can now be set to some transparency\\nvalue. This means that all Page draw methods, methods Page.insertText(), Page.insertTextbox(),\\nShape.finish(), Shape.insertText(), and Shape.insertTextbox() support two new parameters:\\nstroke_opacity and fill_opacity.\\n', '494\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added new parameter mask to Page.insertImage() for optionally providing an external image mask. Re-\\nsolves issue #685.\\n', '• Added Annot.soundGet() for extracting the sound of an audio annotation.\\n', 'Changes in Version 1.18.0\\n', 'This is the first PyMuPDF version supporting MuPDF v1.18. The focus here is on extending PyMuPDF’s own func-\\ntionality – apart from bug fixing. Subsequent PyMuPDF patches may address features new in MuPDF.\\n', '• Fixed issue #519. This upstream bug occurred occasionally for some pages only and seems to be fixed now:\\npage layout should no longer be ruined in these cases.\\n', '• Fixed issue #675.\\n', '– Unsuccessful storage allocations should now always lead to exceptions (circumvention of an upstream bug\\nintermittently crashing the interpreter).\\n', '– Pixmap size is now based on size_t instead of int in C and should be correct even for extremely large\\npixmaps.\\n', '• Fixed issue #668. Specification of dashes for PDF drawing insertion should now correctly reflect the PDF spec.\\n', '• Fixed issue #669. A major source of memory leakage in Page.insert_pdf() has been removed.\\n', '• Added keyword “images” to Page.apply_redactions() for fine-controlling the handling of images.\\n', '• Added Annot.getText() and Annot.getTextbox(), which offer the same functionality as the Page versions.\\n', '• Added key “number” to the block dictionaries of Page.getText() / Annot.getText() for options “dict” and\\n“rawdict”.\\n', '• Added glyph_name_to_unicode() and unicode_to_glyph_name(). Both functions do not really connect\\nto a specific font and are now independently available, too. The data are now based on the Adobe Glyph List.\\n', '• Added convenience functions adobe_glyph_names() and adobe_glyph_unicodes() which return the re-\\nspective available data.\\n', '• Added Page.getDrawings() which returns details of drawing operations on a document page. Works for all\\ndocument types.\\n', '• Improved performance of Document.insert_pdf(). Multiple object copies are now also suppressed across\\nmultiple separate insertions from the same source. This saves time, memory and target file size. Previously this\\nmechanism was only active within each single method execution. The feature can also be suppressed with the\\nnew method bool parameter final=1, which is the default.\\n', '• For PNG images created from pixmaps, the resolution (dpi) is now automatically set from the respective Pixmap.\\nxres and Pixmap.yres values.\\n', 'Changes in Version 1.17.7\\n', '• Fixed issue #651. An upstream bug causing interpreter crashes in corner case redaction processings was fixed\\nby backporting MuPDF changes from their development repo.\\n', '• Fixed issue #645. Pixmap top-left coordinates can be set (again) by their own method, Pixmap.set_origin().\\n', '• Fixed issue #622. Page.insertImage() again accepts a rect_like parameter.\\n', '• Added severeal new methods to improve and speed-up table of contents (TOC) handling. Among other things,\\nTOC items can now changed or deleted individually – without always replacing the complete TOC. Furthermore,\\naccess to some PDF page attributes is now possible without first loading the page. This has a very significant\\nimpact on the performance of TOC manipulation.\\n', '495\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added an option to Document.insert_pdf() which allows displaying progress messages. Adresses #640.\\n', '• Added Page.getTextbox() which extracts text contained in a rectangle. In many cases, this should obsolete\\nwriting your own script for this type of thing.\\n', '• Added new clip parameter to Page.getText() to simplify and speed up text extraction of page sub areas.\\n', '• Added TextWriter.appendv() to add text in vertical write mode. Addresses issue #653\\n', 'Changes in Version 1.17.6\\n', '• Fixed issue #605\\n', '• Fixed issue #600 – text should now be correctly positioned also for pages with a CropBox smaller than MediaBox.\\n', '• Added text span dictionary key origin which contains the lower left coordinate of the first character in that\\nspan.\\n', '• Added attribute Font.buffer, a bytes copy of the font file.\\n', '• Added parameter sanitize to Page.cleanContents(). Allows switching of sanitization, so only syntax clean-\\ning will be done.\\n', 'Changes in Version 1.17.5\\n', '• Fixed issue #561 – second go: certain TextWriter usages with many alternating fonts did not work correctly.\\n', '• Fixed issue #566.\\n', '• Fixed issue #568.\\n', '• Fixed – opacity is now correctly taken from the TextWriter object, if not given in TextWriter.writeText().\\n', '• Added a new global attribute fitz_fontdescriptors. Contains information about usable fonts from reposi-\\ntory pymupdf-fonts.\\n', '• Added Font.valid_codepoints() which returns an array of unicode codepoints for which the font has a\\nglyph.\\n', '• Added option text_as_path to Page.getSVGimage(). this implements #580. Generates much smaller SVG\\nfiles with parseable text if set to False.\\n', 'Changes in Version 1.17.4\\n', '• Fixed issue #561. Handling of more than 10 Font objects on one page should now work correctly.\\n', '• Fixed issue #562. Annotation pixmaps are no longer derived from the page pixmap, thus avoiding unintended\\ninclusion of page content.\\n', '• Fixed issue #559. This MuPDF bug is being temporarily fixed with a pre-version of MuPDF’s next release.\\n', '• Added utility function repair_mono_font() for correcting displayed character spacing for some mono-spaced\\nfonts.\\n', '• Added utility method Document.need_appearances() for fine-controlling Form PDF behavior. Addresses\\nissue #563.\\n', '• Added utility function sRGB_to_pdf() to recover the PDF color triple for a given color integer in sRGB format.\\n', '• Added utility function sRGB_to_rgb() to recover the (R, G, B) color triple for a given color integer in sRGB\\nformat.\\n', '496\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added utility function make_table() which delivers table cells for a given rectangle and desired numbers of\\ncolumns and rows.\\n', '• Added support for optional fonts in repository pymupdf-fonts.\\n', 'Changes in Version 1.17.3\\n', '• Fixed an undocumented issue, which prevented fully cleaning a PDF page when using Page.cleanContents().\\n', '• Fixed issue #540. Text extraction for EPUB should again work correctly.\\n', '• Fixed issue #548. Documentation now includes LINK_NAMED.\\n', '• Added new parameter to control start of text in TextWriter.fillTextbox(). Implements #549.\\n', '• Changed documentation of Page.add_redact_annot() to explain the usage of non-builtin fonts.\\n', 'Changes in Version 1.17.2\\n', '• Fixed issue #533.\\n', '• Added options to modify ‘Redact’ annotation appearance. Implements #535.\\n', 'Changes in Version 1.17.1\\n', '• Fixed issue #520.\\n', '• Fixed issue #525. Vertices for ‘Ink’ annots should now be correct.\\n', '• Fixed issue #524. It is now possible to query and set rotation for applicable annotation types.\\n', 'Also significantly improved inline documentation for better support of interactive help.\\n', 'Changes in Version 1.17.0\\n', 'This version is based on MuPDF v1.17. Following are highlights of new and changed features:\\n', '• Added extended language support for annotations and widgets: a mixture of Latin, Greece, Russian, Chinese,\\nJapanese and Korean characters can now be used in ‘FreeText’ annotations and text widgets. No special arrange-\\nment is required to use it.\\n', '• Faster page access is implemented for documents supporting a “chapter” structure. This applies to EPUB docu-\\nments currently. This comes with several new Document methods and changes for Document.loadPage() and\\nthe “indexed” page access doc[n]: In addition to specifying a page number as before, a tuple (chaper, pno) can\\nbe specified to identify the desired page.\\n', '• Changed: Improved support of redaction annotations: images overlapped by redactions are permanantly mod-\\nified by erasing the overlap areas. Also links are removed if overlapped by redactions. This is now fully in sync\\nwith PDF specifications.\\n', 'Other changes:\\n', '• Changed TextWriter.writeText() to support the “morph” parameter.\\n', '• Added methods Rect.morph(), IRect.morph(), and Quad.morph(), which return a new Quad.\\n', '• Changed Page.add_freetext_annot() to support text alignment via a new “align” parameter.\\n', '• Fixed issue #508. Improved image rectangle calculation to hopefully deliver correct values in most if not all\\ncases.\\n', '497\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Fixed issue #502.\\n', '• Fixed issue #500. Document.convertToPDF() should no longer cause memory leaks.\\n', '• Fixed issue #496. Annotations and widgets / fields are now added or modified using the coordinates of the\\nunrotated page. This behavior is now in sync with other methods modifying PDF pages.\\n', '• Added Page.rotationMatrix and Page.derotationMatrix to support coordinate transformations between\\nthe rotated and the original versions of a PDF page.\\n', 'Potential code breaking changes:\\n', '• The\\nprivate\\nmethod\\nPage._getTransformation()\\nhas\\nbeen\\nremoved.\\nUse\\nthe\\npublic\\nPage.\\ntransformationMattrix instead.\\n', 'Changes in Version 1.16.18\\n', 'This version introduces several new features around PDF text output. The motivation is to simplify this task, while at\\nthe same time offering extending features.\\n', 'One major achievement is using MuPDF’s capabilities to dynamically choosing fallback fonts whenever a character can-\\nnot be found in the current one. This seemlessly works for Base-14 fonts in combination with CJK fonts (China, Japan,\\nKorea). So a text may contain any combination of characters from the Latin, Greek, Russian, Chinese, Japanese and\\nKorean languages.\\n', '• Fixed issue #493. Pixmap(doc, xref) should now again correctly resemble the loaded image object.\\n', '• Fixed issue #488. Widget names are now modifiable.\\n', '• Added new class Font which represents a font.\\n', '• Added new class TextWriter which serves as a container for text to be written on a page.\\n', '• Added Page.writeText() to write one or more TextWriter objects to the page.\\n', 'Changes in Version 1.16.17\\n', '• Fixed issue #479. PyMuPDF should now more correctly report image resolutions. This applies to both, images\\n(either from images files or extracted from PDF documents) and pixmaps created from images.\\n', '• Added Pixmap.set_dpi() which sets the image resolution in x and y directions.\\n', 'Changes in Version 1.16.16\\n', '• Fixed issue #477.\\n', '• Fixed issue #476.\\n', '• Changed annotation line end symbol coloring and fixed an error coloring the interior of ‘Polyline’ /’Polygon’\\nannotations.\\n', 'Changes in Version 1.16.14\\n', '• Changed text marker annotations to accept parameters beyond just quadrilaterals such that now text lines be-\\ntween two given points can be marked.\\n', '• Added Document.scrub() which removes potentially sensitive data from a PDF. Implements #453.\\n', '• Added Annot.blendMode() which returns the blend mode of annotations.\\n', '498\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added Annot.setBlendMode() to set the annotation’s blend mode. This resolves issue #416.\\n', '• Changed Annot.update() to accept additional parameters for setting blend mode and opacity.\\n', '• Added advanced graphics features to control the anti-aliasing values, Tools.set_aa_level(). Resolves\\n', '#467\\n', '• Fixed issue #474.\\n', '• Fixed issue #466.\\n', 'Changes in Version 1.16.13\\n', '• Added Document.getPageXObjectList() which returns a list of Form XObjects of the page.\\n', '• Added Page.setMediaBox() for changing the physical PDF page size.\\n', '• Added\\nPage\\nmethods\\nwhich\\nhave\\nbeen\\ninternal\\nbefore:\\nPage.cleanContents()\\n(=\\nPage.\\n_cleanContents()), Page.getContents() (= Page._getContents()), Page.getTransformation()\\n(= Page._getTransformation()).\\n', 'Changes in Version 1.16.12\\n', '• Fixed issue #447\\n', '• Fixed issue #461.\\n', '• Fixed issue #397.\\n', '• Fixed issue #463.\\n', '• Added JavaScript support to PDF form fields, thereby fixing #454.\\n', '• Added a new annotation method Annot.delete_responses(), which removes ‘Popup’ and response annota-\\ntions referring to the current one. Mainly serves data protection purposes.\\n', '• Added a new form field method Widget.reset(), which resets the field value to its default.\\n', '• Changed and extended handling of redactions: images and XObjects are removed if contained in a redaction\\nrectangle. Any partial only overlaps will just be covered by the redaction background color. Now an overlay text\\ncan be specified to be inserted in the rectangle area to take the place the deleted original text. This resolves\\n#434.\\n', 'Changes in Version 1.16.11\\n', '• Added\\nSupport\\nfor\\nredaction\\nannotations\\nvia\\nmethod\\nPage.add_redact_annot()\\nand\\nPage.\\napply_redactions().\\n', '• Fixed issue #426 (“PolygonAnnotation in 1.16.10 version”).\\n', '• Fixed documentation only issues #443 and #444.\\n', 'Changes in Version 1.16.10\\n', '• Fixed issue #421 (“annot.set_rect(rect) has no effect on text Annotation”)\\n', '• Fixed issue #417 (“Strange behavior for page.deleteAnnot on 1.16.9 compare to 1.13.20”)\\n', '• Fixed issue #415 (“Annot.setOpacity throws mupdf warnings”)\\n', '• Changed all “add annotation / widget” methods to store a unique name in the /NM PDF key.\\n', '499\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed Annot.setInfo() to also accept direct parameters in addition to a dictionary.\\n', '• Changed Annot.info to now also show the annotation’s unique id (/NM PDF key) if present.\\n', '• Added Page.annot_names() which returns a list of all annotation names (/NM keys).\\n', '• Added Page.load_annot() which loads an annotation given its unique id (/NM key).\\n', '• Added Document.reload_page() which provides a new copy of a page after finishing any pending updates to\\nit.\\n', 'Changes in Version 1.16.9\\n', '• Fixed #412 (“Feature Request: Allow controlling whether TOC entries should be collapsed”)\\n', '• Fixed #411 (“Seg Fault with page.firstWidget”)\\n', '• Fixed #407 (“Annot.setOpacity trouble”)\\n', '• Changed\\nmethods\\nAnnot.setBorder(),\\nAnnot.setColors(),\\nLink.setBorder(),\\nand\\nLink.\\nsetColors() to also accept direct parameters, and not just cumbersome dictionaries.\\n', 'Changes in Version 1.16.8\\n', '• Added several new methods to the Document class, which make dealing with PDF low-level struc-\\ntures easier.\\nI also decided to provide them as “normal” methods (as opposed to private ones starting\\nwith an underscore “_”).\\nThese are Document.xrefObject(), Document.xrefStream(), Document.\\nxrefStreamRaw(), Document.PDFTrailer(), Document.PDFCatalog(), Document.metadataXML(),\\nDocument.updateObject(), Document.updateStream().\\n', '• Added Tools.mupdf_disply_errors() which sets the display of mupdf errors on sys.stderr.\\n', '• Added a commandline facility. This a major new feature: you can now invoke several utility functions via\\n“python -m fitz ...”. It should obsolete the need for many of the most trivial scripts. Please refer to Module fitz.\\n', 'Changes in Version 1.16.7\\n', 'Minor changes to better synchronize the binary image streams of TextPage image blocks and Document.\\nextractImage() images.\\n', '• Fixed issue #394 (“PyMuPDF Segfaults when using TOOLS.mupdf_warnings()”).\\n', '• Changed redirection of MuPDF error messages: apart from writing them to Python sys.stderr, they are now also\\nstored with the MuPDF warnings.\\n', '• Changed Tools.mupdf_warnings() to automatically empty the store (if not deactivated via a parameter).\\n', '• Changed Page.getImageBbox() to return an infinite rectangle if the image could not be located on the page\\n– instead of raising an exception.\\n', 'Changes in Version 1.16.6\\n', '• Fixed issue #390 (“Incomplete deletion of annotations”).\\n', '• Changed Page.searchFor() / Document.searchPageFor() to also support the flags parameter, which con-\\ntrols the data included in a TextPage.\\n', '500\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed Document.getPageImageList(), Document.getPageFontList() and their Page counterparts to\\nsupport a new parameter full. If true, the returned items will contain the xref of the Form XObject where the\\nfont or image is referenced.\\n', 'Changes in Version 1.16.5\\n', 'More performance improvements for text extraction.\\n', '• Fixed second part of issue #381 (see item in v1.16.4).\\n', '• Added Page.getTextPage(), so it is no longer required to create an intermediate display list for text extrac-\\ntions. Page level wrappers for text extraction and text searching are now based on this, which should improve\\nperformance by ca. 5%.\\n', 'Changes in Version 1.16.4\\n', '• Fixed issue #381 (“TextPage.extractDICT ... failed ... after upgrading ... to 1.16.3”)\\n', '• Added method Document.pages() which delivers a generator iterator over a page range.\\n', '• Added method Page.links() which delivers a generator iterator over the links of a page.\\n', '• Added method Page.annots() which delivers a generator iterator over the annotations of a page.\\n', '• Added method Page.widgets() which delivers a generator iterator over the form fields of a page.\\n', '• Changed Document.is_form_pdf to now contain the number of widgets, and False if not a PDF or this number\\nis zero.\\n', 'Changes in Version 1.16.3\\n', 'Minor changes compared to version 1.16.2. The code of the “dict” and “rawdict” variants of Page.getText() has been\\nported to C which has greatly improved their performance. This improvement is mostly noticeable with text-oriented\\ndocuments, where they now should execute almost two times faster.\\n', '• Fixed issue #369 (“mupdf: cmsCreateTransform failed”) by removing ICC colorspace support.\\n', '• Changed Page.getText() to accept additional keywords “blocks” and “words”. These will deliver the results\\nof Page.getTextBlocks() and Page.getTextWords(), respectively. So all text extraction methods are now\\navailable via a uniform API. Correspondingly, there are now new methods TextPage.extractBLOCKS() and\\nTextPage.extractWords().\\n', '• Changed Page.getText() to default bit indicator TEXT_INHIBIT_SPACES to off. Insertion of additional\\nspaces is not suppressed by default.\\n', 'Changes in Version 1.16.2\\n', '• Changed text extraction methods of Page to allow detail control of the amount of extracted data.\\n', '• Added planish_line() which maps a given line (defined as a pair of points) to the x-axis.\\n', '• Fixed an issue (w/o Github number) which brought down the interpreter when encountering certain non-UTF-8\\nencodable characters while using Page.getText() with te “dict” option.\\n', '• Fixed issue #362 (“Memory Leak with getText(‘rawDICT’)”).\\n', 'Changes in Version 1.16.1\\n', '501\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added property Quad.is_convex which checks whether a line is contained in the quad if it connects two points\\nof it.\\n', '• Changed Document.insert_pdf() to now allow dropping or including links and annotations independently\\nduring the copy. Fixes issue #352 (“Corrupt PDF data and ...”), which seemed to intermittently occur when\\nusing the method for some problematic PDF files.\\n', '• Fixed a bug which, in matrix division using the syntax “m1/m2”, caused matrix “m1” to be replaced by the\\nresult instead of delivering a new matrix.\\n', '• Fixed issue #354 (“SyntaxWarning with Python 3.8”). We now always use “==” for literals (instead of the “is”\\nPython keyword).\\n', '• Fixed issue #353 (“mupdf version check”), to no longer refuse the import when there are only patch level devi-\\nations from MuPDF.\\n', 'Changes in Version 1.16.0\\n', 'This major new version of MuPDF comes with several nice new or changed features. Some of them imply programming\\nAPI changes, however. This is a synopsis of what has changed:\\n', '• PDF document encryption and decryption is now fully supported. This includes setting permissions, pass-\\nwords (user and owner passwords) and the desired encryption method.\\n', '• In response to the new encryption features, PyMuPDF returns an integer (ie. a combination of bits) for document\\npermissions, and no longer a dictionary.\\n', '• Redirection of MuPDF errors and warnings is now natively supported. PyMuPDF redirects error messages from\\nMuPDF to sys.stderr and no longer buffers them. Warnings continue to be buffered and will not be displayed.\\nFunctions exist to access and reset the warnings buffer.\\n', '• Annotations are now only supported for PDF.\\n', '• Annotations and widgets (form fields) are now separate object chains on a page (although widgets technically\\nstill are PDF annotations). This means, that you will never encounter widgets when using Page.firstAnnot\\nor Annot.next(). You must use Page.firstWidget and Widget.next() to access form fields.\\n', '• As part of MuPDF’s changes regarding widgets, only the following four fonts are supported, when adding or\\nchanging form fields: Courier, Helvetica, Times-Roman and ZapfDingBats.\\n', 'List of change details:\\n', '• Added Document.can_save_incrementally() which checks conditions that are preventing use of option\\nincremental=True of Document.save().\\n', '• Added Page.firstWidget which points to the first field on a page.\\n', '• Added Page.getImageBbox() which returns the rectangle occupied by an image shown on the page.\\n', '• Added Annot.setName() which lets you change the (icon) name field.\\n', '• Added outputting the text color in Page.getText(): the “dict”, “rawdict” and “xml” options now also show\\nthe color in sRGB format.\\n', '• Changed Document.permissions to now contain an integer of bool indicators – was a dictionary before.\\n', '• Changed Document.save(), Document.write(), which now fully support password-based decryption and\\nencryption of PDF files.\\n', '• Changed the names of all Python constants related to annotations and widgets. Please make sure to consult the\\nConstants and Enumerations chapter if your script is dealing with these two classes. This decision goes back\\nto the dropped support for non-PDF annotations. The old names (starting with “ANNOT_*” or “WIDGET_*”)\\nwill be available as deprecated synonyms.\\n', '502\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed font support for widgets: only Cour (Courier), Helv (Helvetica, default), TiRo (Times-Roman) and\\nZaDb (ZapfDingBats) are accepted when adding or changing form fields. Only the plain versions are possible\\n– not their italic or bold variations. Reading widgets, however will show its original font.\\n', '• Changed the name of the warnings buffer to Tools.mupdf_warnings() and the function to empty this buffer\\nis now called Tools.reset_mupdf_warnings().\\n', '• Changed Page.getPixmap(), Document.get_page_pixmap(): a new bool argument annots can now be\\nused to suppress the rendering of annotations on the page.\\n', '• Changed Page.add_file_annot() and Page.add_text_annot() to enable setting an icon.\\n', '• Removed widget-related methods and attributes from the Annot object.\\n', '• Removed Document attributes openErrCode, openErrMsg, and Tools attributes / methods stderr, reset_stderr,\\nstdout, and reset_stdout.\\n', '• Removed thirdparty zlib dependency in PyMuPDF: there are now compression functions available in MuPDF.\\nSource installers of PyMuPDF may now omit this extra installation step.\\n', 'No version published for MuPDF v1.15.0\\n', 'Changes in Version 1.14.20 / 1.14.21\\n', '• Changed text marker annotations to support multiple rectangles / quadrilaterals. This fixes issue #341 (“Question\\n: How to addhighlight so that a string spread across more than a line is covered by one highlight?”) and similar\\n(#285).\\n', '• Fixed issue #331 (“Importing PyMuPDF changes warning filtering behaviour globally”).\\n', 'Changes in Version 1.14.19\\n', '• Fixed issue #319 (“InsertText function error when use custom font”).\\n', '• Added new method Document.get_sigflags() which returns information on whether a PDF is signed. Re-\\nsolves issue #326 (“How to detect signature in a form pdf?”).\\n', 'Changes in Version 1.14.17\\n', '• Added Document.fullcopyPage() to make full page copies within a PDF (not just copied references as\\nDocument.copyPage() does).\\n', '• Changed Page.getPixmap(), Document.get_page_pixmap() now use alpha=False as default.\\n', '• Changed text extraction: the span dictionary now (again) contains its rectangle under the bbox key.\\n', '• Changed Document.movePage() and Document.copyPage() to use direct functions instead of wrapping\\n', 'Document.select() – similar to Document.delete_page() in v1.14.16.\\n', 'Changes in Version 1.14.16\\n', '• Changed Document methods around PDF /EmbeddedFiles to no longer use MuPDF’s “portfolio” functions.\\nThat support will be dropped in MuPDF v1.15 – therefore another solution was required.\\n', '• Changed Document.embfile_Count() to be a function (was an attribute).\\n', '• Added new method Document.embfile_Names() which returns a list of names of embedded files.\\n', '503\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed Document.delete_page() and Document.delete_pages() to internally no longer use\\n', 'Document.select(), but instead use functions to perform the deletion directly. As it has turned out, the\\nDocument.select() method yields invalid outline trees (tables of content) for very complex PDFs and so-\\nphisticated use of annotations.\\n', 'Changes in Version 1.14.15\\n', '• Fixed issues #301 (“Line cap and Line join”), #300 (“How to draw a shape without outlines”) and #298\\n(“utils.updateRect exception”). These bugs pertain to drawing shapes with PyMuPDF. Drawing shapes with-\\nout any border is fully supported. Line cap styles and line line join style are now differentiated and support all\\npossible PDF values (0, 1, 2) instead of just being a bool. The previous parameter roundCap is deprecated in\\nfavor of lineCap and lineJoin and will be deleted in the next release.\\n', '• Fixed issue #290 (“Memory Leak with getText(‘rawDICT’)”). This bug caused memory not being (completely)\\nfreed after invoking the “dict”, “rawdict” and “json” versions of Page.getText().\\n', 'Changes in Version 1.14.14\\n', '• Added new low-level function ImageProperties() to determine a number of characteristics for an image.\\n', '• Added new low-level function Document.is_stream(), which checks whether an object is of stream type.\\n', '• Changed low-level functions Document._getXrefString() and Document._getTrailerString() now by\\ndefault return object definitions in a formatted form which makes parsing easy.\\n', 'Changes in Version 1.14.13\\n', '• Changed methods working with binary input: while ever supporting bytes and bytearray objects, they now also\\naccept io.BytesIO input, using their getvalue() method. This pertains to document creation, embedded files,\\nFileAttachment annotations, pixmap creation and others. Fixes issue #274 (“Segfault when using BytesIO as a\\nstream for insertImage”).\\n', '• Fixed issue #278 (“Is insertImage(keep_proportion=True) broken?”). Images are now correctly presented when\\nkeeping aspect ratio.\\n', 'Changes in Version 1.14.12\\n', '• Changed the draw methods of Page and Shape to support not only RGB, but also GRAY and CMYK colorspaces.\\nThis solves issue #270 (“Is there a way to use CMYK color to draw shapes?”). This change also applies to text\\ninsertion methods of Shape, resp. Page.\\n', '• Fixed issue #269 (“AttributeError in Document.insert_page()”), which occurred when using Document.\\ninsert_page() with text insertion.\\n', 'Changes in Version 1.14.11\\n', '• Changed Page.show_pdf_page() to always position the source rectangle centered in the target. This method\\nnow also supports rotation by arbitrary angles. The argument reuse_xref has been deprecated: prevention of\\nduplicates is now handled internally.\\n', '• Changed Page.insertImage() to support rotated display of the image and keeping the aspect ratio. Only\\nrotations by multiples of 90 degrees are supported here.\\n', '504\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Fixed issue #265 (“TypeError: insertText() got an unexpected keyword argument ‘idx’”). This issue only oc-\\ncurred when using Document.insert_page() with also inserting text.\\n', 'Changes in Version 1.14.10\\n', '• Changed Page.show_pdf_page() to support rotation of the source rectangle. Fixes #261 (“Cannot rotate\\ninsterted pages”).\\n', '• Fixed a bug in Page.insertImage() which prevented insertion of multiple images provided as streams.\\n', 'Changes in Version 1.14.9\\n', '• Added new low-level method Document._getTrailerString(), which returns the trailer object of a PDF.\\nThis is much like Document._getXrefString() except that the PDF trailer has no / needs no xref to identify\\nit.\\n', '• Added new parameters for text insertion methods. You can now set stroke and fill colors of glyphs (text charac-\\nters) independently, as well as the thickness of the glyph border. A new parameter render_mode controls the use\\nof these colors, and whether the text should be visible at all.\\n', '• Fixed issue #258 (“Copying image streams to new PDF without size increase”): For JPX images embedded in a\\nPDF, Document.extractImage() will now return them in their original format. Previously, the MuPDF base\\nlibrary was used, which returns them in PNG format (entailing a massive size increase).\\n', '• Fixed issue #259 (“Morphing text to fit inside rect”). Clarified use of get_text_length() and removed extra\\nline breaks for long words.\\n', 'Changes in Version 1.14.8\\n', '• Added Pixmap.set_rect() to change the pixel values in a rectangle. This is also an alternative to setting the\\ncolor of a complete pixmap (Pixmap.clear_with()).\\n', '• Fixed an image extraction issue with JBIG2 (monochrome) encoded PDF images. The issue occurred in Page.\\ngetText() (parameters “dict” and “rawdict”) and in Document.extractImage() methods.\\n', '• Fixed an issue with not correctly clearing a non-alpha Pixmap (Pixmap.clear_with()).\\n', '• Fixed an issue with not correctly inverting colors of a non-alpha Pixmap (Pixmap.invert_irect()).\\n', 'Changes in Version 1.14.7\\n', '• Added Pixmap.set_pixel() to change one pixel value.\\n', '• Added documentation for image conversion in the FAQ.\\n', '• Added new function get_text_length() to determine the string length for a given font.\\n', '• Added Postscript image output (changed Pixmap.save() and Pixmap.tobytes()).\\n', '• Changed Pixmap.save() and Pixmap.tobytes() to ensure valid combinations of colorspace, alpha and out-\\nput format.\\n', '• Changed Pixmap.save(): the desired format is now inferred from the filename.\\n', '• Changed FreeText annotations can now have a transparent background - see Annot.update().\\n', 'Changes in Version 1.14.5\\n', '505\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed: Shape methods now strictly use the transformation matrix of the Page – instead of “manually” calcu-\\nlating locations.\\n', '• Added method Pixmap.pixel() which returns the pixel value (a list) for given pixel coordinates.\\n', '• Added method Pixmap.tobytes() which returns a bytes object representing the pixmap in a variety of formats.\\nPreviously, this could be done for PNG outputs only (Pixmap.tobytes()).\\n', '• Changed: output of methods Pixmap.save() and (the new) Pixmap.tobytes() may now also be PSD (Adobe\\nPhotoshop Document).\\n', '• Added method Shape.drawQuad() which draws a Quad.\\nThis actually is a shorthand for a Shape.\\ndrawPolyline() with the edges of the quad.\\n', '• Changed method Shape.drawOval(): the argument can now be either a rectangle (rect_like) or a quadri-\\nlateral (quad_like).\\n', 'Changes in Version 1.14.4\\n', '• Fixes issue #239 “Annotation coordinate consistency”.\\n', 'Changes in Version 1.14.3\\n', 'This patch version contains minor bug fixes and CJK font output support.\\n', '• Added support for the four CJK fonts as PyMuPDF generated text output. This pertains to methods Page.\\ninsertFont(), Shape.insertText(), Shape.insertTextbox(), and corresponding Page methods. The\\nnew fonts are available under “reserved” fontnames “china-t” (traditional Chinese), “china-s” (simplified Chi-\\nnese), “japan” (Japanese), and “korea” (Korean).\\n', '• Added full support for the built-in fonts ‘Symbol’ and ‘Zapfdingbats’.\\n', '• Changed: The 14 standard fonts can now each be referenced by a 4-letter abbreviation.\\n', 'Changes in Version 1.14.1\\n', 'This patch version contains minor performance improvements.\\n', '• Added support for Document filenames given as pathlib object by using the Python str() function.\\n', 'Changes in Version 1.14.0\\n', 'To support MuPDF v1.14.0, massive changes were required in PyMuPDF – most of them purely technical, with little\\nvisibility to developers. But there are also quite a lot of interesting new and improved features. Following are the\\ndetails:\\n', '• Added “ink” annotation.\\n', '• Added “rubber stamp” annotation.\\n', '• Added “squiggly” text marker annotation.\\n', '• Added new class Quad (quadrilateral or tetragon) – which represents a general four-sided shape in the plane. The\\nspecial subtype of rectangular, non-empty tetragons is used in text marker annotations and as returned objects in\\ntext search methods.\\n', '• Added a new option “decrypt” to Document.save() and Document.write(). Now you can keep encryption\\nwhen saving a password protected PDF.\\n', '506\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added suppression and redirection of unsolicited messages issued by the underlying C-library MuPDF. Consult\\n', 'Redirecting Error and Warning Messages for details.\\n', '• Changed: Changes to annotations now always require Annot.update() to become effective.\\n', '• Changed free text annotations to support the full Latin character set and range of appearance options.\\n', '• Changed text searching, Page.searchFor(), to optionally return Quad instead Rect objects surrounding each\\nsearch hit.\\n', '• Changed plain text output: we now add a n to each line if it does not itself end with this character.\\n', '• Fixed issue 211 (“Something wrong in the doc”).\\n', '• Fixed issue 213 (“Rewritten outline is displayed only by mupdf-based applications”).\\n', '• Fixed issue 214 (“PDF decryption GONE!”).\\n', '• Fixed issue 215 (“Formatting of links added with pyMuPDF”).\\n', '• Fixed issue 217 (“extraction through json is failing for my pdf”).\\n', 'Behind the curtain, we have changed the implementation of geometry objects: they now purely exist in Python and no\\nlonger have “shadow” twins on the C-level (in MuPDF). This has improved processing speed in that area by more than\\na factor of two.\\n', 'Because of the same reason, most methods involving geometry parameters now also accept the corresponding Python\\nsequence. For example, in method “page.show_pdf_page(rect, ...)” parameter rect may now be any rect_like\\nsequence.\\n', 'We also invested considerable effort to further extend and improve the FAQ chapter.\\n', 'Changes in Version 1.13.19\\n', 'This version contains some technical / performance improvements and bug fixes.\\n', '• Changed memory management: for Python 3 builds, Python memory management is exclusively used across\\nall C-level code (i.e. no more native malloc() in MuPDF code or PyMuPDF interface code). This leads to\\nimproved memory usage profiles and also some runtime improvements: we have seen > 2% shorter runtimes for\\ntext extractions and pixmap creations (on Windows machines only to date).\\n', '• Fixed an error occurring in Python 2.7,\\nwhich crashed the interpreter when using TextPage.\\nextractRAWDICT() (= Page.getText(“rawdict”)).\\n', '• Fixed an error occurring in Python 2.7, when creating link destinations.\\n', '• Extended the FAQ chapter with more examples.\\n', 'Changes in Version 1.13.18\\n', '• Added method TextPage.extractRAWDICT(), and a corresponding new string parameter “rawdict” to method\\nPage.getText(). It extracts text and images from a page in Python dict form like TextPage.extractDICT(),\\nbut with the detail level of TextPage.extractXML(), which is position information down to each single char-\\nacter.\\n', 'Changes in Version 1.13.17\\n', '• Fixed an error that intermittently caused an exception in Page.show_pdf_page(), when pages from many\\ndifferent source PDFs were shown.\\n', '507\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed method Document.extractImage() to now return more meta information about the extracted im-\\ngage. Also, its performance has been greatly improved. Several demo scripts have been changed to make use of\\nthis method.\\n', '• Changed method Document._getXrefStream() to now return None if the object is no stream and no longer\\nraise an exception if otherwise.\\n', '• Added method Document._deleteObject() which deletes a PDF object identified by its xref. Only to be\\nused by the experienced PDF expert.\\n', '• Added a method paper_rect() which returns a Rect for a supplied paper format string.\\nExample:\\nfitz.paper_rect(“letter”) = fitz.Rect(0.0, 0.0, 612.0, 792.0).\\n', '• Added a FAQ chapter to this document.\\n', 'Changes in Version 1.13.16\\n', '• Added support for correctly setting transparency (opacity) for certain annotation types.\\n', '• Added a tool property (Tools.fitz_config) showing the configuration of this PyMuPDF version.\\n', '• Fixed issue #193 (‘insertText(overlay=False) gives “cannot resize a buffer with shared storage” error’) by avoid-\\ning read-only buffers.\\n', 'Changes in Version 1.13.15\\n', '• Fixed issue #189 (“cannot find builtin CJK font”), so we are supporting builtin CJK fonts now (CJK = China,\\nJapan, Korea). This should lead to correctly generated pixmaps for documents using these languages. This\\nchange has consequences for our binary file size: it will now range between 8 and 10 MB, depending on the OS.\\n', '• Fixed issue #191 (“Jupyter notebook kernel dies after ca. 40 pages”), which occurred when modifying the\\ncontents of an annotation.\\n', 'Changes in Version 1.13.14\\n', 'This patch version contains several improvements, mainly for annotations.\\n', '• Changed Annot.lineEnds is now a list of two integers representing the line end symbols. Previously was a\\ndict of strings.\\n', '• Added support of line end symbols for applicable annotations. PyMuPDF now can generate these annotations\\nincluding the line end symbols.\\n', '• Added Annot.setLineEnds() adds line end symbols to applicable annotation types (‘Line’, ‘PolyLine’, ‘Poly-\\ngon’).\\n', '• Changed technical implementation of Page.insertImage() and Page.show_pdf_page(): they now create\\nthere own contents objects, thereby avoiding changes of potentially large streams with consequential compression\\n/ decompression efforts and high change volumes with incremental updates.\\n', 'Changes in Version 1.13.13\\n', 'This patch version contains several improvements for embedded files and file attachment annotations.\\n', '• Added Document.embfile_Upd() which allows changing file content and metadata of an embedded file. It\\nsupersedes the old method Document.embfile_SetInfo() (which will be deleted in a future version). Content\\nis automatically compressed and metadata may be unicode.\\n', '508\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Changed Document.embfile_Add() to now automatically compress file content. Accompanying metadata\\ncan now be unicode (had to be ASCII in the past).\\n', '• Changed Document.embfile_Del() to now automatically delete all entries having the supplied identifying\\nname. The return code is now an integer count of the removed entries (was None previously).\\n', '• Changed embedded file methods to now also accept or show the PDF unicode filename as additional parameter\\nufilename.\\n', '• Added Page.add_file_annot() which adds a new file attachment annotation.\\n', '• Changed Annot.fileUpd() (file attachment annot) to now also accept the PDF unicode ufilename parameter.\\nThe description parameter desc correctly works with unicode. Furthermore, all parameters are optional, so\\nmetadata may be changed without also replacing the file content.\\n', '• Changed Annot.fileInfo() (file attachment annot) to now also show the PDF unicode filename as parameter\\nufilename.\\n', '• Fixed issue #180 (“page.getText(output=’dict’) return invalid bbox”) to now also work for vertical text.\\n', '• Fixed issue #185 (“Can’t render the annotations created by PyMuPDF”). The issue’s cause was the minimalistic\\nMuPDF approach when creating annotations. Several annotation types have no /AP (“appearance”) object when\\ncreated by MuPDF functions. MuPDF, SumatraPDF and hence also PyMuPDF cannot render annotations with-\\nout such an object. This fix now ensures, that an appearance object is always created together with the annotation\\nitself. We still do not support line end styles.\\n', 'Changes in Version 1.13.12\\n', '• Fixed issue #180 (“page.getText(output=’dict’) return invalid bbox”). Note that this is a circumvention of an\\nMuPDF error, which generates zero-height character rectangles in some cases. When this happens, this fix\\nensures a bbox height of at least fontsize.\\n', '• Changed for ListBox and ComboBox widgets, the attribute list of selectable values has been renamed to Widget.\\nchoice_values.\\n', '• Changed when adding widgets, any missing of the PDF Base 14 Fonts is automatically added to the PDF. Widget\\ntext fonts can now also be chosen from existing widget fonts. Any specified field values are now honored and\\nlead to a field with a preset value.\\n', '• Added Annot.updateWidget() which allows changing existing form fields – including the field value.\\n', 'Changes in Version 1.13.11\\n', 'While the preceeding patch subversions only contained various fixes, this version again introduces major new features:\\n', '• Added basic support for PDF widget annotations. You can now add PDF form fields of types Text, CheckBox,\\nListBox and ComboBox. Where necessary, the PDF is tranformed to a Form PDF with the first added widget.\\n', '• Fixed issues #176 (“wrong file embedding”), #177 (“segment fault when invoking page.getText()”)and #179\\n(“Segmentation fault using page.getLinks() on encrypted PDF”).\\n', 'Changes in Version 1.13.7\\n', '• Added support of variable page sizes for reflowable documents (e-books, HTML, etc.): new parameters rect and\\nfontsize in Document creation (open), and as a separate method Document.layout().\\n', '• Added Annot creation of many annotations types: sticky notes, free text, circle, rectangle, line, polygon, polyline\\nand text markers.\\n', '509\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Added support of annotation transparency (Annot.opacity, Annot.setOpacity()).\\n', '• Changed Annot.vertices: point coordinates are now grouped as pairs of floats (no longer as separate floats).\\n', '• Changed annotation colors dictionary: the two keys are now named “stroke” (formerly “common”) and “fill”.\\n', '• Added Document.isDirty which is True if a PDF has been changed in this session. Reset to False on each\\n', 'Document.save() or Document.write().\\n', 'Changes in Version 1.13.6\\n', '• Fix #173: for memory-resident documents, ensure the stream object will not be garbage-collected by Python\\nbefore document is closed.\\n', 'Changes in Version 1.13.5\\n', '• New low-level method Page._setContents() defines an object given by its xref to serve as the contents\\n', 'object.\\n', '• Changed and extended PDF form field support:\\nthe attribute widget_text has been renamed to Annot.\\nwidget_value. Values of all form field types (except signatures) are now supported. A new attribute Annot.\\nwidget_choices contains the selectable values of listboxes and comboboxes. All these attributes now contain\\nNone if no value is present.\\n', 'Changes in Version 1.13.4\\n', '• Document.convertToPDF() now supports page ranges, reverted page sequences and page rotation. If the doc-\\nument already is a PDF, an exception is raised.\\n', '• Fixed a bug (introduced with v1.13.0) that prevented Page.insertImage() for transparent images.\\n', 'Changes in Version 1.13.3\\n', 'Introduces a way to convert any MuPDF supported document to a PDF. If you ever wanted PDF versions of your\\nXPS, EPUB, CBZ or FB2 files – here is a way to do this.\\n', '• Document.convertToPDF() returns a Python bytes object in PDF format. Can be opened like normal in\\nPyMuPDF, or be written to disk with the “.pdf” extension.\\n', 'Changes in Version 1.13.2\\n', 'The major enhancement is PDF form field support. Form fields are annotations of type (19, ‘Widget’). There is a new\\ndocument method to check whether a PDF is a form. The Annot class has new properties describing field details.\\n', '• Document.is_form_pdf is true if object type /AcroForm and at least one form field exists.\\n', '• Annot.widget_type, Annot.widget_text and Annot.widget_name contain the details of a form field (i.e.\\na “Widget” annotation).\\n', 'Changes in Version 1.13.1\\n', '510\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• TextPage.extractDICT() is a new method to extract the contents of a document page (text and images). All\\ndocument types are supported as with the other TextPage extract*() methods. The returned object is a dictio-\\nnary of nested lists and other dictionaries, and exactly equal to the JSON-deserialization of the old TextPage.\\nextractJSON(). The difference is that the result is created directly – no JSON module is used. Because the user\\nneeds no JSON module to interpet the information, it should be easier to use, and also have a better performance,\\nbecause it contains images in their original binary format – they need not be base64-decoded.\\n', '• Page.getText() correspondingly supports the new parameter value “dict” to invoke the above method.\\n', '• TextPage.extractJSON() (resp. Page.getText(“json”)) is still supported for convenience, but its use is ex-\\npected to decline.\\n', 'Changes in Version 1.13.0\\n', 'This version is based on MuPDF v1.13.0. This release is “primarily a bug fix release”.\\n', 'In PyMuPDF, we are also doing some bug fixes while introducing minor enhancements. There only very minimal\\nchanges to the user’s API.\\n', '• Document construction is more flexible: the new filetype parameter allows setting the document type. If specified,\\nany extension in the filename will be ignored. More completely addresses issue #156. As part of this, the\\ndocumentation has been reworked.\\n', '• Changes to Pixmap constructors:\\n', '– Colorspace conversion no longer allows dropping the alpha channel: source and target alpha will\\nnow always be the same. We have seen exceptions and even interpreter crashes when using alpha\\n= 0.\\n', '– As a replacement, the simple pixmap copy lets you choose the target alpha.\\n', '• Document.save() again offers the full garbage collection range 0 thru 4. Because of a bug in xref maintenance,\\nwe had to temporarily enforce garbage > 1. Finally resolves issue #148.\\n', '• Document.save() now offers to “prettify” PDF source via an additional argument.\\n', '• Page.insertImage() has the additional stream -parameter, specifying a memory area holding an image.\\n', '• Issue with garbled PNGs on Linux systems has been resolved (“Problem writing PNG” #133).\\n', 'Changes in Version 1.12.4\\n', 'This is an extension of 1.12.3.\\n', '• Fix of issue #147: methods Document.getPageFontlist() and Document.getPageImagelist() now also\\nshow fonts and images contained in resources nested via “Form XObjects”.\\n', '• Temporary fix of issue #148: Saving to new PDF files will now automatically use garbage = 2 if a lower value is\\ngiven. Final fix is to be expected with MuPDF’s next version. At that point we will remove this circumvention.\\n', '• Preventive fix of illegally using stencil / image mask pixmaps in some methods.\\n', '• Method Document.getPageFontlist() now includes the encoding name for each font in the list.\\n', '• Method Document.getPageImagelist() now includes the decode method name for each image in the list.\\n', 'Changes in Version 1.12.3\\n', 'This is an extension of 1.12.2.\\n', '511\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• Many functions now return None instead of 0, if the result has no other meaning than just indicating successful\\nexecution (Document.close(), Document.save(), Document.select(), Pixmap.save() and many oth-\\ners).\\n', 'Changes in Version 1.12.2\\n', 'This is an extension of 1.12.1.\\n', '• Method Page.show_pdf_page() now accepts the new clip argument. This specifies an area of the source page\\nto which the display should be restricted.\\n', '• New Page.CropBox and Page.MediaBox have been included for convenience.\\n', 'Changes in Version 1.12.1\\n', 'This is an extension of version 1.12.0.\\n', '• New method Page.show_pdf_page() displays another’s PDF page. This is a vector image and therefore re-\\nmains precise across zooming. Both involved documents must be PDF.\\n', '• New method Page.getSVGimage() creates an SVG image from the page. In contrast to the raster image of a\\npixmap, this is a vector image format. The return is a unicode text string, which can be saved in a .svg file.\\n', '• Method Page.getTextBlocks() now accepts an additional bool parameter “images”. If set to true (default\\nis false), image blocks (metadata only) are included in the produced list and thus allow detecting areas with\\nrendered images.\\n', '• Minor bug fixes.\\n', '• “text” result of Page.getText() concatenates all lines within a block using a single space character. MuPDF’s\\noriginal uses “\\\\n” instead, producing a rather ragged output.\\n', '• New properties of Page objects Page.MediaBoxSize and Page.CropBoxPosition provide more information\\nabout a page’s dimensions. For non-PDF files (and for most PDF files, too) these will be equal to Page.rect.\\nbottom_right, resp. Page.rect.top_left. For example, class Shape makes use of them to correctly position\\nits items.\\n', 'Changes in Version 1.12.0\\n', 'This version is based on and requires MuPDF v1.12.0. The new MuPDF version contains quite a number of changes –\\nmost of them around text extraction. Some of the changes impact the programmer’s API.\\n', '• Outline.saveText() and Outline.saveXML() have been deleted without replacement. You probably haven’t\\nused them much anyway. But if you are looking for a replacement: the output of Document.get_toc() can\\neasily be used to produce something equivalent.\\n', '• Class TextSheet does no longer exist.\\n', '• Text “spans” (one of the hierarchy levels of TextPage) no longer contain positioning information (i.e. no “bbox”\\nkey). Instead, spans now provide the font information for its text. This impacts our JSON output variant.\\n', '• HTML output has improved very much: it now creates valid documents which can be displayed by browsers to\\nproduce a similar view as the original document.\\n', '• There is a new output format XHTML, which provides text and images in a browser-readable format. The\\ndifference to HTML output is, that no effort is made to reproduce the original layout.\\n', '• All output formats of Page.getText() now support creating complete, valid documents, by wrapping them\\nwith appropriate header and trailer information. If you are interested in using the HTML output, please make\\nsure to read Controlling Quality of HTML Output.\\n', '512\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• To support finding text positions,\\nwe have added special methods that don’t need detours like\\n', 'TextPage.extractJSON() or TextPage.extractXML(): use Page.getTextBlocks() or resp.\\nPage.\\ngetTextWords() to create lists of text blocks or resp. words, which are accompanied by their rectangles. This\\nshould be much faster than the standard text extraction methods and also avoids using additional packages for\\ninterpreting their output.\\n', 'Changes in Version 1.11.2\\n', 'This is an extension of v1.11.1.\\n', '• New Page.insertFont() creates a PDF /Font object and returns its object number.\\n', '• New Document.extractFont() extracts the content of an embedded font given its object number.\\n', '• Methods FontList(...) items no longer contain the PDF generation number. This value never had any signifi-\\ncance. Instead, the font file extension is included (e.g. “pfa” for a “PostScript Font for ASCII”), which is more\\nvaluable information.\\n', '• Fonts other than “simple fonts” (Type1) are now also supported.\\n', '• New options to change Pixmap size:\\n', '– Method Pixmap.shrink() reduces the pixmap proportionally in place.\\n', '– A new Pixmap copy constructor allows scaling via setting target width and height.\\n', 'Changes in Version 1.11.1\\n', 'This is an extension of v1.11.0.\\n', '• New class Shape. It facilitates and extends the creation of image shapes on PDF pages. It contains multiple\\nmethods for creating elementary shapes like lines, rectangles or circles, which can be combined into more com-\\nplex ones and be given common properties like line width or colors. Combined shapes are handled as a unit and\\ne.g. be “morphed” together. The class can accumulate multiple complex shapes and put them all in the page’s\\nforeground or background – thus also reducing the number of updates to the page’s contents object.\\n', '• All Page draw methods now use the new Shape class.\\n', '• Text insertion methods insertText() and insertTextBox() now support morphing in addition to text rotation. They\\nhave become part of the Shape class and thus allow text to be freely combined with graphics.\\n', '• A new Pixmap constructor allows creating pixmap copies with an added alpha channel. A new method also\\nallows directly manipulating alpha values.\\n', '• Binary algebraic operations with geometry objects (matrices, rectangles and points) now generally also support\\nlists or tuples as the second operand. You can add a tuple (x, y) of numbers to a Point. In this context, such\\nsequences are called “point_like” (resp. matrix_like, rect_like).\\n', '• Geometry objects now fully support in-place operators. For example, p /= m replaces point p with p * 1/m for a\\nnumber, or p * ~m for a matrix_like object m. Similarly, if r is a rectangle, then r |= (3, 4) is the new rectangle\\nthat also includes fitz.Point(3, 4), and r &= (1, 2, 3, 4) is its intersection with fitz.Rect(1, 2, 3, 4).\\n', 'Changes in Version 1.11.0\\n', 'This version is based on and requires MuPDF v1.11.\\n', 'Though MuPDF has declared it as being mostly a bug fix version, one major new feature is indeed contained: support\\nof embedded files – also called portfolios or collections. We have extended PyMuPDF functionality to embrace this up\\nto an extent just a little beyond the mutool utility as follows.\\n', '513\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• The Document class now support embedded files with several new methods and one new property:\\n', '– embfile_Info() returns metadata information about an entry in the list of embedded files. This is more than\\nmutool currently provides: it shows all the information that was used to embed the file (not just the entry’s\\nname).\\n', '– embfile_Get() retrieves the (decompressed) content of an entry into a bytes buffer.\\n', '– embfile_Add(...) inserts new content into the PDF portfolio. We (in contrast to mutool) restrict this to\\nentries with a new name (no duplicate names allowed).\\n', '– embfile_Del(...) deletes an entry from the portfolio (function not offered in MuPDF).\\n', '– embfile_SetInfo() – changes filename or description of an embedded file.\\n', '– embfile_Count – contains the number of embedded files.\\n', '• Several enhancements deal with streamlining geometry objects. These are not connected to the new MuPDF\\nversion and most of them are also reflected in PyMuPDF v1.10.0. Among them are new properties to identify\\nthe corners of rectangles by name (e.g. Rect.bottom_right) and new methods to deal with set-theoretic questions\\nlike Rect.contains(x) or IRect.intersects(x). Special effort focussed on supporting more “Pythonic” language\\nconstructs: if x in rect ... is equivalent to rect.contains(x).\\n', '• The Rect chapter now has more background on empty amd infinite rectangles and how we handle them. The\\nhandling itself was also updated for more consistency in this area.\\n', '• We have started basic support for generation of PDF content:\\n', '– Document.insert_page() adds a new page into a PDF, optionally containing some text.\\n', '– Page.insertImage() places a new image on a PDF page.\\n', '– Page.insertText() puts new text on an existing page\\n', '• For FileAttachment annotations, content and name of the attached file can extracted and changed.\\n', 'Changes in Version 1.10.0\\n', 'MuPDF v1.10 Impact\\n', 'MuPDF version 1.10 has a significant impact on our bindings. Some of the changes also affect the API – in other words,\\nyou as a PyMuPDF user.\\n', '• Link destination information has been reduced. Several properties of the linkDest class no longer contain valuable\\ninformation. In fact, this class as a whole has been deleted from MuPDF’s library and we in PyMuPDF only\\nmaintain it to provide compatibilty to existing code.\\n', '• In an effort to minimize memory requirements, several improvements have been built into MuPDF v1.10:\\n', '– A new config.h file can be used to de-select unwanted features in the C base code. Using this feature we\\nhave been able to reduce the size of our binary _fitz.o / _fitz.pyd by about 50% (from 9 MB to 4.5 MB).\\nWhen UPX-ing this, the size goes even further down to a very handy 2.3 MB.\\n', '– The alpha (transparency) channel for pixmaps is now optional. Letting alpha default to False significantly\\nreduces pixmap sizes (by 20% – CMYK, 25% – RGB, 50% – GRAY). Many Pixmap constructors therefore\\nnow accept an alpha boolean to control inclusion of this channel. Other pixmap constructors (e.g. those for\\nfile and image input) create pixmaps with no alpha alltogether. On the downside, save methods for pixmaps\\nno longer accept a savealpha option: this channel will always be saved when present. To minimize code\\nbreaks, we have left this parameter in the call patterns – it will just be ignored.\\n', '• DisplayList and TextPage class constructors now require the mediabox of the page they are referring to (i.e. the\\npage.bound() rectangle). There is no way to construct this information from other sources, therefore a source\\n', '514\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'code change cannot be avoided in these cases. We assume however, that not many users are actually employing\\nthese rather low level classes explixitely. So the impact of that change should be minor.\\n', 'Other Changes compared to Version 1.9.3\\n', '• The new Document method write() writes an opened PDF to memory (as opposed to a file, like save() does).\\n', '• An annotation can now be scaled and moved around on its page. This is done by modifying its rectangle.\\n', '• Annotations can now be deleted. Page contains the new method deleteAnnot().\\n', '• Various annotation attributes can now be modified, e.g. content, dates, title (= author), border, colors.\\n', '• Method Document.insert_pdf() now also copies annotations of source pages.\\n', '• The Pages class has been deleted. As documents can now be accessed with page numbers as indices (like doc[n]\\n= doc.loadPage(n)), and document object can be used as iterators, the benefit of this class was too low to maintain\\nit. See the following comments.\\n', '• loadPage(n) / doc[n] now accept arbitrary integers to specify a page number, as long as n < pageCount. So, e.g.\\ndoc[-500] is always valid and will load page (-500) % pageCount.\\n', '• A document can now also be used as an iterator like this: for page in doc: ...<do something with “page”> ....\\nThis will yield all pages of doc as page.\\n', '• The Pixmap method getSize() has been replaced with property size. As before Pixmap.size == len(Pixmap) is\\ntrue.\\n', '• In response to transparency (alpha) being optional, several new parameters and properties have been added to\\n', 'Pixmap and Colorspace classes to support determining their characteristics.\\n', '• The Page class now contains new properties firstAnnot and firstLink to provide starting points to the respec-\\ntive class chains, where firstLink is just a mnemonic synonym to method loadLinks() which continues to exist.\\nSimilarly, the new property rect is a synonym for method bound(), which also continues to exist.\\n', '• Pixmap methods samplesRGB() and samplesAlpha() have been deleted because pixmaps can now be created\\nwithout transparency.\\n', '• Rect now has a property irect which is a synonym of method round(). Likewise, IRect now has property rect to\\ndeliver a Rect which has the same coordinates as floats values.\\n', '• Document has the new method searchPageFor() to search for a text string. It works exactly like the corresponding\\nPage.searchFor() with page number as additional parameter.\\n', 'Changes in Version 1.9.3\\n', 'This version is also based on MuPDF v1.9a. Changes compared to version 1.9.2:\\n', '• As a major enhancement, annotations are now supported in a similar way as links. Annotations can be displayed\\n(as pixmaps) and their properties can be accessed.\\n', '• In addition to the document select() method, some simpler methods can now be used to manipulate a PDF:\\n', '– copyPage() copies a page within a document.\\n', '– movePage() is similar, but deletes the original.\\n', '– delete_page() deletes a page\\n', '– delete_pages() deletes a page range\\n', '• rotation or setRotation() access or change a PDF page’s rotation, respectively.\\n', '• Available but undocumented before, IRect, Rect, Point and Matrix support the len() method and their coordinate\\nproperties can be accessed via indices, e.g. IRect.x1 == IRect[2].\\n', '515\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• For convenience, documents now support simple indexing: doc.loadPage(n) == doc[n]. The index may however\\nbe in range -pageCount < n < pageCount, such that doc[-1] is the last page of the document.\\n', 'Changes in Version 1.9.2\\n', 'This version is also based on MuPDF v1.9a. Changes compared to version 1.9.1:\\n', '• fitz.open() (no parameters) creates a new empty PDF document, i.e. if saved afterwards, it must be given a .pdf\\nextension.\\n', '• Document now accepts all of the following formats (Document and open are synonyms):\\n', '– open(),\\n', '– open(filename) (equivalent to open(filename, None)),\\n', '– open(filetype, area) (equivalent to open(filetype, stream = area)).\\n', 'Type of memory area stream may be bytes or bytearray. Thus, e.g. area = open(“file.pdf”, “rb”).read() may be\\nused directly (without first converting it to bytearray).\\n', '• New method Document.insert_pdf() (PDFs only) inserts a range of pages from another PDF.\\n', '• Document objects doc now support the len() function: len(doc) == doc.pageCount.\\n', '• New method Document.getPageImageList() creates a list of images used on a page.\\n', '• New method Document.getPageFontList() creates a list of fonts referenced by a page.\\n', '• New pixmap constructor fitz.Pixmap(doc, xref) creates a pixmap based on an opened PDF document and an xref\\n', 'number of the image.\\n', '• New pixmap constructor fitz.Pixmap(cspace, spix) creates a pixmap as a copy of another one spix with the col-\\norspace converted to cspace. This works for all colorspace combinations.\\n', '• Pixmap constructor fitz.Pixmap(colorspace, width, height, samples) now allows samples to also be bytes, not\\nonly bytearray.\\n', 'Changes in Version 1.9.1\\n', 'This version of PyMuPDF is based on MuPDF library source code version 1.9a published on April 21, 2016.\\n', 'Please have a look at MuPDF’s website to see which changes and enhancements are contained herein.\\n', 'Changes in version 1.9.1 compared to version 1.8.0 are the following:\\n', '• New methods get_area() for both fitz.Rect and fitz.IRect\\n', '• Pixmaps can now be created directly from files using the new constructor fitz.Pixmap(filename).\\n', '• The Pixmap constructor fitz.Pixmap(image) has been extended accordingly.\\n', '• fitz.Rect can now be created with all possible combinations of points and coordinates.\\n', '• PyMuPDF classes and methods now all contain __doc__ strings, most of them created by SWIG automatically.\\nWhile the PyMuPDF documentation certainly is more detailed, this feature should help a lot when programming\\nin Python-aware IDEs.\\n', '• A new document method of getPermits() returns the permissions associated with the current access to the docu-\\nment (print, edit, annotate, copy), as a Python dictionary.\\n', '• The identity matrix fitz.Identity is now immutable.\\n', '516\\nChapter 29. Change Log\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• The new document method select(list) removes all pages from a document that are not contained in the list. Pages\\ncan also be duplicated and re-arranged.\\n', '• Various improvements and new members in our demo and examples collections. Perhaps most prominently:\\nPDF_display now supports scrolling with the mouse wheel, and there is a new example program wxTableExtract\\nwhich allows to graphically identify and extract table data in documents.\\n', '• fitz.open() is now an alias of fitz.Document().\\n', '• New pixmap method tobytes() which will return a bytearray formatted as a PNG image of the pixmap.\\n', '• New pixmap method samplesRGB() providing a samples version with alpha bytes stripped off (RGB colorspaces\\nonly).\\n', '• New pixmap method samplesAlpha() providing the alpha bytes only of the samples area.\\n', '• New iterator fitz.Pages(doc) over a document’s set of pages.\\n', '• New matrix methods invert() (calculate inverted matrix), concat() (calculate matrix product), pretranslate() (per-\\nform a shift operation).\\n', '• New IRect methods intersect() (intersection with another rectangle), translate() (perform a shift operation).\\n', '• New Rect methods intersect() (intersection with another rectangle), transform() (transformation with a matrix),\\ninclude_point() (enlarge rectangle to also contain a point), include_rect() (enlarge rectangle to also contain an-\\nother one).\\n', '• Documented Point.transform() (transform a point with a matrix).\\n', '• Matrix, IRect, Rect and Point classes now support compact, algebraic formulations for manipulating such objects.\\n', '• Incremental saves for changes are possible now using the call pattern doc.save(doc.name, incremental=True).\\n', '• A PDF’s metadata can now be deleted, set or changed by document method set_metadata(). Supports incremental\\nsaves.\\n', '• A PDF’s bookmarks (or table of contents) can now be deleted, set or changed with the entries of a list using\\ndocument method set_toc(list). Supports incremental saves.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '517\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '518\\nChapter 29. Change Log\\n', 'CHAPTER\\n', 'THIRTY\\n', 'DEPRECATED NAMES\\n', 'The original naming convention for methods and properties has been “camelCase”. Since its creation around 2013,\\na tremendous increase of functionality has happened in PyMuPDF – and with it a corresponding increase in classes,\\nmethods and properties. In too many cases, this has led to non-intuitive, illogical and ugly names, difficult to memorize\\nor guess.\\n', 'A few versions ago, I therefore decided to shift gears and switch to a “snake_cased” naming standard. This was a major\\neffort, which needed a step-wise approach. I think am done with it now (version 1.18.14).\\n', 'The following list maps deprecated names to their new versions.\\nFor example, property pageCount became\\n', 'page_count in the Document class. There also are less obvious name changes, e.g. method getPNGdata was re-\\nnamed to tobytes in the Pixmap class.\\n', 'Names of classes (camel case) and package-wide constants (the majority is upper case) remain untouched.\\n', 'Old names will remain available as deprecated aliases through MuPDF version 1.19.0 and be removed in the version\\nthat follows it - probably version 1.20.0, but this depends on upstream decisions (MuPDF).\\n', ""Starting with version 1.19.0, we will issue deprecation warnings on sys.stderr like Deprecation:\\n'newPage'\\nremoved from class 'Document' after v1.19.0 - use 'new_page'. when aliased methods are being used.\\nUsing a deprecated property will not cause this type of warning.\\n"", 'Starting immediately, all deprecated objects (methods and properties) will show a copy of the original’s docstring,\\nprefixed with the deprecation message, for example:\\n', "">>> print(fitz.Document.pageCount.__doc__)\\n*** Deprecated and removed in version following 1.19.0 - use 'page_count'. ***\\nNumber of pages.\\n>>> print(fitz.Document.newPage.__doc__)\\n*** Deprecated and removed in version following 1.19.0 - use 'new_page'. ***\\nCreate and return a new page object.\\n"", 'Args:\\n', 'pno: (int) insert before this page. Default: after last page.\\nwidth: (float) page width in points. Default: 595 (ISO A4 width).\\nheight: (float) page height in points. Default 842 (ISO A4 height).\\n', 'Returns:\\n', 'A Page object.\\n', 'There is a utility script alias-changer.py which can be used to do mass-renames in your scripts. It accepts either a\\nsingle file or a folder as argument. If a folder is supplied, all its Python files and those of its subfolders are changed.\\nOptionally, backups of the scripts can be taken.\\n', 'Deprecated names are not separately documented. The following list will help you find the documentation of the\\noriginal.\\n', '519\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'Note: This is automatically generated. One or two items refer to yet undocumented methods - please simply ignore\\nthem.\\n', '• _isWrapped – Page.is_wrapped\\n', '• addCaretAnnot – Page.add_caret_annot()\\n', '• addCircleAnnot – Page.add_circle_annot()\\n', '• addFileAnnot – Page.add_file_annot()\\n', '• addFreetextAnnot – Page.add_freetext_annot()\\n', '• addHighlightAnnot – Page.add_highlight_annot()\\n', '• addInkAnnot – Page.add_ink_annot()\\n', '• addLineAnnot – Page.add_line_annot()\\n', '• addPolygonAnnot – Page.add_polygon_annot()\\n', '• addPolylineAnnot – Page.add_polyline_annot()\\n', '• addRectAnnot – Page.add_rect_annot()\\n', '• addRedactAnnot – Page.add_redact_annot()\\n', '• addSquigglyAnnot – Page.add_squiggly_annot()\\n', '• addStampAnnot – Page.add_stamp_annot()\\n', '• addStrikeoutAnnot – Page.add_strikeout_annot()\\n', '• addTextAnnot – Page.add_text_annot()\\n', '• addUnderlineAnnot – Page.add_underline_annot()\\n', '• addWidget – Page.add_widget()\\n', '• chapterCount – Document.chapter_count\\n', '• chapterPageCount – Document.chapter_page_count()\\n', '• cleanContents – Page.clean_contents()\\n', '• clearWith – Pixmap.clear_with()\\n', '• convertToPDF – Document.convert_to_pdf()\\n', '• copyPage – Document.copy_page()\\n', '• copyPixmap – Pixmap.copy()\\n', '• CropBox – Page.cropbox\\n', '• CropBoxPosition – Page.cropbox_position\\n', '• deleteAnnot – Page.delete_annot()\\n', '• deleteLink – Page.delete_link()\\n', '• deletePage – Document.delete_page()\\n', '• deletePageRange – Document.delete_pages()\\n', '• deleteWidget – Page.delete_widget()\\n', '• derotationMatrix – Page.derotation_matrix\\n', '520\\nChapter 30. Deprecated Names\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• drawBezier – Page.draw_bezier()\\n', '• drawBezier – Shape.draw_bezier()\\n', '• drawCircle – Page.draw_circle()\\n', '• drawCircle – Shape.draw_circle()\\n', '• drawCurve – Page.draw_curve()\\n', '• drawCurve – Shape.draw_curve()\\n', '• drawLine – Page.draw_line()\\n', '• drawLine – Shape.draw_line()\\n', '• drawOval – Page.draw_oval()\\n', '• drawOval – Shape.draw_oval()\\n', '• drawPolyline – Page.draw_polyline()\\n', '• drawPolyline – Shape.draw_polyline()\\n', '• drawQuad – Page.draw_quad()\\n', '• drawQuad – Shape.draw_quad()\\n', '• drawRect – Page.draw_rect()\\n', '• drawRect – Shape.draw_rect()\\n', '• drawSector – Page.draw_sector()\\n', '• drawSector – Shape.draw_sector()\\n', '• drawSquiggle – Page.draw_squiggle()\\n', '• drawSquiggle – Shape.draw_squiggle()\\n', '• drawZigzag – Page.draw_zigzag()\\n', '• drawZigzag – Shape.draw_zigzag()\\n', '• embeddedFileAdd – Document.embfile_add()\\n', '• embeddedFileCount – Document.embfile_count()\\n', '• embeddedFileDel – Document.embfile_del()\\n', '• embeddedFileGet – Document.embfile_get()\\n', '• embeddedFileInfo – Document.embfile_info()\\n', '• embeddedFileNames – Document.embfile_names()\\n', '• embeddedFileUpd – Document.embfile_upd()\\n', '• extractFont – Document.extract_font()\\n', '• extractImage – Document.extract_image()\\n', '• fileGet – Annot.get_file()\\n', '• fileUpd – Annot.update_file()\\n', '• fillTextbox – TextWriter.fill_textbox()\\n', '• findBookmark – Document.find_bookmark()\\n', '• firstAnnot – Page.first_annot\\n', '521\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• firstLink – Page.first_link\\n', '• firstWidget – Page.first_widget\\n', '• fullcopyPage – Document.fullcopy_page()\\n', '• gammaWith – Pixmap.gamma_with()\\n', '• getArea – Rect.get_area()\\n', '• getArea – IRect.get_area()\\n', '• getCharWidths – Document.get_char_widths()\\n', '• getContents – Page.get_contents()\\n', '• getDisplayList – Page.get_displaylist()\\n', '• getDrawings – Page.get_drawings()\\n', '• getFontList – Page.get_fonts()\\n', '• getImageBbox – Page.get_image_bbox()\\n', '• getImageData – Pixmap.tobytes()\\n', '• getImageList – Page.get_images()\\n', '• getLinks – Page.get_links()\\n', '• getOCGs – Document.get_ocgs()\\n', '• getPageFontList – Document.get_page_fonts()\\n', '• getPageImageList – Document.get_page_images()\\n', '• getPagePixmap – Document.get_page_pixmap()\\n', '• getPageText – Document.get_page_text()\\n', '• getPageXObjectList – Document.get_page_xobjects()\\n', '• getPDFnow – get_pdf_now()\\n', '• getPDFstr – get_pdf_str()\\n', '• getPixmap – Page.get_pixmap()\\n', '• getPixmap – Annot.get_pixmap()\\n', '• getPixmap – DisplayList.get_pixmap()\\n', '• getPNGData – Pixmap.tobytes()\\n', '• getPNGdata – Pixmap.tobytes()\\n', '• getRectArea – Rect.get_area()\\n', '• getRectArea – IRect.get_area()\\n', '• getSigFlags – Document.get_sigflags()\\n', '• getSVGimage – Page.get_svg_image()\\n', '• getText – Page.get_text()\\n', '• getText – Annot.get_text()\\n', '• getTextBlocks – Page.get_text_blocks()\\n', '• getTextbox – Page.get_textbox()\\n', '522\\nChapter 30. Deprecated Names\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• getTextbox – Annot.get_textbox()\\n', '• getTextLength – get_text_length()\\n', '• getTextPage – Page.get_textpage()\\n', '• getTextPage – Annot.get_textpage()\\n', '• getTextPage – DisplayList.get_textpage()\\n', '• getTextWords – Page.get_text_words()\\n', '• getToC – Document.get_toc()\\n', '• getXmlMetadata – Document.get_xml_metadata()\\n', '• ImageProperties – image_properties()\\n', '• includePoint – Rect.include_point()\\n', '• includePoint – IRect.include_point()\\n', '• includeRect – Rect.include_rect()\\n', '• includeRect – IRect.include_rect()\\n', '• insertFont – Page.insert_font()\\n', '• insertImage – Page.insert_image()\\n', '• insertLink – Page.insert_link()\\n', '• insertPage – Document.insert_page()\\n', '• insertPDF – Document.insert_pdf()\\n', '• insertText – Page.insert_text()\\n', '• insertText – Shape.insert_text()\\n', '• insertTextbox – Page.insert_textbox()\\n', '• insertTextbox – Shape.insert_textbox()\\n', '• invertIRect – Pixmap.invert_irect()\\n', '• isConvex – Quad.is_convex\\n', '• isDirty – Document.is_dirty\\n', '• isEmpty – Rect.is_empty\\n', '• isEmpty – IRect.is_empty\\n', '• isEmpty – Quad.is_empty\\n', '• isFormPDF – Document.is_form_pdf\\n', '• isInfinite – Rect.is_infinite\\n', '• isInfinite – IRect.is_infinite\\n', '• isPDF – Document.is_pdf\\n', '• isRectangular – Quad.is_rectangular\\n', '• isRectilinear – Matrix.is_rectilinear\\n', '• isReflowable – Document.is_reflowable\\n', '• isRepaired – Document.is_repaired\\n', '523\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• isStream – Document.is_stream()\\n', '• lastLocation – Document.last_location\\n', '• lineEnds – Annot.line_ends\\n', '• loadAnnot – Page.load_annot()\\n', '• loadLinks – Page.load_links()\\n', '• loadPage – Document.load_page()\\n', '• makeBookmark – Document.make_bookmark()\\n', '• MediaBox – Page.mediabox\\n', '• MediaBoxSize – Page.mediabox_size\\n', '• metadataXML – Document.xref_xml_metadata()\\n', '• movePage – Document.move_page()\\n', '• needsPass – Document.needs_pass\\n', '• newPage – Document.new_page()\\n', '• newShape – Page.new_shape()\\n', '• nextLocation – Document.next_location()\\n', '• pageCount – Document.page_count\\n', '• pageCropBox – Document.page_cropbox()\\n', '• pageXref – Document.page_xref()\\n', '• PaperRect – paper_rect()\\n', '• PaperSize – paper_size()\\n', '• paperSizes – paper_sizes\\n', '• PDFCatalog – Document.pdf_catalog()\\n', '• PDFTrailer – Document.pdf_trailer()\\n', '• pillowData – Pixmap.pil_tobytes()\\n', '• pillowWrite – Pixmap.pil_save()\\n', '• planishLine – planish_line()\\n', '• preRotate – Matrix.prerotate()\\n', '• preScale – Matrix.prescale()\\n', '• preShear – Matrix.preshear()\\n', '• preTranslate – Matrix.pretranslate()\\n', '• previousLocation – Document.prev_location()\\n', '• readContents – Page.read_contents()\\n', '• resolveLink – Document.resolve_link()\\n', '• rotationMatrix – Page.rotation_matrix\\n', '• searchFor – Page.search_for()\\n', '• searchPageFor – Document.search_page_for()\\n', '524\\nChapter 30. Deprecated Names\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• setAlpha – Pixmap.set_alpha()\\n', '• setBlendMode – Annot.set_blendmode()\\n', '• setBorder – Annot.set_border()\\n', '• setColors – Annot.set_colors()\\n', '• setCropBox – Page.set_cropbox()\\n', '• setFlags – Annot.set_flags()\\n', '• setInfo – Annot.set_info()\\n', '• setLanguage – Document.set_language()\\n', '• setLineEnds – Annot.set_line_ends()\\n', '• setMediaBox – Page.set_mediabox()\\n', '• setMetadata – Document.set_metadata()\\n', '• setName – Annot.set_name()\\n', '• setOC – Annot.set_oc()\\n', '• setOpacity – Annot.set_opacity()\\n', '• setOrigin – Pixmap.set_origin()\\n', '• setPixel – Pixmap.set_pixel()\\n', '• setRect – Annot.set_rect()\\n', '• setRect – Pixmap.set_rect()\\n', '• setResolution – Pixmap.set_dpi()\\n', '• setRotation – Page.set_rotation()\\n', '• setToC – Document.set_toc()\\n', '• setXmlMetadata – Document.set_xml_metadata()\\n', '• showPDFpage – Page.show_pdf_page()\\n', '• soundGet – Annot.get_sound()\\n', '• tintWith – Pixmap.tint_with()\\n', '• transformationMatrix – Page.transformation_matrix\\n', '• updateLink – Page.update_link()\\n', '• updateObject – Document.update_object()\\n', '• updateStream – Document.update_stream()\\n', '• wrapContents – Page.wrap_contents()\\n', '• writeImage – Pixmap.save()\\n', '• writePNG – Pixmap.save()\\n', '• writeText – Page.write_text()\\n', '• writeText – TextWriter.write_text()\\n', '• xrefLength – Document.xref_length()\\n', '• xrefObject – Document.xref_object()\\n', '525\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '• xrefStream – Document.xref_stream()\\n', '• xrefStreamRaw – Document.xref_stream_raw()\\n', 'This documentation covers all versions up to 1.23.25.\\n', '526\\nChapter 30. Deprecated Names\\n', 'CHAPTER\\n', 'THIRTYONE\\n', 'FIND OUT ABOUT PYMUPDF UTILITIES\\n', 'The GitHub repository PyMuPDF-Utilities contains a full range of examples, demonstrations and use cases.\\n', '527\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '528\\nChapter 31. Find out about PyMuPDF Utilities\\n', 'CHAPTER\\n', 'THIRTYTWO\\n', 'DO YOU NEED PDF TO DOCX CONVERSION?\\n', 'We recommend the pdf2docx library which uses PyMuPDF and the python-docx library to provide simple document\\nconversion from PDF to DOCX format.\\n', 'This documentation covers all versions up to 1.23.25.\\n', '529\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', '530\\nChapter 32. Do you need PDF to DOCX conversion?\\n', 'INDEX\\n', 'Symbols\\n__init__() (Archive method), 186\\n__init__() (Colorspace method), 188\\n__init__() (Device method), 422\\n__init__() (DisplayList method), 189\\n__init__() (Document method), 193\\n__init__() (DocumentWriter method), 239\\n__init__() (IRect method), 248\\n__init__() (Matrix method), 257\\n__init__() (Pixmap method), 312–314\\n__init__() (Point method), 326\\n__init__() (Quad method), 329\\n__init__() (Rect method), 333, 334\\n__init__() (Shape method), 339\\n__init__() (Story method), 356\\n__init__() (TextWriter method), 374\\n_isWrapped, 520\\n', 'A\\na (Matrix attribute), 259\\nabs_unit (Point attribute), 327\\nadd() (Archive method), 187\\nadd_bullet_list() (Xml method), 390\\nadd_caret_annot() (Page method), 267\\nadd_circle_annot() (Page method), 269\\nadd_class() (Xml method), 393\\nadd_code() (Xml method), 391\\nadd_codeblock() (Xml method), 390\\nadd_description_list() (Xml method), 390\\nadd_division() (Xml method), 390\\nadd_file_annot\\nexamples, 60\\n', 'add_file_annot() (Page method), 268\\nadd_freetext_annot\\nalign, 267\\nborder_color, 267\\ncolor, 267\\nfill_color, 267\\nfontname, 267\\nfontsize, 267\\nrect, 267\\nrotate, 267\\n', 'text_color, 267\\n', 'add_freetext_annot() (Page method), 267\\nadd_header() (Xml method), 390\\nadd_highlight_annot() (Page method), 271\\nadd_horizontal_line() (Xml method), 390\\nadd_image() (Xml method), 390\\nadd_ink_annot() (Page method), 269\\nadd_kbd() (Xml method), 391\\nadd_layer() (Document method), 196\\nadd_line_annot() (Page method), 269\\nadd_link() (Xml method), 390\\nadd_number_list() (Xml method), 391\\nadd_ocg() (Document method), 196\\nadd_paragraph() (Xml method), 391\\nadd_polygon_annot() (Page method), 271\\nadd_polyline_annot() (Page method), 271\\nadd_rect_annot() (Page method), 269\\nadd_redact_annot() (Page method), 270\\nadd_samp() (Xml method), 391\\nadd_span() (Xml method), 391\\nadd_squiggly_annot() (Page method), 271\\nadd_stamp_annot() (Page method), 275\\nadd_strikeout_annot() (Page method), 271\\nadd_style() (Xml method), 393\\nadd_subscript() (Xml method), 391\\nadd_superscript() (Xml method), 391\\nadd_text() (Xml method), 391\\nadd_text_annot() (Page method), 267\\nadd_underline_annot() (Page method), 271\\nadd_var() (Xml method), 391\\nadd_widget() (Page method), 276\\naddCaretAnnot, 520\\naddCircleAnnot, 520\\naddFileAnnot, 520\\naddFreetextAnnot, 520\\naddHighlightAnnot, 520\\naddInkAnnot, 520\\naddLineAnnot, 520\\naddPolygonAnnot, 520\\naddPolylineAnnot, 520\\naddRectAnnot, 520\\naddRedactAnnot, 520\\n', '531\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'addSquigglyAnnot, 520\\naddStampAnnot, 520\\naddStrikeoutAnnot, 520\\naddTextAnnot, 520\\naddUnderlineAnnot, 520\\naddWidget, 520\\nadjust\\ninsert_htmlbox, 281\\n', 'adobe_glyph_names(), 406\\nadobe_glyph_unicodes(), 406\\nalign\\nadd_freetext_annot, 267\\ninsert_textbox, 281, 347\\n', 'alpha\\nAnnot.get_pixmap, 174\\nDisplayList.get_pixmap, 190\\nget_pixmap, 298\\n', 'alpha (Pixmap attribute), 322\\nAnnot (built-in class), 174\\nAnnot.get_pixmap\\nalpha, 174\\ncolorspace, 174\\ndpi, 174\\nmatrix, 174\\n', 'Annot.get_text\\nblocks, 174\\nclip, 174\\ndict, 174\\nflags, 174\\nhtml, 174\\njson, 174\\nrawdict, 174\\ntext, 174\\nwords, 174\\nxhtml, 174\\nxml, 174\\n', 'Annot.update\\nblend_mode, 179\\nborder_color, 179\\ncross_out, 179\\nfill_color, 179\\nfontsize, 179\\nrotate, 179\\ntext_color, 179\\n', 'Annot.update_file\\nbuffer, 181\\ndesc, 181\\nfilename, 181\\nufilename, 181\\n', 'annot_names() (Page method), 300\\nannot_xrefs() (Page method), 300\\nannots\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'get_pixmap, 298\\n', 'annots() (Page method), 279\\nappend\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'append() (TextWriter method), 374\\nappend_child() (Xml method), 394\\nappendv() (TextWriter method), 375\\napply_redactions() (Page method), 277\\narchive\\ninsert_htmlbox, 281\\n', 'Archive (built-in class), 186\\nartbox (Page attribute), 307\\nascender (Font attribute), 246\\nattach\\nembed file, 18, 19\\n', 'authenticate() (Document method), 200\\n', 'B\\nb (Matrix attribute), 259\\nBase14_Fonts (built-in variable), 433\\nbbox (Font attribute), 246\\nbegin_page() (DocumentWriter method), 239\\nbl (IRect attribute), 250\\nbl (Rect attribute), 336\\nbleedbox (Page attribute), 307\\nblend_mode\\nAnnot.update, 179\\n', 'blendmode (Annot attribute), 177\\nblocks\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'body (Story attribute), 358\\nborder (Annot attribute), 184\\nborder (Link attribute), 253\\nborder_color\\nadd_freetext_annot, 267\\nAnnot.update, 179\\n', 'border_color (Widget attribute), 385\\nborder_dashes (Widget attribute), 385\\nborder_style (Widget attribute), 385\\nborder_width\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'border_width (Widget attribute), 385\\nbottom_left (IRect attribute), 250\\nbottom_left (Rect attribute), 336\\nbottom_right (IRect attribute), 250\\nbottom_right (Rect attribute), 337\\nbound() (Page method), 266\\nbr (IRect attribute), 250\\nbr (Rect attribute), 337\\nbreadth\\ndraw_squiggle, 283, 339\\n', '532\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'draw_zigzag, 283, 341\\n', 'buffer\\nAnnot.update_file, 181\\n', 'buffer (Font attribute), 246\\nbutton_caption (Widget attribute), 386\\nbutton_states() (Widget method), 384\\n', 'C\\nc (Matrix attribute), 259\\ncan_save_incrementally() (Document method), 217\\ncatalog (built-in variable), 427\\nchapter_count (Document attribute), 236\\nchapter_page_count() (Document method), 202\\nchapterCount, 520\\nchapterPageCount, 520\\nchar_lengths() (Font method), 245\\nchoice_values (Widget attribute), 385\\nclean_contents() (Annot method), 419\\nclean_contents() (Page method), 418\\ncleanContents, 520\\nclear_with() (Pixmap method), 314\\nclearWith, 520\\nclip\\nAnnot.get_text, 174\\nDisplayList.get_pixmap, 190\\nget_pixmap, 298\\nget_textpage, 291\\nPage.get_text, 289\\nsearch_for, 304\\nshow_pdf_page, 302\\n', 'clone() (Xml method), 394\\nclose() (Document method), 226\\nclose() (DocumentWriter method), 240\\nclosePath\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\n', 'color\\nadd_freetext_annot, 267\\nDocument.insert_page, 221\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\n', 'draw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'color (TextWriter attribute), 377\\ncolor_count() (Pixmap method), 321\\ncolor_topusage() (Pixmap method), 321\\ncolors (Annot attribute), 183\\ncolors (Link attribute), 253\\ncolorspace\\nAnnot.get_pixmap, 174\\nDisplayList.get_pixmap, 190\\nget_pixmap, 298\\n', 'Colorspace (built-in class), 188\\ncolorspace (Pixmap attribute), 322\\ncommit\\noverlay, 349\\n', 'commit() (Shape method), 349\\nconcat() (Matrix method), 258\\ncontains() (IRect method), 249\\ncontains() (Rect method), 335\\ncontents (built-in variable), 428\\nConversionHeader(), 413\\nConversionTrailer(), 413\\nconvert_to_pdf\\nexamples, 57\\n', 'convert_to_pdf() (Document method), 205\\nconvertToPDF, 520\\ncoordinate (built-in variable), 427\\ncopy\\nexamples, 65, 66\\n', 'copy() (Pixmap method), 317\\ncopy_page() (Document method), 222\\ncopyPage, 520\\ncopyPixmap, 520\\ncreate_element() (Xml method), 394\\ncreate_text_node() (Xml method), 394\\nCropBox, 520\\nCropBox (built-in variable), 427\\ncropbox (Page attribute), 307\\ncropbox_position (Page attribute), 307\\nCropBoxPosition, 520\\ncross_out\\nAnnot.update, 179\\n', 'CS_CMYK (built-in variable), 433\\nCS_GRAY (built-in variable), 433\\nCS_RGB (built-in variable), 433\\ncsCMYK (built-in variable), 433\\ncsGRAY (built-in variable), 433\\n', 'Index\\n533\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'csRGB (built-in variable), 433\\ncss\\ninsert_htmlbox, 281\\n', 'css_for_pymupdf_font(), 407\\n', 'D\\nd (Matrix attribute), 259\\ndashes\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\n', 'debug() (Xml method), 394\\ndel_toc_item() (Document method), 215\\ndel_xml_metadata() (Document method), 413\\ndelete_annot() (Page method), 276\\ndelete_image\\nxref, 289\\n', 'delete_image() (Page method), 289\\ndelete_link() (Page method), 278\\ndelete_page() (Document method), 221\\ndelete_pages() (Document method), 222\\ndelete_responses() (Annot method), 179\\ndelete_widget() (Page method), 276\\ndeleteAnnot, 520\\ndeleteLink, 520\\ndeletePage, 520\\ndeletePageRange, 520\\ndeleteWidget, 520\\ndelimiters\\nPage.get_text, 289\\n', 'derotation_matrix (Page attribute), 308\\nderotationMatrix, 520\\ndesc\\nAnnot.update_file, 181\\nDocument.embfile_add, 224\\nDocument.embfile_upd, 226\\n', 'descender (Font attribute), 247\\ndest (Link attribute), 254\\ndest (linkDest attribute), 255\\ndest (Outline attribute), 263\\nDevice (built-in class), 422\\ndict\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'dictionary (built-in variable), 428\\n', 'digest (Pixmap attribute), 322\\nDisplayList (built-in class), 189\\nDisplayList.get_pixmap\\nalpha, 190\\nclip, 190\\ncolorspace, 190\\nmatrix, 190\\n', 'distance_to() (Point method), 326\\ndoc (Shape attribute), 349\\nDocument\\nfilename, 193\\nfiletype, 193\\nfontsize, 193\\nopen, 193\\nrect, 193\\nstream, 193\\n', 'Document (built-in class), 193\\nDocument.convert_to_pdf\\nfrom_page, 205\\nrotate, 205\\nto_page, 205\\n', 'Document.embfile_add\\ndesc, 224\\nfilename, 224\\nufilename, 224\\n', 'Document.embfile_upd\\ndesc, 226\\nfilename, 226\\nufilename, 226\\n', 'Document.insert_file\\nannots, 220\\nappend, 220\\nfrom_page, 220\\njoin, 220\\nlinks, 220\\nmerge, 220\\nrotate, 220\\nshow_progress, 220\\nstart_at, 220\\nto_page, 220\\n', 'Document.insert_page\\ncolor, 221\\nfontfile, 221\\nfontname, 221\\nfontsize, 221\\nheight, 221\\nwidth, 221\\n', 'Document.insert_pdf\\nannots, 220\\nappend, 220\\nfrom_page, 220\\njoin, 220\\nlinks, 220\\nmerge, 220\\n', '534\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'rotate, 220\\nshow_progress, 220\\nstart_at, 220\\nto_page, 220\\n', 'Document.layout\\nfontsize, 213\\nheight, 213\\nrect, 213\\nwidth, 213\\n', 'Document.new_page\\nheight, 221\\nwidth, 221\\n', 'DocumentWriter (built-in class), 239\\ndown (Outline attribute), 262\\ndpi\\nAnnot.get_pixmap, 174\\nget_pixmap, 298\\nget_textpage_ocr, 291\\n', 'draw() (Story method), 358\\ndraw_bezier\\nclosePath, 284\\ncolor, 284\\ndashes, 284\\nfill, 284\\nfill_opacity, 284\\nlineCap, 284\\nlineJoin, 284\\nmorph, 284\\noc, 284\\noverlay, 284\\nstroke_opacity, 284\\nwidth, 284\\n', 'draw_bezier() (Page method), 284\\ndraw_bezier() (Shape method), 341\\ndraw_circle\\nclosePath, 283\\ncolor, 283\\ndashes, 283\\nfill, 283\\nfill_opacity, 283\\nlineCap, 283\\nlineJoin, 283\\nmorph, 283\\noc, 283\\noverlay, 283\\nstroke_opacity, 283\\nwidth, 283\\n', 'draw_circle() (Page method), 283\\ndraw_circle() (Shape method), 342\\ndraw_cont (Shape attribute), 350\\ndraw_curve\\nclosePath, 284\\ncolor, 284\\ndashes, 284\\n', 'fill, 284\\nfill_opacity, 284\\nlineCap, 284\\nlineJoin, 284\\nmorph, 284\\noc, 284\\noverlay, 284\\nstroke_opacity, 284\\nwidth, 284\\n', 'draw_curve() (Page method), 284\\ndraw_curve() (Shape method), 343\\ndraw_line\\nclosePath, 283\\ncolor, 283\\ndashes, 283\\nfill, 283\\nfill_opacity, 283\\nlineCap, 283\\nlineJoin, 283\\nmorph, 283\\noc, 283\\noverlay, 283\\nstroke_opacity, 283\\nwidth, 283\\n', 'draw_line() (Page method), 283\\ndraw_line() (Shape method), 339\\ndraw_oval\\nclosePath, 283\\ncolor, 283\\ndashes, 283\\nfill, 283\\nfill_opacity, 283\\nlineCap, 283\\nlineJoin, 283\\nmorph, 283\\noc, 283\\noverlay, 283\\nstroke_opacity, 283\\nwidth, 283\\n', 'draw_oval() (Page method), 283\\ndraw_oval() (Shape method), 342\\ndraw_polyline\\nclosePath, 284\\ncolor, 284\\ndashes, 284\\nfill, 284\\nfill_opacity, 284\\nlineCap, 284\\nlineJoin, 284\\nmorph, 284\\noc, 284\\noverlay, 284\\nstroke_opacity, 284\\nwidth, 284\\n', 'Index\\n535\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'draw_polyline() (Page method), 284\\ndraw_polyline() (Shape method), 341\\ndraw_quad\\nclosePath, 284\\ncolor, 284\\ndashes, 284\\nfill, 284\\nfill_opacity, 284\\nlineCap, 284\\nlineJoin, 284\\nmorph, 284\\noc, 284\\noverlay, 284\\nstroke_opacity, 284\\nwidth, 284\\n', 'draw_quad() (Page method), 284\\ndraw_quad() (Shape method), 344\\ndraw_rect\\nclosePath, 284\\ncolor, 284\\ndashes, 284\\nfill, 284\\nfill_opacity, 284\\nlineCap, 284\\nlineJoin, 284\\nmorph, 284\\noc, 284\\noverlay, 284\\nradius, 284\\nstroke_opacity, 284\\nwidth, 284\\n', 'draw_rect() (Page method), 284\\ndraw_rect() (Shape method), 344\\ndraw_sector\\nclosePath, 283\\ncolor, 283\\ndashes, 283\\nfill, 283\\nfill_opacity, 283\\nfullSector, 283, 343\\nlineCap, 283\\nlineJoin, 283\\nmorph, 283\\noc, 283\\noverlay, 283\\nstroke_opacity, 283\\nwidth, 283\\n', 'draw_sector() (Page method), 283\\ndraw_sector() (Shape method), 343\\ndraw_squiggle\\nbreadth, 283, 339\\nclosePath, 283\\ncolor, 283\\ndashes, 283\\n', 'fill, 283\\nfill_opacity, 283\\nlineCap, 283\\nlineJoin, 283\\nmorph, 283\\noc, 283\\noverlay, 283\\nstroke_opacity, 283\\nwidth, 283\\n', 'draw_squiggle() (Page method), 283\\ndraw_squiggle() (Shape method), 339\\ndraw_zigzag\\nbreadth, 283, 341\\nclosePath, 283\\ncolor, 283\\ndashes, 283\\nfill, 283\\nfill_opacity, 283\\nlineCap, 283\\nlineJoin, 283\\nmorph, 283\\noc, 283\\noverlay, 283\\nstroke_opacity, 283\\nwidth, 283\\n', 'draw_zigzag() (Page method), 283\\ndraw_zigzag() (Shape method), 341\\ndrawBezier, 521\\ndrawCircle, 521\\ndrawCurve, 521\\ndrawLine, 521\\ndrawOval, 521\\ndrawPolyline, 521\\ndrawQuad, 521\\ndrawRect, 521\\ndrawSector, 521\\ndrawSquiggle, 521\\ndrawZigzag, 521\\n', 'E\\ne (Matrix attribute), 259\\nelement_positions() (Story method), 358\\nembed\\nfile, attach, 18, 19\\nPDF, picture, 60\\n', 'embeddedFileAdd, 521\\nembeddedFileCount, 521\\nembeddedFileDel, 521\\nembeddedFileGet, 521\\nembeddedFileInfo, 521\\nembeddedFileNames, 521\\nembeddedFileUpd, 521\\nembfile_add\\nexamples, 60, 63\\n', '536\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'embfile_add() (Document method), 224\\nembfile_count() (Document method), 224\\nembfile_del() (Document method), 225\\nembfile_get() (Document method), 224\\nembfile_info() (Document method), 225\\nembfile_names() (Document method), 225\\nembfile_upd() (Document method), 226\\nEMPTY_IRECT(), 422\\nEMPTY_QUAD(), 422\\nEMPTY_RECT(), 422\\nencoding\\ninsert_font, 285\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'end_page() (DocumentWriter method), 239\\nentry_list (Archive attribute), 188\\neven_odd\\nfinish, 345\\n', 'examples\\nadd_file_annot, 60\\nconvert_to_pdf, 57\\ncopy, 65, 66\\nembfile_add, 60, 63\\nextract_image, 58\\ninsert_image, 60, 63\\ninvert_irect, 66\\nJPEG, 63\\nPhotoImage, 63\\nPhotoshop, 63\\nPostscript, 63\\nsave, 63, 66\\nset_rect, 66\\nshow_pdf_page, 60, 63\\ntobytes, 63\\n', 'expandtabs\\ninsert_textbox, 281, 347\\n', 'extract\\nimage non-PDF, 57\\nimage PDF, 58\\ntable, 39\\ntext rectangle, 38\\n', 'extract_font() (Document method), 230\\nextract_image\\nexamples, 58\\n', 'extract_image() (Document method), 229\\nextractBLOCKS() (TextPage method), 363\\nextractDICT() (TextPage method), 364\\nextractFont, 521\\nextractHTML() (TextPage method), 364\\nextractImage, 521\\nextractJSON() (TextPage method), 364\\nextractRAWDICT() (TextPage method), 365\\nextractRAWJSON() (TextPage method), 365\\nextractTEXT() (TextPage method), 363\\n', 'extractText() (TextPage method), 363\\nextractWORDS() (TextPage method), 363\\nextractXHTML() (TextPage method), 364\\nextractXML() (TextPage method), 365\\nez_save() (Document method), 219\\n', 'F\\nf (Matrix attribute), 259\\nfield_flags (Widget attribute), 386\\nfield_label (Widget attribute), 385\\nfield_name (Widget attribute), 385\\nfield_type (Widget attribute), 386\\nfield_type_string (Widget attribute), 386\\nfield_value (Widget attribute), 385\\nfile\\nattach embed, 18, 19\\n', 'file extension\\nwrong, 35\\n', 'file_info (Annot attribute), 180\\nfileGet, 521\\nfilename\\nAnnot.update_file, 181\\nDocument, 193\\nDocument.embfile_add, 224\\nDocument.embfile_upd, 226\\ninsert_image, 286\\nopen, 193\\nreplace_image, 288\\n', 'fileSpec (linkDest attribute), 255\\nfiletype\\nDocument, 193\\nopen, 193\\n', 'fileUpd, 521\\nfill\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'fill_color\\nadd_freetext_annot, 267\\nAnnot.update, 179\\n', 'fill_color (Widget attribute), 386\\nfill_opacity\\ndraw_bezier, 284\\n', 'Index\\n537\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'draw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\ninsert_text, 280, 346\\ninsert_textbox, 281\\n', 'fill_textbox() (TextWriter method), 375\\nfillTextbox, 521\\nfind() (Xml method), 394\\nfind_bookmark() (Document method), 201\\nfind_next() (Xml method), 395\\nfind_tables() (Page method), 273\\nfindBookmark, 521\\nfinish\\nclosePath, 345\\ncolor, 345\\ndashes, 345\\neven_odd, 345\\nfill, 345\\nfill_opacity, 345\\nlineCap, 345\\nlineJoin, 345\\nmorph, 345\\noc, 345\\nstroke_opacity, 345\\nwidth, 345\\n', 'finish() (Shape method), 345\\nfirst_annot (Page attribute), 308\\nfirst_child (Xml attribute), 395\\nfirst_link (Page attribute), 308\\nfirst_widget (Page attribute), 308\\nfirstAnnot, 521\\nfirstLink, 522\\nfirstWidget, 522\\nfit() (Story method), 360\\nfit_height() (Story method), 361\\nfit_scale() (Story method), 360\\nfit_width() (Story method), 361\\nfitz_config (Tools attribute), 381\\nfitz_fontdescriptors, 409\\nflags\\nAnnot.get_text, 174\\nget_textpage, 291\\nget_textpage_ocr, 291\\nPage.get_text, 289\\nsearch_for, 304\\n', 'flags (Annot attribute), 182\\n', 'flags (Font attribute), 246\\nflags (Link attribute), 253\\nflags (linkDest attribute), 255\\nFont (built-in class), 240\\nfontbuffer\\ninsert_font, 285\\n', 'fontfile\\nDocument.insert_page, 221\\ninsert_font, 285\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'fontname\\nadd_freetext_annot, 267\\nDocument.insert_page, 221\\ninsert_font, 285\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'fontsize\\nadd_freetext_annot, 267\\nAnnot.update, 179\\nDocument, 193\\nDocument.insert_page, 221\\nDocument.layout, 213\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\nopen, 193\\n', 'fontsize (built-in variable), 430\\nFormFonts (Document attribute), 236\\nfrom_page\\nDocument.convert_to_pdf, 205\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'full\\nget_textpage_ocr, 291\\n', 'fullcopy_page() (Document method), 223\\nfullcopyPage, 522\\nfullSector\\ndraw_sector, 283, 343\\n', 'G\\ngamma_with() (Pixmap method), 315\\ngammaWith, 522\\ngen_id() (Tools method), 378\\nget_area() (IRect method), 248\\nget_area() (Rect method), 335\\nget_attribute_value() (Xml method), 391\\nget_attributes() (Xml method), 391\\nget_bboxlog() (Page method), 414\\nget_cdrawings() (Page method), 295\\nget_char_widths() (Document method), 419\\nget_contents() (Page method), 418\\nget_displaylist() (Page method), 418\\nget_drawings() (Page method), 292\\nget_file() (Annot method), 181\\n', '538\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'get_fonts() (Page method), 295\\nget_image_bbox\\ntransform, 297\\n', 'get_image_bbox() (Page method), 297\\nget_image_info\\nhashes, 295\\nxrefs, 295\\n', 'get_image_info() (Page method), 295\\nget_image_rects\\ntransform, 296\\n', 'get_image_rects() (Page method), 296\\nget_images() (Page method), 295\\nget_label() (Page method), 278\\nget_layer() (Document method), 198\\nget_layers() (Document method), 196\\nget_links() (Page method), 278\\nget_new_xref() (Document method), 420\\nget_oc() (Annot method), 176\\nget_oc() (Document method), 195\\nget_ocgs() (Document method), 199\\nget_ocmd() (Document method), 198\\nget_page_fonts() (Document method), 211\\nget_page_images() (Document method), 211\\nget_page_labels() (Document method), 200\\nget_page_numbers() (Document method), 200\\nget_page_pixmap() (Document method), 210\\nget_page_text() (Document method), 212\\nget_page_xobjects() (Document method), 210\\nget_pdf_now(), 410\\nget_pdf_str(), 411\\nget_pixmap\\nalpha, 298\\nannots, 298\\nclip, 298\\ncolorspace, 298\\ndpi, 298\\nmatrix, 298\\n', 'get_pixmap() (Annot method), 174\\nget_pixmap() (DisplayList method), 190\\nget_pixmap() (Page method), 298\\nget_sigflags() (Document method), 224\\nget_sound() (Annot method), 181\\nget_svg_image\\nmatrix, 298\\n', 'get_svg_image() (Page method), 298\\nget_tessdata(), 421\\nget_text() (Annot method), 174\\nget_text() (Page method), 289\\nget_text_blocks() (Page method), 417\\nget_text_length(), 410\\nget_text_words() (Page method), 418\\nget_textbox\\nrect, 290\\ntextpage, 290\\n', 'get_textbox() (Annot method), 175\\nget_textbox() (Page method), 290\\nget_textpage\\nclip, 291\\nflags, 291\\n', 'get_textpage() (DisplayList method), 190\\nget_textpage() (Page method), 291\\nget_textpage_ocr\\ndpi, 291\\nflags, 291\\nfull, 291\\nlanguage, 291\\ntessdata, 291\\n', 'get_textpage_ocr() (Page method), 291\\nget_texttrace() (Page method), 414\\nget_toc() (Document method), 206\\nget_xml_metadata() (Document method), 213\\nget_xobjects() (Page method), 296\\ngetArea, 522\\ngetCharWidths, 522\\ngetContents, 522\\ngetDisplayList, 522\\ngetDrawings, 522\\ngetFontList, 522\\ngetImageBbox, 522\\ngetImageData, 522\\ngetImageList, 522\\ngetLinks, 522\\ngetOCGs, 522\\ngetPageFontList, 522\\ngetPageImageList, 522\\ngetPagePixmap, 522\\ngetPageText, 522\\ngetPageXObjectList, 522\\ngetPDFnow, 522\\ngetPDFstr, 522\\ngetPixmap, 522\\ngetPNGData, 522\\ngetPNGdata, 522\\ngetRectArea, 522\\ngetSigFlags, 522\\ngetSVGimage, 522\\ngetText, 522\\ngetTextBlocks, 522\\ngetTextbox, 522, 523\\ngetTextLength, 523\\ngetTextPage, 523\\ngetTextWords, 523\\ngetToC, 523\\ngetXmlMetadata, 523\\nglyph_advance() (Font method), 243\\nglyph_bbox() (Font method), 244\\nglyph_count (Font attribute), 246\\nglyph_name_to_unicode(), 405\\n', 'Index\\n539\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'glyph_name_to_unicode() (Font method), 244\\n', 'H\\nh (Pixmap attribute), 324\\nhas_annots() (Document method), 231\\nhas_entry() (Archive method), 187\\nhas_glyph() (Font method), 242\\nhas_links() (Document method), 231\\nhas_popup (Annot attribute), 183\\nhashes\\nget_image_info, 295\\n', 'height\\nDocument.insert_page, 221\\nDocument.layout, 213\\nDocument.new_page, 221\\nopen, 193\\n', 'height (IRect attribute), 251\\nheight (Pixmap attribute), 324\\nheight (Quad attribute), 331\\nheight (Rect attribute), 337\\nheight (Shape attribute), 349\\nhtml\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'I\\nimage\\nnon-PDF, extract, 57\\nPDF, extract, 58\\nresolution, 55\\nSVG, vector, 63\\n', 'image_profile(), 411\\nImageProperties, 523\\ninclude_point() (Rect method), 335\\ninclude_rect() (Rect method), 335\\nincludePoint, 523\\nincludeRect, 523\\nINFINITE_IRECT(), 422\\nINFINITE_QUAD(), 422\\nINFINITE_RECT(), 422\\ninfo (Annot attribute), 182\\ninheritable (built-in variable), 427\\ninsert_after() (Xml method), 394\\ninsert_before() (Xml method), 394\\ninsert_file() (Document method), 220\\ninsert_font\\nencoding, 285\\nfontbuffer, 285\\nfontfile, 285\\nfontname, 285\\nset_simple, 285\\n', 'insert_font() (Page method), 285\\ninsert_htmlbox\\nadjust, 281\\n', 'archive, 281\\ncss, 281\\nmorph, 281\\noc, 281\\nopacity, 281\\noverlay, 281\\nrect, 281\\nrotate, 281\\ntext, 281\\n', 'insert_htmlbox() (Page method), 281\\ninsert_image\\nexamples, 60, 63\\nfilename, 286\\nkeep_proportion, 286\\nmask, 286\\noc, 286\\noverlay, 286\\npixmap, 286\\nrotate, 286\\nstream, 286\\nxref, 286\\n', 'insert_image() (Page method), 286\\ninsert_link() (Page method), 278\\ninsert_page() (Document method), 221\\ninsert_pdf() (Document method), 220\\ninsert_text\\nborder_width, 280, 346\\ncolor, 280, 346\\nencoding, 280, 346\\nfill, 280, 346\\nfill_opacity, 280, 346\\nfontfile, 280, 346\\nfontname, 280, 346\\nfontsize, 280, 346\\nlineheight, 346\\nmorph, 280, 346\\noc, 280, 346\\noverlay, 280\\nrender_mode, 280, 346\\nrotate, 280, 346\\nstroke_opacity, 280, 346\\n', 'insert_text() (Page method), 280\\ninsert_text() (Shape method), 346\\ninsert_textbox\\nalign, 281, 347\\nborder_width, 281, 347\\ncolor, 281, 347\\nencoding, 281, 347\\nexpandtabs, 281, 347\\nfill, 281, 347\\nfill_opacity, 281\\nfontfile, 281, 347\\nfontname, 281, 347\\nfontsize, 281, 347\\n', '540\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'lineheight, 347\\nmorph, 281, 347\\noc, 281, 347\\noverlay, 281\\nrender_mode, 281, 347\\nrotate, 281, 347\\nstroke_opacity, 281\\n', 'insert_textbox() (Page method), 281\\ninsert_textbox() (Shape method), 347\\ninsertFont, 523\\ninsertImage, 523\\ninsertLink, 523\\ninsertPage, 523\\ninsertPDF, 523\\ninsertText, 523\\ninsertTextbox, 523\\ninterpolate (Pixmap attribute), 325\\nintersect() (IRect method), 249\\nintersect() (Rect method), 334\\nintersects() (IRect method), 249\\nintersects() (Rect method), 335\\ninvert() (Matrix method), 258\\ninvert_irect\\nexamples, 66\\n', 'invert_irect() (Pixmap method), 317\\ninvertIRect, 523\\nIRect (built-in class), 248\\nirect (Pixmap attribute), 322\\nirect (Rect attribute), 336\\nirect_like (built-in variable), 427\\nirt_xref (Annot attribute), 183\\nis_closed (Document attribute), 233\\nis_convex (Quad attribute), 330\\nis_dirty (Document attribute), 234\\nis_empty (IRect attribute), 251\\nis_empty (Quad attribute), 331\\nis_empty (Rect attribute), 337\\nis_encrypted (Document attribute), 235\\nis_external (Link attribute), 253\\nis_external (Outline attribute), 263\\nis_fast_webaccess (Document attribute), 234\\nis_form_pdf (Document attribute), 234\\nis_infinite (IRect attribute), 251\\nis_infinite (Rect attribute), 337\\nis_monochrome (Pixmap attribute), 322\\nis_open (Annot attribute), 184\\nis_open (Outline attribute), 263\\nis_pdf (Document attribute), 234\\nis_rectangular (Quad attribute), 331\\nis_rectilinear (Matrix attribute), 259\\nis_reflowable (Document attribute), 234\\nis_repaired (Document attribute), 234\\nis_signed (Widget attribute), 386\\nis_stream() (Document method), 420\\n', 'is_text (Xml attribute), 395\\nis_unicolor (Pixmap attribute), 322\\nis_valid (Rect attribute), 338\\nis_wrapped (Page attribute), 417\\nis_writable (Font attribute), 247\\nisConvex, 523\\nisDirty, 523\\nisEmpty, 523\\nisFormPDF, 523\\nisInfinite, 523\\nisMap (linkDest attribute), 255\\nisPDF, 523\\nisRectangular, 523\\nisRectilinear, 523\\nisReflowable, 523\\nisRepaired, 523\\nisStream, 524\\nisUri (linkDest attribute), 255\\n', 'J\\njoin\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'journal_can_do() (Document method), 232\\njournal_enable() (Document method), 232\\njournal_load() (Document method), 233\\njournal_op_name() (Document method), 232\\njournal_position() (Document method), 232\\njournal_redo() (Document method), 233\\njournal_save() (Document method), 233\\njournal_start_op() (Document method), 232\\njournal_stop_op() (Document method), 232\\njournal_undo() (Document method), 233\\nJPEG\\nexamples, 63\\n', 'json\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'K\\nkeep_proportion\\ninsert_image, 286\\nshow_pdf_page, 302\\n', 'key-value\\nlookup text, 37\\n', 'kind (linkDest attribute), 255\\n', 'L\\nlanguage\\nget_textpage_ocr, 291\\n', 'last_child (Xml attribute), 395\\nlast_location (Document attribute), 236\\nlast_point (TextWriter attribute), 377\\nlastLocation, 524\\n', 'Index\\n541\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'lastPoint (Shape attribute), 350\\nlayer_ui_configs() (Document method), 199\\nlayout() (Document method), 213\\nligature (built-in variable), 430\\nline_ends (Annot attribute), 182\\nlineCap\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\n', 'lineEnds, 524\\nlineheight\\ninsert_text, 346\\ninsert_textbox, 347\\n', 'lineJoin\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\n', 'Link (built-in class), 252\\nLINK_FLAG_B_VALID (built-in variable), 438\\nLINK_FLAG_FIT_H (built-in variable), 438\\nLINK_FLAG_FIT_V (built-in variable), 438\\nLINK_FLAG_L_VALID (built-in variable), 438\\nLINK_FLAG_R_IS_ZOOM (built-in variable), 438\\nLINK_FLAG_R_VALID (built-in variable), 438\\nLINK_FLAG_T_VALID (built-in variable), 438\\nLINK_GOTO (built-in variable), 437\\nLINK_GOTOR (built-in variable), 437\\nLINK_LAUNCH (built-in variable), 437\\nLINK_NAMED (built-in variable), 437\\nLINK_NONE (built-in variable), 437\\nLINK_URI (built-in variable), 437\\nlinkDest (built-in class), 255\\nlinks\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'links() (Page method), 279\\n', 'll (Quad attribute), 330\\nload_annot() (Page method), 301\\nload_links() (Page method), 301\\nload_page() (Document method), 202\\nload_widget() (Page method), 301\\nloadAnnot, 524\\nloadLinks, 524\\nloadPage, 524\\nlookup\\ntext key-value, 37\\n', 'lr (Quad attribute), 330\\nlt (linkDest attribute), 255\\n', 'M\\nmake_bookmark() (Document method), 201\\nmake_table(), 408\\nmakeBookmark, 524\\nmarkinfo (Document attribute), 234\\nmask\\ninsert_image, 286\\n', 'matrix\\nAnnot.get_pixmap, 174\\nDisplayList.get_pixmap, 190\\nget_pixmap, 298\\nget_svg_image, 298\\n', 'Matrix (built-in class), 257\\nmatrix_like (built-in variable), 427\\nMediaBox, 524\\nMediaBox (built-in variable), 427\\nmediabox (Page attribute), 307\\nmediabox_size (Page attribute), 307\\nMediaBoxSize, 524\\nmerge\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'metadata (Document attribute), 235\\nmetadataXML, 524\\nmorph\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\ninsert_htmlbox, 281\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'morph() (IRect method), 249\\n', '542\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'morph() (Quad method), 329\\nmorph() (Rect method), 336\\nmove_page() (Document method), 223\\nmovePage, 524\\nmupdf_display_errors() (Tools method), 381\\nmupdf_warnings() (Tools method), 381\\n', 'N\\nn (Colorspace attribute), 189\\nn (Pixmap attribute), 324\\nname (Colorspace attribute), 188\\nname (Document attribute), 236\\nname (Font attribute), 246\\nnamed (linkDest attribute), 256\\nneed_appearances() (Document method), 223\\nneeds_pass (Document attribute), 235\\nneedsPass, 524\\nnew_page() (Document method), 221\\nnew_shape() (Page method), 304\\nnewPage, 524\\nnewShape, 524\\nnewWindow (linkDest attribute), 256\\nnext (Annot attribute), 182\\nnext (Link attribute), 254\\nnext (Outline attribute), 263\\nnext (Widget attribute), 385\\nnext (Xml attribute), 395\\nnext_location() (Document method), 202\\nnextLocation, 524\\nnon-PDF\\nextract image, 57\\n', 'norm() (IRect method), 250\\nnorm() (Matrix method), 258\\nnorm() (Point method), 327\\nnorm() (Rect method), 336\\nnormalize() (IRect method), 250\\nnormalize() (Rect method), 336\\nnumber (Page attribute), 308\\n', 'O\\nobject (built-in variable), 429\\noc\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\n', 'insert_htmlbox, 281\\ninsert_image, 286\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'OCCD (built-in variable), 430\\nOCG (built-in variable), 430\\nOCMD (built-in variable), 430\\nOCPD (built-in variable), 430\\non_state() (Widget method), 384\\nopacity\\ninsert_htmlbox, 281\\n', 'opacity (Annot attribute), 181\\nopacity (TextWriter attribute), 377\\nopen\\nDocument, 193\\nfilename, 193\\nfiletype, 193\\nfontsize, 193\\nheight, 193\\nrect, 193\\nstream, 193\\nwidth, 193\\n', 'Outline (built-in class), 262\\noutline (Document attribute), 233\\noutline_xref() (Document method), 215\\noverlay\\ncommit, 349\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\ninsert_htmlbox, 281\\ninsert_image, 286\\ninsert_text, 280\\ninsert_textbox, 281\\nshow_pdf_page, 302\\n', 'P\\nPage (built-in class), 266\\npage (built-in variable), 429\\npage (linkDest attribute), 256\\npage (Outline attribute), 263\\npage (Shape attribute), 349\\nPage.get_text\\nblocks, 289\\nclip, 289\\ndelimiters, 289\\n', 'Index\\n543\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'dict, 289\\nflags, 289\\nhtml, 289\\njson, 289\\nrawdict, 289\\nsort, 289\\ntext, 289\\ntextpage, 289\\nwords, 289\\nxhtml, 289\\nxml, 289\\n', 'page_count (Document attribute), 236\\npage_cropbox() (Document method), 204\\npage_xref() (Document method), 204\\npageCount, 524\\npageCropBox, 524\\npagelayout (Document attribute), 235\\npagemode (Document attribute), 235\\npages() (Document method), 204\\npagetree (built-in variable), 429\\npageXref, 524\\npaper_rect(), 405\\npaper_size(), 404\\npaper_sizes(), 409\\nPaperRect, 524\\nPaperSize, 524\\npaperSizes, 524\\nparent (Annot attribute), 181\\nparent (Page attribute), 308\\nPartial Pixmaps, 56\\nPDF\\nextract image, 58\\npicture embed, 60\\n', 'pdf_catalog() (Document method), 227\\npdf_trailer() (Document method), 227\\nPDFCatalog, 524\\npdfcolor, 410\\npdfocr_save() (Pixmap method), 318\\npdfocr_tobytes() (Pixmap method), 319\\nPDFTrailer, 524\\npermissions (Document attribute), 235\\nPhotoImage\\nexamples, 63\\n', 'Photoshop\\nexamples, 63\\n', 'picture\\nembed PDF, 60\\n', 'pil_save() (Pixmap method), 319\\npil_tobytes() (Pixmap method), 320\\npillowData, 524\\npillowWrite, 524\\npixel() (Pixmap method), 315\\npixmap\\ninsert_image, 286\\n', 'replace_image, 288\\n', 'Pixmap (built-in class), 312\\nplace() (Story method), 357\\nplanish_line(), 408\\nplanishLine, 524\\nPoint (built-in class), 326\\npoint_like (built-in variable), 427\\npopup_rect (Annot attribute), 184\\npopup_xref (Annot attribute), 183\\nPostscript\\nexamples, 63\\n', 'preRotate, 524\\nprerotate() (Matrix method), 258\\npreScale, 524\\nprescale() (Matrix method), 258\\npreShear, 524\\npreshear() (Matrix method), 258\\npreTranslate, 524\\npretranslate() (Matrix method), 258\\nprev_location() (Document method), 202\\nprevious (Xml attribute), 395\\npreviousLocation, 524\\n', 'Q\\nQuad (built-in class), 329\\nquad (IRect attribute), 250\\nquad (Rect attribute), 337\\nquad_like (built-in variable), 427\\nquads\\nsearch_for, 304\\n', 'R\\nradius\\ndraw_rect, 284\\n', 'rawdict\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'rb (linkDest attribute), 256\\nread_contents() (Page method), 419\\nread_entry() (Archive method), 187\\nreadContents, 524\\nreading order\\ntext, 38\\n', 'recover_char_quad(), 420\\nrecover_line_quad(), 421\\nrecover_quad(), 420\\nrecover_span_quad(), 421\\nrect\\nadd_freetext_annot, 267\\nDocument, 193\\nDocument.layout, 213\\nget_textbox, 290\\ninsert_htmlbox, 281\\nopen, 193\\n', '544\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'rect (Annot attribute), 182\\nRect (built-in class), 333\\nrect (DisplayList attribute), 190\\nrect (IRect attribute), 250\\nrect (Link attribute), 253\\nrect (Page attribute), 308\\nrect (Quad attribute), 329\\nrect (Shape attribute), 350\\nrect (TextPage attribute), 366\\nrect (TextWriter attribute), 377\\nrect (Widget attribute), 386\\nrect_delta (Annot attribute), 184\\nrect_like (built-in variable), 427\\nrectangle\\nextract text, 38\\n', 'reload_page() (Document method), 203\\nremove() (Xml method), 394\\nremove_attribute() (Xml method), 392\\nrender_mode\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\n', 'replace_image\\nfilename, 288\\npixmap, 288\\nstream, 288\\nxref, 288\\n', 'replace_image() (Page method), 288\\nreset() (Story method), 358\\nreset() (Widget method), 385\\nreset_mupdf_warnings() (Tools method), 381\\nresolution\\nimage, 55\\nzoom, 55\\n', 'resolution (built-in variable), 430\\nresolve_names() (Document method), 203\\nresolveLink, 524\\nresources (built-in variable), 428\\nroot (Xml attribute), 395\\nrotate\\nadd_freetext_annot, 267\\nAnnot.update, 179\\nDocument.convert_to_pdf, 205\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\ninsert_htmlbox, 281\\ninsert_image, 286\\ninsert_text, 280, 346\\ninsert_textbox, 281, 347\\nset_rotation, 302\\nshow_pdf_page, 302\\n', 'rotation (Annot attribute), 181\\nrotation (Page attribute), 306\\nrotation_matrix (Page attribute), 308\\nrotationMatrix, 524\\n', 'round() (Rect method), 334\\nrun() (DisplayList method), 189\\nrun() (Page method), 414\\n', 'S\\nsamples (Pixmap attribute), 322\\nsamples_mv (Pixmap attribute), 323\\nsamples_ptr (Pixmap attribute), 323\\nsave\\nexamples, 63, 66\\n', 'save() (Document method), 217\\nsave() (Pixmap method), 318\\nsave_snapshot() (Document method), 233\\nsaveIncr() (Document method), 219\\nscript (Widget attribute), 386\\nscript_blur (Widget attribute), 387\\nscript_calc (Widget attribute), 387\\nscript_change (Widget attribute), 387\\nscript_focus (Widget attribute), 387\\nscript_format (Widget attribute), 387\\nscript_stroke (Widget attribute), 386\\nscrub() (Document method), 217\\nsearch() (TextPage method), 365\\nsearch_for\\nclip, 304\\nflags, 304\\nquads, 304\\ntextpage, 304\\n', 'search_for() (Page method), 304\\nsearch_page_for() (Document method), 220\\nsearchFor, 524\\nsearchPageFor, 524\\nselect() (Document method), 213\\nset_aa_level() (Tools method), 381\\nset_align() (Xml method), 391\\nset_alpha() (Pixmap method), 316\\nset_annot_stem() (Tools method), 379\\nset_artbox() (Page method), 306\\nset_attribute() (Xml method), 391\\nset_bgcolor() (Xml method), 392\\nset_bleedbox() (Page method), 306\\nset_blendmode() (Annot method), 177\\nset_bold() (Xml method), 392\\nset_border() (Annot method), 178\\nset_border() (Link method), 252\\nset_color() (Xml method), 392\\nset_colors() (Annot method), 179\\nset_colors() (Link method), 252\\nset_columns() (Xml method), 392\\nset_contents() (Page method), 418\\nset_cropbox() (Page method), 306\\nset_dpi() (Pixmap method), 316\\nset_flags() (Annot method), 179\\nset_flags() (Link method), 253\\n', 'Index\\n545\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'set_font() (Xml method), 392\\nset_fontsize() (Xml method), 392\\nset_id() (Xml method), 392\\nset_info() (Annot method), 175\\nset_irt_xref() (Annot method), 176\\nset_italic() (Xml method), 393\\nset_layer() (Document method), 198\\nset_layer_ui_config() (Document method), 199\\nset_leading() (Xml method), 393\\nset_line_ends() (Annot method), 175\\nset_lineheight() (Xml method), 393\\nset_margins() (Xml method), 393\\nset_markinfo() (Document method), 214\\nset_mediabox() (Page method), 305\\nset_metadata() (Document method), 213\\nset_name() (Annot method), 177\\nset_oc() (Annot method), 176\\nset_oc() (Document method), 196\\nset_ocmd() (Document method), 197\\nset_opacity() (Annot method), 177\\nset_open() (Annot method), 176\\nset_origin() (Pixmap method), 316\\nset_page_labels() (Document method), 201\\nset_pagebreak_after() (Xml method), 393\\nset_pagebreak_before() (Xml method), 393\\nset_pagelayout() (Document method), 214\\nset_pagemode() (Document method), 214\\nset_pixel() (Pixmap method), 315\\nset_popup() (Annot method), 176\\nset_properties() (Xml method), 393\\nset_rect\\nexamples, 66\\n', 'set_rect() (Annot method), 178\\nset_rect() (Pixmap method), 316\\nset_rotation\\nrotate, 302\\n', 'set_rotation() (Annot method), 178\\nset_rotation() (Page method), 302\\nset_simple\\ninsert_font, 285\\n', 'set_small_glyph_heights() (Tools method), 379\\nset_subset_fontnames() (Tools method), 379\\nset_text_indent() (Xml method), 393\\nset_toc() (Document method), 214\\nset_toc_item() (Document method), 215\\nset_trimbox() (Page method), 306\\nset_xml_metadata() (Document method), 214\\nsetAlpha, 525\\nsetBlendMode, 525\\nsetBorder, 525\\nsetColors, 525\\nsetCropBox, 525\\nsetFlags, 525\\nsetInfo, 525\\n', 'setLanguage, 525\\nsetLineEnds, 525\\nsetMediaBox, 525\\nsetMetadata, 525\\nsetName, 525\\nsetOC, 525\\nsetOpacity, 525\\nsetOrigin, 525\\nsetPixel, 525\\nsetRect, 525\\nsetResolution, 525\\nsetRotation, 525\\nsetToC, 525\\nsetXmlMetadata, 525\\nShape (built-in class), 339\\nshow_aa_level() (Tools method), 380\\nshow_pdf_page\\nclip, 302\\nexamples, 60, 63\\nkeep_proportion, 302\\noverlay, 302\\nrotate, 302\\n', 'show_pdf_page() (Page method), 302\\nshow_progress\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'showPDFpage, 525\\nshrink() (Pixmap method), 315\\nsize (Pixmap attribute), 324\\nsort\\nPage.get_text, 289\\n', 'soundGet, 525\\nsRGB_to_pdf(), 405\\nsRGB_to_rgb(), 405\\nstart_at\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'store_maxsize (Tools attribute), 383\\nstore_shrink() (Tools method), 380\\nstore_size (Tools attribute), 383\\nStory (built-in class), 356\\nStory.FitResult (built-in class), 360\\nstream\\nDocument, 193\\ninsert_image, 286\\nopen, 193\\nreplace_image, 288\\n', 'stream (built-in variable), 429\\nstride (Pixmap attribute), 322\\nstroke_opacity\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\n', '546\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'draw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\ninsert_text, 280, 346\\ninsert_textbox, 281\\n', 'subset_fonts() (Document method), 231\\nSVG\\nvector image, 63\\n', 'switch_layer() (Document method), 196\\n', 'T\\ntable\\nextract, 39\\n', 'tagname (Xml attribute), 395\\ntessdata\\nget_textpage_ocr, 291\\n', 'TESSDATA_PREFIX, 410\\ntext\\nAnnot.get_text, 174\\ninsert_htmlbox, 281\\nkey-value, lookup, 37\\nPage.get_text, 289\\nreading order, 38\\nrectangle, extract, 38\\n', 'text (Xml attribute), 395\\nTEXT_ALIGN_CENTER (built-in variable), 435\\nTEXT_ALIGN_JUSTIFY (built-in variable), 435\\nTEXT_ALIGN_LEFT (built-in variable), 435\\nTEXT_ALIGN_RIGHT (built-in variable), 435\\ntext_color\\nadd_freetext_annot, 267\\nAnnot.update, 179\\n', 'text_color (Widget attribute), 386\\ntext_cont (Shape attribute), 350\\nTEXT_DEHYPHENATE (built-in variable), 436\\ntext_font (Widget attribute), 386\\ntext_fontsize (Widget attribute), 386\\nTEXT_INHIBIT_SPACES (built-in variable), 436\\ntext_length() (Font method), 244\\ntext_maxlen (Widget attribute), 386\\nTEXT_MEDIABOX_CLIP (built-in variable), 436\\nTEXT_PRESERVE_IMAGES (built-in variable), 436\\nTEXT_PRESERVE_LIGATURES (built-in variable), 435\\nTEXT_PRESERVE_SPANS (built-in variable), 436\\nTEXT_PRESERVE_WHITESPACE (built-in variable), 436\\ntext_rect (TextWriter attribute), 377\\ntext_type (Widget attribute), 386\\nTEXTFLAGS_BLOCKS (built-in variable), 436\\nTEXTFLAGS_DICT (built-in variable), 436\\n', 'TEXTFLAGS_HTML (built-in variable), 436\\nTEXTFLAGS_RAWDICT (built-in variable), 436\\nTEXTFLAGS_SEARCH (built-in variable), 437\\nTEXTFLAGS_TEXT (built-in variable), 436\\nTEXTFLAGS_WORDS (built-in variable), 436\\nTEXTFLAGS_XHTML (built-in variable), 436\\nTEXTFLAGS_XML (built-in variable), 437\\ntextpage\\nget_textbox, 290\\nPage.get_text, 289\\nsearch_for, 304\\n', 'TextPage (built-in class), 363\\nTextWriter (built-in class), 374\\ntint_with() (Pixmap method), 314\\ntintWith, 525\\ntitle (Outline attribute), 263\\ntl (IRect attribute), 250\\ntl (Rect attribute), 336\\nto_page\\nDocument.convert_to_pdf, 205\\nDocument.insert_file, 220\\nDocument.insert_pdf, 220\\n', 'tobytes\\nexamples, 63\\n', 'tobytes() (Document method), 219\\ntobytes() (Pixmap method), 318\\nTools (built-in class), 378\\ntop_left (IRect attribute), 250\\ntop_left (Rect attribute), 336\\ntop_right (IRect attribute), 250\\ntop_right (Rect attribute), 336\\ntorect() (IRect method), 249\\ntorect() (Rect method), 335\\ntotalcont (Shape attribute), 350\\ntr (IRect attribute), 250\\ntr (Rect attribute), 336\\ntrailer (built-in variable), 428\\ntransform\\nget_image_bbox, 297\\nget_image_rects, 296\\n', 'transform() (Point method), 327\\ntransform() (Quad method), 329\\ntransform() (Rect method), 334\\ntransformation_matrix (Page attribute), 307\\ntransformationMatrix, 525\\ntrimbox (Page attribute), 307\\ntype (Annot attribute), 182\\n', 'U\\nufilename\\nAnnot.update_file, 181\\nDocument.embfile_add, 224\\nDocument.embfile_upd, 226\\n', 'ul (Quad attribute), 330\\n', 'Index\\n547\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'unicode_to_glyph_name(), 406\\nunicode_to_glyph_name() (Font method), 244\\nunit (Point attribute), 327\\nunitvector (built-in variable), 430\\nunset_quad_corrections() (Tools method), 380\\nupdate() (Annot method), 179\\nupdate() (Widget method), 385\\nupdate_file() (Annot method), 181\\nupdate_link() (Page method), 278\\nupdate_object() (Document method), 227\\nupdate_stream() (Document method), 227\\nupdateLink, 525\\nupdateObject, 525\\nupdateStream, 525\\nur (Quad attribute), 330\\nuri (Link attribute), 253\\nuri (linkDest attribute), 256\\nuri (Outline attribute), 263\\n', 'V\\nvalid_codepoints() (Font method), 243\\nvector\\nimage SVG, 63\\n', 'version (built-in variable), 434\\nversion_count (Document attribute), 235\\nVersionBind (built-in variable), 433\\nVersionDate (built-in variable), 434\\nVersionFitz (built-in variable), 434\\nvertices (Annot attribute), 183\\n', 'W\\nw (Pixmap attribute), 324\\nwarp() (Pixmap method), 320\\nWidget (built-in class), 384\\nwidgets() (Page method), 280\\nwidth\\nDocument.insert_page, 221\\nDocument.layout, 213\\nDocument.new_page, 221\\ndraw_bezier, 284\\ndraw_circle, 283\\ndraw_curve, 284\\ndraw_line, 283\\ndraw_oval, 283\\ndraw_polyline, 284\\ndraw_quad, 284\\ndraw_rect, 284\\ndraw_sector, 283\\ndraw_squiggle, 283\\ndraw_zigzag, 283\\nfinish, 345\\nopen, 193\\n', 'width (IRect attribute), 250\\nwidth (Pixmap attribute), 324\\n', 'width (Quad attribute), 331\\nwidth (Rect attribute), 337\\nwidth (Shape attribute), 350\\nwords\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'wrap_contents() (Page method), 417\\nwrapContents, 525\\nwrite() (Story method), 358\\nwrite_stabilized() (Story static method), 359\\nwrite_stabilized_with_links()\\n(Story\\nstatic\\nmethod), 359\\n', 'write_text() (Page method), 280\\nwrite_text() (TextWriter method), 376\\nwrite_with_links() (Story method), 359\\nwriteImage, 525\\nwritePNG, 525\\nwriteText, 525\\nwrong\\nfile extension, 35\\n', 'X\\nx (Pixmap attribute), 324\\nx (Point attribute), 328\\nx0 (IRect attribute), 251\\nx0 (Rect attribute), 337\\nx1 (IRect attribute), 251\\nx1 (Rect attribute), 337\\nxhtml\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'xml\\nAnnot.get_text, 174\\nPage.get_text, 289\\n', 'Xml (built-in class), 390\\nxml_metadata_xref() (Document method), 413\\nxref\\ndelete_image, 289\\ninsert_image, 286\\nreplace_image, 288\\n', 'xref (Annot attribute), 183\\nxref (built-in variable), 430\\nxref (Link attribute), 254\\nxref (Page attribute), 309\\nxref (Widget attribute), 386\\nxref_copy() (Document method), 228\\nxref_get_key() (Document method), 207\\nxref_get_keys() (Document method), 207\\nxref_length() (Document method), 420\\nxref_object() (Document method), 226\\nxref_set_key() (Document method), 208\\nxref_stream() (Document method), 227\\nxref_stream_raw() (Document method), 227\\nxref_xml_metadata() (Document method), 231\\n', '548\\nIndex\\n', 'PyMuPDF Documentation, Release 1.23.25\\n', 'xrefLength, 525\\nxrefObject, 525\\nxrefs\\nget_image_info, 295\\n', 'xrefStream, 526\\nxrefStreamRaw, 526\\nxres (Pixmap attribute), 324\\n', 'Y\\ny (Pixmap attribute), 324\\ny (Point attribute), 328\\ny0 (IRect attribute), 251\\ny0 (Rect attribute), 337\\ny1 (IRect attribute), 251\\ny1 (Rect attribute), 337\\nyres (Pixmap attribute), 324\\n', 'Z\\nzoom, 55\\n', 'resolution, 55\\n', 'Index\\n549\\n']","PyMuPDF Documentation

Release 1.23.25

Artifex

Feb 21, 2024

ABOUT

1
Features Comparison
3

2
Performance
5

3
License and Copyright
7

4
Installation
9

5
The Basics
15

6
Tutorial
25

7
Opening Files
35

8
Text
37

9
Images
55

10 Annotations
71

11 Drawing and Graphics
81

12 Stories
87

13 Journalling
131

14 Multiprocessing
135

15 Optional Content Support
141

16 Low-Level Interfaces
143

17 Common Issues and their Solutions
153

18 Module fitz
161

19 Classes
173

20 Operator Algebra for Geometry Objects
397

21 Low Level Functions and Classes
403

22 Glossary
427

i

23 Constants and Enumerations
433

24 Color Database
443

25 Appendix 1: Details on Text Extraction
445

26 Appendix 2: Considerations on Embedded Files
453

27 Appendix 3: Assorted Technical Information
455

28 Appendix 4: Performance Comparison Methodology
465

29 Change Log
471

30 Deprecated Names
519

31 Find out about PyMuPDF Utilities
527

32 Do you need PDF to DOCX conversion?
529

Index
531

ii

PyMuPDF Documentation, Release 1.23.25

PyMuPDF is a high-performance Python library for data extraction, analysis, conversion & manipulation of PDF (and
other) documents.

PyMuPDF is hosted on GitHub and registered on PyPI.

This documentation covers all versions up to 1.23.25.

ABOUT
1

PyMuPDF Documentation, Release 1.23.25

2
ABOUT

CHAPTER

ONE

FEATURES COMPARISON

1.1 Feature Matrix

The following table illustrates how PyMuPDF compares with other typical solutions.

3

PyMuPDF Documentation, Release 1.23.25

4
Chapter 1. Features Comparison

CHAPTER

TWO

PERFORMANCE

To benchmark PyMuPDF performance against a range of tasks a test suite with a fixed set of 8 PDFs with a total of
7,031 pages containing text & images is used to obtain performance timings.

Here are current results, grouped by task:

Note:
For more detail regarding the methodology for these performance timings see: Performance Comparison
Methodology.

5

PyMuPDF Documentation, Release 1.23.25

6
Chapter 2. Performance

CHAPTER

THREE

LICENSE AND COPYRIGHT

PyMuPDF and MuPDF are now available under both, open-source AGPL and commercial license agreements. Please
read the full text of the AGPL license agreement, available in the distribution material (file COPYING) and here, to
ensure that your use case complies with the guidelines of the license. If you determine you cannot meet the requirements
of the AGPL, please contact Artifex for more information regarding a commercial license.

Artifex is the exclusive commercial licensing agent for MuPDF.

Artifex, the Artifex logo, MuPDF, and the MuPDF logo are registered trademarks of Artifex Software Inc.

This documentation covers PyMuPDF v1.23.25 features as of 2024-02-20 00:00:01.

The major and minor versions of PyMuPDF and MuPDF will always be the same. Only the third qualifier (patch
level) may deviate from that of MuPDF.

This documentation covers all versions up to 1.23.25.

7

PyMuPDF Documentation, Release 1.23.25

8
Chapter 3. License and Copyright

CHAPTER

FOUR

INSTALLATION

4.1 Requirements

All the examples below assume that you are running inside a Python virtual environment. See: https://docs.python.
org/3/library/venv.html for details. We also assume that pip is up to date.

For example:

• Windows:

py -m venv pymupdf-venv
.\\pymupdf-venv\\Scripts\\activate
python -m pip install --upgrade pip

• Linux, MacOS:

python -m venv pymupdf-venv
. pymupdf-venv/bin/activate
python -m pip install --upgrade pip

4.2 Installation

PyMuPDF should be installed using pip with:

pip install --upgrade pymupdf

This will install from a Python wheel if one is available for your platform.

4.3 Installation when a suitable wheel is not available

If a suitable Python wheel is not available, pip will automatically build from source using a Python sdist.

This requires C/C++ development tools to be installed:

• On Windows:

– Install Visual Studio 2019.
If not installed in a standard location, set environmental variable
PYMUPDF_SETUP_DEVENV to the location of the devenv.com binary.

– Having other installed versions of Visual Studio, for example Visual Studio 2022, can cause problems
because one can end up with MuPDF and PyMuPDF code being compiled with different compiler versions.

9

PyMuPDF Documentation, Release 1.23.25

As of PyMuPDF-1.20.0, the required MuPDF source code is already in the sdist and is automatically built into
PyMuPDF.

4.4 Problems after installation

• On Windows ImportError:
DLL load failed while importing _fitz.

This has been occasionally seen if MSVCP140.dll is missing, and appears to be caused by a bug in some versions
(2015-2017) of Microsoft Visual C++ Redistributables.

It is recommended to search for MSVCP140.dll in https://msdn.com to find instructions for how to reinstall
it. For example https://learn.microsoft.com/cpp/windows/latest-supported-vc-redist has permalinks to the latest
supported versions.

See https://github.com/pymupdf/PyMuPDF/issues/2678 for more details.

4.5 Notes

Wheels are available for Windows (32-bit Intel, 64-bit Intel), Linux (64-bit Intel, 64-bit ARM) and Mac OSX (64-bit
Intel, 64-bit ARM), Python versions 3.7 and up.

Wheels are not available for Python installed with Chocolatey on Windows. Instead install Python using the Windows
installer from the python.org website, see: http://www.python.org/downloads

PyMuPDF does not support Python versions prior to 3.8. Older wheels can be found in this repository and on PyPI.
Please note that we generally follow the official Python release schedules. For Python versions dropping out of official
support this means, that generation of wheels will also be ceased for them.

There are no mandatory external dependencies. However, some optional feature are available only if additional com-
ponents are installed:

• Pillow is required for Pixmap.pil_save() and Pixmap.pil_tobytes().

• fontTools is required for Document.subset_fonts().

• pymupdf-fonts is a collection of nice fonts to be used for text output methods.

• Tesseract-OCR for optical character recognition in images and document pages. Tesseract is separate software,
not a Python package. To enable OCR functions in PyMuPDF, the software must be installed and the system envi-
ronment variable ""TESSDATA_PREFIX"" must be defined and contain the tessdata folder name of the Tesseract
installation location. See below.

Note: You can install these additional components at any time – before or after installing PyMuPDF. PyMuPDF will
detect their presence during import or when the respective functions are being used.

10
Chapter 4. Installation

PyMuPDF Documentation, Release 1.23.25

4.6 Build and install from local PyMuPDF checkout and optional local
MuPDF checkout

• Install C/C++ development tools as described above.

• Enter a Python venv and update pip, as described above.

• Get a PyMuPDF source tree:

– Clone the PyMuPDF git repository:

git clone https://github.com/pymupdf/PyMuPDF.git

– Or download and extract a .zip or .tar.gz source release from https://github.com/pymupdf/PyMuPDF/
releases.

• Build and install PyMuPDF:

cd PyMuPDF && pip install .

This will automatically download a specific hard-coded MuPDF source release, and build it into PyMuPDF.

Build and install PyMuPDF using a local MuPDF source tree:

• Clone the MuPDF git repository:

git clone --recursive https://ghostscript.com:/home/git/mupdf.git

• Build PyMuPDF, specifying the location of the local MuPDF tree with the environmental variables
PYMUPDF_SETUP_MUPDF_BUILD:

cd PyMuPDF && PYMUPDF_SETUP_MUPDF_BUILD=../mupdf pip install .

Building for different Python versions in same PyMuPDF tree:

• PyMuPDF will build for the version of Python that is being used to run pip. To run pip with a specific Python
version, use python -m pip instead of pip.

So for example on Windows one can build different versions with:

cd PyMuPDF && py -3.9 -m pip install .

or:

cd PyMuPDF && py -3.10-32 -m pip install .

Note:
When running Python scripts that use PyMuPDF, make sure that the current directory is not the PyMuPDF/
directory.

Otherwise, confusingly, Python will attempt to import fitz from the local fitz/ directory, which will fail because it
only contains source files.

4.6. Build and install from local PyMuPDF checkout and optional local MuPDF checkout
11

PyMuPDF Documentation, Release 1.23.25

4.7 Running tests

Having a PyMuPDF tree available allows one to run PyMuPDF’s pytest test suite:

pip install pytest fontTools
pytest PyMuPDF/tests

4.7.1 Notes about using a non-default MuPDF

Using a non-default build of MuPDF by setting environmental variable PYMUPDF_SETUP_MUPDF_BUILD can cause
various things to go wrong and so is not generally supported:

• If MuPDF’s major version number differs from what PyMuPDF uses by default, PyMuPDF can fail to build,
because MuPDF’s API can change between major versions.

• Runtime behaviour of PyMuPDF can change because MuPDF’s runtime behaviour changes between different
minor releases. This can also break some PyMuPDF tests.

• If MuPDF was built with its default config instead of PyMuPDF’s customised config (for example if MuPDF is
a system install), it is possible that tests/test_textbox.py:test_textbox3() will fail. One can skip this
particular test by adding -k 'not test_textbox3' to the pytest command line.

4.8 Packaging

See packaging.

4.9 Enabling Integrated OCR Support

If you do not intend to use this feature, skip this step. Otherwise, it is required for both installation paths: from wheels
and from sources.

PyMuPDF will already contain all the logic to support OCR functions. But it additionally does need Tesseract’s lan-
guage support data, so installation of Tesseract-OCR is still required.

The language support folder location must be communicated either via storing it in the environment variable
""TESSDATA_PREFIX"", or as a parameter in the applicable functions.

So for a working OCR functionality, make sure to complete this checklist:

1. Install Tesseract.

2. Locate Tesseract’s language support folder. Typically you will find it here:

• Windows: C:/Program Files/Tesseract-OCR/tessdata

• Unix systems: /usr/share/tesseract-ocr/4.00/tessdata

3. Set the environment variable TESSDATA_PREFIX

• Windows: setx TESSDATA_PREFIX ""C:/Program Files/Tesseract-OCR/tessdata""

• Unix systems: declare -x TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata

12
Chapter 4. Installation

PyMuPDF Documentation, Release 1.23.25

Note:
On Windows systems, this must happen outside Python – before starting your script. Just manipulating os.
environ will not work!

This documentation covers all versions up to 1.23.25.

4.9. Enabling Integrated OCR Support
13

PyMuPDF Documentation, Release 1.23.25

14
Chapter 4. Installation

CHAPTER

FIVE

THE BASICS

5.1 Opening a File

To open a file, do the following:

Note: Taking it further

See the list of supported file types and The How to Guide on Opening Files for more advanced options.

5.2 Extract text from a PDF

To extract all the text from a PDF file, do the following:

Note: Taking it further

There are many more examples which explain how to extract text from specific areas or how to extract tables from
documents. Please refer to the How to Guide for Text.

API reference

• Page.get_text()

5.3 Extract images from a PDF

To extract all the images from a PDF file, do the following:

Note: Taking it further

There are many more examples which explain how to extract text from specific areas or how to extract tables from
documents. Please refer to the How to Guide for Text.

API reference

• Page.get_images()

15

PyMuPDF Documentation, Release 1.23.25

• Pixmap

5.4 Merging PDF files

To merge PDF files, do the following:

5.4.1 Merging PDF files with other types of file

With Document.insert_file() you can invoke the method to merge supported files with PDF. For example:

Note: Taking it further

It is easy to join PDFs with Document.insert_pdf() & Document.insert_file(). Given open PDF documents,
you can copy page ranges from one to the other. You can select the point where the copied pages should be placed, you
can revert the page sequence and also change page rotation. This Wiki article contains a full description.

The GUI script join.py uses this method to join a list of files while also joining the respective table of contents segments.
It looks like this:

API reference

• Document.insert_pdf()

• Document.insert_file()

16
Chapter 5. The Basics

PyMuPDF Documentation, Release 1.23.25

5.5 Working with Coordinates

There is one mathematical term that you should feel comfortable with when using PyMuPDF - “coordinates”. Please
have a quick look at the Coordinates section to understand the coordinate system to help you with positioning objects
and understand your document space.

5.6 Adding a watermark to a PDF

To add a watermark to a PDF file, do the following:

Note: Taking it further

Adding watermarks is essentially as simple as adding an image at the base of each PDF page. You should ensure that
the image has the required opacity and aspect ratio to make it look the way you need it to.

In the example above a new image is created from each file reference, but to be more performant (by saving mem-
ory and file size) this image data should be referenced only once - see the code example and explanation on Page.
insert_image() for the implementation.

API reference

• Page.bound()

• Page.insert_image()

5.7 Adding an image to a PDF

To add an image to a PDF file, for example a logo, do the following:

Note: Taking it further

As with the watermark example you should ensure to be more performant by only referencing the image once if possible
- see the code example and explanation on Page.insert_image().

API reference

• Rect

• Page.insert_image()

5.5. Working with Coordinates
17

PyMuPDF Documentation, Release 1.23.25

5.8 Rotating a PDF

To add a rotation to a page, do the following:

Note: API reference

• Page.set_rotation()

5.9 Cropping a PDF

To crop a page to a defined Rect, do the following:

Note: API reference

• Page.set_cropbox()

5.10 Attaching Files

To attach another file to a page, do the following:

Note: Taking it further

When adding the file with Page.add_file_annot() note that the third parameter for the filename should include
the actual file extension. Without this the attachment possibly will not be able to be recognized as being something
which can be opened. For example, if the filename is just “attachment” when view the resulting PDF and attempting
to open the attachment you may well get an error. However, with “attachment.pdf” this can be recognized and opened
by PDF viewers as a valid file type.

The default icon for the attachment is by default a “push pin”, however you can change this by setting the icon param-
eter.

API reference

• Point

• Document.tobytes()

• Page.add_file_annot()

18
Chapter 5. The Basics

PyMuPDF Documentation, Release 1.23.25

5.11 Embedding Files

To embed a file to a document, do the following:

Note: Taking it further

As with attaching files, when adding the file with Document.embfile_add() note that the first parameter for the
filename should include the actual file extension.

API reference

• Document.tobytes()

• Document.embfile_add()

5.12 Deleting Pages

To delete a page from a document, do the following:

To delete a multiple pages from a document, do the following:

Note: Taking it further

The page index is zero-based, so to delete page 10 of a document you would do the following doc.delete_page(9).

Similarly, doc.delete_pages(from_page=9, to_page=14) will delete pages 10 - 15 inclusive.

API reference

• Document.delete_page()

• Document.delete_pages()

5.13 Re-Arranging Pages

To re-arrange pages, do the following:

Note: API reference

• Document.move_page()

5.11. Embedding Files
19

PyMuPDF Documentation, Release 1.23.25

5.14 Copying Pages

To copy pages, do the following:

Note: API reference

• Document.copy_page()

5.15 Selecting Pages

To select pages, do the following:

Note: Taking it further

With PyMuPDF you have all options to copy, move, delete or re-arrange the pages of a PDF. Intuitive methods exist
that allow you to do this on a page-by-page level, like the Document.copy_page() method.

Or you alternatively prepare a complete new page layout in form of a Python sequence, that contains the page numbers
you want, in the sequence you want, and as many times as you want each page. The following may illustrate what can
be done with Document.select()

Now let’s prepare a PDF for double-sided printing (on a printer not directly supporting this):

The number of pages is given by len(doc) (equal to doc.page_count). The following lists represent the even and
the odd page numbers, respectively:

This snippet creates the respective sub documents which can then be used to print the document:

For more information also have a look at this Wiki article.

The following example will reverse the order of all pages (extremely fast: sub-second time for the 756 pages of the
Adobe PDF References):

This snippet duplicates the PDF with itself so that it will contain the pages 0, 1, ..., n, 0, 1, ..., n (extremely fast and
without noticeably increasing the file size!):

API reference

• Document.select()

5.16 Adding Blank Pages

To add a blank page, do the following:

Note: Taking it further

Use this to create the page with another pre-defined paper format:

20
Chapter 5. The Basics

PyMuPDF Documentation, Release 1.23.25

The convenience function paper_size() knows over 40 industry standard paper formats to choose from. To see them,
inspect dictionary paperSizes. Pass the desired dictionary key to paper_size() to retrieve the paper dimensions.
Upper and lower case is supported. If you append “-L” to the format name, the landscape version is returned.

Here is a 3-liner that creates a PDF: with one empty page. Its file size is 460 bytes:

API reference

• Document.new_page()

• paperSizes

5.17 Inserting Pages with Text Content

Using the Document.insert_page() method also inserts a new page and accepts the same width and height
parameters. But it lets you also insert arbitrary text into the new page and returns the number of inserted lines.

Note: Taking it further

The text parameter can be a (sequence of) string (assuming UTF-8 encoding). Insertion will start at Point (50, 72),
which is one inch below top of page and 50 points from the left. The number of inserted text lines is returned.

API reference

• Document.insert_page()

5.18 Splitting Single Pages

This deals with splitting up pages of a PDF in arbitrary pieces. For example, you may have a PDF with Letter format
pages which you want to print with a magnification factor of four: each page is split up in 4 pieces which each going
to a separate PDF page in Letter format again.

Example:

Note: API reference

• Page.cropbox_position()

• Page.show_pdf_page()

5.17. Inserting Pages with Text Content
21

PyMuPDF Documentation, Release 1.23.25

5.19 Combining Single Pages

This deals with joining PDF pages to form a new PDF with pages each combining two or four original ones (also
called “2-up”, “4-up”, etc.). This could be used to create booklets or thumbnail-like overviews.

Example:

Note: API reference

• Page.cropbox_position()

• Page.show_pdf_page()

5.20 PDF Encryption & Decryption

Starting with version 1.16.0, PDF decryption and encryption (using passwords) are fully supported. You can do the
following:

• Check whether a document is password protected / (still) encrypted (Document.needs_pass, Document.
is_encrypted).

• Gain access authorization to a document (Document.authenticate()).

• Set encryption details for PDF files using Document.save() or Document.write() and

– decrypt or encrypt the content

– set password(s)

– set the encryption method

– set permission details

Note: A PDF document may have two different passwords:

• The owner password provides full access rights, including changing passwords, encryption method, or permis-
sion detail.

• The user password provides access to document content according to the established permission details. If
present, opening the PDF in a viewer will require providing it.

Method Document.authenticate() will automatically establish access rights according to the password used.

22
Chapter 5. The Basics

PyMuPDF Documentation, Release 1.23.25

The following snippet creates a new PDF and encrypts it with separate user and owner passwords. Permissions are
granted to print, copy and annotate, but no changes are allowed to someone authenticating with the user password.

Note: Taking it further

Opening this document with some viewer (Nitro Reader 5) reflects these settings:

Decrypting will automatically happen on save as before when no encryption parameters are provided.

To keep the encryption method of a PDF save it using encryption=fitz.PDF_ENCRYPT_KEEP. If doc.
can_save_incrementally() == True, an incremental save is also possible.

To change the encryption method specify the full range of options above (encryption, owner_pw, user_pw,
permissions). An incremental save is not possible in this case.

5.20. PDF Encryption & Decryption
23

PyMuPDF Documentation, Release 1.23.25

API reference

• Document.save()

5.21 Extracting Tables from a Page

Tables can be found and extracted from any document Page.

Note: API reference

• Page.find_tables()

Important: There is also the pdf2docx extract tables method which is capable of table extraction if you prefer.

5.22 Getting Page Links

Links can be extracted from a Page to return Link objects.

Note: API reference

• Page.first_link()

5.23 Getting All Annotations from a Document

Annotations (Annot) on pages can be retrieved with the page.annots() method.

Note: API reference

• Page.annots()

5.24 Converting PDF Documents

We recommend the pdf2docx library which uses PyMuPDF and the python-docx library to provide simple document
conversion from PDF to DOCX format.

This documentation covers all versions up to 1.23.25.

24
Chapter 5. The Basics

CHAPTER

SIX

TUTORIAL

This tutorial will show you the use of PyMuPDF, MuPDF in Python, step by step.

Because MuPDF supports not only PDF, but also XPS, OpenXPS, CBZ, CBR, FB2 and EPUB formats, so does
PyMuPDF1. Nevertheless, for the sake of brevity we will only talk about PDF files. At places where indeed only
PDF files are supported, this will be mentioned explicitly.

6.1 Importing the Bindings

The Python bindings to MuPDF are made available by this import statement. We also show here how your version can
be checked:

>>> import fitz
>>> print(fitz.__doc__)
PyMuPDF 1.16.0: Python bindings for the MuPDF 1.16.0 library.
Version date: 2019-07-28 07:30:14.
Built for Python 3.7 on win32 (64-bit).

6.1.1 Note on the Name fitz

The top level Python import name for this library is “fitz”. This has historical reasons:

The original rendering library for MuPDF was called Libart.

“After Artifex Software acquired the MuPDF project, the development focus shifted on writing a new modern graphics
library called “Fitz”. Fitz was originally intended as an R&D project to replace the aging Ghostscript graphics library,
but has instead become the rendering engine powering MuPDF.” (Quoted from Wikipedia).

Note: So PyMuPDF cannot coexist with packages named “fitz” in the same Python environment.

1 PyMuPDF lets you also open several image file types just like normal documents. See section Supported Input Image Formats in chapter

Pixmap for more comments.

25

PyMuPDF Documentation, Release 1.23.25

6.2 Opening a Document

To access a supported document, it must be opened with the following statement:

doc = fitz.open(filename)
# or fitz.Document(filename)

This creates the Document object doc. filename must be a Python string (or a pathlib.Path) specifying the name of
an existing file.

It is also possible to open a document from memory data, or to create a new, empty PDF. See Document for details.
You can also use Document as a context manager.

A document contains many attributes and functions. Among them are meta information (like “author” or “subject”),
number of total pages, outline and encryption information.

6.3 Some Document Methods and Attributes

Method / Attribute
Description

Document.page_count
the number of pages (int)

Document.metadata
the metadata (dict)

Document.get_toc()
get the table of contents (list)

Document.load_page()
read a Page

6.4 Accessing Meta Data

PyMuPDF fully supports standard metadata. Document.metadata is a Python dictionary with the following keys. It
is available for all document types, though not all entries may always contain data. For details of their meanings and
formats consult the respective manuals, e.g. Adobe PDF References for PDF. Further information can also be found in
chapter Document. The meta data fields are strings or None if not otherwise indicated. Also be aware that not all of
them always contain meaningful data – even if they are not None.

Key
Value

producer
producer (producing software)

format
format: ‘PDF-1.4’, ‘EPUB’, etc.

encryption
encryption method used if any

author
author

modDate
date of last modification

keywords
keywords

title
title

creationDate
date of creation

creator
creating application

subject
subject

Note: Apart from these standard metadata, PDF documents starting from PDF version 1.4 may also contain so-called
“metadata streams” (see also stream). Information in such streams is coded in XML. PyMuPDF deliberately contains
no XML components for this purpose (the PyMuPDF Xml class is a helper class intended to access the DOM content
of a Story object), so we do not directly support access to information contained therein. But you can extract the stream

26
Chapter 6. Tutorial

PyMuPDF Documentation, Release 1.23.25

as a whole, inspect or modify it using a package like lxml and then store the result back into the PDF. If you want, you
can also delete this data altogether.

Note: There are two utility scripts in the repository that metadata import (PDF only) resp. metadata export metadata
from resp. to CSV files.

6.5 Working with Outlines

The easiest way to get all outlines (also called “bookmarks”) of a document, is by loading its table of contents:

toc = doc.get_toc()

This will return a Python list of lists [[lvl, title, page, ...], ...] which looks much like a conventional table of contents
found in books.

lvl is the hierarchy level of the entry (starting from 1), title is the entry’s title, and page the page number (1-based!).
Other parameters describe details of the bookmark target.

Note: There are two utility scripts in the repository that toc import (PDF only) resp. toc export table of contents from
resp. to CSV files.

6.6 Working with Pages

Page handling is at the core of MuPDF’s functionality.

• You can render a page into a raster or vector (SVG) image, optionally zooming, rotating, shifting or shearing it.

• You can extract a page’s text and images in many formats and search for text strings.

• For PDF documents many more methods are available to add text or images to pages.

First, a Page must be created. This is a method of Document:

page = doc.load_page(pno)
# loads page number 'pno' of the document (0-based)

page = doc[pno]
# the short form

Any integer -∞ < pno < page_count is possible here. Negative numbers count backwards from the end, so doc[-1]
is the last page, like with Python sequences.

Some more advanced way would be using the document as an iterator over its pages:

for page in doc:

# do something with 'page'

# ... or read backwards
for page in reversed(doc):

# do something with 'page'

# ... or even use 'slicing'

(continues on next page)

6.5. Working with Outlines
27

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

for page in doc.pages(start, stop, step):

# do something with 'page'

Once you have your page, here is what you would typically do with it:

6.6.1 Inspecting the Links, Annotations or Form Fields of a Page

Links are shown as “hot areas” when a document is displayed with some viewer software. If you click while your cursor
shows a hand symbol, you will usually be taken to the target that is encoded in that hot area. Here is how to get all
links:

# get all links on a page
links = page.get_links()

links is a Python list of dictionaries. For details see Page.get_links().

You can also use an iterator which emits one link at a time:

for link in page.links():

# do something with 'link'

If dealing with a PDF document page, there may also exist annotations (Annot) or form fields (Widget), each of which
have their own iterators:

for annot in page.annots():

# do something with 'annot'

for field in page.widgets():

# do something with 'field'

6.6.2 Rendering a Page

This example creates a raster image of a page’s content:

pix = page.get_pixmap()

pix is a Pixmap object which (in this case) contains an RGB image of the page, ready to be used for many pur-
poses. Method Page.get_pixmap() offers lots of variations for controlling the image: resolution / DPI, colorspace
(e.g. to produce a grayscale image or an image with a subtractive color scheme), transparency, rotation, mirroring,
shifting, shearing, etc. For example: to create an RGBA image (i.e. containing an alpha channel), specify pix =
page.get_pixmap(alpha=True).

A Pixmap contains a number of methods and attributes which are referenced below. Among them are the integers
width, height (each in pixels) and stride (number of bytes of one horizontal image line). Attribute samples represents
a rectangular area of bytes representing the image data (a Python bytes object).

Note: You can also create a vector image of a page by using Page.get_svg_image(). Refer to this Vector Image
Support page for details.

28
Chapter 6. Tutorial

PyMuPDF Documentation, Release 1.23.25

6.6.3 Saving the Page Image in a File

We can simply store the image in a PNG file:

pix.save(""page-%i.png"" % page.number)

6.6.4 Displaying the Image in GUIs

We can also use it in GUI dialog managers. Pixmap.samples represents an area of bytes of all the pixels as a Python
bytes object. Here are some examples, find more in the examples directory.

wxPython

Consult their documentation for adjustments to RGB(A) pixmaps and, potentially, specifics for your wxPython release:

if pix.alpha:
bitmap = wx.Bitmap.FromBufferRGBA(pix.width, pix.height, pix.samples)

else:
bitmap = wx.Bitmap.FromBuffer(pix.width, pix.height, pix.samples)

Tkinter

Please also see section 3.19 of the Pillow documentation:

from PIL import Image, ImageTk

# set the mode depending on alpha
mode = ""RGBA"" if pix.alpha else ""RGB""
img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)
tkimg = ImageTk.PhotoImage(img)

The following avoids using Pillow:

# remove alpha if present
pix1 = fitz.Pixmap(pix, 0) if pix.alpha else pix
# PPM does not support transparency

imgdata = pix1.tobytes(""ppm"")
# extremely fast!

tkimg = tkinter.PhotoImage(data = imgdata)

If you are looking for a complete Tkinter script paging through any supported document, here it is!. It can also zoom
into pages, and it runs under Python 2 or 3. It requires the extremely handy PySimpleGUI pure Python package.

PyQt4, PyQt5, PySide

Please also see section 3.16 of the Pillow documentation:

from PIL import Image, ImageQt

# set the mode depending on alpha
mode = ""RGBA"" if pix.alpha else ""RGB""
img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)
qtimg = ImageQt.ImageQt(img)

6.6. Working with Pages
29

PyMuPDF Documentation, Release 1.23.25

Again, you also can get along without using Pillow. Qt’s QImage luckily supports native Python pointers, so the
following is the recommended way to create Qt images:

from PyQt5.QtGui import QImage

# set the correct QImage format depending on alpha
fmt = QImage.Format_RGBA8888 if pix.alpha else QImage.Format_RGB888
qtimg = QImage(pix.samples_ptr, pix.width, pix.height, fmt)

6.6.5 Extracting Text and Images

We can also extract all text, images and other information of a page in many different forms, and levels of detail:

text = page.get_text(opt)

Use one of the following strings for opt to obtain different formats2:

• “text”: (default) plain text with line breaks. No formatting, no text position details, no images.

• “blocks”: generate a list of text blocks (= paragraphs).

• “words”: generate a list of words (strings not containing spaces).

• “html”: creates a full visual version of the page including any images. This can be displayed with your internet
browser.

• “dict” / “json”: same information level as HTML, but provided as a Python dictionary or resp. JSON string.
See TextPage.extractDICT() for details of its structure.

• “rawdict” / “rawjson”: a super-set of “dict” / “json”. It additionally provides character detail information like
XML. See TextPage.extractRAWDICT() for details of its structure.

• “xhtml”: text information level as the TEXT version but includes images. Can also be displayed by internet
browsers.

• “xml”: contains no images, but full position and font information down to each single text character. Use an
XML module to interpret.

To give you an idea about the output of these alternatives, we did text example extracts. See Appendix 2: Considerations
on Embedded Files.

6.6.6 Searching for Text

You can find out, exactly where on a page a certain text string appears:

areas = page.search_for(""mupdf"")

This delivers a list of rectangles (see Rect), each of which surrounds one occurrence of the string “mupdf” (case
insensitive). You could use this information to e.g. highlight those areas (PDF only) or create a cross reference of the
document.

Please also do have a look at chapter Working together: DisplayList and TextPage and at demo programs demo.py and
demo-lowlevel.py. Among other things they contain details on how the TextPage, Device and DisplayList classes can
be used for a more direct control, e.g. when performance considerations suggest it.

2 Page.get_text() is a convenience wrapper for several methods of another PyMuPDF class, TextPage. The names of these methods correspond
to the argument string passed to Page.get_text() : Page.get_text(“dict”) is equivalent to TextPage.extractDICT() .

30
Chapter 6. Tutorial

PyMuPDF Documentation, Release 1.23.25

6.7 Stories: Generating PDF from HTML Source

The Story class is a new feature of PyMuPDF version 1.21.0. It represents support for MuPDF’s “story” interface.

The following is a quote from the book “MuPDF Explored” by Robin Watts from Artifex:

Stories provide a way to easily layout styled content for use with devices, such as those offered by Document Writers
(...). The concept of a story comes from desktop publishing, which in turn (...) gets it from newspapers. If you consider
a traditional newspaper layout, it will consist of various news articles (stories) that are laid out into multiple columns,
possibly across multiple pages.

Accordingly, MuPDF uses a story to represent a flow of text with styling information. The user of the story can then
supply a sequence of rectangles into which the story will be laid out, and the positioned text can then be drawn to an
output device. This keeps the concept of the text itself (the story) to be separated from the areas into which the text
should be flowed (the layout).

Note: A Story works somewhat similar to an internet browser: It faithfully parses and renders HTML hypertext and
also optional stylesheets (CSS). But its output is a PDF – not web pages.

When creating a Story, the input from up to three different information sources is taken into account. All these items
are optional.

1. HTML source code, either a Python string or created by the script using methods of Xml.

2. CSS (Cascaded Style Sheet) source code, provided as a Python string. CSS can be used to provide styling
information (text font size, color, etc.) like it would happen for web pages. Obviously, this string may also be
read from a file.

3. An Archive must be used whenever the DOM references images, or uses text fonts except the standard PDF Base
14 Fonts, CJK fonts and the NOTO fonts generated into the PyMuPDF binary.

The API allows creating DOMs completely from scratch, including desired styling information. It can also be used to
modify or extend provided HTML: text can be deleted or replaced, or its styling can be changed. Text – for example
extracted from databases – can also be added and fill template-like HTML documents.

It is not required to provide syntactically complete HTML documents: snippets like <b>Hello are fully accepted, and
many / most syntax errors are automatically corrected.

After the HTML is considered complete, it can be used to create a PDF document. This happens via the new Docu-
mentWriter class. The programmer calls its methods to create a new empty page, and passes rectangles to the Story to
fill them.

The story in turn will return completion codes indicating whether or not more content is waiting to be written. Which
part of the content will land in which rectangle or on which page is automatically determined by the story itself – it
cannot be influenced other than by providing the rectangles.

Please see the Stories recipes for a number of typical use cases.

6.7. Stories: Generating PDF from HTML Source
31

PyMuPDF Documentation, Release 1.23.25

6.8 PDF Maintenance

PDFs are the only document type that can be modified using PyMuPDF. Other file types are read-only.

However, you can convert any document (including images) to a PDF and then apply all PyMuPDF features to the con-
version result. Find out more here Document.convert_to_pdf(), and also look at the demo script pdf-converter.py
which can convert any supported document to PDF.

Document.save() always stores a PDF in its current (potentially modified) state on disk.

You normally can choose whether to save to a new file, or just append your modifications to the existing one (“incre-
mental save”), which often is very much faster.

The following describes ways how you can manipulate PDF documents. This description is by no means complete:
much more can be found in the following chapters.

6.8.1 Modifying, Creating, Re-arranging and Deleting Pages

There are several ways to manipulate the so-called page tree (a structure describing all the pages) of a PDF:

Document.delete_page() and Document.delete_pages() delete pages.

Document.copy_page(), Document.fullcopy_page() and Document.move_page() copy or move a page to
other locations within the same document.

Document.select() shrinks a PDF down to selected pages. Parameter is a sequence3 of the page numbers that you
want to keep. These integers must all be in range 0 <= i < page_count. When executed, all pages missing in this list
will be deleted. Remaining pages will occur in the sequence and as many times (!) as you specify them.

So you can easily create new PDFs with

• the first or last 10 pages,

• only the odd or only the even pages (for doing double-sided printing),

• pages that do or don’t contain a given text,

• reverse the page sequence, ...

... whatever you can think of.

The saved new document will contain links, annotations and bookmarks that are still valid (i.a.w. either pointing to a
selected page or to some external resource).

Document.insert_page() and Document.new_page() insert new pages.

Pages themselves can moreover be modified by a range of methods (e.g. page rotation, annotation and link maintenance,
text and image insertion).

3 “Sequences” are Python objects conforming to the sequence protocol. These objects implement a method named __getitem__(). Best known
examples are Python tuples and lists. But array.array, numpy.array and PyMuPDF’s “geometry” objects (Operator Algebra for Geometry Objects)
are sequences, too. Refer to Using Python Sequences as Arguments in PyMuPDF for details.

32
Chapter 6. Tutorial

PyMuPDF Documentation, Release 1.23.25

6.8.2 Joining and Splitting PDF Documents

Method Document.insert_pdf() copies pages between different PDF documents. Here is a simple joiner example
(doc1 and doc2 being opened PDFs):

# append complete doc2 to the end of doc1
doc1.insert_pdf(doc2)

Here is a snippet that splits doc1. It creates a new document of its first and its last 10 pages:

doc2 = fitz.open()
# new empty PDF

doc2.insert_pdf(doc1, to_page = 9)
# first 10 pages

doc2.insert_pdf(doc1, from_page = len(doc1) - 10) # last 10 pages
doc2.save(""first-and-last-10.pdf"")

More can be found in the Document chapter. Also have a look at PDFjoiner.py.

6.8.3 Embedding Data

PDFs can be used as containers for arbitrary data (executables, other PDFs, text or binary files, etc.) much like ZIP
archives.

PyMuPDF fully supports this feature via Document embfile_* methods and attributes. For some detail read Appendix
3, consult the Wiki on dealing with embedding files, or the example scripts embedded-copy.py, embedded-export.py,
embedded-import.py, and embedded-list.py.

6.8.4 Saving

As mentioned above, Document.save() will always save the document in its current state.

You can write changes back to the original PDF by specifying option incremental=True. This process is (usually)
extremely fast, since changes are appended to the original file without completely rewriting it.

Document.save() options correspond to options of MuPDF’s command line utility mutool clean, see the following
table.

Save Option
mutool
Effect

garbage=1
g
garbage collect unused objects

garbage=2
gg
in addition to 1, compact xref tables

garbage=3
ggg
in addition to 2, merge duplicate objects

garbage=4
gggg
in addition to 3, merge duplicate stream content

clean=True
cs
clean and sanitize content streams

deflate=True
z
deflate uncompressed streams

deflate_images=True
i
deflate image streams

deflate_fonts=True
f
deflate fontfile streams

ascii=True
a
convert binary data to ASCII format

linear=True
l
create a linearized version

expand=True
d
decompress all streams

Note: For an explanation of terms like object, stream, xref consult the Glossary chapter.

6.8. PDF Maintenance
33

PyMuPDF Documentation, Release 1.23.25

For example, mutool clean -ggggz file.pdf yields excellent compression results. It corresponds to doc.save(filename,
garbage=4, deflate=True).

6.9 Closing

It is often desirable to “close” a document to relinquish control of the underlying file to the OS, while your program
continues.

This can be achieved by the Document.close() method. Apart from closing the underlying file, buffer areas associated
with the document will be freed.

6.10 Further Reading

Also have a look at PyMuPDF’s Wiki pages. Especially those named in the sidebar under title “Recipes” cover over
15 topics written in “How-To” style.

This document also contains a FAQ. This chapter has close connection to the aforementioned recipes, and it will be
extended with more content over time.

This documentation covers all versions up to 1.23.25.

34
Chapter 6. Tutorial

CHAPTER

SEVEN

OPENING FILES

7.1 Supported File Types

PyMuPDF supports the following file types:

7.2 How to Open a File

To open a file, do the following:

doc = fitz.open(""a.pdf"")

7.2.1 Opening with a Wrong File Extension

If you have a document with a wrong file extension for its type, you can still correctly open it.

Assume that “some.file” is actually an XPS. Open it like so:

doc = fitz.open(""some.file"", filetype=""xps"")

Note: PyMuPDF itself does not try to determine the file type from the file contents. You are responsible for supplying
the file type information in some way – either implicitly, via the file extension, or explicitly as shown with the filetype
parameter. There are pure Python packages like filetype that help you doing this. Also consult the Document chapter
for a full description.

If PyMuPDF encounters a file with an unknown / missing extension, it will try to open it as a PDF. So in these
cases there is no need for additional precautions. Similarly, for memory documents, you can just specify doc=fitz.
open(stream=mem_area) to open it as a PDF document.

If you attempt to open an unsupported file then PyMuPDF will throw a file data error.

35

PyMuPDF Documentation, Release 1.23.25

7.3 Opening Files as Text

PyMuPDF has the capability to open any plain text file as a document. In order to do this you should provide the
filetype parameter for the fitz.open function as ""txt"".

doc = fitz.open(""my_program.py"", filetype=""txt"")

In this way you are able to open a variety of file types and perform the typical non-PDF specific features like text
searching, text extracting and page rendering. Obviously, once you have rendered your txt content, then saving as
PDF or merging with other PDF files is no problem.

7.3.1 Examples

Opening a C# file

doc = fitz.open(""MyClass.cs"", filetype=""txt"")

Opening an XML file

doc = fitz.open(""my_data.xml"", filetype=""txt"")

Opening a JSON file

doc = fitz.open(""more_of_my_data.json"", filetype=""txt"")

And so on!

As you can imagine many text based file formats can be very simply opened and interpreted by PyMuPDF. This can
make data analysis and extraction for a wide range of previously unavailable files suddenly possible.

This documentation covers all versions up to 1.23.25.

36
Chapter 7. Opening Files

CHAPTER

EIGHT

TEXT

8.1 How to Extract all Document Text

This script will take a document filename and generate a text file from all of its text.

The document can be any supported type.

The script works as a command line tool which expects the document filename supplied as a parameter. It generates
one text file named “filename.txt” in the script directory. Text of pages is separated by a form feed character:

import sys, pathlib, fitz
fname = sys.argv[1]
# get document filename

with fitz.open(fname) as doc:
# open document

text = chr(12).join([page.get_text() for page in doc])

# write as a binary file to support non-ASCII characters
pathlib.Path(fname + "".txt"").write_bytes(text.encode())

The output will be plain text as it is coded in the document. No effort is made to prettify in any way. Specifically for
PDF, this may mean output not in usual reading order, unexpected line breaks and so forth.

You have many options to rectify this – see chapter Appendix 2: Considerations on Embedded Files. Among them are:

1. Extract text in HTML format and store it as a HTML document, so it can be viewed in any browser.

2. Extract text as a list of text blocks via Page.get_text(“blocks”). Each item of this list contains position information
for its text, which can be used to establish a convenient reading order.

3. Extract a list of single words via Page.get_text(“words”). Its items are words with position information. Use it
to determine text contained in a given rectangle – see next section.

See the following two sections for examples and further explanations.

8.2 How to Extract Key-Value Pairs from a Page

If the layout of a page is “predictable” in some sense, then there is a simple way to find the values for a given set of
keywords fast and easily – without using regular expressions. Please see this example script.

“Predictable” in this context means:

• Every keyword is followed by its value – no other text is present in between them.

• The bottom of the value’s boundary box is not above the one of the keyword.

• There are no other restrictions: the page layout may or may not be fixed, and the text may also have been stored
as one string. Key and value may have any distance from each other.

37

PyMuPDF Documentation, Release 1.23.25

For example, the following five key-value pairs will be correctly identified:

key1
value1
key2
value2
key3
value3 blah, blah, blah key4 value4 some other text key5 value5 ...

8.3 How to Extract Text from within a Rectangle

There is now (v1.18.0) more than one way to achieve this. We therefore have created a folder in the PyMuPDF-Utilities
repository specifically dealing with this topic.

8.4 How to Extract Text in Natural Reading Order

One of the common issues with PDF text extraction is, that text may not appear in any particular reading order.

This is the responsibility of the PDF creator (software or a human). For example, page headers may have been inserted
in a separate step – after the document had been produced. In such a case, the header text will appear at the end of a
page text extraction (although it will be correctly shown by PDF viewer software). For example, the following snippet
will add some header and footer lines to an existing PDF:

doc = fitz.open(""some.pdf"")
header = ""Header""
# text in header

footer = ""Page %i of %i""
# text in footer

for page in doc:
page.insert_text((50, 50), header)
# insert header

page.insert_text(
# insert footer 50 points above page bottom

(50, page.rect.height - 50),
footer % (page.number + 1, doc.page_count),
)

The text sequence extracted from a page modified in this way will look like this:

1. original text

2. header line

3. footer line

PyMuPDF has several means to re-establish some reading sequence or even to re-generate a layout close to the original:

1. Use sort parameter of Page.get_text(). It will sort the output from top-left to bottom-right (ignored for
XHTML, HTML and XML output).

2. Use the fitz module in CLI: python -m fitz gettext ..., which produces a text file where text has been
re-arranged in layout-preserving mode. Many options are available to control the output.

You can also use the above mentioned script with your modifications.

38
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

8.5 How to Extract Table Content from Documents

If you see a table in a document, you are normally not looking at something like an embedded Excel or other identifiable
object. It usually is just normal, standard text, formatted to appear as tabular data.

Extracting tabular data from such a page area therefore means that you must find a way to identify the table area
(i.e. its boundary box), then (1) graphically indicate table and column borders, and (2) then extract text based on this
information.

This can be a very complex task, depending on details like the presence or absence of lines, rectangles or other sup-
porting vector graphics.

Method Page.find_tables() does all that for you, with a high table detection precision. Its great advantage is that
there are no external library dependencies, nor the need to employ artificial intelligence or machine learning technolo-
gies. It also provides an integrated interface to the well-known Python package for data analysis pandas.

Please have a look at example Jupyter notebooks, which cover standard situations like multiple tables on one page or
joining table fragments across multiple pages.

8.6 How to Mark Extracted Text

There is a standard search function to search for arbitrary text on a page: Page.search_for(). It returns a list of
Rect objects which surround a found occurrence. These rectangles can for example be used to automatically insert
annotations which visibly mark the found text.

This method has advantages and drawbacks. Pros are:

• The search string can contain blanks and wrap across lines

• Upper or lower case characters are treated equal

• Word hyphenation at line ends is detected and resolved

• Return may also be a list of Quad objects to precisely locate text that is not parallel to either axis – using Quad

output is also recommended, when page rotation is not zero.

But you also have other options:

import sys
import fitz

def mark_word(page, text):

""""""Underline each word that contains 'text'.
""""""
found = 0
wlist = page.get_text(""words"", delimiters=None)
# make the word list

for w in wlist:
# scan through all words on page

if text in w[4]:
# w[4] is the word's string

found += 1
# count

r = fitz.Rect(w[:4])
# make rect from word bbox

page.add_underline_annot(r)
# underline

return found

fname = sys.argv[1]
# filename

(continues on next page)

8.5. How to Extract Table Content from Documents
39

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

text = sys.argv[2]
# search string

doc = fitz.open(fname)

print(""underlining words containing '%s' in document '%s'"" % (word, doc.name))

new_doc = False
# indicator if anything found at all

for page in doc:
# scan through the pages

found = mark_word(page, text)
# mark the page's words

if found:
# if anything found ...

new_doc = True
print(""found '%s' %i times on page %i"" % (text, found, page.number + 1))

if new_doc:
doc.save(""marked-"" + doc.name)

This script uses Page.get_text(""words"") to look for a string, handed in via cli parameter. This method separates a
page’s text into “words” using white spaces as delimiters. Further remarks:

• If found, the complete word containing the string is marked (underlined) – not only the search string.

• The search string may not contain word delimiters.
By default, word delimiters are white spaces and
the non-breaking space chr(0xA0). If you use extra delimiting characters like page.get_text(""words"",
delimiters=""./,"") then none of these characters should be included in your search string either.

• As shown here, upper / lower cases are respected. But this can be changed by using the string method lower()
(or even regular expressions) in function mark_word.

• There is no upper limit: all occurrences will be detected.

• You can use anything to mark the word: ‘Underline’, ‘Highlight’, ‘StrikeThrough’ or ‘Square’ annotations, etc.

• Here is an example snippet of a page of this manual, where “MuPDF” has been used as the search string. Note
that all strings containing “MuPDF” have been completely underlined (not just the search string).

40
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

8.7 How to Mark Searched Text

This script searches for text and marks it:

# -*- coding: utf-8 -*-
import fitz

# the document to annotate
doc = fitz.open(""tilted-text.pdf"")

# the text to be marked
needle = ""¡La práctica hace el campeón!""

# work with first page only
page = doc[0]

# get list of text locations
# we use ""quads"", not rectangles because text may be tilted!
rl = page.search_for(needle, quads=True)

# mark all found quads with one annotation
page.add_squiggly_annot(rl)

# save to a new PDF
doc.save(""a-squiggly.pdf"")

The result looks like this:

8.7. How to Mark Searched Text
41

PyMuPDF Documentation, Release 1.23.25

8.8 How to Mark Non-horizontal Text

The previous section already shows an example for marking non-horizontal text, that was detected by text searching.

But text extraction with the “dict” / “rawdict” options of Page.get_text() may also return text with a non-zero
angle to the x-axis. This is indicated by the value of the line dictionary’s ""dir"" key: it is the tuple (cosine, sine)
for that angle. If line[""dir""] != (1, 0), then the text of all its spans is rotated by (the same) angle != 0.

The “bboxes” returned by the method however are rectangles only – not quads. So, to mark span text correctly, its quad
must be recovered from the data contained in the line and span dictionary. Do this with the following utility function
(new in v1.18.9):

span_quad = fitz.recover_quad(line[""dir""], span)
annot = page.add_highlight_annot(span_quad)
# this will mark the complete span text

If you want to mark the complete line or a subset of its spans in one go, use the following snippet (works for v1.18.10
or later):

line_quad = fitz.recover_line_quad(line, spans=line[""spans""][1:-1])
page.add_highlight_annot(line_quad)

The spans argument above may specify any sub-list of line[""spans""]. In the example above, the second to second-
to-last span are marked. If omitted, the complete line is taken.

8.9 How to Analyze Font Characteristics

To analyze the characteristics of text in a PDF use this elementary script as a starting point:

import sys

import fitz

def flags_decomposer(flags):

""""""Make font flags human readable.""""""
l = []
if flags & 2 ** 0:
l.append(""superscript"")

(continues on next page)

42
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

if flags & 2 ** 1:
l.append(""italic"")

if flags & 2 ** 2:
l.append(""serifed"")

else:
l.append(""sans"")

if flags & 2 ** 3:
l.append(""monospaced"")

else:
l.append(""proportional"")

if flags & 2 ** 4:
l.append(""bold"")

return "", "".join(l)

doc = fitz.open(sys.argv[1])
page = doc[0]

# read page text as a dictionary, suppressing extra spaces in CJK fonts
blocks = page.get_text(""dict"", flags=11)[""blocks""]
for b in blocks:
# iterate through the text blocks

for l in b[""lines""]:
# iterate through the text lines

for s in l[""spans""]:
# iterate through the text spans

print("""")
font_properties = ""Font: '%s' (%s), size %g, color #%06x"" % (
s[""font""],
# font name

flags_decomposer(s[""flags""]),
# readable font flags

s[""size""],
# font size

s[""color""],
# font color

)
print(""Text: '%s'"" % s[""text""])
# simple print of text

print(font_properties)

Here is the PDF page and the script output:

8.9. How to Analyze Font Characteristics
43

PyMuPDF Documentation, Release 1.23.25

8.10 How to Insert Text

PyMuPDF provides ways to insert text on new or existing PDF pages with the following features:

• choose the font, including built-in fonts and fonts that are available as files

• choose text characteristics like bold, italic, font size, font color, etc.

• position the text in multiple ways:

– either as simple line-oriented output starting at a certain point,

– or fitting text in a box provided as a rectangle, in which case text alignment choices are also available,

– choose whether text should be put in foreground (overlay existing content),

– all text can be arbitrarily “morphed”, i.e. its appearance can be changed via a Matrix, to achieve effects like
scaling, shearing or mirroring,

– independently from morphing and in addition to that, text can be rotated by integer multiples of 90 degrees.

All of the above is provided by three basic Page, resp. Shape methods:

• Page.insert_font() – install a font for the page for later reference. The result is reflected in the output of

Document.get_page_fonts(). The font can be:

– provided as a file,

– via Font (then use Font.buffer)

– already present somewhere in this or another PDF, or

– be a built-in font.

44
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

• Page.insert_text() – write some lines of text. Internally, this uses Shape.insert_text().

• Page.insert_textbox() – fit text in a given rectangle. Here you can choose text alignment features (left,
right, centered, justified) and you keep control as to whether text actually fits. Internally, this uses Shape.
insert_textbox().

Note: Both text insertion methods automatically install the font as necessary.

8.10.1 How to Write Text Lines

Output some text lines on a page:

import fitz
doc = fitz.open(...)
# new or existing PDF

page = doc.new_page()
# new or existing page via doc[n]

p = fitz.Point(50, 72)
# start point of 1st line

text = ""Some text,\\nspread across\\nseveral lines.""
# the same result is achievable by
# text = [""Some text"", ""spread across"", ""several lines.""]

rc = page.insert_text(p,
# bottom-left of 1st char

text,
# the text (honors '\\n')

fontname = ""helv"",
# the default font

fontsize = 11,
# the default font size

rotate = 0,
# also available: 90, 180, 270

)

print(""%i lines printed on page %i."" % (rc, page.number))

doc.save(""text.pdf"")

With this method, only the number of lines will be controlled to not go beyond page height. Surplus lines will not be
written and the number of actual lines will be returned. The calculation uses a line height calculated from the fontsize
and 36 points (0.5 inches) as bottom margin.

Line width is ignored. The surplus part of a line will simply be invisible.

However, for built-in fonts there are ways to calculate the line width beforehand - see get_text_length().

Here is another example. It inserts 4 text strings using the four different rotation options, and thereby explains, how the
text insertion point must be chosen to achieve the desired result:

import fitz
doc = fitz.open()
page = doc.new_page()
# the text strings, each having 3 lines
text1 = ""rotate=0\\nLine 2\\nLine 3""
text2 = ""rotate=90\\nLine 2\\nLine 3""
text3 = ""rotate=-90\\nLine 2\\nLine 3""
text4 = ""rotate=180\\nLine 2\\nLine 3""
red = (1, 0, 0) # the color for the red dots
# the insertion points, each with a 25 pix distance from the corners
p1 = fitz.Point(25, 25)

(continues on next page)

8.10. How to Insert Text
45

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

p2 = fitz.Point(page.rect.width - 25, 25)
p3 = fitz.Point(25, page.rect.height - 25)
p4 = fitz.Point(page.rect.width - 25, page.rect.height - 25)
# create a Shape to draw on
shape = page.new_shape()

# draw the insertion points as red, filled dots
shape.draw_circle(p1,1)
shape.draw_circle(p2,1)
shape.draw_circle(p3,1)
shape.draw_circle(p4,1)
shape.finish(width=0.3, color=red, fill=red)

# insert the text strings
shape.insert_text(p1, text1)
shape.insert_text(p3, text2, rotate=90)
shape.insert_text(p2, text3, rotate=-90)
shape.insert_text(p4, text4, rotate=180)

# store our work to the page
shape.commit()
doc.save(...)

This is the result:

8.10.2 How to Fill a Text Box

This script fills 4 different rectangles with text, each time choosing a different rotation value:

import fitz

doc = fitz.open()
# new or existing PDF

page = doc.new_page()
# new page, or choose doc[n]

(continues on next page)

46
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

# write in this overall area
rect = fitz.Rect(100, 100, 300, 150)

# partition the area in 4 equal sub-rectangles
CELLS = fitz.make_table(rect, cols=4, rows=1)

t1 = ""text with rotate = 0.""
# these texts we will written

t2 = ""text with rotate = 90.""
t3 = ""text with rotate = 180.""
t4 = ""text with rotate = 270.""
text = [t1, t2, t3, t4]
red = fitz.pdfcolor[""red""]
# some colors

gold = fitz.pdfcolor[""gold""]
blue = fitz.pdfcolor[""blue""]
""""""
We use a Shape object (something like a canvas) to output the text and
the rectangles surrounding it for demonstration.
""""""
shape = page.new_shape()
# create Shape

for i in range(len(CELLS[0])):
shape.draw_rect(CELLS[0][i])
# draw rectangle

shape.insert_textbox(
CELLS[0][i], text[i], fontname=""hebo"", color=blue, rotate=90 * i
)

shape.finish(width=0.3, color=red, fill=gold)

shape.commit()
# write all stuff to the page

doc.ez_save(__file__.replace("".py"", "".pdf""))

Some default values were used above: font size 11 and text alignment “left”. The result will look like this:

8.10.3 How to Fill a Box with HTML Text

Method Page.insert_htmlbox() offers a much more powerful way to insert text in a rectangle.

Instead of simple, plain text, this method accepts HTML source, which may not only contain HTML tags but also
styling instructions to influence things like font, font weight (bold) and style (italic), color and much more.

It is also possible to mix multiple fonts and languages, to output HTML tables and to insert images and URI links.

For even more styling flexibility, an additional CSS source may also be given.

The method is based on the Story class. Therefore, complex script systems like Devanagari, Nepali, Tamil and many
are supported and written correctly thanks to using the HarfBuzz library - which provides this so-called “text shaping”
feature.

8.10. How to Insert Text
47

PyMuPDF Documentation, Release 1.23.25

Any required fonts to output characters are automatically pulled in from the Google NOTO font library - as a fallback
(when the – optionally supplied – user font(s) do not contain some glyphs).

As a small glimpse into the features offered here, we will output the following HTML-enriched text:

import fitz

rect = fitz.Rect(100, 100, 400, 300)

text = """"""Lorem ipsum dolor sit amet, consectetur adipisici elit, sed

eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad
minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>
nisi ut aliquid ex ea commodi consequat. Quis aute iure
<span style=""color: #f00;"">reprehenderit</span>
in <span style=""color: #0f0;font-weight:bold;"">voluptate</span> velit
esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat
cupiditat non proident, sunt in culpa qui
<a href=""https://www.artifex.com"">officia</a> deserunt mollit anim id
est laborum.""""""

doc = fitz.Document()

page = doc.new_page()
page.insert_htmlbox(rect, text, css=""* {font-family: sans-serif;font-size:14px;}"")

doc.ez_save(__file__.replace("".py"", "".pdf""))

Please note how the “css” parameter is used to globally select the default “sans-serif” font and a font size of 14.

The result will look like this:

48
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

How to output HTML tables and images

Here is another example that outputs a table with this method. This time, we are including all the styling in the HTML
source itself. Please also note, how it works to include an image - even within a table cell:

import fitz_new as fitz
import os

filedir = os.path.dirname(__file__)

text = """"""
<style>
body {

font-family: sans-serif;

}

td,
th {

border: 1px solid blue;
border-right: none;
border-bottom: none;
padding: 5px;
text-align: center;

}

table {

border-right: 1px solid blue;
border-bottom: 1px solid blue;
border-spacing: 0;

}
</style>

<body>
<p><b>Some Colors</b></p>
<table>

<tr>
<th>Lime</th>
<th>Lemon</th>
<th>Image</th>
<th>Mauve</th>
</tr>
<tr>
<td>Green</td>
<td>Yellow</td>
<td><img src=""img-cake.png"" width=50></td>
<td>Between<br>Gray and Purple</td>
</tr>

</table>
</body>
""""""

doc = fitz.Document()

(continues on next page)

8.10. How to Insert Text
49

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

page = doc.new_page()
rect = page.rect + (36, 36, -36, -36)

# we must specify an Archive because of the image
page.insert_htmlbox(rect, text, archive=fitz.Archive("".""))

doc.ez_save(__file__.replace("".py"", "".pdf""))

The result will look like this:

How to Output Languages of the World

Our third example will demonstrate the automatic multi-language support. It includes automatic text shaping for
complex scripting systems like Devanagari and right-to-left languages:

import fitz

greetings = (

""Hello, World!"",
# english

""Hallo, Welt!"",
# german

"" !"",
# persian

"", !"",
# tamil

""!"",
# thai

"" !"",
# ucranian

"" !"",
# hebrew

"" !"",
# bengali

"""",
# chinese

"""",
# japanese

"", !"",
# korean

"",
!"",
# sanskrit

"" !"",
# hindi

(continues on next page)

50
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

)
doc = fitz.open()
page = doc.new_page()
rect = (50, 50, 200, 500)

# join greetings into one text string
text = "" ... "".join([t for t in greetings])

# the output of the above is simple:
page.insert_htmlbox(rect, text)
doc.save(__file__.replace("".py"", "".pdf""))

And this is the output:

How to Specify your Own Fonts

Define your font files in CSS syntax using the @font-face statement. You need a separate @font-face for every
combination of font weight and font style (e.g. bold or italic) you want to be supported. The following example uses
the famous MS Comic Sans font in its four variants regular, bold, italic and bold-italic.

As these four font files are located in the system’s folder C:/Windows/Fonts the method needs an Archive definition
that points to that folder:

""""""
How to use your own fonts with method Page.insert_htmlbox().
""""""
import fitz_new as fitz

# Example text
text = """"""Lorem ipsum dolor sit amet, consectetur adipisici elit, sed

(continues on next page)

8.10. How to Insert Text
51

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad
minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>
nisi ut aliquid ex ea commodi consequat. Quis aute iure
<span style=""color: red;"">reprehenderit</span>
in <span style=""color: green;font-weight:bold;"">voluptate</span> velit
esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat
cupiditat non proident, sunt in culpa qui
<a href=""https://www.artifex.com"">officia</a> deserunt mollit anim id
est laborum.""""""

""""""
We need an Archive object to show where font files are located.
We intend to use the font family ""MS Comic Sans"".
""""""
arch = fitz.Archive(""C:/Windows/Fonts"")

# These statements define which font file to use for regular, bold,
# italic and bold-italic text.
# We assign an arbitary common font-family for all 4 font files.
# The Story algorithm will select the right file as required.
# We request to use ""comic"" throughout the text.
css = """"""
@font-face {font-family: comic; src: url(comic.ttf);}
@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}
@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style:␣

˓→italic;}
@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}
* {font-family: comic;}
""""""

doc = fitz.Document()
page = doc.new_page(width=150, height=150)
# make small page

page.insert_htmlbox(page.rect, text, css=css, archive=arch)

doc.subset_fonts(verbose=True)
# build subset fonts to reduce file size

doc.ez_save(__file__.replace("".py"", "".pdf""))

52
Chapter 8. Text

PyMuPDF Documentation, Release 1.23.25

How to Request Text Alignment

This example combines multiple requirements:

• Rotate the text by 90 degrees anti-clockwise.

• Use a font from package pymupdf-fonts. You will see that the respective CSS definitions are a lot easier in this
case.

• Align the text with the “justify” option.

""""""
How to use a pymupdf font with method Page.insert_htmlbox().
""""""
import fitz_new as fitz

# Example text
text = """"""Lorem ipsum dolor sit amet, consectetur adipisici elit, sed

eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad
minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>
nisi ut aliquid ex ea commodi consequat. Quis aute iure
<span style=""color: red;"">reprehenderit</span>
in <span style=""color: green;font-weight:bold;"">voluptate</span> velit
esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat
cupiditat non proident, sunt in culpa qui
<a href=""https://www.artifex.com"">officia</a> deserunt mollit anim id
est laborum.""""""

""""""

(continues on next page)

8.10. How to Insert Text
53

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

This is similar to font file support. However, we can use a convenience
function for creating required CSS definitions.
We still need an Archive for finding the font binaries.
""""""
arch = fitz.Archive()

# We request to use ""myfont"" throughout the text.
css = fitz.css_for_pymupdf_font(""ubuntu"", archive=arch, name=""myfont"")
css += ""* {font-family: myfont;text-align: justify;}""

doc = fitz.Document()

page = doc.new_page(width=150, height=150)

page.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)

doc.subset_fonts(verbose=True)
doc.ez_save(__file__.replace("".py"", "".pdf""))

This documentation covers all versions up to 1.23.25.

54
Chapter 8. Text

CHAPTER

NINE

IMAGES

9.1 How to Make Images from Document Pages

This little script will take a document filename and generate a PNG file from each of its pages.

The document can be any supported type.

The script works as a command line tool which expects the filename being supplied as a parameter. The generated
image files (1 per page) are stored in the directory of the script:

import sys, fitz
# import the bindings

fname = sys.argv[1]
# get filename from command line

doc = fitz.open(fname)
# open document

for page in doc:
# iterate through the pages

pix = page.get_pixmap()
# render page to an image

pix.save(""page-%i.png"" % page.number)
# store image as a PNG

The script directory will now contain PNG image files named page-0.png, page-1.png, etc. Pictures have the dimension
of their pages with width and height rounded to integers, e.g. 595 x 842 pixels for an A4 portrait sized page. They will
have a resolution of 96 dpi in x and y dimension and have no transparency. You can change all that – for how to do this,
read the next sections.

9.2 How to Increase Image Resolution

The image of a document page is represented by a Pixmap, and the simplest way to create a pixmap is via method
Page.get_pixmap().

This method has many options to influence the result. The most important among them is the Matrix, which lets you
zoom, rotate, distort or mirror the outcome.

Page.get_pixmap() by default will use the Identity matrix, which does nothing.

In the following, we apply a zoom factor of 2 to each dimension, which will generate an image with a four times better
resolution for us (and also about 4 times the size):

zoom_x = 2.0
# horizontal zoom

zoom_y = 2.0
# vertical zoom

mat = fitz.Matrix(zoom_x, zoom_y)
# zoom factor 2 in each dimension

pix = page.get_pixmap(matrix=mat)
# use 'mat' instead of the identity matrix

55

PyMuPDF Documentation, Release 1.23.25

Since version 1.19.2 there is a more direct way to set the resolution: Parameter ""dpi"" (dots per inch) can be used in
place of ""matrix"". To create a 300 dpi image of a page specify pix = page.get_pixmap(dpi=300). Apart from
notation brevity, this approach has the additional advantage that the dpi value is saved with the image file – which
does not happen automatically when using the Matrix notation.

9.3 How to Create Partial Pixmaps (Clips)

You do not always need or want the full image of a page. This is the case e.g. when you display the image in a GUI
and would like to fill the respective window with a zoomed part of the page.

Let’s assume your GUI window has room to display a full document page, but you now want to fill this room with the
bottom right quarter of your page, thus using a four times better resolution.

To achieve this, define a rectangle equal to the area you want to appear in the GUI and call it “clip”. One way of
constructing rectangles in PyMuPDF is by providing two diagonally opposite corners, which is what we are doing
here.

mat = fitz.Matrix(2, 2)
# zoom factor 2 in each direction

rect = page.rect
# the page rectangle

mp = (rect.tl + rect.br) / 2
# its middle point, becomes top-left of clip

clip = fitz.Rect(mp, rect.br)
# the area we want

pix = page.get_pixmap(matrix=mat, clip=clip)

In the above we construct clip by specifying two diagonally opposite points: the middle point mp of the page rectangle,
and its bottom right, rect.br.

56
Chapter 9. Images

PyMuPDF Documentation, Release 1.23.25

9.4 How to Zoom a Clip to a GUI Window

Please also read the previous section. This time we want to compute the zoom factor for a clip, such that its image best
fits a given GUI window. This means, that the image’s width or height (or both) will equal the window dimension. For
the following code snippet you need to provide the WIDTH and HEIGHT of your GUI’s window that should receive
the page’s clip rectangle.

# WIDTH: width of the GUI window
# HEIGHT: height of the GUI window
# clip: a subrectangle of the document page
# compare width/height ratios of image and window

if clip.width / clip.height < WIDTH / HEIGHT:

# clip is narrower: zoom to window HEIGHT
zoom = HEIGHT / clip.height

else:
# clip is broader: zoom to window WIDTH

zoom = WIDTH / clip.width
mat = fitz.Matrix(zoom, zoom)
pix = page.get_pixmap(matrix=mat, clip=clip)

For the other way round, now assume you have the zoom factor and need to compute the fitting clip.

In this case we have zoom = HEIGHT/clip.height = WIDTH/clip.width, so we must set clip.height =
HEIGHT/zoom and, clip.width = WIDTH/zoom. Choose the top-left point tl of the clip on the page to compute
the right pixmap:

width = WIDTH / zoom
height = HEIGHT / zoom
clip = fitz.Rect(tl, tl.x + width, tl.y + height)
# ensure we still are inside the page
clip &= page.rect
mat = fitz.Matrix(zoom, zoom)
pix = fitz.Pixmap(matrix=mat, clip=clip)

9.5 How to Create or Suppress Annotation Images

Normally, the pixmap of a page also shows the page’s annotations. Occasionally, this may not be desirable.

To suppress the annotation images on a rendered page, just specify annots=False in Page.get_pixmap().

You can also render annotations separately: they have their own Annot.get_pixmap() method. The resulting pixmap
has the same dimensions as the annotation rectangle.

9.4. How to Zoom a Clip to a GUI Window
57

PyMuPDF Documentation, Release 1.23.25

9.6 How to Extract Images: Non-PDF Documents

In contrast to the previous sections, this section deals with extracting images contained in documents, so they can be
displayed as part of one or more pages.

If you want to recreate the original image in file form or as a memory area, you have basically two options:

1. Convert your document to a PDF, and then use one of the PDF-only extraction methods. This snippet will convert
a document to PDF:

>>> pdfbytes = doc.convert_to_pdf()
# this a bytes object

>>> pdf = fitz.open(""pdf"", pdfbytes)
# open it as a PDF document

>>> # now use 'pdf' like any PDF document

2. Use Page.get_text() with the “dict” parameter. This works for all document types. It will extract all text
and images shown on the page, formatted as a Python dictionary. Every image will occur in an image block,
containing meta information and the binary image data. For details of the dictionary’s structure, see TextPage.
The method works equally well for PDF files. This creates a list of all images shown on a page:

>>> d = page.get_text(""dict"")
>>> blocks = d[""blocks""]
# the list of block dictionaries

>>> imgblocks = [b for b in blocks if b[""type""] == 1]
>>> pprint(imgblocks[0])
{'bbox': (100.0, 135.8769989013672, 300.0, 364.1230163574219),

'bpc': 8,
'colorspace': 3,
'ext': 'jpeg',
'height': 501,
'image': b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\...',
# CAUTION: LARGE!

'size': 80518,
'transform': (200.0, 0.0, -0.0, 228.2460174560547, 100.0, 135.8769989013672),
'type': 1,
'width': 439,
'xres': 96,
'yres': 96}

9.7 How to Extract Images: PDF Documents

Like any other “object” in a PDF, images are identified by a cross reference number (xref, an integer). If you know
this number, you have two ways to access the image’s data:

1. Create a Pixmap of the image with instruction pix = fitz.Pixmap(doc, xref). This method is very fast (single
digit micro-seconds). The pixmap’s properties (width, height, ...) will reflect the ones of the image. In this case
there is no way to tell which image format the embedded original has.

2. Extract the image with img = doc.extract_image(xref). This is a dictionary containing the binary image data as
img[“image”]. A number of meta data are also provided – mostly the same as you would find in the pixmap of the
image. The major difference is string img[“ext”], which specifies the image format: apart from “png”, strings like
“jpeg”, “bmp”, “tiff”, etc. can also occur. Use this string as the file extension if you want to store to disk. The ex-
ecution speed of this method should be compared to the combined speed of the statements pix = fitz.Pixmap(doc,
xref);pix.tobytes(). If the embedded image is in PNG format, the speed of Document.extract_image() is
about the same (and the binary image data are identical). Otherwise, this method is thousands of times faster,
and the image data is much smaller.

58
Chapter 9. Images

PyMuPDF Documentation, Release 1.23.25

The question remains: “How do I know those ‘xref’ numbers of images?”. There are two answers to this:

a. “Inspect the page objects:” Loop through the items of Page.get_images(). It is a list of list, and its items
look like [xref, smask, ...], containing the xref of an image. This xref can then be used with one of the above
methods. Use this method for valid (undamaged) documents. Be wary however, that the same image may be
referenced multiple times (by different pages), so you might want to provide a mechanism avoiding multiple
extracts.

b. “No need to know:” Loop through the list of all xrefs of the document and perform a Document.
extract_image() for each one. If the returned dictionary is empty, then continue – this xref is no image.
Use this method if the PDF is damaged (unusable pages). Note that a PDF often contains “pseudo-images”
(“stencil masks”) with the special purpose of defining the transparency of some other image. You may want to
provide logic to exclude those from extraction. Also have a look at the next section.

For both extraction approaches, there exist ready-to-use general purpose scripts:

extract-from-pages.py extracts images page by page:

and extract-from-xref.py extracts images by xref table:

9.7. How to Extract Images: PDF Documents
59

PyMuPDF Documentation, Release 1.23.25

9.8 How to Handle Image Masks

Some images in PDFs are accompanied by image masks. In their simplest form, masks represent alpha (transparency)
bytes stored as separate images. In order to reconstruct the original of an image, which has a mask, it must be “enriched”
with transparency bytes taken from its mask.

Whether an image does have such a mask can be recognized in one of two ways in PyMuPDF:

1. An item of Document.get_page_images() has the general format (xref, smask, ...), where xref is the
image’s xref and smask, if positive, then it is the xref of a mask.

2. The (dictionary) results of Document.extract_image() have a key “smask”, which also contains any mask’s

xref if positive.

If smask == 0 then the image encountered via xref can be processed as it is.

To recover the original image using PyMuPDF, the procedure depicted as follows must be executed:

>>> pix1 = fitz.Pixmap(doc.extract_image(xref)[""image""])
# (1) pixmap of image w/o␣

˓→alpha
>>> mask = fitz.Pixmap(doc.extract_image(smask)[""image""])
# (2) mask pixmap

>>> pix = fitz.Pixmap(pix1, mask)
# (3) copy of pix1, image␣

˓→mask added

Step (1) creates a pixmap of the basic image. Step (2) does the same with the image mask. Step (3) adds an alpha
channel and fills it with transparency information.

The scripts extract-from-pages.py, and extract-from-xref.py above also contain this logic.

9.9 How to Make one PDF of all your Pictures (or Files)

We show here three scripts that take a list of (image and other) files and put them all in one PDF.

Method 1: Inserting Images as Pages

The first one converts each image to a PDF page with the same dimensions. The result will be a PDF with one page
per image. It will only work for supported image file formats:

60
Chapter 9. Images

PyMuPDF Documentation, Release 1.23.25

import os, fitz
import PySimpleGUI as psg
# for showing a progress bar

doc = fitz.open()
# PDF with the pictures

imgdir = ""D:/2012_10_05""
# where the pics are

imglist = os.listdir(imgdir)
# list of them

imgcount = len(imglist)
# pic count

for i, f in enumerate(imglist):
img = fitz.open(os.path.join(imgdir, f))
# open pic as document

rect = img[0].rect
# pic dimension

pdfbytes = img.convert_to_pdf()
# make a PDF stream

img.close()
# no longer needed

imgPDF = fitz.open(""pdf"", pdfbytes)
# open stream as PDF

page = doc.new_page(width = rect.width,
# new page with ...

height = rect.height)
# pic dimension

page.show_pdf_page(rect, imgPDF, 0)
# image fills the page

psg.EasyProgressMeter(""Import Images"",
# show our progress

i+1, imgcount)

doc.save(""all-my-pics.pdf"")

This will generate a PDF only marginally larger than the combined pictures’ size. Some numbers on performance:

The above script needed about 1 minute on my machine for 149 pictures with a total size of 514 MB (and about the
same resulting PDF size).

Look here for a more complete source code: it offers a directory selection dialog and skips unsupported files and
non-file entries.

Note: We might have used Page.insert_image() instead of Page.show_pdf_page(), and the result would have
been a similar looking file. However, depending on the image type, it may store images uncompressed. Therefore, the
save option deflate = True must be used to achieve a reasonable file size, which hugely increases the runtime for large
numbers of images. So this alternative cannot be recommended here.

Method 2: Embedding Files

The second script embeds arbitrary files – not only images. The resulting PDF will have just one (empty) page, required
for technical reasons. To later access the embedded files again, you would need a suitable PDF viewer that can display
and / or extract embedded files:

9.9. How to Make one PDF of all your Pictures (or Files)
61

PyMuPDF Documentation, Release 1.23.25

import os, fitz
import PySimpleGUI as psg
# for showing progress bar

doc = fitz.open()
# PDF with the pictures

imgdir = ""D:/2012_10_05""
# where my files are

imglist = os.listdir(imgdir)
# list of pictures

imgcount = len(imglist)
# pic count

imglist.sort()
# nicely sort them

for i, f in enumerate(imglist):
img = open(os.path.join(imgdir,f), ""rb"").read()
# make pic stream

doc.embfile_add(img, f, filename=f,
# and embed it

ufilename=f, desc=f)
psg.EasyProgressMeter(""Embedding Files"",
# show our progress

i+1, imgcount)

page = doc.new_page()
# at least 1 page is needed

doc.save(""all-my-pics-embedded.pdf"")

This is by far the fastest method, and it also produces the smallest possible output file size. The above pictures needed
20 seconds on my machine and yielded a PDF size of 510 MB. Look here for a more complete source code: it offers a
directory selection dialog and skips non-file entries.

Method 3: Attaching Files

A third way to achieve this task is attaching files via page annotations see here for the complete source code.

This has a similar performance as the previous script and it also produces a similar file size. It will produce PDF pages
which show a ‘FileAttachment’ icon for each attached file.

62
Chapter 9. Images

PyMuPDF Documentation, Release 1.23.25

Note: Both, the embed and the attach methods can be used for arbitrary files – not just images.

Note:
We strongly recommend using the awesome package PySimpleGUI to display a progress meter for tasks that
may run for an extended time span. It’s pure Python, uses Tkinter (no additional GUI package) and requires just one
more line of code!

9.10 How to Create Vector Images

The usual way to create an image from a document page is Page.get_pixmap(). A pixmap represents a raster image,
so you must decide on its quality (i.e. resolution) at creation time. It cannot be changed later.

PyMuPDF also offers a way to create a vector image of a page in SVG format (scalable vector graphics, defined in
XML syntax). SVG images remain precise across zooming levels (of course with the exception of any raster graphic
elements embedded therein).

Instruction svg = page.get_svg_image(matrix=fitz.Identity) delivers a UTF-8 string svg which can be stored with ex-
tension “.svg”.

9.10. How to Create Vector Images
63

PyMuPDF Documentation, Release 1.23.25

9.11 How to Convert Images

Just as a feature among others, PyMuPDF’s image conversion is easy. It may avoid using other graphics packages like
PIL/Pillow in many cases.

Notwithstanding that interfacing with Pillow is almost trivial.

Input Formats
Output Formats
Description

BMP
.
Windows Bitmap

JPEG
JPEG
Joint Photographic Experts Group

JXR
.
JPEG Extended Range

JPX/JP2
.
JPEG 2000

GIF
.
Graphics Interchange Format

TIFF
.
Tagged Image File Format

PNG
PNG
Portable Network Graphics

PNM
PNM
Portable Anymap

PGM
PGM
Portable Graymap

PBM
PBM
Portable Bitmap

PPM
PPM
Portable Pixmap

PAM
PAM
Portable Arbitrary Map

.
PSD
Adobe Photoshop Document

.
PS
Adobe Postscript

The general scheme is just the following two lines:

pix = fitz.Pixmap(""input.xxx"")
# any supported input format

pix.save(""output.yyy"")
# any supported output format

Remarks

1. The input argument of fitz.Pixmap(arg) can be a file or a bytes / io.BytesIO object containing an image.

2. Instead of an output file, you can also create a bytes object via pix.tobytes(“yyy”) and pass this around.

3. As a matter of course, input and output formats must be compatible in terms of colorspace and transparency. The
Pixmap class has batteries included if adjustments are needed.

Note: Convert JPEG to Photoshop:

pix = fitz.Pixmap(""myfamily.jpg"")
pix.save(""myfamily.psd"")

Note:
Convert JPEG to Tkinter PhotoImage. Any RGB / no-alpha image works exactly the same. Conversion
to one of the Portable Anymap formats (PPM, PGM, etc.) does the trick, because they are supported by all Tkinter
versions:

import tkinter as tk
pix = fitz.Pixmap(""input.jpg"")
# or any RGB / no-alpha image

tkimg = tk.PhotoImage(data=pix.tobytes(""ppm""))

64
Chapter 9. Images

PyMuPDF Documentation, Release 1.23.25

Note: Convert PNG with alpha to Tkinter PhotoImage. This requires removing the alpha bytes, before we can do
the PPM conversion:

import tkinter as tk
pix = fitz.Pixmap(""input.png"")
# may have an alpha channel

if pix.alpha:
# we have an alpha channel!

pix = fitz.Pixmap(pix, 0)
# remove it

tkimg = tk.PhotoImage(data=pix.tobytes(""ppm""))

9.12 How to Use Pixmaps: Gluing Images

This shows how pixmaps can be used for purely graphical, non-document purposes. The script reads an image file and
creates a new image which consist of 3 * 4 tiles of the original:

import fitz
src = fitz.Pixmap(""img-7edges.png"")
# create pixmap from a picture

col = 3
# tiles per row

lin = 4
# tiles per column

tar_w = src.width * col
# width of target

tar_h = src.height * lin
# height of target

# create target pixmap
tar_pix = fitz.Pixmap(src.colorspace, (0, 0, tar_w, tar_h), src.alpha)

# now fill target with the tiles
for i in range(col):

for j in range(lin):
src.set_origin(src.width * i, src.height * j)
tar_pix.copy(src, src.irect) # copy input to new loc

tar_pix.save(""tar.png"")

This is the input picture:

Here is the output:

9.12. How to Use Pixmaps: Gluing Images
65

PyMuPDF Documentation, Release 1.23.25

9.13 How to Use Pixmaps: Making a Fractal

Here is another Pixmap example that creates Sierpinski’s Carpet – a fractal generalizing the Cantor Set to two
dimensions. Given a square carpet, mark its 9 sub-suqares (3 times 3) and cut out the one in the center. Treat each of
the remaining eight sub-squares in the same way, and continue ad infinitum. The end result is a set with area zero and
fractal dimension 1.8928...

This script creates an approximate image of it as a PNG, by going down to one-pixel granularity. To increase the image
precision, change the value of n (precision):

import fitz, time
if not list(map(int, fitz.VersionBind.split("".""))) >= [1, 14, 8]:

raise SystemExit(""need PyMuPDF v1.14.8 for this script"")
n = 6
# depth (precision)

d = 3**n
# edge length

t0 = time.perf_counter()
ir = (0, 0, d, d)
# the pixmap rectangle

pm = fitz.Pixmap(fitz.csRGB, ir, False)
pm.set_rect(pm.irect, (255,255,0)) # fill it with some background color

color = (0, 0, 255)
# color to fill the punch holes

# alternatively, define a 'fill' pixmap for the punch holes
# this could be anything, e.g. some photo image ...
fill = fitz.Pixmap(fitz.csRGB, ir, False) # same size as 'pm'
fill.set_rect(fill.irect, (0, 255, 255))
# put some color in

def punch(x, y, step):

""""""Recursively ""punch a hole"" in the central square of a pixmap.

Arguments are top-left coords and the step width.

Some alternative punching methods are commented out.

(continues on next page)

66
Chapter 9. Images

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

""""""
s = step // 3
# the new step

# iterate through the 9 sub-squares
# the central one will be filled with the color
for i in range(3):

for j in range(3):

if i != j or i != 1:
# this is not the central cube

if s >= 3:
# recursing needed?

punch(x+i*s, y+j*s, s)
# recurse

else:
# punching alternatives are:

pm.set_rect((x+s, y+s, x+2*s, y+2*s), color)
# fill with a color

#pm.copy(fill, (x+s, y+s, x+2*s, y+2*s))
# copy from fill

#pm.invert_irect((x+s, y+s, x+2*s, y+2*s))
# invert colors

return

#==============================================================================
# main program
#==============================================================================
# now start punching holes into the pixmap
punch(0, 0, d)
t1 = time.perf_counter()
pm.save(""sierpinski-punch.png"")
t2 = time.perf_counter()
print (""%g sec to create / fill the pixmap"" % round(t1-t0,3))
print (""%g sec to save the image"" % round(t2-t1,3))

The result should look something like this:

9.13. How to Use Pixmaps: Making a Fractal
67

PyMuPDF Documentation, Release 1.23.25

9.14 How to Interface with NumPy

This shows how to create a PNG file from a numpy array (several times faster than most other methods):

import numpy as np
import fitz
#==============================================================================
# create a fun-colored width * height PNG with fitz and numpy
#==============================================================================
height = 150
width
= 100

bild = np.ndarray((height, width, 3), dtype=np.uint8)

for i in range(height):

for j in range(width):

# one pixel (some fun coloring)
bild[i, j] = [(i+j)%256, i%256, j%256]

samples = bytearray(bild.tostring())
# get plain pixel data from numpy array

pix = fitz.Pixmap(fitz.csRGB, width, height, samples, alpha=False)
pix.save(""test.png"")

9.15 How to Add Images to a PDF Page

There are two methods to add images to a PDF page: Page.insert_image() and Page.show_pdf_page(). Both
methods have things in common, but there are also differences.

Criterion
Page.
insert_image()

Page.show_pdf_page()

displayable con-
tent

image file, image in
memory, pixmap

PDF page

display
resolu-
tion

image resolution
vectorized (except raster page content)

rotation
0, 90, 180 or 270 de-
grees

any angle

clipping
no (full image only)
yes

keep aspect ra-
tio

yes (default option)
yes (default option)

transparency
(water marking)

depends on the im-
age

depends on the page

location / place-
ment

scaled to fit target
rectangle

scaled to fit target rectangle

performance
automatic
preven-
tion of duplicates;

automatic prevention of duplicates;

multi-page im-
age support

no
yes

ease of use
simple, intuitive;
simple, intuitive; usable for all document types (including images!)
after conversion to PDF via Document.convert_to_pdf()

68
Chapter 9. Images

PyMuPDF Documentation, Release 1.23.25

Basic code pattern for Page.insert_image(). Exactly one of the parameters filename / stream / pixmap must be
given, if not re-inserting an existing image:

page.insert_image(
rect,
# where to place the image (rect-like)

filename=None,
# image in a file

stream=None,
# image in memory (bytes)

pixmap=None,
# image from pixmap

mask=None,
# specify alpha channel separately

rotate=0,
# rotate (int, multiple of 90)

xref=0,
# re-use existing image

oc=0,
# control visibility via OCG / OCMD

keep_proportion=True,
# keep aspect ratio

overlay=True,
# put in foreground

)

Basic code pattern for Page.show_pdf_page(). Source and target PDF must be different Document objects (but may
be opened from the same file):

page.show_pdf_page(
rect,
# where to place the image (rect-like)

src,
# source PDF

pno=0,
# page number in source PDF

clip=None,
# only display this area (rect-like)

rotate=0,
# rotate (float, any value)

oc=0,
# control visibility via OCG / OCMD

keep_proportion=True,
# keep aspect ratio

overlay=True,
# put in foreground

)

9.16 How to Use Pixmaps: Checking Text Visibility

Whether or not a given piece of text is actually visible on a page depends on a number of factors:

1. Text is not covered by another object but may have the same color as the background i.e., white-on-white etc.

2. Text may be covered by an image or vector graphics. Detecting this is an important capability, for example to
uncover badly anonymized legal documents.

3. Text is created hidden. This technique is usually used by OCR tools to store the recognized text in an invisible
layer on the page.

The following shows how to detect situation 1. above, or situation 2. if the covering object is unicolor:

pix = page.get_pixmap(dpi=150)
# make page image with a decent resolution

# the following matrix transforms page to pixmap coordinates
mat = page.rect.torect(pix.irect)

# search for some string ""needle""
rlist = page.search_for(""needle"")
# check the visibility for each hit rectangle
for rect in rlist:

(continues on next page)

9.16. How to Use Pixmaps: Checking Text Visibility
69

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

if pix.color_topusage(clip=rect * mat)[0] > 0.95:

print(""'needle' is invisible here:"", rect)

Method Pixmap.color_topusage() returns a tuple (ratio, pixel) where 0 < ratio <= 1 and pixel is the pixel
value of the color. Please note that we create a pixmap only once. This can save a lot of processing time if there are
multiple hit rectangles.

The logic of the above code is: If the needle’s rectangle is (“almost”: > 95%) unicolor, then the text cannot be visible.
A typical result for visible text returns the color of the background (mostly white) and a ratio around 0.7 to 0.8, for
example (0.685, b'xffxffxff').

This documentation covers all versions up to 1.23.25.

70
Chapter 9. Images

CHAPTER

TEN

ANNOTATIONS

10.1 How to Add and Modify Annotations

In PyMuPDF, new annotations can be added via Page methods. Once an annotation exists, it can be modified to a large
extent using methods of the Annot class.

In contrast to many other tools, initial insert of annotations happens with a minimum number of properties. We leave
it to the programmer to e.g. set attributes like author, creation date or subject.

As an overview for these capabilities, look at the following script that fills a PDF page with most of the available
annotations. Look in the next sections for more special situations:

# -*- coding: utf-8 -*-
""""""
-------------------------------------------------------------------------------
Demo script showing how annotations can be added to a PDF using PyMuPDF.

It contains the following annotation types:
Caret, Text, FreeText, text markers (underline, strike-out, highlight,
squiggle), Circle, Square, Line, PolyLine, Polygon, FileAttachment, Stamp
and Redaction.
There is some effort to vary appearances by adding colors, line ends,
opacity, rotation, dashed lines, etc.

Dependencies
------------
PyMuPDF v1.17.0
-------------------------------------------------------------------------------
""""""
from __future__ import print_function

import gc
import sys

import fitz

print(fitz.__doc__)
if fitz.VersionBind.split(""."") < [""1"", ""17"", ""0""]:
sys.exit(""PyMuPDF v1.17.0+ is needed."")

gc.set_debug(gc.DEBUG_UNCOLLECTABLE)

(continues on next page)

71

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

highlight = ""this text is highlighted""
underline = ""this text is underlined""
strikeout = ""this text is striked out""
squiggled = ""this text is zigzag-underlined""
red = (1, 0, 0)
blue = (0, 0, 1)
gold = (1, 1, 0)
green = (0, 1, 0)

displ = fitz.Rect(0, 50, 0, 50)
r = fitz.Rect(72, 72, 220, 100)
t1 = u""têxt üsès Lätiñ charß,\\nEUR: €, mu: µ, super scripts: 23!""

def print_descr(annot):

""""""Print a short description to the right of each annot rect.""""""
annot.parent.insert_text(
annot.rect.br + (10, -5), ""%s annotation"" % annot.type[1], color=red
)

doc = fitz.open()
page = doc.new_page()

page.set_rotation(0)

annot = page.add_caret_annot(r.tl)
print_descr(annot)

r = r + displ
annot = page.add_freetext_annot(
r,
t1,
fontsize=10,
rotate=90,
text_color=blue,
fill_color=gold,
align=fitz.TEXT_ALIGN_CENTER,
)
annot.set_border(width=0.3, dashes=[2])
annot.update(text_color=blue, fill_color=gold)
print_descr(annot)

r = annot.rect + displ
annot = page.add_text_annot(r.tl, t1)
print_descr(annot)

# Adding text marker annotations:
# first insert a unique text, then search for it, then mark it
pos = annot.rect.tl + displ.tl
page.insert_text(

(continues on next page)

72
Chapter 10. Annotations

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

pos,
# insertion point

highlight,
# inserted text

morph=(pos, fitz.Matrix(-5)),
# rotate around insertion point

)
rl = page.search_for(highlight, quads=True)
# need a quad b/o tilted text

annot = page.add_highlight_annot(rl[0])
print_descr(annot)

pos = annot.rect.bl
# next insertion point

page.insert_text(pos, underline, morph=(pos, fitz.Matrix(-10)))
rl = page.search_for(underline, quads=True)
annot = page.add_underline_annot(rl[0])
print_descr(annot)

pos = annot.rect.bl
page.insert_text(pos, strikeout, morph=(pos, fitz.Matrix(-15)))
rl = page.search_for(strikeout, quads=True)
annot = page.add_strikeout_annot(rl[0])
print_descr(annot)

pos = annot.rect.bl
page.insert_text(pos, squiggled, morph=(pos, fitz.Matrix(-20)))
rl = page.search_for(squiggled, quads=True)
annot = page.add_squiggly_annot(rl[0])
print_descr(annot)

pos = annot.rect.bl
r = fitz.Rect(pos, pos.x + 75, pos.y + 35) + (0, 20, 0, 20)
annot = page.add_polyline_annot([r.bl, r.tr, r.br, r.tl])
# 'Polyline'

annot.set_border(width=0.3, dashes=[2])
annot.set_colors(stroke=blue, fill=green)
annot.set_line_ends(fitz.PDF_ANNOT_LE_CLOSED_ARROW, fitz.PDF_ANNOT_LE_R_CLOSED_ARROW)
annot.update(fill_color=(1, 1, 0))
print_descr(annot)

r += displ
annot = page.add_polygon_annot([r.bl, r.tr, r.br, r.tl])
# 'Polygon'

annot.set_border(width=0.3, dashes=[2])
annot.set_colors(stroke=blue, fill=gold)
annot.set_line_ends(fitz.PDF_ANNOT_LE_DIAMOND, fitz.PDF_ANNOT_LE_CIRCLE)
annot.update()
print_descr(annot)

r += displ
annot = page.add_line_annot(r.tr, r.bl)
# 'Line'

annot.set_border(width=0.3, dashes=[2])
annot.set_colors(stroke=blue, fill=gold)
annot.set_line_ends(fitz.PDF_ANNOT_LE_DIAMOND, fitz.PDF_ANNOT_LE_CIRCLE)
annot.update()
print_descr(annot)

r += displ

(continues on next page)

10.1. How to Add and Modify Annotations
73

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

annot = page.add_rect_annot(r)
# 'Square'

annot.set_border(width=1, dashes=[1, 2])
annot.set_colors(stroke=blue, fill=gold)
annot.update(opacity=0.5)
print_descr(annot)

r += displ
annot = page.add_circle_annot(r)
# 'Circle'

annot.set_border(width=0.3, dashes=[2])
annot.set_colors(stroke=blue, fill=gold)
annot.update()
print_descr(annot)

r += displ
annot = page.add_file_annot(
r.tl, b""just anything for testing"", ""testdata.txt""
# 'FileAttachment'

)
print_descr(annot)
# annot.rect

r += displ
annot = page.add_stamp_annot(r, stamp=10)
# 'Stamp'

annot.set_colors(stroke=green)
annot.update()
print_descr(annot)

r += displ + (0, 0, 50, 10)
rc = page.insert_textbox(
r,
""This content will be removed upon applying the redaction."",
color=blue,
align=fitz.TEXT_ALIGN_CENTER,
)
annot = page.add_redact_annot(r)
print_descr(annot)

doc.save(__file__.replace("".py"", ""-%i.pdf"" % page.rotation), deflate=True)

This script should lead to the following output:

74
Chapter 10. Annotations

PyMuPDF Documentation, Release 1.23.25

10.1. How to Add and Modify Annotations
75

PyMuPDF Documentation, Release 1.23.25

10.2 How to Use FreeText

This script shows a couple of ways to deal with ‘FreeText’ annotations:

# -*- coding: utf-8 -*-
import fitz

# some colors
blue
= (0,0,1)
green = (0,1,0)
red
= (1,0,0)
gold
= (1,1,0)

# a new PDF with 1 page
doc = fitz.open()
page = doc.new_page()

# 3 rectangles, same size, above each other
r1 = fitz.Rect(100,100,200,150)
r2 = r1 + (0,75,0,75)
r3 = r2 + (0,75,0,75)

# the text, Latin alphabet
t = ""¡Un pequeño texto para practicar!""

# add 3 annots, modify the last one somewhat
a1 = page.add_freetext_annot(r1, t, color=red)
a2 = page.add_freetext_annot(r2, t, fontname=""Ti"", color=blue)
a3 = page.add_freetext_annot(r3, t, fontname=""Co"", color=blue, rotate=90)
a3.set_border(width=0)
a3.update(fontsize=8, fill_color=gold)

# save the PDF
doc.save(""a-freetext.pdf"")

The result looks like this:

76
Chapter 10. Annotations

PyMuPDF Documentation, Release 1.23.25

10.3 Using Buttons and JavaScript

Since MuPDF v1.16, ‘FreeText’ annotations no longer support bold or italic versions of the Times-Roman, Helvetica
or Courier fonts.

A big thank you to our user @kurokawaikki, who contributed the following script to circumvent this restriction.

""""""
Problem: Since MuPDF v1.16 a 'Freetext' annotation font is restricted to the
""normal"" versions (no bold, no italics) of Times-Roman, Helvetica, Courier.
It is impossible to use PyMuPDF to modify this.

Solution: Using Adobe's JavaScript API, it is possible to manipulate properties
of Freetext annotations. Check out these references:
https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf,
or https://www.adobe.com/devnet/acrobat/documentation.html.

Function 'this.getAnnots()'
will return all annotations
as an array. We loop

over this array to set the properties of the text through the 'richContents'
attribute.
There is no explicit property to set text to bold, but it is possible to set
fontWeight=800 (400 is the normal size) of richContents.
Other attributes, like color, italics, etc. can also be set via richContents.

If we have 'FreeText' annotations created with PyMuPDF, we can make use of this
JavaScript feature to modify the font - thus circumventing the above restriction.

Use PyMuPDF v1.16.12 to create a push button that executes a Javascript
containing the desired code. This is what this program does.
Then open the resulting file with Adobe reader (!).
After clicking on the button, all Freetext annotations will be bold, and the
file can be saved.

(continues on next page)

10.3. Using Buttons and JavaScript
77

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

If desired, the button can be removed again, using free tools like PyMuPDF or
PDF XChange editor.

Note / Caution:
---------------
The JavaScript will **only** work if the file is opened with Adobe Acrobat reader!
When using other PDF viewers, the reaction is unforeseeable.
""""""
import sys

import fitz

# this JavaScript will execute when the button is clicked:
jscript = """"""
var annt = this.getAnnots();
annt.forEach(function (item, index) {

try {

var span = item.richContents;
span.forEach(function (it, dx) {

it.fontWeight = 800;

})
item.richContents = span;

} catch (err) {}

});
app.alert('Done');
""""""
i_fn = sys.argv[1]
# input file name

o_fn = ""bold-"" + i_fn
# output filename

doc = fitz.open(i_fn)
# open input

page = doc[0]
# get desired page

# ------------------------------------------------
# make a push button for invoking the JavaScript
# ------------------------------------------------

widget = fitz.Widget()
# create widget

# make it a 'PushButton'
widget.field_type = fitz.PDF_WIDGET_TYPE_BUTTON
widget.field_flags = fitz.PDF_BTN_FIELD_IS_PUSHBUTTON

widget.rect = fitz.Rect(5, 5, 20, 20)
# button position

widget.script = jscript
# fill in JavaScript source text

widget.field_name = ""Make bold""
# arbitrary name

widget.field_value = ""Off""
# arbitrary value

widget.fill_color = (0, 0, 1)
# make button visible

annot = page.add_widget(widget)
# add the widget to the page

doc.save(o_fn)
# output the file

78
Chapter 10. Annotations

PyMuPDF Documentation, Release 1.23.25

10.4 How to Use Ink Annotations

Ink annotations are used to contain freehand scribbling. A typical example may be an image of your signature consisting
of first name and last name. Technically an ink annotation is implemented as a list of lists of points. Each point list
is regarded as a continuous line connecting the points. Different point lists represent independent line segments of the
annotation.

The following script creates an ink annotation with two mathematical curves (sine and cosine function graphs) as line
segments:

import math
import fitz

#------------------------------------------------------------------------------
# preliminary stuff: create function value lists for sine and cosine
#------------------------------------------------------------------------------
w360 = math.pi * 2
# go through full circle

deg = w360 / 360
# 1 degree as radians

rect = fitz.Rect(100,200, 300, 300)
# use this rectangle

first_x = rect.x0
# x starts from left

first_y = rect.y0 + rect.height / 2.
# rect middle means y = 0

x_step = rect.width / 360
# rect width means 360 degrees

y_scale = rect.height / 2.
# rect height means 2

sin_points = []
# sine values go here

cos_points = []
# cosine values go here

for x in range(362):
# now fill in the values

x_coord = x * x_step + first_x
# current x coordinate

y = -math.sin(x * deg)
# sine

p = (x_coord, y * y_scale + first_y)
# corresponding point

sin_points.append(p)
# append

y = -math.cos(x * deg)
# cosine

p = (x_coord, y * y_scale + first_y)
# corresponding point

cos_points.append(p)
# append

#------------------------------------------------------------------------------
# create the document with one page
#------------------------------------------------------------------------------
doc = fitz.open()
# make new PDF

page = doc.new_page()
# give it a page

#------------------------------------------------------------------------------
# add the Ink annotation, consisting of 2 curve segments
#------------------------------------------------------------------------------
annot = page.addInkAnnot((sin_points, cos_points))
# let it look a little nicer
annot.set_border(width=0.3, dashes=[1,])
# line thickness, some dashing

annot.set_colors(stroke=(0,0,1))
# make the lines blue

annot.update()
# update the appearance

page.draw_rect(rect, width=0.3)
# only to demonstrate we did OK

doc.save(""a-inktest.pdf"")

This is the result:

10.4. How to Use Ink Annotations
79

PyMuPDF Documentation, Release 1.23.25

This documentation covers all versions up to 1.23.25.

80
Chapter 10. Annotations

CHAPTER

ELEVEN

DRAWING AND GRAPHICS

PDF files support elementary drawing operations as part of their syntax. This includes basic geometrical objects like
lines, curves, circles, rectangles including specifying colors.

The syntax for such operations is defined in “A Operator Summary” on page 643 of the Adobe PDF References. Spec-
ifying these operators for a PDF page happens in its contents objects.

PyMuPDF implements a large part of the available features via its Shape class, which is comparable to notions like
“canvas” in other packages (e.g. reportlab).

A shape is always created as a child of a page, usually with an instruction like shape = page.new_shape(). The
class defines numerous methods that perform drawing operations on the page’s area. For example, last_point =
shape.draw_rect(rect) draws a rectangle along the borders of a suitably defined rect = fitz.Rect(...).

The returned last_point always is the Point where drawing operation ended (“last point”). Every such elementary
drawing requires a subsequent Shape.finish() to “close” it, but there may be multiple drawings which have one
common finish() method.

In fact, Shape.finish() defines a group of preceding draw operations to form one – potentially rather complex –
graphics object. PyMuPDF provides several predefined graphics in shapes_and_symbols.py which demonstrate how
this works.

If you import this script, you can also directly use its graphics as in the following example:

# -*- coding: utf-8 -*-
""""""
Created on Sun Dec
9 08:34:06 2018

@author: Jorj
@license: GNU AFFERO GPL V3

Create a list of available symbols defined in shapes_and_symbols.py

This also demonstrates an example usage: how these symbols could be used
as bullet-point symbols in some text.

""""""

import fitz
import shapes_and_symbols as sas

# list of available symbol functions and their descriptions
tlist = [
(sas.arrow, ""arrow (easy)""),

(continues on next page)

81

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

(sas.caro, ""caro (easy)""),
(sas.clover, ""clover (easy)""),
(sas.diamond, ""diamond (easy)""),
(sas.dontenter, ""do not enter (medium)""),
(sas.frowney, ""frowney (medium)""),
(sas.hand, ""hand (complex)""),
(sas.heart, ""heart (easy)""),
(sas.pencil, ""pencil (very complex)""),
(sas.smiley, ""smiley (easy)""),
]

r = fitz.Rect(50, 50, 100, 100)
# first rect to contain a symbol

d = fitz.Rect(0, r.height + 10, 0, r.height + 10)
# displacement to next rect

p = (15, -r.height * 0.2)
# starting point of explanation text

rlist = [r]
# rectangle list

for i in range(1, len(tlist)):
# fill in all the rectangles

rlist.append(rlist[i-1] + d)

doc = fitz.open()
# create empty PDF

page = doc.new_page()
# create an empty page

shape = page.new_shape()
# start a Shape (canvas)

for i, r in enumerate(rlist):
tlist[i][0](shape, rlist[i])
# execute symbol creation

shape.insert_text(rlist[i].br + p,
# insert description text

tlist[i][1], fontsize=r.height/1.2)

# store everything to the page's /Contents object
shape.commit()

import os
scriptdir = os.path.dirname(__file__)
doc.save(os.path.join(scriptdir, ""symbol-list.pdf""))
# save the PDF

This is the script’s outcome:

82
Chapter 11. Drawing and Graphics

PyMuPDF Documentation, Release 1.23.25

11.1 How to Extract Drawings

• New in v1.18.0

The drawing commands issued by a page can be extracted. Interestingly, this is possible for all supported document
types – not just PDF: so you can use it for XPS, EPUB and others as well.

Page method, Page.get_drawings() accesses draw commands and converts them into a list of Python dictionaries.
Each dictionary – called a “path” – represents a separate drawing – it may be simple like a single line, or a complex
combination of lines and curves representing one of the shapes of the previous section.

The path dictionary has been designed such that it can easily be used by the Shape class and its methods. Here is an
example for a page with one path, that draws a red-bordered yellow circle inside rectangle Rect(100, 100, 200,
200):

>>> pprint(page.get_drawings())
[{'closePath': True,
'color': [1.0, 0.0, 0.0],
'dashes': '[] 0',
'even_odd': False,
'fill': [1.0, 1.0, 0.0],
'items': [('c',

Point(100.0, 150.0),
Point(100.0, 177.614013671875),
Point(122.38600158691406, 200.0),
Point(150.0, 200.0)),
('c',

(continues on next page)

11.1. How to Extract Drawings
83

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Point(150.0, 200.0),
Point(177.61399841308594, 200.0),
Point(200.0, 177.614013671875),
Point(200.0, 150.0)),
('c',
Point(200.0, 150.0),
Point(200.0, 122.385986328125),
Point(177.61399841308594, 100.0),
Point(150.0, 100.0)),
('c',
Point(150.0, 100.0),
Point(122.38600158691406, 100.0),
Point(100.0, 122.385986328125),
Point(100.0, 150.0))],

'lineCap': (0, 0, 0),
'lineJoin': 0,
'opacity': 1.0,
'rect': Rect(100.0, 100.0, 200.0, 200.0),
'width': 1.0}]
>>>

Note: You need (at least) 4 Bézier curves (of 3rd order) to draw a circle with acceptable precision. See this Wikipedia
article for some background.

The following is a code snippet which extracts the drawings of a page and re-draws them on a new page:

import fitz
doc = fitz.open(""some.file"")
page = doc[0]
paths = page.get_drawings()
# extract existing drawings

# this is a list of ""paths"", which can directly be drawn again using Shape
# -------------------------------------------------------------------------
#
# define some output page with the same dimensions
outpdf = fitz.open()
outpage = outpdf.new_page(width=page.rect.width, height=page.rect.height)
shape = outpage.new_shape()
# make a drawing canvas for the output page

# --------------------------------------
# loop through the paths and draw them
# --------------------------------------
for path in paths:

# ------------------------------------
# draw each entry of the 'items' list
# ------------------------------------
for item in path[""items""]:
# these are the draw commands

if item[0] == ""l"":
# line

shape.draw_line(item[1], item[2])

elif item[0] == ""re"":
# rectangle

shape.draw_rect(item[1])

elif item[0] == ""qu"":
# quad

shape.draw_quad(item[1])

(continues on next page)

84
Chapter 11. Drawing and Graphics

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

elif item[0] == ""c"":
# curve

shape.draw_bezier(item[1], item[2], item[3], item[4])

else:

raise ValueError(""unhandled drawing"", item)

# ------------------------------------------------------
# all items are drawn, now apply the common properties
# to finish the path
# ------------------------------------------------------
shape.finish(
fill=path[""fill""],
# fill color

color=path[""color""],
# line color

dashes=path[""dashes""],
# line dashing

even_odd=path.get(""even_odd"", True),
# control color of overlaps

closePath=path[""closePath""],
# whether to connect last and first point

lineJoin=path[""lineJoin""],
# how line joins should look like

lineCap=max(path[""lineCap""]),
# how line ends should look like

width=path[""width""],
# line width

stroke_opacity=path.get(""stroke_opacity"", 1),
# same value for both

fill_opacity=path.get(""fill_opacity"", 1),
# opacity parameters

)

# all paths processed - commit the shape to its page
shape.commit()
outpdf.save(""drawings-page-0.pdf"")

As can be seen, there is a high congruence level with the Shape class. With one exception: For technical reasons
lineCap is a tuple of 3 numbers here, whereas it is an integer in Shape (and in PDF). So we simply take the maximum
value of that tuple.

Here is a comparison between input and output of an example page, created by the previous script:

Note: The reconstruction of graphics, like shown here, is not perfect. The following aspects will not be reproduced
as of this version:

11.1. How to Extract Drawings
85

PyMuPDF Documentation, Release 1.23.25

• Page definitions can be complex and include instructions for not showing / hiding certain areas to keep them
invisible. Things like this are ignored by Page.get_drawings() - it will always return all paths.

Note: You can use the path list to make your own lists of e.g. all lines or all rectangles on the page and subselect them
by criteria, like color or position on the page etc.

This documentation covers all versions up to 1.23.25.

86
Chapter 11. Drawing and Graphics

CHAPTER

TWELVE

STORIES

This document showcases some typical use cases for Stories.

As mentioned in the tutorial, stories may be created using up to three input sources: HTML, CSS and Archives – all
of which are optional and which, respectively, can be provided programmatically.

The following examples will showcase combinations for using these inputs.

Note: Many of these recipe’s source code are included as examples in the docs folder.

12.1 How to Add a Line of Text with Some Formatting

Here is the inevitable “Hello World” example. We will show two variants:

1. Create using existing HTML source1, that may come from anywhere.

2. Create using the Python API.

Variant using an existing HTML source1 – which in this case is defined as a constant in the script:

import fitz

HTML = """"""
<p style=""font-family: sans-serif;color: blue"">Hello World!</p>
""""""

MEDIABOX = fitz.paper_rect(""letter"")
# output page format: Letter

WHERE = MEDIABOX + (36, 36, -36, -36)
# leave borders of 0.5 inches

story = fitz.Story(html=HTML)
# create story from HTML

writer = fitz.DocumentWriter(""output.pdf"")
# create the writer

(continues on next page)

1 HTML & CSS support

Note: At the time of writing the HTML engine for Stories is fairly basic and supports a subset of CSS2 attributes.

Some important CSS support to consider:

• The only available layout is relative layout.
• background is unavailable, use background-color instead.
• float is unavailable.

87

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

more = 1
# will indicate end of input once it is set to 0

while more:
# loop outputting the story

device = writer.begin_page(MEDIABOX)
# make new page

more, _ = story.place(WHERE)
# layout into allowed rectangle

story.draw(device)
# write on page

writer.end_page()
# finish page

writer.close()
# close output file

Note: The above effect (sans-serif and blue text) could have been achieved by using a separate CSS source like so:

import fitz

CSS = """"""
body {

font-family: sans-serif;
color: blue;

}
""""""

HTML = """"""
<p>Hello World!</p>
""""""

# the story would then be created like this:
story = fitz.Story(html=HTML, user_css=CSS)

The Python API variant – everything is created programmatically:

import fitz

MEDIABOX = fitz.paper_rect(""letter"")
WHERE = MEDIABOX + (36, 36, -36, -36)

story = fitz.Story()
# create an empty story

body = story.body
# access the body of its DOM

with body.add_paragraph() as para:
# store desired content

para.set_font(""sans-serif"").set_color(""blue"").add_text(""Hello World!"")

writer = fitz.DocumentWriter(""output.pdf"")

more = 1

while more:
device = writer.begin_page(MEDIABOX)
more, _ = story.place(WHERE)
story.draw(device)

(continues on next page)

88
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

writer.end_page()

writer.close()

Both variants will produce the same output PDF.

12.2 How to use Images

Images can be referenced in the provided HTML source, or the reference to a desired image can also be stored via the
Python API. In any case, this requires using an Archive, which refers to the place where the image can be found.

Note: Images with the binary content embedded in the HTML source are not supported by stories.

We extend our “Hello World” example from above and display an image of our planet right after the text. Assuming
the image has the name “world.jpg” and is present in the script’s folder, then this is the modified version of the above
Python API variant:

import fitz

MEDIABOX = fitz.paper_rect(""letter"")
WHERE = MEDIABOX + (36, 36, -36, -36)

# create story, let it look at script folder for resources
story = fitz.Story(archive=""."")
body = story.body
# access the body of its DOM

with body.add_paragraph() as para:

# store desired content
para.set_font(""sans-serif"").set_color(""blue"").add_text(""Hello World!"")

# another paragraph for our image:
with body.add_paragraph() as para:

# store image in another paragraph
para.add_image(""world.jpg"")

writer = fitz.DocumentWriter(""output.pdf"")

more = 1

while more:
device = writer.begin_page(MEDIABOX)
more, _ = story.place(WHERE)
story.draw(device)
writer.end_page()

writer.close()

12.2. How to use Images
89

PyMuPDF Documentation, Release 1.23.25

12.3 How to Read External HTML and CSS for a Story

These cases are fairly straightforward.

As a general recommendation, HTML and CSS sources should be read as binary files and decoded before using them
in a story. The Python pathlib.Path provides convenient ways to do this:

import pathlib
import fitz

htmlpath = pathlib.Path(""myhtml.html"")
csspath = pathlib.Path(""mycss.css"")

HTML = htmlpath.read_bytes().decode()
CSS = csspath.read_bytes().decode()

story = fitz.Story(html=HTML, user_css=CSS)

12.4 How to Output Database Content with Story Templates

This script demonstrates how to report SQL database content using an HTML template.

The example SQL database contains two tables:

1. Table “films” contains one row per film with the fields “title”, “director” and (release) “year”.

2. Table “actors” contains one row per actor and film title (fields (actor) “name” and (film) “title”).

The story DOM consists of a template for one film, which reports film data together with a list of casted actors.

Files:

• docs/samples/filmfestival-sql.py

• docs/samples/filmfestival-sql.db

""""""
This is a demo script for using PyMuPDF with its ""Story"" feature.

The following aspects are being covered here:

* The script produces a report of films that are stored in an SQL database
* The report format is provided as a HTML template

The SQL database contains two tables:
1. Table ""films"" which has the columns ""title"" (film title, str), ""director""

(str) and ""year"" (year of release, int).

2. Table ""actors"" which has the columns ""name"" (actor name, str) and ""title""

(the film title where the actor had been casted, str).

The script reads all content of the ""films"" table. For each film title it
reads all rows from table ""actors"" which took part in that film.

(continues on next page)

90
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Comment 1
---------
To keep things easy and free from pesky technical detail, the relevant file
names inherit the name of this script:
- the database's filename is the script name with "".py"" extension replaced

by "".db"".

- the output PDF similarly has script file name with extension "".pdf"".

Comment 2
---------
The SQLITE database has been created using https://sqlitebrowser.org/, a free
multi-platform tool to maintain or manipulate SQLITE databases.
""""""
import os
import sqlite3

import fitz

# ----------------------------------------------------------------------
# HTML template for the film report
# There are four placeholders coded as ""id"" attributes.
# One ""id"" allows locating the template part itself, the other three
# indicate where database text should be inserted.
# ----------------------------------------------------------------------
festival_template = (

""<html><head><title>Just some arbitrary text</title></head>""
'<body><h1 style=""text-align:center"">Hook Norton Film Festival</h1>'
""<ol>""
'<li id=""filmtemplate"">'
'<b id=""filmtitle""></b>'
""<dl>""
'<dt>Director<dd id=""director"">'
'<dt>Release Year<dd id=""filmyear"">'
'<dt>Cast<dd id=""cast"">'
""</dl>""
""</li>""
""</ol>""
""</body></html""

)

# -------------------------------------------------------------------
# define database access
# -------------------------------------------------------------------
dbfilename = __file__.replace("".py"", "".db"")
# the SQLITE database file name

assert os.path.isfile(dbfilename), f'{dbfilename}'
database = sqlite3.connect(dbfilename)
# open database

cursor_films = database.cursor()
# cursor for selecting the films

cursor_casts = database.cursor()
# cursor for selecting actors per film

# select statement for the films - let SQL also sort it for us
select_films = """"""SELECT title, director, year FROM films ORDER BY title""""""

(continues on next page)

12.4. How to Output Database Content with Story Templates
91

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

# select stament for actors, a skeleton: sub-select by film title
select_casts = """"""SELECT name FROM actors WHERE film = ""%s"" ORDER BY name""""""

# -------------------------------------------------------------------
# define the HTML Story and fill it with database data
# -------------------------------------------------------------------
story = fitz.Story(festival_template)
body = story.body
# access the HTML body detail

template = body.find(None, ""id"", ""filmtemplate"")
# find the template part

# read the films from the database and put them all in one Python list
# NOTE: instead we might fetch rows one by one (advisable for large volumes)
cursor_films.execute(select_films)
# execute cursor, and ...

films = cursor_films.fetchall()
# read out what was found

for title, director, year in films:
# iterate through the films

film = template.clone()
# clone template to report each film

film.find(None, ""id"", ""filmtitle"").add_text(title)
# put title in templ

film.find(None, ""id"", ""director"").add_text(director)
# put director

film.find(None, ""id"", ""filmyear"").add_text(str(year))
# put year

# the actors reside in their own table - find the ones for this film title
cursor_casts.execute(select_casts % title)
# execute cursor

casts = cursor_casts.fetchall()
# read actors for the film

# each actor name appears in its own tuple, so extract it from there
film.find(None, ""id"", ""cast"").add_text(""\\n"".join([c[0] for c in casts]))
body.append_child(film)

template.remove()
# remove the template

# -------------------------------------------------------------------
# generate the PDF
# -------------------------------------------------------------------
writer = fitz.DocumentWriter(__file__.replace("".py"", "".pdf""), ""compress"")
mediabox = fitz.paper_rect(""a4"")
# use pages in ISO-A4 format

where = mediabox + (72, 36, -36, -72)
# leave page borders

more = 1
# end of output indicator

while more:
dev = writer.begin_page(mediabox)
# make a new page

more, filled = story.place(where)
# arrange content for this page

story.draw(dev, None)
# write content to page

writer.end_page()
# finish the page

writer.close()
# close the PDF

92
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

12.5 How to Integrate with Existing PDFs

Because a DocumentWriter can only write to a new file, stories cannot be placed on existing pages. This script demon-
strates a circumvention of this restriction.

The basic idea is letting DocumentWriter output to a PDF in memory. Once the story has finished, we re-open this
memory PDF and put its pages to desired locations on existing pages via method Page.show_pdf_page().

Files:

• docs/samples/showpdf-page.py

""""""
Demo of Story class in PyMuPDF
-------------------------------

This script demonstrates how to the results of a fitz.Story output can be
placed in a rectangle of an existing (!) PDF page.

""""""
import io
import os

import fitz

def make_pdf(fileptr, text, rect, font=""sans-serif"", archive=None):

""""""Make a memory DocumentWriter from HTML text and a rect.

Args:

fileptr: a Python file object. For example an io.BytesIO().
text: the text to output (HTML format)
rect: the target rectangle. Will use its width / height as mediabox
font: (str) font family name, default sans-serif
archive: fitz.Archive parameter. To be used if e.g. images or special

fonts should be used.

Returns:

The matrix to convert page rectangles of the created PDF back
to rectangle coordinates in the parameter ""rect"".
Normal use will expect to fit all the text in the given rect.
However, if an overflow occurs, this function will output multiple
pages, and the caller may decide to either accept or retry with
changed parameters.

""""""
# use input rectangle as the page dimension
mediabox = fitz.Rect(0, 0, rect.width, rect.height)
# this matrix converts mediabox back to input rect
matrix = mediabox.torect(rect)

story = fitz.Story(text, archive=archive)
body = story.body
body.set_properties(font=font)
writer = fitz.DocumentWriter(fileptr)

(continues on next page)

12.5. How to Integrate with Existing PDFs
93

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

while True:
device = writer.begin_page(mediabox)
more, _ = story.place(mediabox)
story.draw(device)
writer.end_page()
if not more:

break

writer.close()
return matrix

# -------------------------------------------------------------
# We want to put this in a given rectangle of an existing page
# -------------------------------------------------------------
HTML = """"""
<p>PyMuPDF is a great package! And it still improves significantly from one version to␣

˓→the next one!</p>
<p>It is a Python binding for <b>MuPDF</b>, a lightweight PDF, XPS, and E-book viewer,␣

˓→renderer, and toolkit.<br> Both are maintained and developed by Artifex Software, Inc.

˓→</p>
<p>Via MuPDF it can access files in PDF, XPS, OpenXPS, CBZ, EPUB, MOBI and FB2 (e-books)␣

˓→formats,<br> and it is known for its top
<b><i>performance</i></b> and <b><i>rendering quality.</p>""""""

# Make a PDF page for demo purposes
root = os.path.abspath( f""{__file__}/.."")
doc = fitz.open(f""{root}/mupdf-title.pdf"")
page = doc[0]

WHERE = fitz.Rect(50, 100, 250, 500)
# target rectangle on existing page

fileptr = io.BytesIO()
# let DocumentWriter use this as its file

# -------------------------------------------------------------------
# call DocumentWriter and Story to fill our rectangle
matrix = make_pdf(fileptr, HTML, WHERE)
# -------------------------------------------------------------------
src = fitz.open(""pdf"", fileptr)
# open DocumentWriter output PDF

if src.page_count > 1:
# target rect was too small

raise ValueError(""target WHERE too small"")

# its page 0 contains our result
page.show_pdf_page(WHERE, src, 0)

doc.ez_save(f""{root}/mupdf-title-after.pdf"")

94
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

12.6 How to Make Multi-Columned Layouts and Access Fonts from
Package pymupdf-fonts

This script outputs an article (taken from Wikipedia) that contains text and multiple images and uses a 2-column page
layout.

In addition, two “Ubuntu” font families from package pymupdf-fonts are used instead of defaulting to Base-14 fonts.

Yet another feature used here is that all data – the images and the article HTML – are jointly stored in a ZIP file.

Files:

• docs/samples/quickfox.py

• docs/samples/quickfox.zip

""""""
This is a demo script using PyMuPDF's Story class to output text as a PDF with
a two-column page layout.

The script demonstrates the following features:
* How to fill columns or table cells of complex page layouts
* How to embed images
* How to modify existing, given HTML sources for output (text indent, font size)
* How to use fonts defined in package ""pymupdf-fonts""
* How to use ZIP files as Archive

--------------
The example is taken from the somewhat modified Wikipedia article
https://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.
--------------
""""""

import io
import os
import zipfile
import fitz

thisdir = os.path.dirname(os.path.abspath(__file__))
myzip = zipfile.ZipFile(os.path.join(thisdir, ""quickfox.zip""))
arch = fitz.Archive(myzip)

if fitz.fitz_fontdescriptors:

# we want to use the Ubuntu fonts for sans-serif and for monospace
CSS = fitz.css_for_pymupdf_font(""ubuntu"", archive=arch, name=""sans-serif"")
CSS = fitz.css_for_pymupdf_font(""ubuntm"", CSS=CSS, archive=arch, name=""monospace"")

else:

# No pymupdf-fonts available.
CSS=""""

docname = __file__.replace("".py"", "".pdf"")
# output PDF file name

(continues on next page)

12.6. How to Make Multi-Columned Layouts and Access Fonts from Package pymupdf-fonts
95

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

HTML = myzip.read(""quickfox.html"").decode()

# make the Story object
story = fitz.Story(HTML, user_css=CSS, archive=arch)

# --------------------------------------------------------------
# modify the DOM somewhat
# --------------------------------------------------------------
body = story.body
# access HTML body

body.set_properties(font=""sans-serif"")
# and give it our font globally

# modify certain nodes
para = body.find(""p"", None, None)
# find relevant nodes (here: paragraphs)

while para != None:
para.set_properties(
# method MUST be used for existing nodes

indent=15,
fontsize=13,
)
para = para.find_next(""p"", None, None)

# choose PDF page size
MEDIABOX = fitz.paper_rect(""letter"")
# text appears only within this subrectangle
WHERE = MEDIABOX + (36, 36, -36, -36)

# --------------------------------------------------------------
# define page layout within the WHERE rectangle
# --------------------------------------------------------------
COLS = 2
# layout: 2 cols 1 row

ROWS = 1
TABLE = fitz.make_table(WHERE, cols=COLS, rows=ROWS)
# fill the cells of each page in this sequence:
CELLS = [TABLE[i][j] for i in range(ROWS) for j in range(COLS)]

fileobject = io.BytesIO()
# let DocumentWriter write to memory

writer = fitz.DocumentWriter(fileobject)
# define the writer

more = 1
while more:
# loop until all input text has been written out

dev = writer.begin_page(MEDIABOX)
# prepare a new output page

for cell in CELLS:

# content may be complete after any cell, ...
if more:
# so check this status first

more, _ = story.place(cell)
story.draw(dev)
writer.end_page()
# finish the PDF page

writer.close()
# close DocumentWriter output

# for housekeeping work re-open from memory
doc = fitz.open(""pdf"", fileobject)
doc.ez_save(docname)

96
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

12.7 How to Make a Layout which Wraps Around a Predefined “no go
area” Layout

This is a demo script using PyMuPDF’s Story class to output text as a PDF with a two-column page layout.

The script demonstrates the following features:

• Layout text around images of an existing (“target”) PDF.

• Based on a few global parameters, areas on each page are identified, that can be used to receive text layouted by
a Story.

• These global parameters are not stored anywhere in the target PDF and must therefore be provided in some way:

– The width of the border(s) on each page.

– The fontsize to use for text. This value determines whether the provided text will fit in the empty spaces
of the (fixed) pages of target PDF. It cannot be predicted in any way. The script ends with an exception if
target PDF has not enough pages, and prints a warning message if not all pages receive at least some text.
In both cases, the FONTSIZE value can be changed (a float value).

– Use of a 2-column page layout for the text.

• The layout creates a temporary (memory) PDF. Its produced page content (the text) is used to overlay the corre-
sponding target page. If text requires more pages than are available in target PDF, an exception is raised. If not
all target pages receive at least some text, a warning is printed.

• The script reads “image-no-go.pdf” in its own folder. This is the “target” PDF. It contains 2 pages with each
2 images (from the original article), which are positioned at places that create a broad overall test coverage.
Otherwise the pages are empty.

• The script produces “quickfox-image-no-go.pdf” which contains the original pages and image positions, but with
the original article text laid out around them.

Files:

• docs/samples/quickfox-image-no-go.py

• docs/samples/quickfox-image-no-go.pdf

• docs/samples/quickfox.zip

""""""
This is a demo script using PyMuPDF's Story class to output text as a PDF with
a two-column page layout.

The script demonstrates the following features:
* Layout text around images of an existing (""target"") PDF.
* Based on a few global parameters, areas on each page are identified, that

can be used to receive text layouted by a Story.

* These global parameters are not stored anywhere in the target PDF and

must therefore be provided in some way.
- The width of the border(s) on each page.

(continues on next page)

12.7. How to Make a Layout which Wraps Around a Predefined “no go area” Layout
97

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

- The fontsize to use for text. This value determines whether the provided

text will fit in the empty spaces of the (fixed) pages of target PDF. It
cannot be predicted in any way. The script ends with an exception if
target PDF has not enough pages, and prints a warning message if not all
pages receive at least some text. In both cases, the FONTSIZE value
can be changed (a float value).

- Use of a 2-column page layout for the text.

* The layout creates a temporary (memory) PDF. Its produced page content

(the text) is used to overlay the corresponding target page. If text
requires more pages than are available in target PDF, an exception is raised.
If not all target pages receive at least some text, a warning is printed.

* The script reads ""image-no-go.pdf"" in its own folder. This is the ""target"" PDF.

It contains 2 pages with each 2 images (from the original article), which are
positioned at places that create a broad overall test coverage. Otherwise the
pages are empty.

* The script produces ""quickfox-image-no-go.pdf"" which contains the original pages

and image positions, but with the original article text laid out around them.

Note:
--------------
This script version uses just image positions to derive ""No-Go areas"" for
layouting the text. Other PDF objects types are detectable by PyMuPDF and may
be taken instead or in addition, without influencing the layouting.
The following are candidates for other such ""No-Go areas"". Each can be detected
and located by PyMuPDF:
* Annotations
* Drawings
* Existing text

--------------
The text and images are taken from the somewhat modified Wikipedia article
https://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog.
--------------
""""""

import io
import os
import zipfile
import fitz

thisdir = os.path.dirname(os.path.abspath(__file__))
myzip = zipfile.ZipFile(os.path.join(thisdir, ""quickfox.zip""))

docname = os.path.join(thisdir, ""image-no-go.pdf"")
# ""no go"" input PDF file name

outname = os.path.join(thisdir, ""quickfox-image-no-go.pdf"")
# output PDF file name

BORDER = 36
# global parameter

FONTSIZE = 12.5
# global parameter

COLS = 2
# number of text columns, global parameter

def analyze_page(page):

(continues on next page)

98
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

""""""Compute MediaBox and rectangles on page that are free to receive text.

Notes:

Assume a BORDER around the page, make 2 columns of the resulting
sub-rectangle and extract the rectangles of all images on page.
For demo purposes, the image rectangles are taken as ""NO-GO areas""
on the page when writing text with the Story.
The function returns free areas for each of the columns.

Returns:

(page.number, mediabox, CELLS), where CELLS is a list of free cells.

""""""
prect = page.rect
# page rectangle - will be our MEDIABOX later

where = prect + (BORDER, BORDER, -BORDER, -BORDER)
TABLE = fitz.make_table(where, rows=1, cols=COLS)

# extract rectangles covered by images on this page
IMG_RECTS = sorted(
# image rects on page (sort top-left to bottom-right)

[fitz.Rect(item[""bbox""]) for item in page.get_image_info()],
key=lambda b: (b.y1, b.x0),
)

def free_cells(column):

""""""Return free areas in this column.""""""
free_stripes = []
# y-value pairs wrapping a free area stripe

# intersecting images: block complete intersecting column stripe
col_imgs = [(b.y0, b.y1) for b in IMG_RECTS if abs(b & column) > 0]
s_y0 = column.y0
# top y-value of column

for y0, y1 in col_imgs:
# an image stripe

if y0 > s_y0 + FONTSIZE:
# image starts below last free btm value

free_stripes.append((s_y0, y0))
# store as free stripe

s_y0 = y1
# start of next free stripe

if s_y0 + FONTSIZE < column.y1:
# enough room to column bottom

free_stripes.append((s_y0, column.y1))

if free_stripes == []:
# covers ""no image in this column""

free_stripes.append((column.y0, column.y1))

# make available cells of this column
CELLS = [fitz.Rect(column.x0, y0, column.x1, y1) for (y0, y1) in free_stripes]
return CELLS

# collection of available Story rectangles on page
CELLS = []
for i in range(COLS):
CELLS.extend(free_cells(TABLE[0][i]))

return page.number, prect, CELLS

HTML = myzip.read(""quickfox.html"").decode()

(continues on next page)

12.7. How to Make a Layout which Wraps Around a Predefined “no go area” Layout
99

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

# --------------------------------------------------------------
# Make the Story object
# --------------------------------------------------------------
story = fitz.Story(HTML)

# modify the DOM somewhat
body = story.body
# access HTML body

body.set_properties(font=""sans-serif"")
# and give it our font globally

# modify certain nodes
para = body.find(""p"", None, None)
# find relevant nodes (here: paragraphs)

while para != None:
para.set_properties(
# method MUST be used for existing nodes

indent=15,
fontsize=FONTSIZE,
)
para = para.find_next(""p"", None, None)

# we remove all image references, because the target PDF already has them
img = body.find(""img"", None, None)
while img != None:
next_img = img.find_next(""img"", None, None)
img.remove()
img = next_img

page_info = {}
# contains MEDIABOX and free CELLS per page

doc = fitz.open(docname)
for page in doc:
pno, mediabox, cells = analyze_page(page)
page_info[pno] = (mediabox, cells)
doc.close()
# close target PDF for now - re-open later

fileobject = io.BytesIO()
# let DocumentWriter write to memory

writer = fitz.DocumentWriter(fileobject)
# define output writer

more = 1
# stop if this ever becomes zero

pno = 0
# count output pages

while more:
# loop until all HTML text has been written

try:
MEDIABOX, CELLS = page_info[pno]

except KeyError:
# too much text space required: reduce fontsize?

raise ValueError(""text does not fit on target PDF"")
dev = writer.begin_page(MEDIABOX)
# prepare a new output page

for cell in CELLS:
# iterate over free cells on this page

if not more:
# need to check this for every cell

continue

more, _ = story.place(cell)
story.draw(dev)
writer.end_page()
# finish the PDF page

pno += 1

(continues on next page)

100
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

writer.close()
# close DocumentWriter output

# Re-open writer output, read its pages and overlay target pages with them.
# The generated pages have same dimension as their targets.
src = fitz.open(""pdf"", fileobject)
doc = fitz.open(doc.name)
for page in doc:
# overlay every target page with the prepared text

if page.number >= src.page_count:

print(f""Text only uses {src.page_count} target pages!"")
continue
# story did not need all target pages?

# overlay target page
page.show_pdf_page(page.rect, src, page.number)

# DEBUG start --- draw the text rectangles
# mb, cells = page_info[page.number]
# for cell in cells:
#
page.draw_rect(cell, color=(1, 0, 0))

# DEBUG stop ---

doc.ez_save(outname)

12.8 How to Output an HTML Table

Outputting HTML tables is supported as follows:

• Flat table layouts are supported (“rows x columns”), no support of the “colspan” / “rowspan” attributes.

• Table header tag th supports attribute “scope” with values “row” or “col”. Applicable text will be bold by default.

• Column widths are computed automatically based on column content. They cannot be directly set.

• Table cells may contain images which will be considered in the column width calculation magic.

• Row heights are computed automatically based on row content - leading to multi-line rows where needed.

• The potentially multiple lines of a table row will always be kept together on one page (respectively “where”
rectangle) and not be splitted.

• Table header rows are only shown on the first page / “where” rectangle.

• The “style” attribute is ignored when given directly in HTML table elements. Styling for a table and its elements
must happen separately, in CSS source or within the style tag.

• Styling for tr elements is not supported and ignored. Therefore, a table-wide grid or alternating row background
colors are not supported. One of the following example scripts however shows an easy way to deal with this
limitation.

Files:

• docs/samples/table01.py This script reflects basic features.

12.8. How to Output an HTML Table
101

PyMuPDF Documentation, Release 1.23.25

""""""
Demo script for basic HTML table support in Story objects

Outputs a table with three columns that fits on one Letter page.
The content of each row is filled via the Story's template mechanism.
Column widths and row heights are automatically computed by MuPDF.
Some styling via a CSS source is also demonstrated:

- The table header row has a gray background
- Each cell shows a border at its top
- The Story's body uses the sans-serif font family
- The text of one of the columns is set to blue

Dependencies
-------------
PyMuPDF v1.22.0 or later
""""""
import fitz

table_text = (
# the content of each table row

(

""Length"",
""integer"",
""""""(Required) The number of bytes from the beginning of the line following the␣

˓→keyword stream to the last byte just before the keyword endstream. (There may be an␣

˓→additional EOL marker, preceding endstream, that is not included in the count and is␣

˓→not logically part of the stream data.) See “Stream Extent,” above, for further␣

˓→discussion."""""",
),
(

""Filter"",
""name or array"",
""""""(Optional) The name of a filter to be applied in processing the stream data␣

˓→found between the keywords stream and endstream, or an array of such names. Multiple␣

˓→filters should be specified in the order in which they are to be applied."""""",
),
(

""FFilter"",
""name or array"",
""""""(Optional; PDF 1.2) The name of a filter to be applied in processing the data␣

˓→found in the stream's external file, or an array of such names. The same rules apply as␣

˓→for Filter."""""",
),
(

""FDecodeParms"",
""dictionary or array"",
""""""(Optional; PDF 1.2) A parameter dictionary, or an array of such dictionaries,␣

˓→used by the filters specified by FFilter. The same rules apply as for DecodeParms."""""",
),
(

""DecodeParms"",
""dictionary or array"",
""""""(Optional) A parameter dictionary or an array of such dictionaries, used by␣

(continues on next page)

102
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

˓→the filters specified by Filter. If there is only one filter and that filter has␣

˓→parameters, DecodeParms must be set to the filter's parameter dictionary unless all the␣

˓→filter's parameters have their default values, in which case the DecodeParms entry may␣

˓→be omitted. If there are multiple filters and any of the filters has parameters set to␣

˓→nondefault values, DecodeParms must be an array with one entry for each filter: either␣

˓→the parameter dictionary for that filter, or the null object if that filter has no␣

˓→parameters (or if all of its parameters have their default values). If none of the␣

˓→filters have parameters, or if all their parameters have default values, the␣

˓→DecodeParms entry may be omitted. (See implementation note 7 in Appendix H.)"""""",
),
(

""DL"",
""integer"",
""""""(Optional; PDF 1.5) A non-negative integer representing the number of bytes␣

˓→in the decoded (defiltered) stream. It can be used to determine, for example, whether␣

˓→enough disk space is available to write a stream to a file.\\nThis value should be␣

˓→considered a hint only; for some stream filters, it may not be possible to determine␣

˓→this value precisely."""""",
),
(

""F"",
""file specification"",
""""""(Optional; PDF 1.2) The file containing the stream data. If this entry is␣

˓→present, the bytes between stream and endstream are ignored, the filters are specified␣

˓→by FFilter rather than Filter, and the filter parameters are specified by FDecodeParms␣

˓→rather than DecodeParms. However, the Length entry should still specify the number of␣

˓→those bytes. (Usually, there are no bytes and Length is 0.) (See implementation note␣

˓→46 in Appendix H.)"""""",
),
)

# Only a minimal HTML source is required to provide the Story's working
HTML = """"""
<html>
<body><h2>TABLE 3.4 Entries common to all stream dictionaries</h2>
<table>

<tr>

<th>KEY</th><th>TYPE</th><th>VALUE</th>

</tr>
<tr id=""row"">

<td id=""col0""></td><td id=""col1""></td><td id=""col2""></td>

</tr>

""""""

""""""
---------------------------------------------------------------------
Just for demo purposes, set:
- header cell background to gray
- text color in col1 to blue
- a border line at the top of all table cells
- all text to the sans-serif font
---------------------------------------------------------------------

(continues on next page)

12.8. How to Output an HTML Table
103

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

""""""
CSS = """"""th {

background-color: #aaa;

}

td[id=""col1""] {

color: blue;

}

td, tr {

border: 1px solid black;
border-right-width: 0px;
border-left-width: 0px;
border-bottom-width: 0px;

}
body {

font-family: sans-serif;

}
""""""

story = fitz.Story(HTML, user_css=CSS)
# define the Story

body = story.body
# access the HTML <body> of it

template = body.find(None, ""id"", ""row"")
# find the template with name ""row""

parent = template.parent
# access its parent i.e., the <table>

for col0, col1, col2 in table_text:
row = template.clone()
# make a clone of the row template

# add text to each cell in the duplicated row
row.find(None, ""id"", ""col0"").add_text(col0)
row.find(None, ""id"", ""col1"").add_text(col1)
row.find(None, ""id"", ""col2"").add_text(col2)
parent.append_child(row)
# add new row to <table>

template.remove()
# remove the template

# Story is ready - output it via a writer
writer = fitz.DocumentWriter(__file__.replace("".py"", "".pdf""), ""compress"")
mediabox = fitz.paper_rect(""letter"")
# size of one output page

where = mediabox + (36, 36, -36, -36)
# use this sub-area for the content

more = True
# detects end of output

while more:
dev = writer.begin_page(mediabox)
# start a page, returning a device

more, filled = story.place(where)
# compute content fitting into ""where""

story.draw(dev)
# output it to the page

writer.end_page()
# finalize the page

writer.close()
# close the output

• docs/samples/national-capitals.py Advanced script extending table output options using simple addi-
tional code:

– Multi-page output simulating repeating header rows

104
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

– Alternating table row background colors

– Table rows and columns delimited by gridlines

– Table rows dynamically generated / filled with data from an SQL database

""""""
Demo script using (Py-) MuPDF ""Story"" feature.

The following features are implemented:

* Use of Story ""template"" feature to provide row content
* Use database access (SQLITE) to fetch row content
* Use ElementPosition feature to locate cell positions on page
* Simulate feature ""Table Header Repeat""
* Simulate feature ""Cell Grid Lines""

""""""
import io
import sqlite3
import sys

import fitz

""""""
Table data. Used to populate a temporary SQL database, which will be processed by the␣

˓→script.
Its only purpose is to avoid carrying around a separate database file.
""""""
table_data = """"""China;Beijing;21542000;1.5%;2018
Japan;Tokyo;13921000;11.2%;2019
DR Congo;Kinshasa;12691000;13.2%;2017
Russia;Moscow;12655050;8.7%;2021
Indonesia;Jakarta;10562088;3.9%;2020
Egypt;Cairo;10107125;9.3%;2022
South Korea;Seoul;9508451;18.3%;2022
Mexico;Mexico City;9209944;7.3%;2020
United Kingdom;London;9002488;13.4%;2020
Bangladesh;Dhaka;8906039;5.3%;2011
Peru;Lima;8852000;26.3%;2012
Iran;Tehran;8693706;9.9%;2016
Thailand;Bangkok;8305218;11.6%;2010
Vietnam;Hanoi;8053663;8.3%;2019
Iraq;Baghdad;7682136;17.6%;2021
Saudi Arabia;Riyadh;7676654;21.4%;2018
Hong Kong;Hong Kong;7291600;100%;2022
Colombia;Bogotá;7181469;13.9%;2011
Chile;Santiago;6310000;32.4%;2012
Turkey;Ankara;5747325;6.8%;2021
Singapore;Singapore;5453600;91.8%;2021
Afghanistan;Kabul;4601789;11.5%;2021
Kenya;Nairobi;4397073;8.3%;2019
Jordan;Amman;4061150;36.4%;2021

(continues on next page)

12.8. How to Output an HTML Table
105

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Algeria;Algiers;3915811;8.9%;2011
Germany;Berlin;3677472;4.4%;2021
Spain;Madrid;3305408;7.0%;2021
Ethiopia;Addis Ababa;3040740;2.5%;2012
Kuwait;Kuwait City;2989000;70.3%;2018
Guatemala;Guatemala City;2934841;16.7%;2020
South Africa;Pretoria;2921488;4.9%;2011
Ukraine;Kyiv;2920873;6.7%;2021
Argentina;Buenos Aires;2891082;6.4%;2010
North Korea;Pyongyang;2870000;11.1%;2016
Uzbekistan;Tashkent;2860600;8.4%;2022
Italy;Rome;2761632;4.7%;2022
Ecuador;Quito;2800388;15.7%;2020
Cameroon;Yaoundé;2765568;10.2%;2015
Zambia;Lusaka;2731696;14.0%;2020
Sudan;Khartoum;2682431;5.9%;2012
Brazil;Brasília;2648532;1.2%;2012
Taiwan;Taipei (de facto);2608332;10.9%;2020
Yemen;Sanaa;2575347;7.8%;2012
Angola;Luanda;2571861;7.5%;2020
Burkina Faso;Ouagadougou;2453496;11.1%;2019
Ghana;Accra;2388000;7.3%;2017
Somalia;Mogadishu;2388000;14.0%;2021
Azerbaijan;Baku;2303100;22.3%;2022
Cambodia;Phnom Penh;2281951;13.8%;2019
Venezuela;Caracas;2245744;8.0%;2016
France;Paris;2139907;3.3%;2022
Cuba;Havana;2132183;18.9%;2020
Zimbabwe;Harare;2123132;13.3%;2012
Syria;Damascus;2079000;9.7%;2019
Belarus;Minsk;1996553;20.8%;2022
Austria;Vienna;1962779;22.0%;2022
Poland;Warsaw;1863056;4.9%;2021
Philippines;Manila;1846513;1.6%;2020
Mali;Bamako;1809106;8.3%;2009
Malaysia;Kuala Lumpur;1782500;5.3%;2019
Romania;Bucharest;1716983;8.9%;2021
Hungary;Budapest;1706851;17.6%;2022
Congo;Brazzaville;1696392;29.1%;2015
Serbia;Belgrade;1688667;23.1%;2021
Uganda;Kampala;1680600;3.7%;2019
Guinea;Conakry;1660973;12.3%;2014
Mongolia;Ulaanbaatar;1466125;43.8%;2020
Honduras;Tegucigalpa;1444085;14.0%;2021
Senegal;Dakar;1438725;8.5%;2021
Niger;Niamey;1334984;5.3%;2020
Uruguay;Montevideo;1319108;38.5%;2011
Bulgaria;Sofia;1307439;19.0%;2021
Oman;Muscat;1294101;28.6%;2021
Czech Republic;Prague;1275406;12.1%;2022
Madagascar;Antananarivo;1275207;4.4%;2018
Kazakhstan;Astana;1239900;6.5%;2022

(continues on next page)

106
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Nigeria;Abuja;1235880;0.6%;2011
Georgia;Tbilisi;1201769;32.0%;2022
Mauritania;Nouakchott;1195600;25.9%;2019
Qatar;Doha;1186023;44.1%;2020
Libya;Tripoli;1170000;17.4%;2019
Myanmar;Naypyidaw;1160242;2.2%;2014
Rwanda;Kigali;1132686;8.4%;2012
Mozambique;Maputo;1124988;3.5%;2020
Dominican Republic;Santo Domingo;1111838;10.0%;2010
Armenia;Yerevan;1096100;39.3%;2021
Kyrgyzstan;Bishkek;1074075;16.5%;2021
Sierra Leone;Freetown;1055964;12.5%;2015
Nicaragua;Managua;1055247;15.4%;2020
Canada;Ottawa;1017449;2.7%;2021
Pakistan;Islamabad;1014825;0.4%;2017
Liberia;Monrovia;1010970;19.5%;2008
United Arab Emirates;Abu Dhabi;1010092;10.8%;2020
Malawi;Lilongwe;989318;5.0%;2018
Haiti;Port-au-Prince;987310;8.6%;2015
Sweden;Stockholm;978770;9.4%;2021
Eritrea;Asmara;963000;26.6%;2020
Israel;Jerusalem;936425;10.5%;2019
Laos;Vientiane;927724;12.5%;2019
Chad;N'Djamena;916000;5.3%;2009
Netherlands;Amsterdam;905234;5.2%;2022
Central African Republic;Bangui;889231;16.3%;2020
Panama;Panama City;880691;20.2%;2013
Tajikistan;Dushanbe;863400;8.9%;2020
Nepal;Kathmandu;845767;2.8%;2021
Togo;Lomé;837437;9.7%;2010
Turkmenistan;Ashgabat;791000;12.5%;2017
Moldova;Chişinău;779300;25.5%;2019
Croatia;Zagreb;769944;19.0%;2021
Gabon;Libreville;703904;30.1%;2013
Norway;Oslo;697010;12.9%;2021
Macau;Macau;671900;97.9%;2022
United States;Washington D.C.;670050;0.2%;2021
Jamaica;Kingston;662491;23.4%;2019
Finland;Helsinki;658864;11.9%;2021
Tunisia;Tunis;638845;5.2%;2014
Denmark;Copenhagen;638117;10.9%;2021
Greece;Athens;637798;6.1%;2021
Latvia;Riga;605802;32.3%;2021
Djibouti;Djibouti (city);604013;54.6%;2012
Ireland;Dublin;588233;11.8%;2022
Morocco;Rabat;577827;1.6%;2014
Lithuania;Vilnius;576195;20.7%;2022
El Salvador;San Salvador;570459;9.0%;2019
Albania;Tirana;557422;19.5%;2011
North Macedonia;Skopje;544086;25.9%;2015
South Sudan;Juba;525953;4.9%;2017
Paraguay;Asunción;521559;7.8%;2020

(continues on next page)

12.8. How to Output an HTML Table
107

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Portugal;Lisbon;509614;5.0%;2020
Guinea-Bissau;Bissau;492004;23.9%;2015
Slovakia;Bratislava;440948;8.1%;2020
Estonia;Tallinn;438341;33.0%;2021
Australia;Canberra;431380;1.7%;2020
Namibia;Windhoek;431000;17.0%;2020
Tanzania;Dodoma;410956;0.6%;2012
Papua New Guinea;Port Moresby;364145;3.7%;2011
Ivory Coast;Yamoussoukro;361893;1.3%;2020
Lebanon;Beirut;361366;6.5%;2014
Bolivia;Sucre;360544;3.0%;2022
Puerto Rico (US);San Juan;342259;10.5%;2020
Costa Rica;San José;342188;6.6%;2018
Lesotho;Maseru;330760;14.5%;2016
Cyprus;Nicosia;326739;26.3%;2016
Equatorial Guinea;Malabo;297000;18.2%;2018
Slovenia;Ljubljana;285604;13.5%;2021
East Timor;Dili;277279;21.0%;2015
Bosnia and Herzegovina;Sarajevo;275524;8.4%;2013
Bahamas;Nassau;274400;67.3%;2016
Botswana;Gaborone;273602;10.6%;2020
Benin;Porto-Novo;264320;2.0%;2013
Suriname;Paramaribo;240924;39.3%;2012
India;New Delhi;249998;0.0%;2011
Sahrawi Arab Democratic Republic;Laayoune (claimed) - Tifariti (de facto);217732 - 3000;

˓→—;2014
New Zealand;Wellington;217000;4.2%;2021
Bahrain;Manama;200000;13.7%;2020
Kosovo;Pristina;198897;12.0%;2011
Montenegro;Podgorica;190488;30.3%;2020
Belgium;Brussels;187686;1.6%;2022
Cape Verde;Praia;159050;27.1%;2017
Mauritius;Port Louis;147066;11.3%;2018
Curaçao (Netherlands);Willemstad;136660;71.8%;2011
Burundi;Gitega;135467;1.1%;2020
Switzerland;Bern (de facto);134591;1.5%;2020
Transnistria;Tiraspol;133807;38.5%;2015
Maldives;Malé;133412;25.6%;2014
Iceland;Reykjavík;133262;36.0%;2021
Luxembourg;Luxembourg City;124509;19.5%;2021
Guyana;Georgetown;118363;14.7%;2012
Bhutan;Thimphu;114551;14.7%;2017
Comoros;Moroni;111326;13.5%;2016
Barbados;Bridgetown;110000;39.1%;2014
Sri Lanka;Sri Jayawardenepura Kotte;107925;0.5%;2012
Brunei;Bandar Seri Begawan;100700;22.6%;2007
Eswatini;Mbabane;94874;8.0%;2010
New Caledonia (France);Nouméa;94285;32.8%;2019
Fiji;Suva;93970;10.2%;2017
Solomon Islands;Honiara;92344;13.0%;2021
Republic of Artsakh;Stepanakert;75000;62.5%;2021
Gambia;Banjul;73000;2.8%;2013

(continues on next page)

108
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

São Tomé and Príncipe;São Tomé;71868;32.2%;2015
Kiribati;Tarawa;70480;54.7%;2020
Vanuatu;Port Vila;51437;16.1%;2016
Northern Mariana Islands (USA);Saipan;47565;96.1%;2017
Samoa;Apia;41611;19.0%;2021
Palestine;Ramallah (de facto);38998;0.8%;2017
Monaco;Monaco;38350;104.5%;2020
Jersey (UK);Saint Helier;37540;34.2%;2018
Trinidad and Tobago;Port of Spain;37074;2.4%;2011
Cayman Islands (UK);George Town;34399;50.5%;2021
Gibraltar (UK);Gibraltar;34003;104.1%;2020
Grenada;St. George's;33734;27.1%;2012
Aruba (Netherlands);Oranjestad;28294;26.6%;2010
Isle of Man (UK);Douglas;27938;33.2%;2011
Marshall Islands;Majuro;27797;66.1%;2011
Tonga;Nukualofa;27600;26.0%;2022
Seychelles;Victoria;26450;24.8%;2010
French Polynesia (France);Papeete;26926;8.9%;2017
Andorra;Andorra la Vella;22873;28.9%;2022
Faroe Islands (Denmark);Tórshavn;22738;43.0%;2022
Antigua and Barbuda;St. John's;22219;23.8%;2011
Belize;Belmopan;20621;5.2%;2016
Saint Lucia;Castries;20000;11.1%;2013
Guernsey (UK);Saint Peter Port;18958;30.1%;2019
Greenland (Denmark);Nuuk;18800;33.4%;2021
Dominica;Roseau;14725;20.3%;2011
Saint Kitts and Nevis;Basseterre;14000;29.4%;2018
Saint Vincent and the Grenadines;Kingstown;12909;12.4%;2012
British Virgin Islands (UK);Road Town;12603;40.5%;2012
Åland (Finland);Mariehamn;11736;39.0%;2021
U.S. Virgin Islands (US);Charlotte Amalie;14477;14.5%;2020
Micronesia;Palikir;6647;5.9%;2010
Tuvalu;Funafuti;6320;56.4%;2017
Malta;Valletta;5827;1.1%;2019
Liechtenstein;Vaduz;5774;14.8%;2021
Saint Pierre and Miquelon (France);Saint-Pierre;5394;91.7%;2019
Cook Islands (NZ);Avarua;4906;28.9%;2016
San Marino;City of San Marino;4061;12.0%;2021
Turks and Caicos Islands (UK);Cockburn Town;3720;8.2%;2016
American Samoa (USA);Pago Pago;3656;8.1%;2010
Saint Martin (France);Marigot;3229;10.1%;2017
Saint Barthélemy (France);Gustavia;2615;24.1%;2010
Falkland Islands (UK);Stanley;2460;65.4%;2016
Svalbard (Norway);Longyearbyen;2417;82.2%;2020
Sint Maarten (Netherlands);Philipsburg;1894;4.3%;2011
Christmas Island (Australia);Flying Fish Cove;1599;86.8%;2016
Anguilla (UK);The Valley;1067;6.8%;2011
Guam (US);Hagåtña;1051;0.6%;2010
Wallis and Futuna (France);Mata Utu;1029;8.9%;2018
Bermuda (UK);Hamilton;854;1.3%;2016
Nauru;Yaren (de facto);747;6.0%;2011
Saint Helena (UK);Jamestown;629;11.6%;2016

(continues on next page)

12.8. How to Output an HTML Table
109

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Niue (NZ);Alofi;597;30.8%;2017
Tokelau (NZ);Atafu;541;29.3%;2016
Vatican City;Vatican City (city-state);453;100%;2019
Montserrat (UK);Brades (de facto) - Plymouth (de jure);449 - 0;-;2011
Norfolk Island (Australia);Kingston;341;-;2015
Palau;Ngerulmud;271;1.5%;2010
Cocos (Keeling) Islands (Australia);West Island;134;24.6%;2011
Pitcairn Islands (UK);Adamstown;40;100.0%;2021
South Georgia and the South Sandwich Islands (UK);King Edward Point;22;73.3%;2018""""""

# -------------------------------------------------------------------
# HTML template for the report. We define no table header <th> items
# because this is done in post processing.
# The actual template part is the table row, identified by id ""row"".
# The content of each cell will be filled using the respective id.
# -------------------------------------------------------------------
HTML = """"""

<h1 style=""text-align:center"">World Capital Cities</h1>
<p><i>Percent ""%"" is city population as a percentage of the country, as of ""Year"".</

˓→i>

</p><p></p>
<table>
<tr id=""row"">

<td id=""country""></td>
<td id=""capital""></td>
<td id=""population""></td>
<td id=""percent""></td>
<td id=""year""></td>

</tr>
</table>

""""""

# -------------------------------------------------------------------
# Sets font-family globally to sans-serif, and text-align to right
# for the numerical table columns.
# -------------------------------------------------------------------
CSS = """"""
body {

font-family: sans-serif;

}
td[id=""population""], td[id=""percent""], td[id=""year""] {

text-align: right;
padding-right: 2px;

}""""""

# -------------------------------------------------------------------
# recorder function for cell positions
# -------------------------------------------------------------------
coords = {}
# stores cell gridline coordinates

def recorder(elpos):

(continues on next page)

110
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

""""""We only record positions of table rows and cells.

Information is stored in ""coords"" with page number as key.
""""""
global coords
# dictionary of row and cell coordinates per page

if elpos.open_close != 2:
# only consider coordinates provided at ""close""

return

if elpos.id not in (""row"", ""country"", ""capital"", ""population"", ""percent"", ""year""):

return
# only look at row / cell content

rect = fitz.Rect(elpos.rect)
# cell rectangle

if rect.y1 > elpos.filled:
# ignore stuff below the filled rectangle

return

# per page, we store the floats top-most y, right-most x, column left
# and row bottom borders.
x, y, x1, y0 = coords.get(elpos.page, (set(), set(), 0, sys.maxsize))

if elpos.id != ""row"":
x.add(rect.x0)
# add cell left border coordinate

if rect.x1 > x1:
# store right-most cell border on page

x1 = rect.x1

else:
y.add(rect.y1)
# add row bottom border coordinate

if rect.y0 < y0:
# store top-most cell border per page

y0 = rect.y0

coords[elpos.page] = (x, y, x1, y0)
# write back info per page

return

# -------------------------------------------------------------------
# define database access: make an intermediate memory database for
# our demo purposes.
# -------------------------------------------------------------------
dbfilename = "":memory:""
# the SQLITE database file name

database = sqlite3.connect(dbfilename)
# open database

cursor = database.cursor()
# multi-purpose database cursor

# Define and fill the SQLITE database
cursor.execute(

""""""CREATE TABLE capitals (Country text, Capital text, Population text, Percent text,␣

˓→Year text)""""""
)

for value in table_data.splitlines():
cursor.execute(""INSERT INTO capitals VALUES (?,?,?,?,?)"", value.split("";""))

# select statement for the rows - let SQL also sort it for us
select = """"""SELECT * FROM capitals ORDER BY ""Country"" """"""

# -------------------------------------------------------------------

(continues on next page)

12.8. How to Output an HTML Table
111

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

# define the HTML Story and fill it with database data
# -------------------------------------------------------------------
story = fitz.Story(HTML, user_css=CSS)
body = story.body
# access the HTML body detail

template = body.find(None, ""id"", ""row"")
# find the template part

table = body.find(""table"", None, None)
# find start of table

# read the rows from the database and put them all in one Python list
# NOTE: instead, we might fetch rows one by one (advisable for large volumes)

cursor.execute(select)
# execute cursor, and ...

rows = cursor.fetchall()
# read out what was found

database.close()
# no longer needed

for country, capital, population, percent, year in rows:
# iterate through the row

row = template.clone()
# clone the template to report each row

row.find(None, ""id"", ""country"").add_text(country)
row.find(None, ""id"", ""capital"").add_text(capital)
row.find(None, ""id"", ""population"").add_text(population)
row.find(None, ""id"", ""percent"").add_text(percent)
row.find(None, ""id"", ""year"").add_text(year)

table.append_child(row)

template.remove()
# remove the template

# -------------------------------------------------------------------
# generate the PDF and write it to memory
# -------------------------------------------------------------------
fp = io.BytesIO()
writer = fitz.DocumentWriter(fp)
mediabox = fitz.paper_rect(""letter"")
# use pages in Letter format

where = mediabox + (36, 36, -36, -72)
# leave page borders

more = True
page = 0
while more:
dev = writer.begin_page(mediabox)
# make a new page

if page > 0:
# leave room above the cells for inserting header row

delta = (0, 20, 0, 0)

else:
delta = (0, 0, 0, 0)
more, filled = story.place(where + delta)
# arrange content on this rectangle

story.element_positions(recorder, {""page"": page, ""filled"": where.y1})
story.draw(dev)
# write content to page

writer.end_page()
# finish the page

page += 1

writer.close()
# close the PDF

# -------------------------------------------------------------------
# re-open memory PDF for inserting gridlines and header rows
# -------------------------------------------------------------------

(continues on next page)

112
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

doc = fitz.open(""pdf"", fp)
for page in doc:
page.wrap_contents()
# ensure all ""cm"" commands are properly wrapped

x, y, x1, y0 = coords[page.number]
# read coordinates of the page

x = sorted(list(x)) + [x1]
# list of cell left-right borders

y = [y0] + sorted(list(y))
# list of cell top-bottom borders

shape = page.new_shape()
# make a canvas to draw upon

for item in y:
# draw horizontal lines (one under each row)

shape.draw_line((x[0] - 2, item), (x[-1] + 2, item))

for i in range(len(y)):
# alternating row coloring

if i % 2:
rect = (x[0] - 2, y[i - 1], x[-1] + 2, y[i])
shape.draw_rect(rect)

for i in range(len(x)):
# draw vertical lines

d = 2 if i == len(x) - 1 else -2
shape.draw_line((x[i] + d, y[0]), (x[i] + d, y[-1]))

# Write header row above table content
y0 -= 5
# bottom coord for header row text

shape.insert_text((x[0], y0), ""Country"", fontname=""hebo"", fontsize=12)
shape.insert_text((x[1], y0), ""Capital"", fontname=""hebo"", fontsize=12)
shape.insert_text((x[2], y0), ""Population"", fontname=""hebo"", fontsize=12)
shape.insert_text((x[3], y0), ""
%"", fontname=""hebo"", fontsize=12)
shape.insert_text((x[4], y0), ""Year"", fontname=""hebo"", fontsize=12)

# Write page footer
y0 = page.rect.height - 50
# top coordinate of footer bbox

bbox = fitz.Rect(0, y0, page.rect.width, y0 + 20)
# footer bbox

page.insert_textbox(
bbox,
f""World Capital Cities, Page {page.number+1} of {doc.page_count}"",
align=fitz.TEXT_ALIGN_CENTER,
)
shape.finish(width=0.3, color=0.5, fill=0.9)
# rectangles and gray lines

shape.commit(overlay=False)
# put the drawings in background

doc.subset_fonts()
doc.save(__file__.replace("".py"", "".pdf""), deflate=True, garbage=4, pretty=True)
doc.close()

12.8. How to Output an HTML Table
113

PyMuPDF Documentation, Release 1.23.25

12.9 How to Create a Simple Grid Layout

By creating a sequence of Story objects within a grid created via the make_table function a developer can create grid
layouts as required.

Files:

• docs/samples/simple-grid.py

import fitz

MEDIABOX = fitz.paper_rect(""letter"")
# output page format: Letter

GRIDSPACE = fitz.Rect(100, 100, 400, 400)
GRID = fitz.make_table(GRIDSPACE, rows=2, cols=2)
CELLS = [GRID[i][j] for i in range(2) for j in range(2)]
text_table = (""A"", ""B"", ""C"", ""D"")
writer = fitz.DocumentWriter(__file__.replace("".py"", "".pdf""))
# create the writer

device = writer.begin_page(MEDIABOX)
# make new page

for i, text in enumerate(text_table):
story = fitz.Story(em=1)
body = story.body
with body.add_paragraph() as para:
para.set_bgcolor(""#ecc"")
para.set_pagebreak_after()
# fills whole cell with bgcolor

para.set_align(""center"")
para.set_fontsize(16)
para.add_text(f""\\n\\n\\n{text}"")
story.place(CELLS[i])
story.draw(device)
del story

writer.end_page()
# finish page

writer.close()
# close output file

12.10 How to Generate a Table of Contents

This script lists the source code of all Python scripts that live in the script’s directory.

Files:

• docs/samples/code-printer.py

""""""
Demo script PyMuPDF Story class
-------------------------------

(continues on next page)

114
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Read the Python sources in the script directory and create a PDF of all their
source codes.

The following features are included as a specialty:
1. HTML source for fitz.Story created via Python API exclusively
2. Separate Story objects for page headers and footers
3. Use of HTML ""id"" elements for identifying source start pages
4. Generate a Table of Contents pointing to source file starts. This

- uses the new Stoy callback feature
- uses Story also for making the TOC page(s)

""""""
import io
import os
import time

import fitz

THISDIR = os.path.dirname(os.path.abspath(__file__))
TOC = []
# this will contain the TOC list items

CURRENT_ID = """"
# currently processed filename - stored by recorder func

MEDIABOX = fitz.paper_rect(""a4-l"")
# chosen page size

WHERE = MEDIABOX + (36, 50, -36, -36)
# sub rectangle for source content

# location of the header rectangle
HDR_WHERE = (36, 5, MEDIABOX.width - 36, 40)
# location of the footer rectangle
FTR_WHERE = (36, MEDIABOX.height - 36, MEDIABOX.width - 36, MEDIABOX.height)

def recorder(elpos):

""""""Callback function invoked during story.place().
This function generates / collects all TOC items and updates the value of
CURRENT_ID - which is used to update the footer line of each page.
""""""
global TOC, CURRENT_ID
if not elpos.open_close & 1:
# only consider ""open"" items

return

level = elpos.heading
y0 = elpos.rect[1]
# top of written rectangle (use for TOC)

if level > 0:
# this is a header (h1 - h6)

pno = elpos.page + 1
# the page number

TOC.append(
(
level,
elpos.text,
elpos.page + 1,
y0,
)
)
return

(continues on next page)

12.10. How to Generate a Table of Contents
115

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

CURRENT_ID = elpos.id if elpos.id else """"
# update for footer line

return

def header_story(text):

""""""Make the page header""""""
header = fitz.Story()
hdr_body = header.body
hdr_body.add_paragraph().set_properties(
align=fitz.fitz.TEXT_ALIGN_CENTER,
bgcolor=""#eee"",
font=""sans-serif"",
bold=True,
fontsize=12,
color=""green"",
).add_text(text)
return header

def footer_story(text):

""""""Make the page footer""""""
footer = fitz.Story()
ftr_body = footer.body
ftr_body.add_paragraph().set_properties(
bgcolor=""#eee"",
align=fitz.TEXT_ALIGN_CENTER,
color=""blue"",
fontsize=10,
font=""sans-serif"",
).add_text(text)
return footer

def code_printer(outfile):

""""""Output the generated PDF to outfile.""""""
global MAX_TITLE_LEN
where = +WHERE
writer = fitz.DocumentWriter(outfile, """")
print_time = time.strftime(""%Y-%m-%d %H:%M:%S (%z)"")
thispath = os.path.abspath(os.curdir)
basename = os.path.basename(thispath)

story = fitz.Story()
body = story.body
body.set_properties(font=""sans-serif"")

text = f""Python sources in folder '{THISDIR}'""

body.add_header(1).add_text(text)
# the only h1 item in the story

files = os.listdir(THISDIR)
# list / select Python files in our directory

i = 1

(continues on next page)

116
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

for code_file in files:

if not code_file.endswith("".py""):

continue

# read Python file source
fileinput = open(os.path.join(THISDIR, code_file), ""rb"")
text = fileinput.read().decode()
fileinput.close()

# make level 2 header
hdr = body.add_header(2)
if i > 1:
hdr.set_pagebreak_before()
hdr.add_text(f""{i}. Listing of file '{code_file}'"")

# Write the file code
body.add_codeblock().set_bgcolor((240, 255, 210)).set_color(""blue"").set_id(
code_file
).set_fontsize(10).add_text(text)

# Indicate end of a source file
body.add_paragraph().set_align(fitz.TEXT_ALIGN_CENTER).add_text(

f""---------- End of File '{code_file}' ----------""

)
i += 1
# update file counter

i = 0
while True:
i += 1
device = writer.begin_page(MEDIABOX)
# create Story objects for header, footer and the rest.
header = header_story(f""Python Files in '{THISDIR}'"")
hdr_ok, _ = header.place(HDR_WHERE)
if hdr_ok != 0:

raise ValueError(""header does not fit"")
header.draw(device, None)

# --------------------------------------------------------------
# Write the file content.
# --------------------------------------------------------------
more, filled = story.place(where)
# Inform the callback function
# Args:
#
recorder: the Python function to call

#
{}: dictionary containing anything - we pass the page number

story.element_positions(recorder, {""page"": i - 1})
story.draw(device, None)

# --------------------------------------------------------------
# Make / write page footer.
# We MUST have a paragraph b/o background color / alignment
# --------------------------------------------------------------

(continues on next page)

12.10. How to Generate a Table of Contents
117

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

if CURRENT_ID:
text = f""File '{CURRENT_ID}' printed at {print_time}{chr(160)*5}{'-'*10}

˓→{chr(160)*5}Page {i}""

else:
text = f""Printed at {print_time}{chr(160)*5}{'-'*10}{chr(160)*5}Page {i}""

footer = footer_story(text)
# write the page footer
ftr_ok, _ = footer.place(FTR_WHERE)
if ftr_ok != 0:

raise ValueError(""footer does not fit"")
footer.draw(device, None)

writer.end_page()
if more == 0:

break

writer.close()

if __name__ == ""__main__"" or os.environ.get('PYTEST_CURRENT_TEST'):
fileptr1 = io.BytesIO()
t0 = time.perf_counter()
code_printer(fileptr1)
# make the PDF

t1 = time.perf_counter()
doc = fitz.open(""pdf"", fileptr1)
old_count = doc.page_count
# -----------------------------------------------------------------------------
# Post-processing step to make / insert the toc
# This also works using fitz.Story:
# - make a new PDF in memory which contains pages with the TOC text
# - add these TOC pages to the end of the original file
# - search item text on the inserted pages and cover each with a PDF link
# - move the TOC pages to the front of the document
# -----------------------------------------------------------------------------
story = fitz.Story()
body = story.body
body.add_header(1).set_font(""sans-serif"").add_text(""Table of Contents"")
# prefix TOC with an entry pointing to this page
TOC.insert(0, [1, ""Table of Contents"", old_count + 1, 36])

for item in TOC[1:]:
# write the file name headers as TOC lines

body.add_paragraph().set_font(""sans-serif"").add_text(
item[1] + f"" - ({item[2]})""

)
fileptr2 = io.BytesIO()
# put TOC pages to a separate PDF initially

writer = fitz.DocumentWriter(fileptr2)
i = 1
more = 1
while more:
device = writer.begin_page(MEDIABOX)
header = header_story(f""Python Files in '{THISDIR}'"")
# write the page header
hdr_ok, _ = header.place(HDR_WHERE)

(continues on next page)

118
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

header.draw(device, None)

more, filled = story.place(WHERE)
story.draw(device, None)

footer = footer_story(f""TOC-{i}"")
# separate page numbering scheme

# write the page footer
ftr_ok, _ = footer.place(FTR_WHERE)
footer.draw(device, None)
writer.end_page()
i += 1

writer.close()
doc2 = fitz.open(""pdf"", fileptr2)
# open TOC pages as another PDF

doc.insert_pdf(doc2)
# and append to the main PDF

new_range = range(old_count, doc.page_count)
# the TOC page numbers

pages = [doc[i] for i in new_range]
# these are the TOC pages within main PDF

for item in TOC:
# search for TOC item text to get its rectangle

for page in pages:
rl = page.search_for(item[1], flags=~(fitz.TEXT_PRESERVE_LIGATURES | fitz.

˓→TEXT_PRESERVE_SPANS))

if rl != []:
# this text must be on next page

break

rect = rl[0]
# rectangle of TOC item text

link = {
# make a link from it

""kind"": fitz.LINK_GOTO,
""from"": rect,
""to"": fitz.Point(0, item[3]),
""page"": item[2] - 1,
}
page.insert_link(link)

# insert the TOC in the main PDF
doc.set_toc(TOC)
# move all the TOC pages to the desired place (1st page here)
for i in new_range:
doc.move_page(doc.page_count - 1, 0)
doc.ez_save(__file__.replace("".py"", "".pdf""))

It features the following capabilities:

• Automatic generation of a Table of Contents (TOC) on separately numbered pages at the start of the document -
using a specialized Story.

• Use of 3 separate Story objects per page: header story, footer story and the story for printing the Python sources.

– The page footer is automatically changed to show the name of the current Python file.

• Use of Story.element_positions() to collect the data for the TOC and for the dynamic adjustment of page
footers. This is an example of a bidirectional communication between the story output process and the script.

• The main PDF with the Python sources is being written to memory by its DocumentWriter. Another Story /

DocumentWriter pair is then used to create a (memory) PDF for the TOC pages. Finally, both these PDFs are
joined and the result stored to disk.

12.10. How to Generate a Table of Contents
119

PyMuPDF Documentation, Release 1.23.25

12.11 How to Display a List from JSON Data

This example takes some JSON data input which it uses to populate a Story. It also contains some visual text formatting
and shows how to add links.

Files:

• docs/samples/json-example.py

import fitz
import json

my_json =
""""""

[

{

""name"" :
""Five-storied Pagoda"",

""temple"" :
""Rurik¯o-ji"",

""founded"" :
""middle Muromachi period, 1442"",

""region"" :
""Yamaguchi, Yamaguchi"",

""position"" :
""34.190181,131.472917""

},
{

""name"" :
""Founder's Hall"",

""temple"" :
""Eih¯o-ji"",

""founded"" :
""early Muromachi period"",

""region"" :
""Tajimi, Gifu"",

""position"" :
""35.346144,137.129189""

},
{

""name"" :
""Fud¯od¯o"",

""temple"" :
""Kong¯obu-ji"",

""founded"" :
""early Kamakura period"",

""region"" :
""K¯oya, Wakayama"",

""position"" :
""34.213103,135.580397""

},
{

""name"" :
""Goeid¯o"",

""temple"" :
""Nishi Honganji"",

""founded"" :
""Edo period, 1636"",

""region"" :
""Kyoto"",

""position"" :
""34.991394,135.751689""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""Mur¯o-ji"",

""founded"" :
""early Heian period"",

""region"" :
""Uda, Nara"",

""position"" :
""34.536586819357986,136.0395548452301""

},

(continues on next page)

120
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

{

""name"" :
""Golden Hall"",

""temple"" :
""Fud¯o-in"",

""founded"" :
""late Muromachi period, 1540"",

""region"" :
""Hiroshima"",

""position"" :
""34.427014,132.471117""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""Ninna-ji"",

""founded"" :
""Momoyama period, 1613"",

""region"" :
""Kyoto"",

""position"" :
""35.031078,135.713811""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""Mii-dera"",

""founded"" :
""Momoyama period, 1599"",

""region"" :
""¯Otsu, Shiga"",

""position"" :
""35.013403,135.852861""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""T¯osh¯odai-ji"",

""founded"" :
""Nara period, 8th century"",

""region"" :
""Nara, Nara"",

""position"" :
""34.675619,135.784842""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""T¯o-ji"",

""founded"" :
""Momoyama period, 1603"",

""region"" :
""Kyoto"",

""position"" :
""34.980367,135.747686""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""T¯odai-ji"",

""founded"" :
""middle Edo period, 1705"",

""region"" :
""Nara, Nara"",

""position"" :
""34.688992,135.839822""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""H¯ory¯u-ji"",

""founded"" :
""Asuka period, by 693"",

""region"" :
""Ikaruga, Nara"",

""position"" :
""34.614317,135.734458""

},
{

""name"" :
""Golden Hall"",

""temple"" :
""Daigo-ji"",

(continues on next page)

12.11. How to Display a List from JSON Data
121

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

""founded"" :
""late Heian period"",

""region"" :
""Kyoto"",

""position"" :
""34.951481,135.821747""

},
{

""name"" :
""Keig¯u-in Main Hall"",

""temple"" :
""K¯ory¯u-ji"",

""founded"" :
""early Kamakura period, before 1251"",

""region"" :
""Kyoto"",

""position"" :
""35.015028,135.705425""

},
{

""name"" :
""Konpon-ch¯ud¯o"",

""temple"" :
""Enryaku-ji"",

""founded"" :
""early Edo period, 1640"",

""region"" :
""¯Otsu, Shiga"",

""position"" :
""35.070456,135.840942""

},
{

""name"" :
""Kor¯o"",

""temple"" :
""T¯osh¯odai-ji"",

""founded"" :
""early Kamakura period, 1240"",

""region"" :
""Nara, Nara"",

""position"" :
""34.675847,135.785069""

},
{

""name"" :
""K¯of¯uz¯o"",

""temple"" :
""H¯ory¯u-ji"",

""founded"" :
""early Heian period"",

""region"" :
""Ikaruga, Nara"",

""position"" :
""34.614439,135.735428""

},
{

""name"" :
""Large Lecture Hall"",

""temple"" :
""H¯ory¯u-ji"",

""founded"" :
""middle Heian period, 990"",

""region"" :
""Ikaruga, Nara"",

""position"" :
""34.614783,135.734175""

},
{

""name"" :
""Lecture Hall"",

""temple"" :
""Zuiry¯u-ji"",

""founded"" :
""early Edo period, 1655"",

""region"" :
""Takaoka, Toyama"",

""position"" :
""36.735689,137.010019""

},
{

""name"" :
""Lecture Hall"",

""temple"" :
""T¯osh¯odai-ji"",

""founded"" :
""Nara period, 763"",

""region"" :
""Nara, Nara"",

""position"" :
""34.675933,135.784842""

(continues on next page)

122
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

},
{

""name"" :
""Lotus Flower Gate"",

""temple"" :
""T¯o-ji"",

""founded"" :
""early Kamakura period"",

""region"" :
""Kyoto"",

""position"" :
""34.980678,135.746314""

},
{

""name"" :
""Main Hall"",

""temple"" :
""Akishinodera"",

""founded"" :
""early Kamakura period"",

""region"" :
""Nara, Nara"",

""position"" :
""34.703769,135.776189""

}

]

""""""

# the result is a Python dictionary:
my_dict = json.loads(my_json)

MEDIABOX = fitz.paper_rect(""letter"")
# output page format: Letter

WHERE = MEDIABOX + (36, 36, -36, -36)
writer = fitz.DocumentWriter(""json-example.pdf"")
# create the writer

story = fitz.Story()
body = story.body

for i, entry in enumerate(my_dict):

for attribute, value in entry.items():
para = body.add_paragraph()

if attribute == ""position"":
para.set_fontsize(10)
para.add_link(f""www.google.com/maps/@{value},14z"")

else:
para.add_span()
para.set_color(""#990000"")
para.set_fontsize(14)
para.set_bold()
para.add_text(f""{attribute} "")
para.add_span()
para.set_fontsize(18)
para.add_text(f""{value}"")

body.add_horizontal_line()

# This while condition will check a value from the Story `place` method
# for whether all content for the story has been written (0), otherwise
# more content is waiting to be written (1)

(continues on next page)

12.11. How to Display a List from JSON Data
123

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

more = 1
while more:
device = writer.begin_page(MEDIABOX)
# make new page

more, _ = story.place(WHERE)
story.draw(device)
writer.end_page()
# finish page

writer.close()
# close output file

del story

12.12 Using the Alternative Story.write*() functions

The Story.write*() functions provide a different way to use the Story functionality, removing the need for calling
code to implement a loop that calls Story.place() and Story.draw() etc, at the expense of having to provide at
least a rectfn() callback.

12.12.1 How to do Basic Layout with Story.write()

This script lays out multiple copies of its own source code, into four rectangles per page.

Files:

• docs/samples/story-write.py

""""""
Demo script for PyMuPDF's `Story.write()` method.

This is a way of laying out a story into a PDF document, that avoids the need
to write a loop that calls `story.place()` and `story.draw()`.

Instead just a single function call is required, albeit with a `rectfn()`
callback that returns the rectangles into which the story is placed.
""""""

import html

import fitz

# Create html containing multiple copies of our own source code.
#
with open(__file__) as f:
text = f.read()
text = html.escape(text)
html = f'''

(continues on next page)

124
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

<!DOCTYPE html>
<body>

<h1>Contents of {__file__}</h1>

<h2>Normal</h2>
<pre>
{text}
</pre>

<h2>Strong</h2>
<strong>
<pre>
{text}
</pre>
</strong>

<h2>Em</h2>
<em>
<pre>
{text}
</pre>
</em>

</body>
'''

def rectfn(rect_num, filled):

'''
We return four rectangles per page in this order:

1 3
2 4

'''
page_w = 800
page_h = 600
margin = 50
rect_w = (page_w - 3*margin) / 2
rect_h = (page_h - 3*margin) / 2

if rect_num % 4 == 0:

# New page.
mediabox = fitz.Rect(0, 0, page_w, page_h)

else:
mediabox = None

# Return one of four rects in turn.
rect_x = margin + (rect_w+margin) * ((rect_num // 2) % 2)
rect_y = margin + (rect_h+margin) * (rect_num % 2)
rect = fitz.Rect(rect_x, rect_y, rect_x + rect_w, rect_y + rect_h)
#print(f'rectfn(): rect_num={rect_num} filled={filled}. Returning: rect={rect}')
return mediabox, rect, None

(continues on next page)

12.12. Using the Alternative Story.write*() functions
125

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

story = fitz.Story(html, em=8)

out_path = __file__.replace('.py', '.pdf')
writer = fitz.DocumentWriter(out_path)

story.write(writer, rectfn)
writer.close()

12.12.2 How
to
do
Iterative
Layout
for
a
Table
of
Contents
with
Story.
write_stabilized()

This script creates html content dynamically, adding a contents section based on ElementPosition items that have non-
zero .heading values.

The contents section is at the start of the document, so modifications to the contents can change page numbers in the
rest of the document, which in turn can cause page numbers in the contents section to be incorrect.

So the script uses Story.write_stabilized() to repeatedly lay things out until things are stable.

Files:

• docs/samples/story-write-stabilized.py

""""""
Demo script for PyMuPDF's `fitz.Story.write_stabilized()`.

`fitz.Story.write_stabilized()` is similar to `fitz.Story.write()`,
except instead of taking a fixed html document, it does iterative layout
of dynamically-generated html content (provided by a callback) to a
`fitz.DocumentWriter`.

For example this allows one to add a dynamically-generated table of contents
section while ensuring that page numbers are patched up until stable.
""""""

import textwrap

import fitz

def rectfn(rect_num, filled):

'''
We return one rect per page.
'''
rect = fitz.Rect(10, 20, 290, 380)
mediabox = fitz.Rect(0, 0, 300, 400)
#print(f'rectfn(): rect_num={rect_num} filled={filled}')

(continues on next page)

126
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

return mediabox, rect, None

def contentfn(positions):

'''
Returns html content, with a table of contents derived from `positions`.
'''
ret = ''
ret += textwrap.dedent('''

<!DOCTYPE html>
<body>
<h2>Contents</h2>
<ul>
''')

# Create table of contents with links to all <h1..6> sections in the
# document.
for position in positions:

if position.heading and (position.open_close & 1):
text = position.text if position.text else ''
if position.id:
ret += f""
<li><a href=\\""#{position.id}\\"">{text}</a>\\n""

else:
ret += f""
<li>{text}\\n""

ret += f""
<ul>\\n""

ret += f""
<li>page={position.page_num}\\n""

ret += f""
<li>depth={position.depth}\\n""

ret += f""
<li>heading={position.heading}\\n""

ret += f""
<li>id={position.id!r}\\n""

ret += f""
<li>href={position.href!r}\\n""

ret += f""
<li>rect={position.rect}\\n""

ret += f""
<li>text={text!r}\\n""

ret += f""
<li>open_close={position.open_close}\\n""

ret += f""
</ul>\\n""

ret += '</ul>\\n'

# Main content.
ret += textwrap.dedent(f'''

<h1>First section</h1>
<p>Contents of first section.

<h1>Second section</h1>
<p>Contents of second section.
<h2>Second section first subsection</h2>

<p>Contents of second section first subsection.

<h1>Third section</h1>
<p>Contents of third section.

(continues on next page)

12.12. Using the Alternative Story.write*() functions
127

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

</body>
''')
ret = ret.strip()
with open(__file__.replace('.py', '.html'), 'w') as f:
f.write(ret)

return ret;

out_path = __file__.replace('.py', '.pdf')
writer = fitz.DocumentWriter(out_path)
fitz.Story.write_stabilized(writer, contentfn, rectfn)
writer.close()

12.12.3 How
to
do
Iterative
Layout
and
Create
PDF
Links
with
Story.
write_stabilized_links()

This script is similar to the one described in “How to use Story.write_stabilized()” above, except that the gen-
erated PDF also contains links that correspond to the internal links in the original html.

This
is
done
by
using
Story.write_stabilized_links();
this
is
slightly
different
from
Story.
write_stabilized():

• It does not take a DocumentWriter writer arg.

• It returns a PDF Document instance.

[The reasons for this are a little involved; for example a DocumentWriter is not necessarily a PDF writer, so doesn’t
really work in a PDF-specific API.]

Files:

• docs/samples/story-write-stabilized-links.py

""""""
Demo script for PyMuPDF's `fitz.Story.write_stabilized_with_links()`.

`fitz.Story.write_stabilized_links()` is similar to
`fitz.Story.write_stabilized()` except that it creates a PDF `fitz.Document`
that contains PDF links generated from all internal links in the original html.
""""""

import textwrap

import fitz

def rectfn(rect_num, filled):

'''
We return one rect per page.

(continues on next page)

128
Chapter 12. Stories

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

'''
rect = fitz.Rect(10, 20, 290, 380)
mediabox = fitz.Rect(0, 0, 300, 400)
#print(f'rectfn(): rect_num={rect_num} filled={filled}')
return mediabox, rect, None

def contentfn(positions):

'''
Returns html content, with a table of contents derived from `positions`.
'''
ret = ''
ret += textwrap.dedent('''

<!DOCTYPE html>
<body>
<h2>Contents</h2>
<ul>
''')

# Create table of contents with links to all <h1..6> sections in the
# document.
for position in positions:

if position.heading and (position.open_close & 1):
text = position.text if position.text else ''
if position.id:
ret += f""
<li><a href=\\""#{position.id}\\"">{text}</a>\\n""

else:
ret += f""
<li>{text}\\n""

ret += f""
<ul>\\n""

ret += f""
<li>page={position.page_num}\\n""

ret += f""
<li>depth={position.depth}\\n""

ret += f""
<li>heading={position.heading}\\n""

ret += f""
<li>id={position.id!r}\\n""

ret += f""
<li>href={position.href!r}\\n""

ret += f""
<li>rect={position.rect}\\n""

ret += f""
<li>text={text!r}\\n""

ret += f""
<li>open_close={position.open_close}\\n""

ret += f""
</ul>\\n""

ret += '</ul>\\n'

# Main content.
ret += textwrap.dedent(f'''

<h1>First section</h1>
<p>Contents of first section.
<ul>
<li>External <a href=""https://artifex.com/"">link to https://artifex.com/</a>.
<li><a href=""#idtest"">Link to IDTEST</a>.
<li><a href=""#nametest"">Link to NAMETEST</a>.
</ul>

(continues on next page)

12.12. Using the Alternative Story.write*() functions
129

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

<h1>Second section</h1>
<p>Contents of second section.
<h2>Second section first subsection</h2>

<p>Contents of second section first subsection.
<p id=""idtest"">IDTEST

<h1>Third section</h1>
<p>Contents of third section.
<p><a name=""nametest"">NAMETEST</a>.

</body>
''')
ret = ret.strip()
with open(__file__.replace('.py', '.html'), 'w') as f:
f.write(ret)

return ret;

out_path = __file__.replace('.py', '.pdf')
document = fitz.Story.write_stabilized_with_links(contentfn, rectfn)
document.save(out_path)

This documentation covers all versions up to 1.23.25.

130
Chapter 12. Stories

CHAPTER

THIRTEEN

JOURNALLING

Starting with version 1.19.0, journalling is possible when updating PDF documents.

Journalling is a logging mechanism which permits either reverting or re-applying changes to a PDF. Similar to LUWs
“Logical Units of Work” in modern database systems, one can group a set of updates into an “operation”. In MuPDF
journalling, an operation plays the role of a LUW.

Note: In contrast to LUW implementations found in database systems, MuPDF journalling happens on a per docu-
ment level. There is no support for simultaneous updates across multiple PDFs: one would have to establish one’s own
logic here.

• Journalling must be enabled via a document method. Journalling is possible for existing or new documents.
Journalling can be disabled only by closing the file.

• Once enabled, every change must happen inside an operation – otherwise an exception is raised. An operation is
started and stopped via document methods. Updates happening between these two calls form an LUW and can
thus collectively be rolled back or re-applied, or, in MuPDF terminology “undone” resp. “redone”.

• At any point, the journalling status can be queried: whether journalling is active, how many operations have been
recorded, whether “undo” or “redo” is possible, the current position inside the journal, etc.

• The journal can be saved to or loaded from a file. These are document methods.

• When loading a journal file, compatibility with the document is checked and journalling is automatically enabled
upon success.

• For an existing PDF being journalled, a special new save method is available: Document.save_snapshot().
This performs a special incremental save that includes all journalled updates so far. If its journal is saved at
the same time (immediately after the document snapshot), then document and journal are in sync and can later
on be used together to undo or redo operations or to continue journalled updates – just as if there had been no
interruption.

• The snapshot PDF is a valid PDF in every aspect and fully usable. If the document is however changed in any
way without using its journal file, then a desynchronization will take place and the journal is rendered unusable.

• Snapshot files are structured like incremental updates. Nevertheless, the internal journalling logic requires, that
saving must happen to a new file. So the user should develop a file naming convention to support recognizable
relationships between an original PDF, like original.pdf and its snapshot sets, like original-snap1.pdf /
original-snap1.log, original-snap2.pdf / original-snap2.log, etc.

131

PyMuPDF Documentation, Release 1.23.25

13.1 Example Session 1

Description:

• Make a new PDF and enable journalling. Then add a page and some text lines – each as a separate operation.

• Navigate within the journal, undoing and redoing these updates and displaying status and file results:

>>> import fitz
>>> doc=fitz.open()
>>> doc.journal_enable()

>>> # try update without an operation:
>>> page = doc.new_page()
mupdf: No journalling operation started
... omitted lines
RuntimeError: No journalling operation started

>>> doc.journal_start_op(""op1"")
>>> page = doc.new_page()
>>> doc.journal_stop_op()

>>> doc.journal_start_op(""op2"")
>>> page.insert_text((100,100), ""Line 1"")
>>> doc.journal_stop_op()

>>> doc.journal_start_op(""op3"")
>>> page.insert_text((100,120), ""Line 2"")
>>> doc.journal_stop_op()

>>> doc.journal_start_op(""op4"")
>>> page.insert_text((100,140), ""Line 3"")
>>> doc.journal_stop_op()

>>> # show position in journal
>>> doc.journal_position()
(4, 4)
>>> # 4 operations recorded - positioned at bottom
>>> # what can we do?
>>> doc.journal_can_do()
{'undo': True, 'redo': False}
>>> # currently only undos are possible. Print page content:
>>> print(page.get_text())
Line 1
Line 2
Line 3

>>> # undo last insert:
>>> doc.journal_undo()
>>> # show combined status again:
>>> doc.journal_position();doc.journal_can_do()
(3, 4)
{'undo': True, 'redo': True}
>>> print(page.get_text())

(continues on next page)

132
Chapter 13. Journalling

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Line 1
Line 2

>>> # our position is now second to last
>>> # last text insertion was reverted
>>> # but we can redo / move forward as well:
>>> doc.journal_redo()
>>> # our combined status:
>>> doc.journal_position();doc.journal_can_do()
(4, 4)
{'undo': True, 'redo': False}
>>> print(page.get_text())
Line 1
Line 2
Line 3
>>> # line 3 has appeared again!

13.2 Example Session 2

Description:

• Similar to previous, but after undoing some operations, we now add a different update. This will cause:

– permanent removal of the undone journal entries

– the new update operation will become the new last entry.

>>> doc=fitz.open()
>>> doc.journal_enable()
>>> doc.journal_start_op(""Page insert"")
>>> page=doc.new_page()
>>> doc.journal_stop_op()
>>> for i in range(5):

doc.journal_start_op(""insert-%i"" % i)
page.insert_text((100, 100 + 20*i), ""text line %i"" %i)
doc.journal_stop_op()

>>> # combined status info:
>>> doc.journal_position();doc.journal_can_do()
(6, 6)
{'undo': True, 'redo': False}

>>> for i in range(3):
# revert last three operations

doc.journal_undo()

>>> doc.journal_position();doc.journal_can_do()
(3, 6)
{'undo': True, 'redo': True}

>>> # now do a different update:
>>> doc.journal_start_op(""Draw some line"")
>>> page.draw_line((100,150), (300,150))

(continues on next page)

13.2. Example Session 2
133

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

Point(300.0, 150.0)
>>> doc.journal_stop_op()
>>> doc.journal_position();doc.journal_can_do()
(4, 4)
{'undo': True, 'redo': False}

>>> # this has changed the journal:
>>> # previous last 3 text line operations were removed, and
>>> # we have only 4 operations: drawing the line is the new last one

This documentation covers all versions up to 1.23.25.

134
Chapter 13. Journalling

CHAPTER

FOURTEEN

MULTIPROCESSING

MuPDF has no integrated support for threading - calling itself “thread-agnostic”. While there do exist tricky possibil-
ities to still use threading with MuPDF, the baseline consequence for PyMuPDF is:

No Python threading support.

Using PyMuPDF in a Python threading environment will lead to blocking effects for the main thread.

However, there is the option to use Python’s multiprocessing module in a variety of ways.

If you are looking to speed up page-oriented processing for a large document, use this script as a starting point. It
should be at least twice as fast as the corresponding sequential processing.

""""""
Demonstrate the use of multiprocessing with PyMuPDF.

Depending on the
number of CPUs, the document is divided in page ranges.

Each range is then worked on by one process.
The type of work would typically be text extraction or page rendering. Each
process must know where to put its results, because this processing pattern
does not include inter-process communication or data sharing.

Compared to sequential processing, speed improvements in range of 100% (ie.
twice as fast) or better can be expected.
""""""
from __future__ import print_function, division
import sys
import os
import time
from multiprocessing import Pool, cpu_count
import fitz

# choose a version specific timer function (bytes == str in Python 2)
mytime = time.clock if str is bytes else time.perf_counter

def render_page(vector):

""""""Render a page range of a document.

Notes:

The PyMuPDF document cannot be part of the argument, because that
cannot be pickled. So we are being passed in just its filename.

(continues on next page)

135

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

This is no performance issue, because we are a separate process and
need to open the document anyway.
Any page-specific function can be processed here - rendering is just
an example - text extraction might be another.
The work must however be self-contained: no inter-process communication
or synchronization is possible with this design.
Care must also be taken with which parameters are contained in the
argument, because it will be passed in via pickling by the Pool class.
So any large objects will increase the overall duration.

Args:

vector: a list containing required parameters.

""""""
# recreate the arguments
idx = vector[0]
# this is the segment number we have to process

cpu = vector[1]
# number of CPUs

filename = vector[2]
# document filename

mat = vector[3]
# the matrix for rendering

doc = fitz.open(filename)
# open the document

num_pages = doc.page_count
# get number of pages

# pages per segment: make sure that cpu * seg_size >= num_pages!
seg_size = int(num_pages / cpu + 1)
seg_from = idx * seg_size
# our first page number

seg_to = min(seg_from + seg_size, num_pages)
# last page number

for i in range(seg_from, seg_to):
# work through our page segment

page = doc[i]
# page.get_text(""rawdict"")
# use any page-related type of work here, eg

pix = page.get_pixmap(alpha=False, matrix=mat)
# store away the result somewhere ...
# pix.save(""p-%i.png"" % i)

print(""Processed page numbers %i through %i"" % (seg_from, seg_to - 1))

if __name__ == ""__main__"":
t0 = mytime()
# start a timer

filename = sys.argv[1]
mat = fitz.Matrix(0.2, 0.2)
# the rendering matrix: scale down to 20%

cpu = cpu_count()

# make vectors of arguments for the processes
vectors = [(i, cpu, filename, mat) for i in range(cpu)]
print(""Starting %i processes for '%s'."" % (cpu, filename))

pool = Pool()
# make pool of 'cpu_count()' processes

pool.map(render_page, vectors, 1)
# start processes passing each a vector

t1 = mytime()
# stop the timer

print(""Total time %g seconds"" % round(t1 - t0, 2))

Here is a more complex example involving inter-process communication between a main process (showing a GUI) and

136
Chapter 14. Multiprocessing

PyMuPDF Documentation, Release 1.23.25

a child process doing PyMuPDF access to a document.

""""""
Created on 2019-05-01

@author: yinkaisheng@live.com
@copyright: 2019 yinkaisheng@live.com
@license: GNU AFFERO GPL 3.0

Demonstrate the use of multiprocessing with PyMuPDF
-----------------------------------------------------
This example shows some more advanced use of multiprocessing.
The main process show a Qt GUI and establishes a 2-way communication with
another process, which accesses a supported document.
""""""
import os
import sys
import time
import multiprocessing as mp
import queue
import fitz

''' PyQt and PySide namespace unifier shim

https://www.pythonguis.com/faq/pyqt6-vs-pyside6/
simple ""if 'PyQt6' in sys.modules:"" test fails for me, so the more complex pkgutil use
overkill for most people who might have one or the other, why both?

'''

from pkgutil import iter_modules

def module_exists(module_name):

return module_name in (name for loader, name, ispkg in iter_modules())

if
module_exists(""PyQt6""):
# PyQt6
from PyQt6 import QtGui, QtWidgets, QtCore
from PyQt6.QtCore import pyqtSignal as Signal, pyqtSlot as Slot
wrapper = ""PyQt6""

elif module_exists(""PySide6""):

# PySide6
from PySide6 import QtGui, QtWidgets, QtCore
from PySide6.QtCore import Signal, Slot
wrapper = ""PySide6""

my_timer = time.clock if str is bytes else time.perf_counter

class DocForm(QtWidgets.QWidget):

def __init__(self):

super().__init__()

(continues on next page)

137

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

self.process = None
self.queNum = mp.Queue()
self.queDoc = mp.Queue()
self.page_count = 0
self.curPageNum = 0
self.lastDir = """"
self.timerSend = QtCore.QTimer(self)
self.timerSend.timeout.connect(self.onTimerSendPageNum)
self.timerGet = QtCore.QTimer(self)
self.timerGet.timeout.connect(self.onTimerGetPage)
self.timerWaiting = QtCore.QTimer(self)
self.timerWaiting.timeout.connect(self.onTimerWaiting)
self.initUI()

def initUI(self):
vbox = QtWidgets.QVBoxLayout()
self.setLayout(vbox)

hbox = QtWidgets.QHBoxLayout()
self.btnOpen = QtWidgets.QPushButton(""OpenDocument"", self)
self.btnOpen.clicked.connect(self.openDoc)
hbox.addWidget(self.btnOpen)

self.btnPlay = QtWidgets.QPushButton(""PlayDocument"", self)
self.btnPlay.clicked.connect(self.playDoc)
hbox.addWidget(self.btnPlay)

self.btnStop = QtWidgets.QPushButton(""Stop"", self)
self.btnStop.clicked.connect(self.stopPlay)
hbox.addWidget(self.btnStop)

self.label = QtWidgets.QLabel(""0/0"", self)
self.label.setFont(QtGui.QFont(""Verdana"", 20))
hbox.addWidget(self.label)

vbox.addLayout(hbox)

self.labelImg = QtWidgets.QLabel(""Document"", self)
sizePolicy = QtWidgets.QSizePolicy(
QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.

˓→Expanding
)
self.labelImg.setSizePolicy(sizePolicy)
vbox.addWidget(self.labelImg)

self.setGeometry(100, 100, 400, 600)
self.setWindowTitle(""PyMuPDF Document Player"")
self.show()

def openDoc(self):
path, _ = QtWidgets.QFileDialog.getOpenFileName(

self,

(continues on next page)

138
Chapter 14. Multiprocessing

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

""Open Document"",
self.lastDir,
""All Supported Files (*.pdf;*.epub;*.xps;*.oxps;*.cbz;*.fb2);;PDF Files (*.

˓→pdf);;EPUB Files (*.epub);;XPS Files (*.xps);;OpenXPS Files (*.oxps);;CBZ Files (*.

˓→cbz);;FB2 Files (*.fb2)"",

#options=QtWidgets.QFileDialog.Options(),

)
if path:

self.lastDir, self.file = os.path.split(path)
if self.process:

self.queNum.put(-1)
# use -1 to notify the process to exit

self.timerSend.stop()
self.curPageNum = 0
self.page_count = 0
self.process = mp.Process(
target=openDocInProcess, args=(path, self.queNum, self.queDoc)
)
self.process.start()
self.timerGet.start(40)
self.label.setText(""0/0"")
self.queNum.put(0)
self.startTime = time.perf_counter()
self.timerWaiting.start(40)

def playDoc(self):

self.timerSend.start(500)

def stopPlay(self):

self.timerSend.stop()

def onTimerSendPageNum(self):

if self.curPageNum < self.page_count - 1:

self.queNum.put(self.curPageNum + 1)

else:

self.timerSend.stop()

def onTimerGetPage(self):

try:
ret = self.queDoc.get(False)
if isinstance(ret, int):

self.timerWaiting.stop()
self.page_count = ret
self.label.setText(""{}/{}"".format(self.curPageNum + 1, self.page_count))

else:
# tuple, pixmap info

num, samples, width, height, stride, alpha = ret
self.curPageNum = num
self.label.setText(""{}/{}"".format(self.curPageNum + 1, self.page_count))
fmt = (
QtGui.QImage.Format.Format_RGBA8888
if alpha
else QtGui.QImage.Format.Format_RGB888
)

(continues on next page)

139

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

qimg = QtGui.QImage(samples, width, height, stride, fmt)
self.labelImg.setPixmap(QtGui.QPixmap.fromImage(qimg))

except queue.Empty as ex:

pass

def onTimerWaiting(self):

self.labelImg.setText(

'Loading ""{}"", {:.2f}s'.format(

self.file, time.perf_counter() - self.startTime
)
)

def closeEvent(self, event):

self.queNum.put(-1)
event.accept()

def openDocInProcess(path, queNum, quePageInfo):
start = my_timer()
doc = fitz.open(path)
end = my_timer()
quePageInfo.put(doc.page_count)
while True:
num = queNum.get()
if num < 0:

break

page = doc.load_page(num)
pix = page.get_pixmap()
quePageInfo.put(
(num, pix.samples, pix.width, pix.height, pix.stride, pix.alpha)
)
doc.close()
print(""process exit"")

if __name__ == ""__main__"":
app = QtWidgets.QApplication(sys.argv)
form = DocForm()
sys.exit(app.exec())

This documentation covers all versions up to 1.23.25.

140
Chapter 14. Multiprocessing

CHAPTER

FIFTEEN

OPTIONAL CONTENT SUPPORT

This document explains PyMuPDF’s support of the PDF concept “Optional Content”.

15.1 Introduction: The Optional Content Concept

Optional Content in PDF is a way to show or hide parts of a document based on certain conditions: Parameters that
can be set to ON or to OFF when using a supporting PDF consumer (viewer), or programmatically.

This capability is useful in items such as CAD drawings, layered artwork, maps, and multi-language documents. Typical
uses include showing or hiding details of complex vector graphics like geographical maps, technical devices, architec-
tural designs and similar, including automatically switching between different zooming levels. Other use cases may be
to automatically show different detail levels when displaying a document on screen as opposed to printing it.

Special PDF objects, so-called Optional Content Groups (OCGs) are used to define these different layers of content.

Assigning an OCG to a “normal” PDF object (like a text or an image) causes that object to be visible or hidden,
depending on the current state of the assigned OCG.

To ease definition of the overall configuration of a PDF’s Optional Content, OCGs can be organized in higher level
groupings, called OC Configurations. Each configuration being a collection of OCGs, together with each OCG’s
desired initial visibility state. Selecting one of these configurations (via the PDF viewer or programmatically) causes
a corresponding visibility change of all affected PDF objects throughout the document.

Except for the default one, OC Configurations are optional.

For more explanations and additional background please refer to PDF specification manuals.

15.2 PyMuPDF Support for PDF Optional Content

PyMuPDF offers full support for viewing, defining, changing and deleting Option Content Groups, Configurations,
maintaining the assignment of OCGs to PDF objects and programmatically switching between OC Configurations and
the visibility states of each single OCG.

141

PyMuPDF Documentation, Release 1.23.25

15.3 How to Add Optional Content

This is as simple as adding an Optional Content Group, OCG, to a PDF: Document.add_ocg().

If previously the PDF had no OC support at all, the required setup (like defining the default OC Configuration) will be
done at this point automatically.

The method returns an xref of the created OCG. Use this xref to associate (mark) any PDF object with it, that you
want to make dependent on this OCG’s state. For example, you can insert an image on a page and refer to the xref like
this:

img_xref = page.insert_image(rect, filename=""image.file"", oc=xref)

If you want to put an existing image under the control of an OCG, you must first find out the image’s xref number (called
img_xref here) and then do doc.set_oc(img_xref, xref). After this, the image will be (in-) visible everywhere
throughout the document if the OCG’s state is “ON”, respectively “OFF”. You can also assign a different OCG with
this method.

To remove an OCG from an image, do doc.set_oc(img_xref, 0).

One single OCG can be assigned to mutiple PDF objects to control their visibility.

15.4 How to Define Complex Optional Content Conditions

Sophisticated logical conditions can be established to address complex visibility needs.

For example, you might want to create a multi-language document, so the user may switch between languages as
required.

Please have a look at this Jupyter Notebook and execute it as desired.

Certainly, your requirements may even be more complex and involve multiple OCGs with ON/OFF states that are
connected by some kind of logical relationship – but it should give you an impression of what is possible and how to
plan your next steps.

This documentation covers all versions up to 1.23.25.

142
Chapter 15. Optional Content Support

CHAPTER

SIXTEEN

LOW-LEVEL INTERFACES

Numerous methods are available to access and manipulate PDF files on a fairly low level. Admittedly, a clear distinction
between “low level” and “normal” functionality is not always possible or subject to personal taste.

It also may happen, that functionality previously deemed low-level is later on assessed as being part of the normal
interface. This has happened in v1.14.0 for the class Tools - you now find it as an item in the Classes chapter.

It is a matter of documentation only in which chapter of the documentation you find what you are looking for. Everything
is available and always via the same interface.

16.1 How to Iterate through the xref Table

A PDF’s xref table is a list of all objects defined in the file. This table may easily contain many thousands of entries
– the manual Adobe PDF References for example has 127,000 objects. Table entry “0” is reserved and must not be
touched. The following script loops through the xref table and prints each object’s definition:

>>> xreflen = doc.xref_length()
# length of objects table

>>> for xref in range(1, xreflen):
# skip item 0!

print("""")
print(""object %i (stream: %s)"" % (xref, doc.xref_is_stream(xref)))
print(doc.xref_object(xref, compressed=False))

This produces the following output:

object 1 (stream: False)
<<
/ModDate (D:20170314122233-04'00')
/PXCViewerInfo (PDF-XChange Viewer;2.5.312.1;Feb
9 2015;12:00:06;D:20170314122233-04

˓→'00')
>>

object 2 (stream: False)
<<
/Type /Catalog
/Pages 3 0 R
>>

object 3 (stream: False)
<<

(continues on next page)

143

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

/Kids [ 4 0 R 5 0 R ]
/Type /Pages
/Count 2
>>

object 4 (stream: False)
<<
/Type /Page
/Annots [ 6 0 R ]
/Parent 3 0 R
/Contents 7 0 R
/MediaBox [ 0 0 595 842 ]
/Resources 8 0 R
>>
...
object 7 (stream: True)
<<
/Length 494
/Filter /FlateDecode
>>
...

A PDF object definition is an ordinary ASCII string.

16.2 How to Handle Object Streams

Some object types contain additional data apart from their object definition. Examples are images, fonts, embedded
files or commands describing the appearance of a page.

Objects of these types are called “stream objects”. PyMuPDF allows reading an object’s stream via method Document.
xref_stream() with the object’s xref as an argument. It is also possible to write back a modified version of a stream
using Document.update_stream().

Assume that the following snippet wants to read all streams of a PDF for whatever reason:

>>> xreflen = doc.xref_length() # number of objects in file
>>> for xref in range(1, xreflen): # skip item 0!

if stream := doc.xref_stream(xref):

# do something with it (it is a bytes object or None)
# e.g. just write it back:
doc.update_stream(xref, stream)

Document.xref_stream() automatically returns a stream decompressed as a bytes object – and Document.
update_stream() automatically compresses it if beneficial.

144
Chapter 16. Low-Level Interfaces

PyMuPDF Documentation, Release 1.23.25

16.3 How to Handle Page Contents

A PDF page can have zero or multiple contents objects. These are stream objects describing what appears where
and how on a page (like text and images). They are written in a special mini-language described e.g. in chapter
“APPENDIX A - Operator Summary” on page 643 of the Adobe PDF References.

Every PDF reader application must be able to interpret the contents syntax to reproduce the intended appearance of the
page.

If multiple contents objects are provided, they must be interpreted in the specified sequence in exactly the same way
as if they were provided as a concatenation of the several.

There are good technical arguments for having multiple contents objects:

• It is a lot easier and faster to just add new contents objects than maintaining a single big one (which entails
reading, decompressing, modifying, recompressing, and rewriting it for each change).

• When working with incremental updates, a modified big contents object will bloat the update delta and can
thus easily negate the efficiency of incremental saves.

For example, PyMuPDF adds new, small contents objects in methods Page.insert_image(), Page.
show_pdf_page() and the Shape methods.

However, there are also situations when a single contents object is beneficial: it is easier to interpret and more
compressible than multiple smaller ones.

Here are two ways of combining multiple contents of a page:

>>> # method 1: use the MuPDF clean function
>>> page.clean_contents()
# cleans and combines multiple Contents

>>> xref = page.get_contents()[0]
# only one /Contents now!

>>> cont = doc.xref_stream(xref)
>>> # this has also reformatted the PDF commands

>>> # method 2: extract concatenated contents
>>> cont = page.read_contents()
>>> # the /Contents source itself is unmodified

The clean function Page.clean_contents() does a lot more than just glueing contents objects: it also corrects
and optimizes the PDF operator syntax of the page and removes any inconsistencies with the page’s object definition.

16.4 How to Access the PDF Catalog

This is a central (“root”) object of a PDF. It serves as a starting point to reach important other objects and it also contains
some global options for the PDF:

>>> import fitz
>>> doc=fitz.open(""PyMuPDF.pdf"")
>>> cat = doc.pdf_catalog()
# get xref of the /Catalog

>>> print(doc.xref_object(cat))
# print object definition

<<

/Type/Catalog
% object type

/Pages 3593 0 R
% points to page tree

/OpenAction 225 0 R
% action to perform on open

(continues on next page)

16.3. How to Handle Page Contents
145

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

/Names 3832 0 R
% points to global names tree

/PageMode /UseOutlines
% initially show the TOC

/PageLabels<</Nums[0<</S/D>>2<</S/r>>8<</S/D>>]>> % labels given to pages
/Outlines 3835 0 R
% points to outline tree

>>

Note: Indentation, line breaks and comments are inserted here for clarification purposes only and will not normally
appear. For more information on the PDF catalog see section 7.7.2 on page 71 of the Adobe PDF References.

16.5 How to Access the PDF File Trailer

The trailer of a PDF file is a dictionary located towards the end of the file. It contains special objects, and pointers
to important other information. See Adobe PDF References p. 42. Here is an overview:

Key
Type
Value

Size
int
Number of entries in the cross-reference table + 1.

Prev
int
Offset to previous xref section (indicates incremental updates).

Root
dictionary
(indirect) Pointer to the catalog. See previous section.

Encrypt
dictionary
Pointer to encryption object (encrypted files only).

Info
dictionary
(indirect) Pointer to information (metadata).

ID
array
File identifier consisting of two byte strings.

XRefStm
int
Offset of a cross-reference stream. See Adobe PDF References p. 49.

Access this information via PyMuPDF with Document.pdf_trailer() or,
equivalently,
via Document.
xref_object() using -1 instead of a valid xref number.

>>> import fitz
>>> doc=fitz.open(""PyMuPDF.pdf"")
>>> print(doc.xref_object(-1))
# or: print(doc.pdf_trailer())

<<
/Type /XRef
/Index [ 0 8263 ]
/Size 8263
/W [ 1 3 1 ]
/Root 8260 0 R
/Info 8261 0 R
/ID [ <4339B9CEE46C2CD28A79EBDDD67CC9B3> <4339B9CEE46C2CD28A79EBDDD67CC9B3> ]
/Length 19883
/Filter /FlateDecode
>>
>>>

146
Chapter 16. Low-Level Interfaces

PyMuPDF Documentation, Release 1.23.25

16.6 How to Access XML Metadata

A PDF may contain XML metadata in addition to the standard metadata format. In fact, most PDF viewer or modifi-
cation software adds this type of information when saving the PDF (Adobe, Nitro PDF, PDF-XChange, etc.).

PyMuPDF has no way to interpret or change this information directly, because it contains no XML features. XML
metadata is however stored as a stream object, so it can be read, modified with appropriate software and written back.

>>> xmlmetadata = doc.get_xml_metadata()
>>> print(xmlmetadata)
<?xpacket begin=""\\ufeff"" id=""W5M0MpCehiHzreSzNTczkc9d""?>
<x:xmpmeta xmlns:x=""adobe:ns:meta/"" x:xmptk=""3.1-702"">
<rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"">
...
omitted data
...
<?xpacket end=""w""?>

Using some XML package, the XML data can be interpreted and / or modified and then stored back. The following
also works, if the PDF previously had no XML metadata:

>>> # write back modified XML metadata:
>>> doc.set_xml_metadata(xmlmetadata)
>>>
>>> # XML metadata can be deleted like this:
>>> doc.del_xml_metadata()

16.7 How to Extend PDF Metadata

Attribute Document.metadata is designed so it works for all supported document types in the same way: it is a Python
dictionary with a fixed set of key-value pairs. Correspondingly, Document.set_metadata() only accepts standard
keys.

However, PDFs may contain items not accessible like this. Also, there may be reasons to store additional information,
like copyrights. Here is a way to handle arbitrary metadata items by using PyMuPDF low-level functions.

As an example, look at this standard metadata output of some PDF:

# ---------------------
# standard metadata
# ---------------------
pprint(doc.metadata)
{'author': 'PRINCE',

'creationDate': ""D:2010102417034406'-30'"",
'creator': 'PrimoPDF http://www.primopdf.com/',
'encryption': None,
'format': 'PDF 1.4',
'keywords': '',
'modDate': ""D:20200725062431-04'00'"",
'producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '

'AppendMode 1.1',

(continues on next page)

16.6. How to Access XML Metadata
147

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

'subject': '',
'title': 'Full page fax print',
'trapped': ''}

Use the following code to see all items stored in the metadata object:

# ----------------------------------
# metadata including private items
# ----------------------------------
metadata = {}
# make my own metadata dict

what, value = doc.xref_get_key(-1, ""Info"")
# /Info key in the trailer

if what != ""xref"":

pass
# PDF has no metadata

else:
xref = int(value.replace(""0 R"", """"))
# extract the metadata xref

for key in doc.xref_get_keys(xref):
metadata[key] = doc.xref_get_key(xref, key)[1]
pprint(metadata)
{'Author': 'PRINCE',

'CreationDate': ""D:2010102417034406'-30'"",
'Creator': 'PrimoPDF http://www.primopdf.com/',
'ModDate': ""D:20200725062431-04'00'"",
'PXCViewerInfo': 'PDF-XChange Viewer;2.5.312.1;Feb
9 '

""2015;12:00:06;D:20200725062431-04'00'"",

'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '

'AppendMode 1.1',

'Title': 'Full page fax print'}

# ---------------------------------------------------------------
# note the additional 'PXCViewerInfo' key - ignored in standard!
# ---------------------------------------------------------------

Vice versa, you can also store private metadata items in a PDF. It is your responsibility to make sure that these items
conform to PDF specifications - especially they must be (unicode) strings. Consult section 14.3 (p. 548) of the Adobe
PDF References for details and caveats:

what, value = doc.xref_get_key(-1, ""Info"")
# /Info key in the trailer

if what != ""xref"":

raise ValueError(""PDF has no metadata"")
xref = int(value.replace(""0 R"", """"))
# extract the metadata xref

# add some private information
doc.xref_set_key(xref, ""mykey"", fitz.get_pdf_str("" is Beijing""))
#
# after executing the previous code snippet, we will see this:
pprint(metadata)
{'Author': 'PRINCE',

'CreationDate': ""D:2010102417034406'-30'"",
'Creator': 'PrimoPDF http://www.primopdf.com/',
'ModDate': ""D:20200725062431-04'00'"",
'PXCViewerInfo': 'PDF-XChange Viewer;2.5.312.1;Feb
9 '

""2015;12:00:06;D:20200725062431-04'00'"",

'Producer': 'macOS Version 10.15.6 (Build 19G71a) Quartz PDFContext, '

'AppendMode 1.1',

(continues on next page)

148
Chapter 16. Low-Level Interfaces

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

'Title': 'Full page fax print',
'mykey': ' is Beijing'}

To delete selected keys, use doc.xref_set_key(xref, ""mykey"", ""null""). As explained in the next section, string
“null” is the PDF equivalent to Python’s None. A key with that value will be treated as not being specified – and
physically removed in garbage collections.

16.8 How to Read and Update PDF Objects

There also exist granular, elegant ways to access and manipulate selected PDF dictionary keys.

• Document.xref_get_keys() returns the PDF keys of the object at xref:

In [1]: import fitz
In [2]: doc = fitz.open(""pymupdf.pdf"")
In [3]: page = doc[0]
In [4]: from pprint import pprint
In [5]: pprint(doc.xref_get_keys(page.xref))
('Type', 'Contents', 'Resources', 'MediaBox', 'Parent')

• Compare with the full object definition:

In [6]: print(doc.xref_object(page.xref))
<<

/Type /Page
/Contents 1297 0 R
/Resources 1296 0 R
/MediaBox [ 0 0 612 792 ]
/Parent 1301 0 R

>>

• Single keys can also be accessed directly via Document.xref_get_key(). The value always is a string together
with type information, that helps with interpreting it:

In [7]: doc.xref_get_key(page.xref, ""MediaBox"")
Out[7]: ('array', '[0 0 612 792]')

• Here is a full listing of the above page keys:

In [9]: for key in doc.xref_get_keys(page.xref):
...:
print(""%s = %s"" % (key, doc.xref_get_key(page.xref, key)))

...:
Type = ('name', '/Page')
Contents = ('xref', '1297 0 R')
Resources = ('xref', '1296 0 R')
MediaBox = ('array', '[0 0 612 792]')
Parent = ('xref', '1301 0 R')

• An undefined key inquiry returns ('null', 'null') – PDF object type null corresponds to None in Python.
Similar for the booleans true and false.

16.8. How to Read and Update PDF Objects
149

PyMuPDF Documentation, Release 1.23.25

• Let us add a new key to the page definition that sets its rotation to 90 degrees (you are aware that there actually
exists Page.set_rotation() for this?):

In [11]: doc.xref_get_key(page.xref, ""Rotate"")
# no rotation set:

Out[11]: ('null', 'null')
In [12]: doc.xref_set_key(page.xref, ""Rotate"", ""90"")
# insert a new key

In [13]: print(doc.xref_object(page.xref))
# confirm success

<<

/Type /Page
/Contents 1297 0 R
/Resources 1296 0 R
/MediaBox [ 0 0 612 792 ]
/Parent 1301 0 R
/Rotate 90

>>

• This method can also be used to remove a key from the xref dictionary by setting its value to null: The fol-
lowing will remove the rotation specification from the page: doc.xref_set_key(page.xref, ""Rotate"",
""null""). Similarly, to remove all links, annotations and fields from a page, use doc.xref_set_key(page.
xref, ""Annots"", ""null""). Because Annots by definition is an array, setting en empty array with the state-
ment doc.xref_set_key(page.xref, ""Annots"", ""[]"") would do the same job in this case.

• PDF dictionaries can be hierarchically nested. In the following page object definition both, Font and XObject
are subdictionaries of Resources:

In [15]: print(doc.xref_object(page.xref))
<<

/Type /Page
/Contents 1297 0 R
/Resources <<

/XObject <<

/Im1 1291 0 R

>>
/Font <<

/F39 1299 0 R
/F40 1300 0 R

>>

>>
/MediaBox [ 0 0 612 792 ]
/Parent 1301 0 R
/Rotate 90

>>

• The above situation is supported by methods Document.xref_set_key() and Document.xref_get_key():
use a path-like notation to point at the required key. For example, to retrieve the value of key Im1 above, specify
the complete chain of dictionaries “above” it in the key argument: ""Resources/XObject/Im1"":

In [16]: doc.xref_get_key(page.xref, ""Resources/XObject/Im1"")
Out[16]: ('xref', '1291 0 R')

• The path notation can also be used to directly set a value: use the following to let Im1 point to a different object:

In [17]: doc.xref_set_key(page.xref, ""Resources/XObject/Im1"", ""9999 0 R"")
In [18]: print(doc.xref_object(page.xref))
# confirm success:

<<

(continues on next page)

150
Chapter 16. Low-Level Interfaces

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

/Type /Page
/Contents 1297 0 R
/Resources <<

/XObject <<

/Im1 9999 0 R

>>
/Font <<

/F39 1299 0 R
/F40 1300 0 R

>>

>>
/MediaBox [ 0 0 612 792 ]
/Parent 1301 0 R
/Rotate 90

>>

Be aware, that no semantic checks whatsoever will take place here: if the PDF has no xref 9999, it won’t be
detected at this point.

• If a key does not exist, it will be created by setting its value. Moreover, if any intermediate keys do not exist
either, they will also be created as necessary. The following creates an array D several levels below the existing
dictionary A. Intermediate dictionaries B and C are automatically created:

In [5]: print(doc.xref_object(xref))
# some existing PDF object:

<<

/A <<
>>

>>
In [6]: # the following will create 'B', 'C' and 'D'
In [7]: doc.xref_set_key(xref, ""A/B/C/D"", ""[1 2 3 4]"")
In [8]: print(doc.xref_object(xref))
# check out what happened:

<<

/A <<

/B <<

/C <<

/D [ 1 2 3 4 ]

>>

>>

>>

>>

• When setting key values, basic PDF syntax checking will be done by MuPDF. For example, new keys can only
be created below a dictionary. The following tries to create some new string item E below the previously created
array D:

In [9]: # 'D' is an array, no dictionary!
In [10]: doc.xref_set_key(xref, ""A/B/C/D/E"", ""(hello)"")
mupdf: not a dict (array)
--- ... ---
RuntimeError: not a dict (array)

• It is also not possible, to create a key if some higher level key is an “indirect” object, i.e. an xref. In other
words, xrefs can only be modified directly and not implicitly via other objects referencing them:

16.8. How to Read and Update PDF Objects
151

PyMuPDF Documentation, Release 1.23.25

In [13]: # the following object points to an xref
In [14]: print(doc.xref_object(4))
<<

/E 3 0 R

>>
In [15]: # 'E' is an indirect object and cannot be modified here!
In [16]: doc.xref_set_key(4, ""E/F"", ""90"")
mupdf: path to 'F' has indirects
--- ... ---
RuntimeError: path to 'F' has indirects

Caution:
These are expert functions! There are no validations as to whether valid PDF objects, xrefs, etc. are
specified. As with other low-level methods there is the risk to render the PDF, or parts of it unusable.

This documentation covers all versions up to 1.23.25.

152
Chapter 16. Low-Level Interfaces

CHAPTER

SEVENTEEN

COMMON ISSUES AND THEIR SOLUTIONS

17.1 How To Dynamically Clean Up Corrupt PDFs

This shows a potential use of PyMuPDF with another Python PDF library (the excellent pure Python package pdfrw
is used here as an example).

If a clean, non-corrupt / decompressed PDF is needed, one could dynamically invoke PyMuPDF to recover from many
problems like so:

import sys
from io import BytesIO
from pdfrw import PdfReader
import fitz

#---------------------------------------
# 'Tolerant' PDF reader
#---------------------------------------
def reader(fname, password = None):
idata = open(fname, ""rb"").read()
# read the PDF into memory and

ibuffer = BytesIO(idata)
# convert to stream

if password is None:

try:

return PdfReader(ibuffer)
# if this works: fine!

except:

pass

# either we need a password or it is a problem-PDF
# create a repaired / decompressed / decrypted version
doc = fitz.open(""pdf"", ibuffer)
if password is not None:
# decrypt if password provided

rc = doc.authenticate(password)
if not rc > 0:

raise ValueError(""wrong password"")
c = doc.tobytes(garbage=3, deflate=True)
del doc
# close & delete doc

return PdfReader(BytesIO(c))
# let pdfrw retry

#---------------------------------------
# Main program
#---------------------------------------
pdf = reader(""pymupdf.pdf"", password = None) # include a password if necessary

(continues on next page)

153

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

print pdf.Info
# do further processing

With the command line utility pdftk (available for Windows only, but reported to also run under Wine) a similar result
can be achieved, see here. However, you must invoke it as a separate process via subprocess.Popen, using stdin and
stdout as communication vehicles.

17.2 How to Convert Any Document to PDF

Here is a script that converts any PyMuPDF supported document to a PDF. These include XPS, EPUB, FB2, CBZ and
image formats, including multi-page TIFF images.

It features maintaining any metadata, table of contents and links contained in the source document:

""""""
Demo script: Convert input file to a PDF
-----------------------------------------
Intended for multi-page input files like XPS, EPUB etc.

Features:
---------
Recovery of table of contents and links of input file.
While this works well for bookmarks (outlines, table of contents),
links will only work if they are not of type ""LINK_NAMED"".
This link type is skipped by the script.

For XPS and EPUB input, internal links however **are** of type ""LINK_NAMED"".
Base library MuPDF does not resolve them to page numbers.

So, for anyone expert enough to know the internal structure of these
document types, can further interpret and resolve these link types.

Dependencies
--------------
PyMuPDF v1.14.0+
""""""
import sys
import fitz
if not (list(map(int, fitz.VersionBind.split("".""))) >= [1,14,0]):

raise SystemExit(""need PyMuPDF v1.14.0+"")
fn = sys.argv[1]

print(""Converting '%s' to '%s.pdf'"" % (fn, fn))

doc = fitz.open(fn)

b = doc.convert_to_pdf()
# convert to pdf

pdf = fitz.open(""pdf"", b)
# open as pdf

toc= doc.het_toc()
# table of contents of input

pdf.set_toc(toc)
# simply set it for output

(continues on next page)

154
Chapter 17. Common Issues and their Solutions

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

meta = doc.metadata
# read and set metadata

if not meta[""producer""]:
meta[""producer""] = ""PyMuPDF v"" + fitz.VersionBind

if not meta[""creator""]:
meta[""creator""] = ""PyMuPDF PDF converter""

meta[""modDate""] = fitz.get_pdf_now()
meta[""creationDate""] = meta[""modDate""]
pdf.set_metadata(meta)

# now process the links
link_cnti = 0
link_skip = 0
for pinput in doc:
# iterate through input pages

links = pinput.get_links()
# get list of links

link_cnti += len(links)
# count how many

pout = pdf[pinput.number]
# read corresp. output page

for l in links:
# iterate though the links

if l[""kind""] == fitz.LINK_NAMED:
# we do not handle named links

print(""named link page"", pinput.number, l)
link_skip += 1
# count them

continue

pout.insert_link(l)
# simply output the others

# save the conversion result
pdf.save(fn + "".pdf"", garbage=4, deflate=True)
# say how many named links we skipped
if link_cnti > 0:

print(""Skipped %i named links of a total of %i in input."" % (link_skip, link_cnti))

17.3 How to Deal with Messages Issued by MuPDF

Since PyMuPDF v1.16.0, error messages issued by the underlying MuPDF library are being redirected to the Python
standard device sys.stderr. So you can handle them like any other output going to this devices.

In addition, these messages go to the internal buffer together with any MuPDF warnings – see below.

We always prefix these messages with an identifying string “mupdf:”. If you prefer to not see recoverable MuPDF
errors at all, issue the command fitz.TOOLS.mupdf_display_errors(False).

MuPDF warnings continue to be stored in an internal buffer and can be viewed using Tools.mupdf_warnings().

Please note that MuPDF errors may or may not lead to Python exceptions. In other words, you may see error messages
from which MuPDF can recover and continue processing.

Example output for a recoverable error. We are opening a damaged PDF, but MuPDF is able to repair it and gives
us a little information on what happened. Then we illustrate how to find out whether the document can later be saved
incrementally. Checking the Document.is_dirty attribute at this point also indicates that during fitz.open the
document had to be repaired:

>>> import fitz
>>> doc = fitz.open(""damaged-file.pdf"")
# leads to a sys.stderr message:

(continues on next page)

17.3. How to Deal with Messages Issued by MuPDF
155

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

mupdf: cannot find startxref
>>> print(fitz.TOOLS.mupdf_warnings())
# check if there is more info:

cannot find startxref
trying to repair broken xref
repairing PDF document
object missing 'endobj' token
>>> doc.can_save_incrementally()
# this is to be expected:

False
>>> # the following indicates whether there are updates so far
>>> # this is the case because of the repair actions:
>>> doc.is_dirty
True
>>> # the document has nevertheless been created:
>>> doc
fitz.Document('damaged-file.pdf')
>>> # we now know that any save must occur to a new file

Example output for an unrecoverable error:

>>> import fitz
>>> doc = fitz.open(""does-not-exist.pdf"")
mupdf: cannot open does-not-exist.pdf: No such file or directory
Traceback (most recent call last):

File ""<pyshell#1>"", line 1, in <module>

doc = fitz.open(""does-not-exist.pdf"")
File ""C:\\Users\\Jorj\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\fitz\\fitz.

˓→py"", line 2200, in __init__

_fitz.Document_swiginit(self, _fitz.new_Document(filename, stream, filetype, rect,␣

˓→width, height, fontsize))
RuntimeError: cannot open does-not-exist.pdf: No such file or directory
>>>

17.4 Changing Annotations: Unexpected Behaviour

17.4.1 Problem

There are two scenarios:

1. Updating an annotation with PyMuPDF which was created by some other software.

2. Creating an annotation with PyMuPDF and later changing it with some other software.

In both cases you may experience unintended changes, like a different annotation icon or text font, the fill color or line
dashing have disappeared, line end symbols have changed their size or even have disappeared too, etc.

156
Chapter 17. Common Issues and their Solutions

PyMuPDF Documentation, Release 1.23.25

17.4.2 Cause

Annotation maintenance is handled differently by each PDF maintenance application. Some annotation types may not
be supported, or not be supported fully or some details may be handled in a different way than in another application.
There is no standard.

Almost always a PDF application also comes with its own icons (file attachments, sticky notes and stamps) and its own
set of supported text fonts. For example:

• (Py-) MuPDF only supports these 5 basic fonts for ‘FreeText’ annotations: Helvetica, Times-Roman, Courier,
ZapfDingbats and Symbol – no italics / no bold variations. When changing a ‘FreeText’ annotation created by
some other app, its font will probably not be recognized nor accepted and be replaced by Helvetica.

• PyMuPDF supports all PDF text markers (highlight, underline, strikeout, squiggly), but these types cannot be
updated with Adobe Acrobat Reader.

In most cases there also exists limited support for line dashing which causes existing dashes to be replaced by straight
lines. For example:

• PyMuPDF fully supports all line dashing forms, while other viewers only accept a limited subset.

17.4.3 Solutions

Unfortunately there is not much you can do in most of these cases.

1. Stay with the same software for creating and changing an annotation.

2. When using PyMuPDF to change an “alien” annotation, try to avoid Annot.update(). The following methods
can be used without it, so that the original appearance should be maintained:

• Annot.set_rect() (location changes)

• Annot.set_flags() (annotation behaviour)

• Annot.set_info() (meta information, except changes to content)

• Annot.set_popup() (create popup or change its rect)

• Annot.set_optional_content() (add / remove reference to optional content information)

• Annot.set_open()

• Annot.update_file() (file attachment changes)

17.5 Misplaced Item Insertions on PDF Pages

17.5.1 Problem

You inserted an item (like an image, an annotation or some text) on an existing PDF page, but later you find it being
placed at a different location than intended. For example an image should be inserted at the top, but it unexpectedly
appears near the bottom of the page.

17.5. Misplaced Item Insertions on PDF Pages
157

PyMuPDF Documentation, Release 1.23.25

17.5.2 Cause

The creator of the PDF has established a non-standard page geometry without keeping it “local” (as they should!). Most
commonly, the PDF standard point (0,0) at bottom-left has been changed to the top-left point. So top and bottom are
reversed – causing your insertion to be misplaced.

The visible image of a PDF page is controlled by commands coded in a special mini-language. For an overview of
this language consult “Operator Summary” on pp. 643 of the Adobe PDF References. These commands are stored in
contents objects as strings (bytes in PyMuPDF).

There are commands in that language, which change the coordinate system of the page for all the following commands.
In order to limit the scope of such commands to “local”, they must be wrapped by the command pair q (“save graphics
state”, or “stack”) and Q (“restore graphics state”, or “unstack”).

So the PDF creator did this:

stream
1 0 0 -1 0 792 cm
% <=== change of coordinate system:
...
% letter page, top / bottom reversed
...
% remains active beyond these lines
endstream

where they should have done this:

stream
q
% put the following in a stack
1 0 0 -1 0 792 cm
% <=== scope of this is limited by Q command
...
% here, a different geometry exists
Q
% after this line, geometry of outer scope prevails
endstream

Note:

• In the mini-language’s syntax, spaces and line breaks are equally accepted token delimiters.

• Multiple consecutive delimiters are treated as one.

• Keywords “stream” and “endstream” are inserted automatically – not by the programmer.

17.5.3 Solutions

Since v1.16.0, there is the property Page.is_wrapped, which lets you check whether a page’s contents are wrapped
in that string pair.

If it is False or if you want to be on the safe side, pick one of the following:

1. The easiest way: in your script, do a Page.clean_contents() before you do your first item insertion.

2. Pre-process your PDF with the MuPDF command line utility mutool clean -c ... and work with its output file
instead.

3. Directly wrap the page’s contents with the stacking commands before you do your first item insertion.

Solutions 1. and 2. use the same technical basis and do a lot more than what is required in this context: they also
clean up other inconsistencies or redundancies that may exist, multiple /Contents objects will be concatenated into one,
and much more.

158
Chapter 17. Common Issues and their Solutions

PyMuPDF Documentation, Release 1.23.25

Note:
For incremental saves, solution 1. has an unpleasant implication: it will bloat the update delta, because
it changes so many things and, in addition, stores the cleaned contents uncompressed.
So, if you use Page.
clean_contents() you should consider saving to a new file with (at least) garbage=3 and deflate=True.

Solution 3. is completely under your control and only does the minimum corrective action. There is a handy utility
method Page.wrap_contents() which – as twe name suggests – wraps the page’s contents object(s) by the PDF
commands q and Q.

This solution is extremely fast and the changes to the PDF are minimal. This is useful in situations where incrementally
saving the file is desirable – or even a must when the PDF has been digitally signed and you cannot change this status.

We recommend the following snippet to get the situation under control:

>>> if not page.is_wrapped:

page.wrap_contents()

>>> # start inserting text, images and other objects here

17.6 Missing or Unreadable Extracted Text

Fairly often, text extraction does not work text as you would expect: text may be missing, or may not appear in the
reading sequence visible on your screen, or contain garbled characters (like a ? or a “TOFU” symbol), etc. This can
be caused by a number of different problems.

17.6.1 Problem: no text is extracted

Your PDF viewer does display text, but you cannot select it with your cursor, and text extraction delivers nothing.

17.6.2 Cause

1. You may be looking at an image embedded in the PDF page (e.g. a scanned PDF).

2. The PDF creator used no font, but simulated text by painting it, using little lines and curves. E.g. a capital “D”
could be painted by a line “|” and a left-open semi-circle, an “o” by an ellipse, and so on.

17.6.3 Solution

Use an OCR software like OCRmyPDF to insert a hidden text layer underneath the visible page. The resulting PDF
should behave as expected.

17.6.4 Problem: unreadable text

Text extraction does not deliver the text in readable order, duplicates some text, or is otherwise garbled.

17.6. Missing or Unreadable Extracted Text
159

PyMuPDF Documentation, Release 1.23.25

17.6.5 Cause

1. The single characters are readable as such (no “<?>” symbols), but the sequence in which the text is coded in
the file deviates from the reading order. The motivation behind may be technical or protection of data against
unwanted copies.

2. Many “<?>” symbols occur, indicating MuPDF could not interpret these characters. The font may indeed be
unsupported by MuPDF, or the PDF creator may haved used a font that displays readable text, but on purpose
obfuscates the originating corresponding unicode character.

17.6.6 Solution

1. Use layout preserving text extraction: python -m fitz gettext file.pdf.

2. If other text extraction tools also don’t work, then the only solution again is OCRing the page.

This documentation covers all versions up to 1.23.25.

This documentation covers all versions up to 1.23.25.

160
Chapter 17. Common Issues and their Solutions

CHAPTER

EIGHTEEN

MODULE FITZ

• New in version 1.16.8

PyMuPDF can also be used in the command line as a module to perform utility functions. This feature should obsolete
writing some of the most basic scripts.

Admittedly, there is some functional overlap with the MuPDF CLI mutool. On the other hand, PDF embedded files
are no longer supported by MuPDF, so PyMuPDF is offering something unique here.

18.1 Invocation

Invoke the module like this:

python -m fitz <command and parameters>

General remarks:

• Request help via ""-h"", resp. command-specific help via ""command -h"".

• Parameters may be abbreviated where this does not introduce ambiguities.

• Several commands support parameters -pages and -xrefs. They are intended for down-selection. Please note
that:

– page numbers for this utility must be given 1-based.

– valid xref numbers start at 1.

– Specify a comma-separated list of either single integers or integer ranges. A range is a pair of integers
separated by one hyphen “-”. Integers must not exceed the maximum page, resp. xref number. To specify
that maximum, the symbolic variable “N” may be used. Integers or ranges may occur several times, in any
sequence and may overlap. If in a range the first number is greater than the second one, the respective items
will be processed in reversed order.

• How to use the module inside your script:

>>> from fitz.__main__ import main as fitz_command
>>> cmd = ""clean input.pdf output.pdf -pages 1,N"".split()
# prepare command line

>>> saved_parms = sys.argv[1:]
# save original command line

>>> sys.argv[1:] = cmd
# store new command line

>>> fitz_command()
# execute module

>>> sys.argv[1:] = saved_parms
# restore original command line

161

PyMuPDF Documentation, Release 1.23.25

• Use the following 2-liner and compile it with Nuitka in standalone mode. This will give you a CLI executable
with all the module’s features, that can be used on all compatible platforms without Python, PyMuPDF or MuPDF
being installed.

from fitz.__main__ import main
main()

18.2 Cleaning and Copying

This command will optimize the PDF and store the result in a new file. You can use it also for encryption, decryption
and creating sub documents. It is mostly similar to the MuPDF command line utility “mutool clean”:

python -m fitz clean -h
usage: fitz clean [-h] [-password PASSWORD]
[-encryption {keep,none,rc4-40,rc4-128,aes-128,aes-256}]
[-owner OWNER] [-user USER] [-garbage {0,1,2,3,4}]
[-compress] [-ascii] [-linear] [-permission PERMISSION]
[-sanitize] [-pretty] [-pages PAGES]
input output

-------------- optimize PDF or create sub-PDF if pages given --------------

positional arguments:
input
PDF filename
output
output PDF filename

optional arguments:
-h, --help
show this help message and exit
-password PASSWORD
password
-encryption {keep,none,rc4-40,rc4-128,aes-128,aes-256}
encryption method
-owner OWNER
owner password
-user USER
user password
-garbage {0,1,2,3,4}
garbage collection level
-compress
compress (deflate) output
-ascii
ASCII encode binary data
-linear
format for fast web display
-permission PERMISSION
integer with permission levels
-sanitize
sanitize / clean contents
-pretty
prettify PDF structure
-pages PAGES
output selected pages, format: 1,5-7,50-N

If you specify “-pages”, be aware that only page-related objects are copied, no document-level items like e.g. embedded
files.

Please consult Document.save() for the parameter meanings.

162
Chapter 18. Module fitz

PyMuPDF Documentation, Release 1.23.25

18.3 Extracting Fonts and Images

Extract fonts or images from selected PDF pages to a desired directory:

python -m fitz extract -h
usage: fitz extract [-h] [-images] [-fonts] [-output OUTPUT] [-password PASSWORD]
[-pages PAGES]
input

--------------------- extract images and fonts to disk --------------------

positional arguments:
input
PDF filename

optional arguments:
-h, --help
show this help message and exit
-images
extract images
-fonts
extract fonts
-output OUTPUT
output directory, defaults to current
-password PASSWORD
password
-pages PAGES
only consider these pages, format: 1,5-7,50-N

Image filenames are built according to the naming scheme: “img-xref.ext”, where “ext” is the extension associated
with the image and “xref” the xref of the image PDF object.

Font filenames consist of the fontname and the associated extension. Any spaces in the fontname are replaced with
hyphens “-“.

The output directory must already exist.

Note: Except for output directory creation, this feature is functionally equivalent to and obsoletes this script.

18.4 Joining PDF Documents

To join several PDF files specify:

python -m fitz join -h
usage: fitz join [-h] -output OUTPUT [input [input ...]]

---------------------------- join PDF documents ---------------------------

positional arguments:
input
input filenames

optional arguments:
-h, --help
show this help message and exit
-output OUTPUT
output filename

specify each input as 'filename[,password[,pages]]'

Note:

18.3. Extracting Fonts and Images
163

PyMuPDF Documentation, Release 1.23.25

1. Each input must be entered as “filename,password,pages”. Password and pages are optional.

2. The password entry is required if the “pages” entry is used. If the PDF needs no password, specify two commas.

3. The “pages” format is the same as explained at the top of this section.

4. Each input file is immediately closed after use. Therefore you can use one of them as output filename, and thus
overwrite it.

Example: To join the following files

1. file1.pdf: all pages, back to front, no password

2. file2.pdf: last page, first page, password: “secret”

3. file3.pdf: pages 5 to last, no password

and store the result as output.pdf enter this command:

python -m fitz join -o output.pdf file1.pdf„N-1 file2.pdf,secret,N,1 file3.pdf„5-N

18.5 Low Level Information

Display PDF internal information. Again, there are similarities to “mutool show”:

python -m fitz show -h
usage: fitz show [-h] [-password PASSWORD] [-catalog] [-trailer] [-metadata]
[-xrefs XREFS] [-pages PAGES]
input

------------------------- display PDF information -------------------------

positional arguments:
input
PDF filename

optional arguments:
-h, --help
show this help message and exit
-password PASSWORD
password
-catalog
show PDF catalog
-trailer
show PDF trailer
-metadata
show PDF metadata
-xrefs XREFS
show selected objects, format: 1,5-7,N
-pages PAGES
show selected pages, format: 1,5-7,50-N

Examples:

python -m fitz show x.pdf
PDF is password protected

python -m fitz show x.pdf -pass hugo
authentication unsuccessful

python -m fitz show x.pdf -pass jorjmckie
authenticated as owner
file 'x.pdf', pages: 1, objects: 19, 58 MB, PDF 1.4, encryption: Standard V5 R6 256-bit␣

(continues on next page)

164
Chapter 18. Module fitz

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

˓→AES
Document contains 15 embedded files.

python -m fitz show FDA-1572_508_R6_FINAL.pdf -tr -m
'FDA-1572_508_R6_FINAL.pdf', pages: 2, objects: 1645, 1.4 MB, PDF 1.6, encryption:␣

˓→Standard V4 R4 128-bit AES
document contains 740 root form fields and is signed

------------------------------- PDF metadata ------------------------------
format: PDF 1.6
title: FORM FDA 1572
author: PSC Publishing Services
subject: Statement of Investigator
keywords: None
creator: PScript5.dll Version 5.2.2
producer: Acrobat Distiller 9.0.0 (Windows)
creationDate: D:20130522104413-04'00'
modDate: D:20190718154905-07'00'
encryption: Standard V4 R4 128-bit AES

------------------------------- PDF trailer -------------------------------
<<
/DecodeParms <<
/Columns 5
/Predictor 12
>>
/Encrypt 1389 0 R
/Filter /FlateDecode
/ID [ <9252E9E39183F2A0B0C51BE557B8A8FC> <85227BE9B84B724E8F678E1529BA8351> ]
/Index [ 1388 258 ]
/Info 1387 0 R
/Length 253
/Prev 1510559
/Root 1390 0 R
/Size 1646
/Type /XRef
/W [ 1 3 1 ]
>>

18.6 Embedded Files Commands

The following commands deal with embedded files – which is a feature completely removed from MuPDF after v1.14,
and hence from all its command line tools.

18.6. Embedded Files Commands
165

PyMuPDF Documentation, Release 1.23.25

18.6.1 Information

Show the embedded file names (long or short format):

python -m fitz embed-info -h
usage: fitz embed-info [-h] [-name NAME] [-detail] [-password PASSWORD] input

--------------------------- list embedded files ---------------------------

positional arguments:
input
PDF filename

optional arguments:
-h, --help
show this help message and exit
-name NAME
if given, report only this one
-detail
show detail information
-password PASSWORD
password

Example:

python -m fitz embed-info some.pdf
'some.pdf' contains the following 15 embedded files.

20110813_180956_0002.jpg
20110813_181009_0003.jpg
20110813_181012_0004.jpg
20110813_181131_0005.jpg
20110813_181144_0006.jpg
20110813_181306_0007.jpg
20110813_181307_0008.jpg
20110813_181314_0009.jpg
20110813_181315_0010.jpg
20110813_181324_0011.jpg
20110813_181339_0012.jpg
20110813_181913_0013.jpg
insta-20110813_180944_0001.jpg
markiert-20110813_180944_0001.jpg
neue.datei

Detailed output would look like this per entry:

name: neue.datei
filename: text-tester.pdf
ufilename: text-tester.pdf
desc: nur zum Testen!
size: 4639
length: 1566

166
Chapter 18. Module fitz

PyMuPDF Documentation, Release 1.23.25

18.6.2 Extraction

Extract an embedded file like this:

python -m fitz embed-extract -h
usage: fitz embed-extract [-h] -name NAME [-password PASSWORD] [-output OUTPUT]
input

---------------------- extract embedded file to disk ----------------------

positional arguments:
input
PDF filename

optional arguments:
-h, --help
show this help message and exit
-name NAME
name of entry
-password PASSWORD
password
-output OUTPUT
output filename, default is stored name

For details consult Document.embfile_get(). Example (refer to previous section):

python -m fitz embed-extract some.pdf -name neue.datei
Saved entry 'neue.datei' as 'text-tester.pdf'

18.6.3 Deletion

Delete an embedded file like this:

python -m fitz embed-del -h
usage: fitz embed-del [-h] [-password PASSWORD] [-output OUTPUT] -name NAME input

--------------------------- delete embedded file --------------------------

positional arguments:
input
PDF filename

optional arguments:
-h, --help
show this help message and exit
-password PASSWORD
password
-output OUTPUT
output PDF filename, incremental save if none
-name NAME
name of entry to delete

For details consult Document.embfile_del().

18.6. Embedded Files Commands
167

PyMuPDF Documentation, Release 1.23.25

18.6.4 Insertion

Add a new embedded file using this command:

python -m fitz embed-add -h
usage: fitz embed-add [-h] [-password PASSWORD] [-output OUTPUT] -name NAME -path
PATH [-desc DESC]
input

---------------------------- add embedded file ----------------------------

positional arguments:
input
PDF filename

optional arguments:
-h, --help
show this help message and exit
-password PASSWORD
password
-output OUTPUT
output PDF filename, incremental save if none
-name NAME
name of new entry
-path PATH
path to data for new entry
-desc DESC
description of new entry

“NAME” must not already exist in the PDF. For details consult Document.embfile_add().

18.6.5 Updates

Update an existing embedded file using this command:

python -m fitz embed-upd -h
usage: fitz embed-upd [-h] -name NAME [-password PASSWORD] [-output OUTPUT]
[-path PATH] [-filename FILENAME] [-ufilename UFILENAME]
[-desc DESC]
input

--------------------------- update embedded file --------------------------

positional arguments:
input
PDF filename

optional arguments:
-h, --help
show this help message and exit
-name NAME
name of entry
-password PASSWORD
password
-output OUTPUT
Output PDF filename, incremental save if none
-path PATH
path to new data for entry
-filename FILENAME
new filename to store in entry
-ufilename UFILENAME
new unicode filename to store in entry
-desc DESC
new description to store in entry

except '-name' all parameters are optional

Use this method to change meta-information of the file – just omit the “PATH”. For details consult Document.
embfile_upd().

168
Chapter 18. Module fitz

PyMuPDF Documentation, Release 1.23.25

18.6.6 Copying

Copy embedded files between PDFs:

python -m fitz embed-copy -h
usage: fitz embed-copy [-h] [-password PASSWORD] [-output OUTPUT] -source
SOURCE [-pwdsource PWDSOURCE]
[-name [NAME [NAME ...]]]
input

--------------------- copy embedded files between PDFs --------------------

positional arguments:
input
PDF to receive embedded files

optional arguments:
-h, --help
show this help message and exit
-password PASSWORD
password of input
-output OUTPUT
output PDF, incremental save to 'input' if omitted
-source SOURCE
copy embedded files from here
-pwdsource PWDSOURCE
password of 'source' PDF
-name [NAME [NAME ...]]
restrict copy to these entries

18.7 Text Extraction

• New in v1.18.16

Extract text from arbitrary supported documents to a textfile. Currently, there are three output formatting modes avail-
able: simple, block sorting and reproduction of physical layout.

• Simple text extraction reproduces all text as it appears in the document pages – no effort is made to rearrange in
any particular reading order.

• Block sorting sorts text blocks (as identified by MuPDF) by ascending vertical, then horizontal coordinates.
This should be sufficient to establish a “natural” reading order for basic pages of text.

• Layout strives to reproduce the original appearance of the input pages. You can expect results like this (produced
by the command python -m fitz gettext -pages 1 demo1.pdf):

18.7. Text Extraction
169

PyMuPDF Documentation, Release 1.23.25

Note:
The “gettext” command offers a functionality similar to the CLI tool pdftotext by XPDF software, http:
//www.foolabs.com/xpdf/ – this is especially true for “layout” mode, which combines that tool’s -layout and -table
options.

After each page of the output file, a formfeed character, hex(12) is written – even if the input page has no text at all.
This behavior can be controlled via options.

Note:
For “layout” mode, only horizontal, left-to-right, top-to bottom text is supported, other text is ignored. In
this mode, text is also ignored, if its fontsize is too small.

“Simple” and “blocks” mode in contrast output all text for any text size or orientation.

Command:

python -m fitz gettext -h
usage: fitz gettext [-h] [-password PASSWORD] [-mode {simple,blocks,layout}] [-pages␣

˓→PAGES] [-noligatures]
[-convert-white] [-extra-spaces] [-noformfeed] [-skip-empty] [-

˓→output OUTPUT] [-grid GRID]
[-fontsize FONTSIZE]
input

----------------- extract text in various formatting modes ----------------

positional arguments:
input
input document filename

optional arguments:

(continues on next page)

170
Chapter 18. Module fitz

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

-h, --help
show this help message and exit
-password PASSWORD
password for input document
-mode {simple,blocks,layout}
mode: simple, block sort, or layout (default)
-pages PAGES
select pages, format: 1,5-7,50-N
-noligatures
expand ligature characters (default False)
-convert-white
convert whitespace characters to space (default False)
-extra-spaces
fill gaps with spaces (default False)
-noformfeed
write linefeeds, no formfeeds (default False)
-skip-empty
suppress pages with no text (default False)
-output OUTPUT
store text in this file (default inputfilename.txt)
-grid GRID
merge lines if closer than this (default 2)
-fontsize FONTSIZE
only include text with a larger :data:�fontsize� (default 3)

Note: Command options may be abbreviated as long as no ambiguities are introduced. So the following do the same:

• ... -output text.txt -noligatures -noformfeed -convert-white -grid 3 -extra-spaces
...

• ... -o text.txt -nol -nof -c -g 3 -e ...

The output filename defaults to the input with its extension replaced by .txt. As with other commands, you can select
page ranges (caution: 1-based!) in mutool format, as indicated above.

• mode: (str) select a formatting mode – default is “layout”.

• noligatures: (bool) corresponds to not TEXT_PRESERVE_LIGATURES. If specified, ligatures (present in ad-
vanced fonts: glyphs combining multiple characters like “fi”) are split up into their components (i.e. “f”, “i”).
Default is passing them through.

• convert-white: corresponds to not TEXT_PRESERVE_WHITESPACE. If specified, all white space characters (like
tabs) are replaced with one or more spaces. Default is passing them through.

• extra-spaces: (bool) corresponds to not TEXT_INHIBIT_SPACES. If specified, large gaps between adjacent
characters will be filled with one or more spaces. Default is off.

• noformfeed: (bool) instead of hex(12) (formfeed), write linebreaks n at end of output pages.

• skip-empty: (bool) skip pages with no text.

• grid: lines with a vertical coordinate difference of no more than this value (in points) will be merged into the
same output line. Only relevant for “layout” mode. Use with care: 3 or the default 2 should be adequate in most
cases. If too large, lines that are intended to be different in the original may be merged and will result in garbled
and / or incomplete output. If too low, artifact separate output lines may be generated for some spans in the input
line, just because they are coded in a different font with slightly deviating properties.

• fontsize: include text with fontsize larger than this value only (default 3). Only relevant for “layout” option.

This documentation covers all versions up to 1.23.25.

18.7. Text Extraction
171

PyMuPDF Documentation, Release 1.23.25

172
Chapter 18. Module fitz

CHAPTER

NINETEEN

CLASSES

19.1 Annot

This class is supported for PDF documents only.

Quote from the Adobe PDF References: “An annotation associates an object such as a note, sound, or movie with a
location on a page of a PDF document, or provides a way to interact with the user by means of the mouse and keyboard.”

There is a parent-child relationship between an annotation and its page. If the page object becomes unusable (closed
document, any document structure change, etc.), then so does every of its existing annotation objects – an exception is
raised saying that the object is “orphaned”, whenever an annotation property or method is accessed.

Attribute
Short Description

Annot.delete_responses()
delete all responding annotions

Annot.get_file()
get attached file content

Annot.get_oc()
get xref of an OCG / OCMD

Annot.get_pixmap()
image of the annotation as a pixmap

Annot.get_sound()
get the sound of an audio annotation

Annot.get_text()
extract annotation text

Annot.get_textbox()
extract annotation text

Annot.set_border()
set annotation’s border properties

Annot.set_blendmode()
set annotation’s blend mode

Annot.set_colors()
set annotation’s colors

Annot.set_flags()
set annotation’s flags field

Annot.set_irt_xref()
define the annotation to being “In Response To”

Annot.set_name()
set annotation’s name field

Annot.set_oc()
set xref to an OCG / OCMD

Annot.set_opacity()
change transparency

Annot.set_open()
open / close annotation or its Popup

Annot.set_popup()
create a Popup for the annotation

Annot.set_rect()
change annotation rectangle

Annot.set_rotation()
change rotation

Annot.update_file()
update attached file content

Annot.update()
apply accumulated annot changes

Annot.blendmode
annotation BlendMode

Annot.border
border details

Annot.colors
border / background and fill colors

Annot.file_info
get attached file information

Annot.flags
annotation flags

Annot.has_popup
whether annotation has a Popup

continues on next page

173

PyMuPDF Documentation, Release 1.23.25

Table 1 – continued from previous page

Attribute
Short Description

Annot.irt_xref
annotation to which this one responds

Annot.info
various information

Annot.is_open
whether annotation or its Popup is open

Annot.line_ends
start / end appearance of line-type annotations

Annot.next
link to the next annotation

Annot.opacity
the annot’s transparency

Annot.parent
page object of the annotation

Annot.popup_rect
rectangle of the annotation’s Popup

Annot.popup_xref
the PDF xref number of the annotation’s Popup

Annot.rect
rectangle containing the annotation

Annot.type
type of the annotation

Annot.vertices
point coordinates of Polygons, PolyLines, etc.

Annot.xref
the PDF xref number

Class API

class Annot

get_pixmap(matrix=fitz.Identity, dpi=None, colorspace=fitz.csRGB, alpha=False)

• Changed in v1.19.2: added support of dpi parameter.

Creates a pixmap from the annotation as it appears on the page in untransformed coordinates. The pixmap’s
IRect equals Annot.rect.irect (see below). All parameters are keyword only.

Parameters

• matrix (matrix_like) – a matrix to be used for image creation. Default is Identity.

• dpi (int) – (new in v1.19.2) desired resolution in dots per inch. If not None, the matrix
parameter is ignored.

• colorspace (Colorspace) – a colorspace to be used for image creation.
Default is
fitz.csRGB.

• alpha (bool) – whether to include transparency information. Default is False.

Return type

Pixmap

Note:

• If the annotation has just been created or modified, you should Document.reload_page() the page
first via page = doc.reload_page(page).

• The pixmap will have “premultiplied” pixels if alpha=True. To learn about some background, e.g.
look for “Premultiplied alpha” here.

get_text(opt, clip=None, flags=None)

• New in 1.18.0

Retrieves the content of the annotation in a variety of formats – much like the same method for Page.. This
currently only delivers relevant data for annotation types ‘FreeText’ and ‘Stamp’. Other types return an
empty string (or equivalent objects).

Parameters

174
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• opt (str) – (positional only) the desired format - one of the following values. Please note
that this method works exactly like the same-named method of Page.

– ”text” – TextPage.extractTEXT(), default

– ”blocks” – TextPage.extractBLOCKS()

– ”words” – TextPage.extractWORDS()

– ”html” – TextPage.extractHTML()

– ”xhtml” – TextPage.extractXHTML()

– ”xml” – TextPage.extractXML()

– ”dict” – TextPage.extractDICT()

– ”json” – TextPage.extractJSON()

– ”rawdict” – TextPage.extractRAWDICT()

• clip (rect-like) – (keyword only) restrict the extraction to this area. Should hardly ever
be required, defaults to Annot.rect.

• flags (int) – (keyword only) control the amount of data returned. Defaults to simple text
extraction.

get_textbox(rect)

• New in 1.18.0

Return the annotation text. Mostly (except line breaks) equal to Annot.get_text() with the “text” option.

Parameters

rect (rect-like) – the area to consider, defaults to Annot.rect.

set_info(info=None, content=None, title=None, creationDate=None, modDate=None, subject=None)

• Changed in version 1.16.10

Changes annotation properties. These include dates, contents, subject and author (title). Changes for name
and id will be ignored. The update happens selectively: To leave a property unchanged, set it to None. To
delete existing data, use an empty string.

Parameters

• info (dict) – a dictionary compatible with the info property (see below). All entries must
be strings. If this argument is not a dictionary, the other arguments are used instead – else
they are ignored.

• content (str) – (new in v1.16.10) see description in info.

• title (str) – (new in v1.16.10) see description in info.

• creationDate (str) – (new in v1.16.10) date of annot creation. If given, should be in
PDF datetime format.

• modDate (str) – (new in v1.16.10) date of last modification. If given, should be in PDF
datetime format.

• subject (str) – (new in v1.16.10) see description in info.

set_line_ends(start, end)

Sets an annotation’s line ending styles. Each of these annotation types is defined by a list of points which
are connected by lines. The symbol identified by start is attached to the first point, and end to the last point
of this list. For unsupported annotation types, a no-operation with a warning message results.

19.1. Annot
175

PyMuPDF Documentation, Release 1.23.25

Note:

• While ‘FreeText’, ‘Line’, ‘PolyLine’, and ‘Polygon’ annotations can have these properties, (Py-)
MuPDF does not support line ends for ‘FreeText’, because the call-out variant of it is not supported.

• (Changed in v1.16.16) Some symbols have an interior area (diamonds, circles, squares, etc.). By de-
fault, these areas are filled with the fill color of the annotation. If this is None, then white is chosen. The
fill_color argument of Annot.update() can now be used to override this and give line end symbols
their own fill color.

Parameters

• start (int) – The symbol number for the first point.

• end (int) – The symbol number for the last point.

set_oc(xref )

Set the annotation’s visibility using PDF optional content mechanisms. This visibility is controlled by the
user interface of supporting PDF viewers. It is independent from other attributes like Annot.flags.

Parameters

xref (int) – the xref of an optional contents group (OCG or OCMD). Any previous xref
will be overwritten. If zero, a previous entry will be removed. An exception occurs if the xref
is not zero and does not point to a valid PDF object.

Note: This does not require executing Annot.update() to take effect.

get_oc()

Return the xref of an optional content object, or zero if there is none.

Returns

zero or the xref of an OCG (or OCMD).

set_irt_xref(xref )

• New in v1.19.3

Set annotation to be “In Response To” another one.

Parameters

xref (int) – The xref of another annotation.

Note:
Must refer to an existing annotation on this page. Setting this property requires no
subsequent update().

set_open(value)

• New in v1.18.4

Set the annotation’s Popup annotation to open or closed – or the annotation itself, if its type is ‘Text’ (“sticky
note”).

Parameters

value (bool) – the desired open state.

176
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

set_popup(rect)

• New in v1.18.4

Create a Popup annotation for the annotation and specify its rectangle. If the Popup already exists, only its
rectangle is updated.

Parameters

rect (rect_like) – the desired rectangle.

set_opacity(value)

Set the annotation’s transparency. Opacity can also be set in Annot.update().

Parameters

value (float) – a float in range [0, 1]. Any value outside is assumed to be 1. E.g. a value
of 0.5 sets the transparency to 50%.

Three overlapping ‘Circle’ annotations with each opacity set to 0.5:

blendmode

• New in v1.18.4

The annotation’s blend mode. See Adobe PDF References, page 324 for explanations.

Return type

str

Returns

the blend mode or None.

set_blendmode(blendmode)

• New in v1.16.14

Set the annotation’s blend mode. See Adobe PDF References, page 324 for explanations. The blend mode
can also be set in Annot.update().

Parameters

blendmode (str) – set the blend mode. Use Annot.update() to reflect this in the visual
appearance. For predefined values see PDF Standard Blend Modes. Use PDF_BM_Normal to
remove a blend mode.

set_name(name)

• New in version 1.16.0

19.1. Annot
177

PyMuPDF Documentation, Release 1.23.25

Change the name field of any annotation type. For ‘FileAttachment’ and ‘Text’ annotations, this is the icon
name, for ‘Stamp’ annotations the text in the stamp. The visual result (if any) depends on your PDF viewer.
See also Annotation Icons in MuPDF.

Parameters

name (str) – the new name.

Caution:
If you set the name of a ‘Stamp’ annotation, then this will not change the rectangle, nor
will the text be layouted in any way. If you choose a standard text from Stamp Annotation Icons (the
exact name piece after ""STAMP_""), you should receive the original layout. An arbitrary text will not
be changed to upper case, but be written in font “Times-Bold” as is, horizontally centered in one line
and be shortened to fit. To get your text fully displayed, its length using fontsize 20 must not exceed
190 points. So please make sure that the following inequality is true: fitz.get_text_length(text,
fontname=""tibo"", fontsize=20) <= 190.

set_rect(rect)

Change the rectangle of an annotation. The annotation can be moved around and both sides of the rectangle
can be independently scaled. However, the annotation appearance will never get rotated, flipped or sheared.
This method only affects certain annotation types2 and will lead to a message on Python’s sys.stderr in
other cases. No exception will be raised, but False will be returned.

Parameters

rect (rect_like) – the new rectangle of the annotation (finite and not empty). E.g. using
a value of annot.rect + (5, 5, 5, 5) will shift the annot position 5 pixels to the right and
downwards.

Note: You need not invoke Annot.update() for activation of the effect.

set_rotation(angle)

Set the rotation of an annotation. This rotates the annotation rectangle around its center point. Then a new
annotation rectangle is calculated from the resulting quad.

Parameters

angle (int) – rotation angle in degrees. Arbitrary values are possible, but will be clamped
to the interval [0, 360).

Note:

• You must invoke Annot.update() to activate the effect.

• For PDF_ANNOT_FREE_TEXT, only one of the values 0, 90, 180 and 270 is possible and will rotate
the text inside the current rectangle (which remains unchanged). Other values are silently ignored and
replaced by 0.

• Otherwise, only the following Annotation Types can be rotated: ‘Square’, ‘Circle’, ‘Caret’, ‘Text’,
‘FileAttachment’, ‘Ink’, ‘Line’, ‘Polyline’, ‘Polygon’, and ‘Stamp’. For all others the method is a no-
op.

set_border(border=None, width=None, style=None, dashes=None, clouds=None)

2 Only the following annotation types support method Annot.set_rect(): Text, FreeText, Square, Circle, Redact, Stamp, Caret, FileAttach-
ment, Sound, and Movie.

178
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• Changed in version 1.16.9: Allow specification without using a dictionary. The direct parameters are
used if border is not a dictionary.

• Changed in version 1.22.5: Support of the “cloudy” border effect.

PDF only: Change border width, dashing, style and cloud effect. See the Annot.border attribute for more
details.

Parameters

• border (dict) – a dictionary as returned by the border property, with keys “width”
(float), “style” (str), “dashes” (sequence) and clouds (int). Omitted keys will leave the
resp. property unchanged. Set the border argument to None (the default) to use the other
arguments.

• width (float) – A non-negative value will change the border line width.

• style (str) – A value other than None will change this border property.

• dashes (sequence) – All items of the sequence must be integers, otherwise the parameter
is ignored. To remove dashing use: dashes=[]. If dashes is a non-empty sequence, “style”
will automatically be set to “D” (dashed).

• clouds (int) – A value >= 0 will change this property. Use clouds=0 to remove the
cloudy appearance completely. Only annotation types ‘Square’, ‘Circle’, and ‘Polygon’ are
supported with this property.

set_flags(flags)

Changes the annotation flags. Use the | operator to combine several.

Parameters

flags (int) – an integer specifying the required flags.

set_colors(colors=None, stroke=None, fill=None)

• Changed in version 1.16.9: Allow colors to be directly set. These parameters are used if colors is not
a dictionary.

Changes the “stroke” and “fill” colors for supported annotation types – not all annotations accept both.

Parameters

• colors (dict) – a dictionary containing color specifications. For accepted dictionary keys
and values see below. The most practical way should be to first make a copy of the colors
property and then modify this dictionary as required.

• stroke (sequence) – see above.

• fill (sequence) – see above.

Changed in v1.18.5: To completely remove a color specification, use an empty sequence like []. If you
specify None, an existing specification will not be changed.

delete_responses()

• New in version 1.16.12

Delete annotations referring to this one. This includes any ‘Popup’ annotations and all annotations respond-
ing to it.

update(opacity=None, blend_mode=None, fontsize=0, text_color=None, border_color=None,
fill_color=None, cross_out=True, rotate=-1)

Synchronize the appearance of an annotation with its properties after relevant changes.

You can safely omit this method only for the following changes:

19.1. Annot
179

PyMuPDF Documentation, Release 1.23.25

• Annot.set_rect()

• Annot.set_flags()

• Annot.set_oc()

• Annot.update_file()

• Annot.set_info() (except any changes to “content”)

All arguments are optional. (Changed in v1.16.14) Blend mode and opacity are applicable to all annotation
types. The other arguments are mostly special use, as described below.

Color specifications may be made in the usual format used in PuMuPDF as sequences of floats ranging from
0.0 to 1.0 (including both). The sequence length must be 1, 3 or 4 (supporting GRAY, RGB and CMYK
colorspaces respectively). For GRAY, just a float is also acceptable.

Parameters

• opacity (float) – (new in v1.16.14) valid for all annotation types: change or set the
annotation’s transparency. Valid values are 0 <= opacity < 1.

• blend_mode (str) – (new in v1.16.14) valid for all annotation types: change or set the
annotation’s blend mode. For valid values see PDF Standard Blend Modes.

• fontsize (float) – change fontsize of the text. ‘FreeText’ annotations only.

• text_color (sequence,float) – change the text color. ‘FreeText’ annotations only.

• border_color (sequence,float) – change the border color. ‘FreeText’ annotations
only.

• fill_color (sequence,float) – the fill color.

– ’Line’, ‘Polyline’, ‘Polygon’ annotations: use it to give applicable line end symbols a fill
color other than that of the annotation (changed in v1.16.16).

• cross_out (bool) – (new in v1.17.2) add two diagonal lines to the annotation rectangle.
‘Redact’ annotations only. If not desired, False must be specified even if the annotation
was created with False.

• rotate (int) – new rotation value. Default (-1) means no change. Supports ‘FreeText’
and several other annotation types (see Annot.set_rotation()),1. Only choose 0, 90,
180, or 270 degrees for ‘FreeText’. Otherwise any integer is acceptable.

Return type

bool

Note:
Using this method inside a Page.annots() loop is not recommended! This is because most
annotation updates require the owning page to be reloaded – which cannot be done inside this loop. Please
use the example coding pattern given in the documentation of this generator.

file_info

Basic information of the annot’s attached file.

Return type

dict

1 Rotating an annotation also changes its rectangle. Depending on how the annotation was defined, the original rectangle is cannot be recon-
structed by setting the rotation value to zero again and will be lost.

180
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Returns

a dictionary with keys filename, ufilename, desc (description), size (uncompressed file size),
length (compressed length) for FileAttachment annot types, else None.

get_file()

Returns attached file content.

Return type

bytes

Returns

the content of the attached file.

update_file(buffer=None, filename=None, ufilename=None, desc=None)

Updates the content of an attached file. All arguments are optional. No arguments lead to a no-op.

Parameters

• buffer (bytes|bytearray|BytesIO) – the new file content. Omit to only change meta-
information.

(Changed in version 1.14.13) io.BytesIO is now also supported.

• filename (str) – new filename to associate with the file.

• ufilename (str) – new unicode filename to associate with the file.

• desc (str) – new description of the file content.

get_sound()

Return the embedded sound of an audio annotation.

Return type

dict

Returns

the sound audio file and accompanying properties. These are the possible dictionary keys, of
which only “rate” and “stream” are always present.

Key
Description

rate
(float, requ.) samples per second

channels
(int, opt.) number of sound channels

bps
(int, opt.) bits per sample value per channel

encoding
(str, opt.) encoding format: Raw, Signed, muLaw, ALaw

compression
(str, opt.) name of compression filter

stream
(bytes, requ.) the sound file content

opacity

The annotation’s transparency. If set, it is a value in range [0, 1]. The PDF default is 1. However, in an
effort to tell the difference, we return -1.0 if not set.

Return type

float

parent

The owning page object of the annotation.

Return type

Page

19.1. Annot
181

PyMuPDF Documentation, Release 1.23.25

rotation

The annot rotation.

Return type

int

Returns

a value [-1, 359]. If rotation is not at all, -1 is returned (and implies a rotation angle of 0).
Other possible values are normalized to some value value 0 <= angle < 360.

rect

The rectangle containing the annotation.

Return type

Rect

next

The next annotation on this page or None.

Return type

Annot

type

A number and one or two strings describing the annotation type, like [2, ‘FreeText’, ‘FreeTextCallout’].
The second string entry is optional and may be empty. See the appendix Annotation Types for a list of
possible values and their meanings.

Return type

list

info

A dictionary containing various information. All fields are optional strings. For information items not
provided, an empty string is returned.

• name – e.g. for ‘Stamp’ annotations it will contain the stamp text like “Sold” or “Experimental”, for
other annot types you will see the name of the annot’s icon here (“PushPin” for FileAttachment).

• content – a string containing the text for type Text and FreeText annotations. Commonly used for filling
the text field of annotation pop-up windows.

• title – a string containing the title of the annotation pop-up window. By convention, this is used for the
annotation author.

• creationDate – creation timestamp.

• modDate – last modified timestamp.

• subject – subject.

• id – (new in version 1.16.10) a unique identification of the annotation. This is taken from PDF key
/NM. Annotations added by PyMuPDF will have a unique name, which appears here.

Return type

dict

flags

An integer whose low order bits contain flags for how the annotation should be presented.

Return type

int

182
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

line_ends

A pair of integers specifying start and end symbol of annotations types ‘FreeText’, ‘Line’, ‘PolyLine’, and
‘Polygon’. None if not applicable. For possible values and descriptions in this list, see the Adobe PDF
References, table 1.76 on page 400.

Return type

tuple

vertices

A list containing a variable number of point (“vertices”) coordinates (each given by a pair of floats) for
various types of annotations:

• ‘Line’ – the starting and ending coordinates (2 float pairs).

• ‘FreeText’ – 2 or 3 float pairs designating the starting, the (optional) knee point, and the ending coor-
dinates.

• ‘PolyLine’ / ‘Polygon’ – the coordinates of the edges connected by line pieces (n float pairs for n
points).

• text markup annotations – 4 float pairs specifying the QuadPoints of the marked text span (see Adobe
PDF References, page 403).

• ‘Ink’ – list of one to many sublists of vertex coordinates. Each such sublist represents a separate line
in the drawing.

Return type

list

colors

dictionary of two lists of floats in range 0 <= float <= 1 specifying the “stroke” and the interior (“fill”)
colors. The stroke color is used for borders and everything that is actively painted or written (“stroked”).
The fill color is used for the interior of objects like line ends, circles and squares. The lengths of these lists
implicitly determine the colorspaces used: 1 = GRAY, 3 = RGB, 4 = CMYK. So “[1.0, 0.0, 0.0]” stands for
RGB color red. Both lists can be empty if no color is specified.

Return type

dict

xref

The PDF xref.

Return type

int

irt_xref

The PDF xref of an annotation to which this one responds. Return zero if this is no response annotation.

Return type

int

popup_xref

The PDF xref of the associated Popup annotation. Zero if non-existent.

Return type

int

has_popup

Whether the annotation has a Popup annotation.

19.1. Annot
183

PyMuPDF Documentation, Release 1.23.25

Return type

bool

is_open

Whether the annotation’s Popup is open – or the annotation itself (‘Text’ annotations only).

Return type

bool

popup_rect

The rectangle of the associated Popup annotation. Infinite rectangle if non-existent.

Return type

Rect

rect_delta

A tuple of four floats representing the /RD entry of the annotation. The four numbers describe the numerical
differences (left, top, -right, -bottom) between two rectangles: the rect of the annotation and a rectangle
contained within that rectangle. If the entry is missing, this property is (0, 0, 0, 0). If the annotation
border is a normal, straight line, these numbers are typically border width divided by 2. If the annotation
has a “cloudy” border, you will see the breadth of the cloud semi-circles here. In general, the numbers need
not be identical. To compute the inner rectangle do a.rect + a.rect_delta.

border

A dictionary containing border characteristics. Empty if no border information exists. The following keys
may be present:

• width – a float indicating the border thickness in points. The value is -1.0 if no width is specified.

• dashes – a sequence of integers specifying a line dashing pattern. [] means no dashes, [n] means equal
on-off lengths of n points, longer lists will be interpreted as specifying alternating on-off length values.
See the Adobe PDF References page 126 for more details.

• style – 1-byte border style: “S” (Solid) = solid line surrounding the annotation, “D” (Dashed) = dashed
line surrounding the annotation, the dash pattern is specified by the dashes entry, “B” (Beveled) = a
simulated embossed rectangle that appears to be raised above the surface of the page, “I” (Inset) = a
simulated engraved rectangle that appears to be recessed below the surface of the page, “U” (Underline)
= a single line along the bottom of the annotation rectangle.

• clouds – an integer indicating a “cloudy” border, where n is an integer -1 <= n <= 2. A value n =
0 indicates a straight line (no clouds), 1 means small and 2 means large semi-circles, mimicking the
cloudy appearance. If -1, then no specification is present.

Return type

dict

19.1.1 Annotation Icons in MuPDF

This is a list of icons referenceable by name for annotation types ‘Text’ and ‘FileAttachment’. You can use them via the
icon parameter when adding an annotation, or use the as argument in Annot.set_name(). It is left to your discretion
which item to choose when – no mechanism will keep you from using e.g. the “Speaker” icon for a ‘FileAttachment’.

184
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.1.2 Example

Change the graphical image of an annotation. Also update the “author” and the text to be shown in the popup window:

doc = fitz.open(""circle-in.pdf"")
page = doc[0]
# page 0

annot = page.first_annot
# get the annotation

annot.set_border(dashes=[3])
# set dashes to ""3 on, 3 off ...""

# set stroke and fill color to some blue
annot.set_colors({""stroke"":(0, 0, 1), ""fill"":(0.75, 0.8, 0.95)})
info = annot.info
# get info dict

info[""title""] = ""Jorj X. McKie""
# set author

# text in popup window ...
info[""content""] = ""I changed border and colors and enlarged the image by 20%.""
info[""subject""] = ""Demonstration of PyMuPDF""
# some PDF viewers also show this

annot.set_info(info)
# update info dict

r = annot.rect
# take annot rect

r.x1 = r.x0 + r.width
* 1.2
# new location has same top-left

r.y1 = r.y0 + r.height * 1.2
# but 20% longer sides

annot.set_rect(r)
# update rectangle

(continues on next page)

19.1. Annot
185

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

annot.update()
# update the annot's appearance

doc.save(""circle-out.pdf"")
# save

This is how the circle annotation looks like before and after the change (pop-up windows displayed using Nitro PDF
viewer):

This documentation covers all versions up to 1.23.25.

19.2 Archive

• New in v1.21.0

This class represents a generalization of file folders and container files like ZIP and TAR archives. Archives allow
accessing arbitrary collections of file folders, ZIP / TAR files and single binary data elements as if they all were part
of one hierarchical tree of folders.

In PyMuPDF, archives are currently only used by Story objects to specify where to look for fonts, images and other
resources.

Method / Attribute
Short Description

Archive.add()
add new data to the archive

Archive.has_entry()
check if given name is a member

Archive.read_entry()
read the data given by the name

Archive.entry_list
list[dict] of archive items

Class API

class Archive

186
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

__init__(self[, content[, path]])

Creates a new archive. Without parameters, an empty archive is created.

If provided, content may be one of the following:

• another Archive: the archive is being made a sub-archive of the new one.

• a string: this must be the name of a local folder or file. pathlib.Path objects are also supported.

– A folder will be converted to a sub-archive, so its files (and any sub-folders) can be accessed by
their names.

– A file will be read with mode ""rb"" and these binary data (a bytes object) be treated as a single-
member sub-archive. In this case, the path parameter is mandatory and should be the member
name under which this item can be found / retrieved.

• a zipfile.ZipFile or tarfile.TarFile object: Will be added as a sub-archive.

• a Python binary object (bytes, bytearray, io.BytesIO): this will add a single-member sub-archive.
In this case, the path parameter is mandatory and should be the member name under which this item
can be found / retrieved.

• a tuple (data, name): This will add a single-member sub-archive with the member name name.
data may be a Python binary object or a local file name (in which case its binary file content is used).
Use this format if you need to specify path.

• a Python sequence: This is a convenience format to specify any combination of the above.

If provided, path must be a string.

• If content is either binary data or a file name, this parameter is mandatory and must be the name
under which the data can be found.

• Otherwise this parameter is optional. It can be used to simulate a folder name or a mount point, under
which this sub-archive’s elements can be found. For example this specification Archive((data,
""name""), ""path"") means that data will be found using the element name ""path/name"". Similar
is true for other sub-archives: to retrieve members of a ZIP sub-archive, their names must be prefixed
with ""path/"". The main purpose of this parameter probably is to differentiate between duplicate
names.

Note:
If duplicate entry names exist in the archive, always the last entry with that name will be found /
retrieved. During archive creation, or appending more data to an archive (see Archive.add()) no check
for duplicates will be made. Use the path parameter to prevent this from happening.

add(content[, path])

Append a sub-archive. The meaning of the parameters are exactly the same as explained above. Of course,
parameter content is not optional here.

has_entry(name)

Checks whether an entry exists in any of the sub-archives.

Parameters

name (str) – The fully qualified name of the entry. So must include any path prefix under
which the entry’s sub-archive has been added.

Returns

True or False.

read_entry(name)

Retrieve the data of an entry.

19.2. Archive
187

PyMuPDF Documentation, Release 1.23.25

Parameters

name (str) – The fully qualified name of the entry. So must include any path prefix under
which the entry’s sub-archive has been added.

Returns

The binary data (bytes) of the entry. If not found, an exception is raised.

entry_list

A list of the archive’s sub-archives. Each list item is a dictionary with the following keys:

• entries – a list of (top-level) entry names in this sub-archive.

• fmt – the format of the sub-archive. This is one of the strings “dir” (file folder), “zip” (ZIP archive),
“tar” (TAR archive), or “tree” for single binary entries or file content.

• path – the value of the path parameter under which this sub-archive was added.

Example:

>>> from pprint import pprint
>>> import fitz
>>> dir1 = ""fitz-32""
# a folder name

>>> dir2 = ""fitz-64""
# a folder name

>>> img = (""nur-ruhig.jpg"", ""img"")
# an image file

>>> members = (dir1, img, dir2)
# we want to append these in one go

>>> arch = fitz.Archive()
>>> arch.add(members, path=""mypath"")
>>> pprint(arch.entry_list)
[{'entries': ['310', '37', '38', '39'], 'fmt': 'dir', 'path': 'mypath'},
{'entries': ['img'], 'fmt': 'tree', 'path': 'mypath'},
{'entries': ['310', '311', '37', '38', '39', 'pypy'],
'fmt': 'dir',
'path': 'mypath'}]
>>>

This documentation covers all versions up to 1.23.25.

19.3 Colorspace

Represents the color space of a Pixmap.

Class API

class Colorspace

__init__(self, n)

Constructor

Parameters

n (int) – A number identifying the colorspace. Possible values are CS_RGB, CS_GRAY and
CS_CMYK.

188
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

name

The name identifying the colorspace. Example: fitz.csCMYK.name = ‘DeviceCMYK’.

Type

str

n

The number of bytes required to define the color of one pixel. Example: fitz.csCMYK.n == 4.

type

int

Predefined Colorspaces

For saving some typing effort, there exist predefined colorspace objects for the three available cases.

• csRGB = fitz.Colorspace(fitz.CS_RGB)

• csGRAY = fitz.Colorspace(fitz.CS_GRAY)

• csCMYK = fitz.Colorspace(fitz.CS_CMYK)

This documentation covers all versions up to 1.23.25.

19.4 DisplayList

DisplayList is a list containing drawing commands (text, images, etc.). The intent is two-fold:

1. as a caching-mechanism to reduce parsing of a page

2. as a data structure in multi-threading setups, where one thread parses the page and another one renders pages.
This aspect is currently not supported by PyMuPDF.

A display list is populated with objects from a page, usually by executing Page.get_displaylist(). There also
exists an independent constructor.

“Replay” the list (once or many times) by invoking one of its methods run(), get_pixmap() or get_textpage().

Method
Short Description

run()
Run a display list through a device.

get_pixmap()
generate a pixmap

get_textpage()
generate a text page

rect
mediabox of the display list

Class API

class DisplayList

__init__(self, mediabox)

Create a new display list.

Parameters

mediabox (Rect) – The page’s rectangle.

Return type

DisplayList

19.4. DisplayList
189

PyMuPDF Documentation, Release 1.23.25

run(device, matrix, area)

Run the display list through a device. The device will populate the display list with its “commands” (i.e.
text extraction or image creation). The display list can later be used to “read” a page many times without
having to re-interpret it from the document file.

You will most probably instead use one of the specialized run methods below – get_pixmap() or
get_textpage().

Parameters

• device (Device) – Device

• matrix (Matrix) – Transformation matrix to apply to the display list contents.

• area (Rect) – Only the part visible within this area will be considered when the list is run
through the device.

get_pixmap(matrix=fitz.Identity, colorspace=fitz.csRGB, alpha=0, clip=None)

Run the display list through a draw device and return a pixmap.

Parameters

• matrix (Matrix) – matrix to use. Default is the identity matrix.

• colorspace (Colorspace) – the desired colorspace. Default is RGB.

• alpha (int) – determine whether or not (0, default) to include a transparency channel.

• clip (irect_like) – restrict rendering to the intersection of this area with

DisplayList.rect.

Return type

Pixmap

Returns

pixmap of the display list.

get_textpage(flags)

Run the display list through a text device and return a text page.

Parameters

flags (int) – control which information is parsed into a text page.
Default value
in PyMuPDF is 3 = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE, i.e.
ligatures are passed through, white spaces are passed through (not translated to spaces),
and images are not included. See Text Extraction Flags.

Return type

TextPage

Returns

text page of the display list.

rect

Contains the display list’s mediabox. This will equal the page’s rectangle if it was created via Page.
get_displaylist().

Type

Rect

This documentation covers all versions up to 1.23.25.

190
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.5 Document

This class represents a document. It can be constructed from a file or from memory.

There exists the alias open for this class, i.e. fitz.Document(...) and fitz.open(...) do exactly the same thing.

For details on embedded files refer to Appendix 3.

Note:
Starting with v1.17.0, a new page addressing mechanism for EPUB files only is supported. This document
type is internally organized in chapters such that pages can most efficiently be found by their so-called “location”. The
location is a tuple (chapter, pno) consisting of the chapter number and the page number in that chapter. Both numbers
are zero-based.

While it is still possible to locate a page via its (absolute) number, doing so may mean that the complete EPUB document
must be laid out before the page can be addressed. This may have a significant performance impact if the document is
very large. Using the page’s (chapter, pno) prevents this from happening.

To maintain a consistent API, PyMuPDF supports the page location syntax for all file types – documents without this
feature simply have just one chapter. Document.load_page() and the equivalent index access now also support a
location argument.

There are a number of methods for converting between page numbers and locations, for determining the chapter count,
the page count per chapter, for computing the next and the previous locations, and the last page location of a document.

Method / Attribute
Short Description

Document.add_layer()
PDF only: make new optional content configuration

Document.add_ocg()
PDF only: add new optional content group

Document.authenticate()
gain access to an encrypted document

Document.can_save_incrementally()
check if incremental save is possible

Document.chapter_page_count()
number of pages in chapter

Document.close()
close the document

Document.convert_to_pdf()
write a PDF version to memory

Document.copy_page()
PDF only: copy a page reference

Document.del_toc_item()
PDF only: remove a single TOC item

Document.delete_page()
PDF only: delete a page

Document.delete_pages()
PDF only: delete multiple pages

Document.embfile_add()
PDF only: add a new embedded file from buffer

Document.embfile_count()
PDF only: number of embedded files

Document.embfile_del()
PDF only: delete an embedded file entry

Document.embfile_get()
PDF only: extract an embedded file buffer

Document.embfile_info()
PDF only: metadata of an embedded file

Document.embfile_names()
PDF only: list of embedded files

Document.embfile_upd()
PDF only: change an embedded file

Document.extract_font()
PDF only: extract a font by xref

Document.extract_image()
PDF only: extract an embedded image by xref

Document.ez_save()
PDF only: Document.save() with different defaults

Document.find_bookmark()
retrieve page location after laid out document

Document.fullcopy_page()
PDF only: duplicate a page

Document.get_layer()
PDF only: lists of OCGs in ON, OFF, RBGroups

Document.get_layers()
PDF only: list of optional content configurations

Document.get_oc()
PDF only: get OCG /OCMD xref of image / form xobject

Document.get_ocgs()
PDF only: info on all optional content groups

continues on next page

19.5. Document
191

PyMuPDF Documentation, Release 1.23.25

Table 2 – continued from previous page

Method / Attribute
Short Description

Document.get_ocmd()
PDF only: retrieve definition of an OCMD

Document.get_page_fonts()
PDF only: list of fonts referenced by a page

Document.get_page_images()
PDF only: list of images referenced by a page

Document.get_page_labels()
PDF only: list of page label definitions

Document.get_page_numbers()
PDF only: get page numbers having a given label

Document.get_page_pixmap()
create a pixmap of a page by page number

Document.get_page_text()
extract the text of a page by page number

Document.get_page_xobjects()
PDF only: list of XObjects referenced by a page

Document.get_sigflags()
PDF only: determine signature state

Document.get_toc()
extract the table of contents

Document.get_xml_metadata()
PDF only: read the XML metadata

Document.has_annots()
PDF only: check if PDF contains any annots

Document.has_links()
PDF only: check if PDF contains any links

Document.insert_page()
PDF only: insert a new page

Document.insert_pdf()
PDF only: insert pages from another PDF

Document.insert_file()
PDF only: insert pages from arbitrary document

Document.journal_can_do()
PDF only: which journal actions are possible

Document.journal_enable()
PDF only: enables journalling for the document

Document.journal_load()
PDF only: load journal from a file

Document.journal_op_name()
PDF only: return name of a journalling step

Document.journal_position()
PDF only: return journalling status

Document.journal_redo()
PDF only: redo current operation

Document.journal_save()
PDF only: save journal to a file

Document.journal_start_op()
PDF only: start an “operation” giving it a name

Document.journal_stop_op()
PDF only: end current operation

Document.journal_undo()
PDF only: undo current operation

Document.layer_ui_configs()
PDF only: list of optional content intents

Document.layout()
re-paginate the document (if supported)

Document.load_page()
read a page

Document.make_bookmark()
create a page pointer in reflowable documents

Document.move_page()
PDF only: move a page to different location in doc

Document.need_appearances()
PDF only: get/set /NeedAppearances property

Document.new_page()
PDF only: insert a new empty page

Document.next_location()
return (chapter, pno) of following page

Document.outline_xref()
PDF only: xref a TOC item

Document.page_cropbox()
PDF only: the unrotated page rectangle

Document.page_xref()
PDF only: xref of a page number

Document.pages()
iterator over a page range

Document.pdf_catalog()
PDF only: xref of catalog (root)

Document.pdf_trailer()
PDF only: trailer source

Document.prev_location()
return (chapter, pno) of preceding page

Document.reload_page()
PDF only: provide a new copy of a page

Document.resolve_names()
PDF only: Convert destination names into a Python dict

Document.save()
PDF only: save the document

Document.saveIncr()
PDF only: save the document incrementally

Document.scrub()
PDF only: remove sensitive data

Document.search_page_for()
search for a string on a page

Document.select()
PDF only: select a subset of pages

Document.set_layer_ui_config()
PDF only: set OCG visibility temporarily

continues on next page

192
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Table 2 – continued from previous page

Method / Attribute
Short Description

Document.set_layer()
PDF only: mass changing OCG states

Document.set_markinfo()
PDF only: set the MarkInfo values

Document.set_metadata()
PDF only: set the metadata

Document.set_oc()
PDF only: attach OCG/OCMD to image / form xobject

Document.set_ocmd()
PDF only: create or update an OCMD

Document.set_page_labels()
PDF only: add/update page label definitions

Document.set_pagemode()
PDF only: set the PageMode

Document.set_pagelayout()
PDF only: set the PageLayout

Document.set_toc_item()
PDF only: change a single TOC item

Document.set_toc()
PDF only: set the table of contents (TOC)

Document.set_xml_metadata()
PDF only: create or update document XML metadata

Document.subset_fonts()
PDF only: create font subsets

Document.switch_layer()
PDF only: activate OC configuration

Document.tobytes()
PDF only: writes document to memory

Document.xref_copy()
PDF only: copy a PDF dictionary to another xref

Document.xref_get_key()
PDF only: get the value of a dictionary key

Document.xref_get_keys()
PDF only: list the keys of object at xref

Document.xref_object()
PDF only: get the definition source of xref

Document.xref_set_key()
PDF only: set the value of a dictionary key

Document.xref_stream_raw()
PDF only: raw stream source at xref

Document.xref_xml_metadata()
PDF only: xref of XML metadata

Document.chapter_count
number of chapters

Document.FormFonts
PDF only: list of global widget fonts

Document.is_closed
has document been closed?

Document.is_dirty
PDF only: has document been changed yet?

Document.is_encrypted
document (still) encrypted?

Document.is_fast_webaccess
is PDF linearized?

Document.is_form_pdf
is this a Form PDF?

Document.is_pdf
is this a PDF?

Document.is_reflowable
is this a reflowable document?

Document.is_repaired
PDF only: has this PDF been repaired during open?

Document.last_location
(chapter, pno) of last page

Document.metadata
metadata

Document.markinfo
PDF MarkInfo value

Document.name
filename of document

Document.needs_pass
require password to access data?

Document.outline
first Outline item

Document.page_count
number of pages

Document.permissions
permissions to access the document

Document.pagemode
PDF PageMode value

Document.pagelayout
PDF PageLayout value

Document.version_count
PDF count of versions

Class API

class Document

__init__(self, filename=None, stream=None, *, filetype=None, rect=None, width=0, height=0,
fontsize=11)

• Changed in v1.14.13: support io.BytesIO for memory documents.
• Changed in v1.19.6: Clearer, shorter and more consistent exception messages. File type

19.5. Document
193

PyMuPDF Documentation, Release 1.23.25

“pdf” is always assumed if not specified. Empty files and memory areas will always lead to
exceptions.
Creates a Document object.

• With default parameters, a new empty PDF document will be created.
• If stream is given, then the document is created from memory and, if not a PDF, either
filename or filetype must indicate its type.

• If stream is None, then a document is created from the file given by filename. Its type is
inferred from the extension. This can be overruled by filetype.

Parameters

• filename (str,pathlib) – A UTF-8 string or pathlib object containing a file
path. The document type is inferred from the filename extension. If not present or
not matching a supported type, a PDF document is assumed. For memory docu-
ments, this argument may be used instead of filetype, see below.

• stream (bytes,bytearray,BytesIO) – A memory area containing a supported
document.
If not a PDF, its type must be specified by either filename or
filetype.

• filetype (str) – A string specifying the type of document. This may be anything
looking like a filename (e.g. “x.pdf”), in which case MuPDF uses the extension to
determine the type, or a mime type like application/pdf. Just using strings like
“pdf” or “.pdf” will also work. May be omitted for PDF documents, otherwise
must match a supported document type.

• rect (rect_like) – a rectangle specifying the desired page size. This parameter
is only meaningful for documents with a variable page layout (“reflowable” docu-
ments), like e-books or HTML, and ignored otherwise. If specified, it must be a
non-empty, finite rectangle with top-left coordinates (0, 0). Together with param-
eter fontsize, each page will be accordingly laid out and hence also determine the
number of pages.

• width (float) – may used together with height as an alternative to rect to specify
layout information.

• height (float) – may used together with width as an alternative to rect to specify
layout information.

• fontsize (float) – the default fontsize for reflowable document types. This
parameter is ignored if none of the parameters rect or width and height are specified.
Will be used to calculate the page layout.

Raises

• TypeError – if the type of any parameter does not conform.
• FileNotFoundError – if the file / path cannot be found. Re-implemented as sub-
class of RuntimeError.

• EmptyFileError – if the file / path is empty or the bytes object in memory has
zero length. A subclass of FileDataError and RuntimeError.

• ValueError – if an unknown file type is explicitly specified.
• FileDataError – if the document has an invalid structure for the given type – or
is no file at all (but e.g. a folder). A subclass of RuntimeError.

Returns

A document object.
If the document cannot be created,
an exception
is raised in the above sequence.
Note that PyMuPDF-specific exceptions,
FileNotFoundError, EmptyFileError and FileDataError are intercepted if you
check for RuntimeError.

In case of problems you can see more detail in the internal messages store:
print(fitz.TOOLS.mupdf_warnings()) (which will be emptied by this call, but
you can also prevent this – consult Tools.mupdf_warnings()).

194
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Note:
Not all document types are checked for valid formats already at open time. Raster im-
ages for example will raise exceptions only later, when trying to access the content. Other types
(notably with non-binary content) may also be opened (and sometimes accessed) successfully –
sometimes even when having invalid content for the format:

• HTM, HTML, XHTML: always opened, metadata[""format""] is “HTML5”, resp.
“XHTML”.

• XML, FB2: always opened, metadata[""format""] is “FictionBook2”.

Overview of possible forms, note: open is a synonym of Document:

>>> # from a file
>>> doc = fitz.open(""some.xps"")
>>> # handle wrong extension
>>> doc = fitz.open(""some.file"", filetype=""xps"")
>>>
>>> # from memory, filetype is required if not a PDF
>>> doc = fitz.open(""xps"", mem_area)
>>> doc = fitz.open(None, mem_area, ""xps"")
>>> doc = fitz.open(stream=mem_area, filetype=""xps"")
>>>
>>> # new empty PDF
>>> doc = fitz.open()
>>> doc = fitz.open(None)
>>> doc = fitz.open("""")

Note:
Raster images with a wrong (but supported) file extension are no problem. MuPDF
will determine the correct image type when file content is actually accessed and will process it
without complaint. So fitz.open(""file.jpg"") will work even for a PNG image.

The Document class can be also be used as a context manager. On exit, the document will
automatically be closed.

>>> import fitz
>>> with fitz.open(...) as doc:

for page in doc: print(""page %i"" % page.number)

page 0
page 1
page 2
page 3
>>> doc.is_closed
True
>>>

get_oc(xref )

• New in v1.18.4
Return the cross reference number of an OCG or OCMD attached to an image or form xobject.

Parameters

xref (int) – the xref of an image or form xobject.
Valid such cross refer-
ence numbers are returned by Document.get_page_images(), resp. Document.
get_page_xobjects(). For invalid numbers, an exception is raised.

Return type

19.5. Document
195

PyMuPDF Documentation, Release 1.23.25

int

Returns

the cross reference number of an optional contents object or zero if there is none.

set_oc(xref, ocxref )

• New in v1.18.4
If xref represents an image or form xobject, set or remove the cross reference number ocxref of
an optional contents object.

Parameters

• xref (int) – the xref of an image or form xobject5. Valid such cross refer-
ence numbers are returned by Document.get_page_images(), resp. Document.
get_page_xobjects(). For invalid numbers, an exception is raised.

• ocxref (int) – the xref number of an OCG / OCMD. If not zero, an invalid reference
raises an exception. If zero, any OC reference is removed.

get_layers()

• New in v1.18.3
Show optional layer configurations. There always is a standard one, which is not included in the
response.

>>> for item in doc.get_layers(): print(item)
{'number': 0, 'name': 'my-config', 'creator': ''}
>>> # use 'number' as config identifier in add_ocg

add_layer(name, creator=None, on=None)

• New in v1.18.3
Add an optional content configuration. Layers serve as a collection of ON / OFF states for op-
tional content groups and allow fast visibility switches between different views on the same doc-
ument.

Parameters

• name (str) – arbitrary name.
• creator (str) – (optional) creating software.
• on (sequ) – a sequence of OCG xref numbers which should be set to ON when
this layer gets activated. All OCGs not listed here will be set to OFF.

switch_layer(number, as_default=False)

• New in v1.18.3
Switch to a document view as defined by the optional layer’s configuration number. This is
temporary, except if established as default.

Parameters

• number (int) – config number as returned by Document.layer_configs().
• as_default (bool) – make this the default configuration.
Activates the ON / OFF states of OCGs as defined in the identified layer. If as_default=True,
then additionally all layers, including the standard one, are merged and the result is written back
to the standard layer, and all optional layers are deleted.

add_ocg(name, config=-1, on=True, intent='View', usage='Artwork')

• New in v1.18.3
Add an optional content group. An OCG is the most important unit of information to determine
object visibility. For a PDF, in order to be regarded as having optional content, at least one OCG
must exist.

Parameters

• name (str) – arbitrary name. Will show up in supporting PDF viewers.

5 Examples for “Form XObjects” are created by Page.show_pdf_page().

196
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• config (int) – layer configuration number. Default -1 is the standard configura-
tion.

• on (bool) – standard visibility status for objects pointing to this OCG.
• intent (str,list) – a string or list of strings declaring the visibility intents.
There are two PDF standard values to choose from: “View” and “Design”. Default
is “View”. Correct spelling is important.

• usage (str) – another influencer for OCG visibility. This will become part of the
OCG’s /Usage key. There are two PDF standard values to choose from: “Artwork”
and “Technical”. Default is “Artwork”. Please only change when required.

Returns

xref of the created OCG. Use as entry for oc parameter in supporting objects.

Note: Multiple OCGs with identical parameters may be created. This will not cause problems.
Garbage option 3 of Document.save() will get rid of any duplicates.

set_ocmd(xref=0, ocgs=None, policy='AnyOn', ve=None)

• New in v1.18.4
Create or update an OCMD, Optional Content Membership Dictionary.

Parameters

• xref (int) – xref of the OCMD to be updated, or 0 for a new OCMD.
• ocgs (list) – a sequence of xref numbers of existing OCG PDF objects.
• policy (str) – one of “AnyOn” (default), “AnyOff”, “AllOn”, “AllOff” (mixed or
lower case).

• ve (list) – a “visibility expression”. This is a list of arbitrarily nested other lists
– see explanation below. Use as an alternative to the combination ocgs / policy if
you need to formulate more complex conditions.

Return type

int

Returns

xref of the OCMD. Use as oc=xref parameter in supporting objects, and respec-
tively in Document.set_oc() or Annot.set_oc().

Note:
Like an OCG, an OCMD has a visibility state ON or OFF, and it can be used like an
OCG. In contrast to an OCG, the OCMD state is determined by evaluating the state of one or
more OCGs via special forms of boolean expressions. If the expression evaluates to true, the
OCMD state is ON and OFF for false.

There are two ways to formulate OCMD visibility:
1. Use the combination of ocgs and policy: The policy value is interpreted as follows:

• AnyOn – (default) true if at least one OCG is ON.
• AnyOff – true if at least one OCG is OFF.
• AllOn – true if all OCGs are ON.
• AllOff – true if all OCGs are OFF.

Suppose you want two PDF objects be displayed exactly one at a time (if one is ON, then
the other one must be OFF):

Solution: use an OCG for object 1 and an OCMD for object 2. Create the OCMD via
set_ocmd(ocgs=[xref], policy=""AllOff""), with the xref of the OCG.

2. Use the visibility expression ve: This is a list of two or more items. The first item is a
logical keyword: one of the strings “and”, “or”, or “not”. The second and all subsequent
items must either be an integer or another list. An integer must be the xref number of an
OCG. A list must again have at least two items starting with one of the boolean keywords.
This syntax is a bit awkward, but quite powerful:

19.5. Document
197

PyMuPDF Documentation, Release 1.23.25

• Each list must start with a logical keyword.
• If the keyword is a “not”, then the list must have exactly two items. If it is “and” or
“or”, any number of other items may follow.

• Items following the logical keyword may be either integers or again a list. An integer
must be the xref of an OCG. A list must conform to the previous rules.

Examples:
• set_ocmd(ve=[""or"", 4, [""not"", 5], [""and"", 6, 7]]). This delivers ON if
the following is true: “4 is ON, or 5 is OFF, or 6 and 7 are both ON”.

• set_ocmd(ve=[""not"", xref]). This has the same effect as the OCMD example
created under 1.
For more details and examples see page 224 of Adobe PDF References. Also do have a
look at example scripts here.

Visibility expressions, /VE, are part of PDF specification version 1.6. So not all PDF
viewers / readers may already support this feature and hence will react in some standard
way for those cases.

get_ocmd(xref )

• New in v1.18.4
Retrieve the definition of an OCMD.

Parameters

xref (int) – the xref of the OCMD.

Return type

dict

Returns

a dictionary with the keys xref, ocgs, policy and ve.

get_layer(config=-1)

• New in v1.18.3
List of optional content groups by status in the specified configuration. This is a dictionary with
lists of cross reference numbers for OCGs that occur in the arrays /ON, /OFF or in some radio
button group (/RBGroups).

Parameters

config (int) – the configuration layer (default is the standard config layer).

>>> pprint(doc.get_layer())
{'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups': [[7, 10]]}
>>>

set_layer(config, *, on=None, off=None, basestate=None, rbgroups=None, locked=None)

• New in v1.18.3
• Changed in v1.22.5: Support list of locked OCGs.
Mass status changes of optional content groups. Permanently sets the status of OCGs.

Parameters

• config (int) – desired configuration layer, choose -1 for the default one.
• on (list) – list of xref of OCGs to set ON. Replaces previous values.
An
empty list will cause no OCG being set to ON anymore. Should be specified if
basestate=""ON"" is used.

• off (list) – list of xref of OCGs to set OFF. Replaces previous values. An
empty list will cause no OCG being set to OFF anymore. Should be specified if
basestate=""OFF"" is used.

• basestate (str) – state of OCGs that are not mentioned in on or off. Possible
values are “ON”, “OFF” or “Unchanged”. Upper / lower case possible.

198
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• rbgroups (list) – a list of lists. Replaces previous values. Each sublist should
contain two or more OCG xrefs. OCGs in the same sublist are handled like but-
tons in a radio button group: setting one to ON automatically sets all other group
members to OFF.

• locked (list) – a list of OCG xref number that cannot be changed by the user
interface.
Values None will not change the corresponding PDF array.

>>> doc.set_layer(-1, basestate=""OFF"")
# only changes the base state

>>> pprint(doc.get_layer())
{'basestate': 'OFF', 'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups':␣

˓→[[7, 10]]}

get_ocgs()

• New in v1.18.3
Details of all optional content groups. This is a dictionary of dictionaries like this (key is the
OCG’s xref):

>>> pprint(doc.get_ocgs())
{13: {'on': True,

'intent': ['View', 'Design'],
'name': 'Circle',
'usage': 'Artwork'},

14: {'on': True,

'intent': ['View', 'Design'],
'name': 'Square',
'usage': 'Artwork'},

15: {'on': False, 'intent': ['View'], 'name': 'Square', 'usage':

˓→'Artwork'}}
>>>

layer_ui_configs()

• New in v1.18.3
Show the visibility status of optional content that is modifiable by the user interface of supporting
PDF viewers.

• Only reports items contained in the currently selected layer configuration.
• The meaning of the dictionary keys is as follows:

– depth: item’s nesting level in the /Order array
– locked: true if cannot be changed via user interfaces
– number: running sequence number
– on: item state
– text: text string or name field of the originating OCG
– type: one of “label” (set by a text string), “checkbox” (set by a single OCG) or “ra-
diobox” (set by a set of connected OCGs)

set_layer_ui_config(number, action=0)

• New in v1.18.3
Modify OC visibility status of content groups. This is analog to what supporting PDF viewers
would offer.

Please note that visibility is not a property stored with the OCG. It is not even infor-
mation necessarily present in the PDF document at all. Instead, the current visibility is
temporarily set using the user interface of some supporting PDF consumer software.
The same type of functionality is offered by this method.

To make permanent changes, use Document.set_layer().

19.5. Document
199

PyMuPDF Documentation, Release 1.23.25

Parameters

• number (int,str) – either the sequence number of the item in list Document.
layer_configs() or the “text” of one of these items.

• action (int) – PDF_OC_ON = set on (default), PDF_OC_TOGGLE = toggle on/off,
PDF_OC_OFF = set off.

authenticate(password)

Decrypts the document with the string password. If successful, document data can be accessed.
For PDF documents, the “owner” and the “user” have different privileges, and hence different
passwords may exist for these authorization levels. The method will automatically establish the
appropriate (owner or user) access rights for the provided password.

Parameters

password (str) – owner or user password.

Return type

int

Returns

a positive value if successful, zero otherwise (the string does not match either pass-
word). If positive, the indicator Document.is_encrypted is set to False. Positive
return codes carry the following information detail:
• 1 => authenticated, but the PDF has neither owner nor user passwords.
• 2 => authenticated with the user password.
• 4 => authenticated with the owner password.
• 6 => authenticated and both passwords are equal – probably a rare situation.

Note:
The document may be protected by an owner, but not by a user password.
Detect this situation via doc.authenticate("""") == 2. This allows opening and
reading the document without authentication, but, depending on the Document.
permissions value, other actions may be prohibited. PyMuPDF (like MuPDF) in
this case ignores those restrictions. So, – in contrast to any PDF viewers – you can
for example extract text and add or modify content, even if the respective permission
flags PDF_PERM_COPY, PDF_PERM_MODIFY, PDF_PERM_ANNOTATE, etc. are set off!
It is your responsibility building a legally compliant application where applicable.

get_page_numbers(label, only_one=False)

• New in v 1.18.6
PDF only: Return a list of page numbers that have the specified label – note that labels may not
be unique in a PDF. This implies a sequential search through all page numbers to compare their
labels.

Note: Implementation detail – pages are not loaded for this purpose.

Parameters

• label (str) – the label to look for, e.g. “vii” (Roman number 7).
• only_one (bool) – stop after first hit. Useful e.g. if labelling is known to be
unique, or there are many pages, etc. The default will check every page number.

Return type

list

Returns

list of page numbers that have this label. Empty if none found, no labels defined, etc.

get_page_labels()

• New in v1.18.7

200
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

PDF only: Extract the list of page label definitions. Typically used for modifications before
feeding it into Document.set_page_labels().

Returns

a list of dictionaries as defined in Document.set_page_labels().

set_page_labels(labels)

• New in v1.18.6
PDF only: Add or update the page label definitions of the PDF.

Parameters

labels (list) – a list of dictionaries. Each dictionary defines a label building rule
and a 0-based “start” page number. That start page is the first for which the label defini-
tion is valid. Each dictionary has up to 4 items and looks like {'startpage':
int,
'prefix':
str, 'style':
str, 'firstpagenum':
int} and has the fol-
lowing items.
• startpage: (int) the first page number (0-based) to apply the label rule. This key
must be present. The rule is applied to all subsequent pages until either end of
document or superseded by the rule with the next larger page number.

• prefix: (str) an arbitrary string to start the label with, e.g. “A-”. Default is “”.
• style: (str) the numbering style. Available are “D” (decimal), “r”/”R” (Roman
numbers, lower / upper case), and “a”/”A” (lower / upper case alphabetical num-
bering: “a” through “z”, then “aa” through “zz”, etc.). Default is “”. If “”, no
numbering will take place and the pages in that range will receive the same label
consisting of the prefix value. If prefix is also omitted, then the label will be “”.

• firstpagenum: (int) start numbering with this value. Default is 1, smaller values
are ignored.
For example:

[{'startpage': 6, 'prefix': 'A-', 'style': 'D', 'firstpagenum': 10},
{'startpage': 10, 'prefix': '', 'style': 'D', 'firstpagenum': 1}]

will generate the labels “A-10”, “A-11”, “A-12”, “A-13”, “1”, “2”, “3”, ... for pages 6, 7 and so
on until end of document. Pages 0 through 5 will have the label “”.

make_bookmark(loc)

• New in v.1.17.3
Return a page pointer in a reflowable document. After re-layouting the document, the result of
this method can be used to find the new location of the page.

Note: Do not confuse with items of a table of contents, TOC.

Parameters

loc (list,tuple) – page location. Must be a valid (chapter, pno).

Return type

pointer

Returns

a long integer in pointer format. To be used for finding the new location of the page
after re-layouting the document. Do not touch or re-assign.

find_bookmark(bookmark)

• New in v.1.17.3
Return the new page location after re-layouting the document.

Parameters

bookmark (pointer) – created by Document.make_bookmark().

19.5. Document
201

PyMuPDF Documentation, Release 1.23.25

Return type

tuple

Returns

the new (chapter, pno) of the page.

chapter_page_count(chapter)

• New in v.1.17.0
Return the number of pages of a chapter.

Parameters

chapter (int) – the 0-based chapter number.

Return type

int

Returns

number of pages in chapter. Relevant only for document types with chapter support
(EPUB currently).

next_location(page_id)

• New in v.1.17.0
Return the location of the following page.

Parameters

page_id (tuple) – the current page id. This must be a tuple (chapter, pno) identifying
an existing page.

Returns

The tuple of the following page, i.e. either (chapter, pno + 1) or (chapter + 1, 0), or
the empty tuple () if the argument was the last page. Relevant only for document types
with chapter support (EPUB currently).

prev_location(page_id)

• New in v.1.17.0
Return the locator of the preceding page.

Parameters

page_id (tuple) – the current page id. This must be a tuple (chapter, pno) identifying
an existing page.

Returns

The tuple of the preceding page, i.e. either (chapter, pno - 1) or the last page of the
preceding chapter, or the empty tuple () if the argument was the first page. Relevant
only for document types with chapter support (EPUB currently).

load_page(page_id=0)

• Changed in v1.17.0: For document types supporting a so-called “chapter structure” (like
EPUB), pages can also be loaded via the combination of chapter number and relative page
number, instead of the absolute page number. This should significantly speed up access for
large documents.
Create a Page object for further processing (like rendering, text searching, etc.).

Parameters

page_id (int,tuple) – (Changed in v1.17.0)

Either a 0-based page number, or a tuple (chapter, pno). For an integer, any -∞
< page_id < page_count is acceptable. While page_id is negative, page_count
will be added to it. For example: to load the last page, you can use doc.load_page(-1).
After this you have page.number = doc.page_count - 1.

For a tuple, chapter must be in range Document.chapter_count, and pno must be
in range Document.chapter_page_count() of that chapter. Both values are 0-
based. Using this notation, Page.number will equal the given tuple. Relevant only
for document types with chapter support (EPUB currently).

202
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Return type

Page

Note:
Documents also follow the Python sequence protocol with page numbers as indices:
doc.load_page(n) == doc[n].

For absolute page numbers only, expressions like “for page in doc: ...” and “for page in re-
versed(doc): ...” will successively yield the document’s pages. Refer to Document.pages() which
allows processing pages as with slicing.

You can also use index notation with the new chapter-based page identification: use page = doc[(5,
2)] to load the third page of the sixth chapter.

To maintain a consistent API, for document types not supporting a chapter structure (like PDFs),
Document.chapter_count is 1, and pages can also be loaded via tuples (0, pno). See this3 footnote
for comments on performance improvements.

reload_page(page)

• New in v1.16.10
PDF only: Provide a new copy of a page after finishing and updating all pending changes.

Parameters

page (Page) – page object.

Return type

Page

Returns

a new copy of the same page. All pending updates (e.g. to annotations or widgets)
will be finalized and a fresh copy of the page will be loaded.

Note: In a typical use case, a page Pixmap should be taken after annotations / wid-
gets have been added or changed. To force all those changes being reflected in the
page structure, this method re-instates a fresh copy while keeping the object hierarchy
“document -> page -> annotations/widgets” intact.

resolve_names()

PDF only: Convert destination names into a Python dict.

Only available in PyMuPDF’s “rebased” implementation.

Returns

A dictionary with the following layout:
• key: (str) the name.
• value: (dict) with the following layout:

– ”page”: target page number (0-based). If no page number found -1.
– ”to”: (x, y) target point on page. Currently in PDF coordinates, i.e. point (0,0)
is the bottom-left of the page.

– ”zoom”: (float) the zoom factor.
– ”dest”: (str) only present if the target location on the page has not been pro-
vided as “/XYZ” or if no page number was found.
Examples:

3 For applicable (EPUB) document types, loading a page via its absolute number may result in layouting a large part of the document, before
the page can be accessed. To avoid this performance impact, prefer chapter-based access. Use convenience methods and attributes Document.
next_location(), Document.prev_location() and Document.last_location for maintaining a high level of coding efficiency.

19.5. Document
203

PyMuPDF Documentation, Release 1.23.25

{

'__bookmark_1': {'page': 0, 'to': (0.0, 541.0), 'zoom': 0.0}

˓→,

'__bookmark_2': {'page': 0, 'to': (0.0, 481.45), 'zoom': 0.

˓→0},
}

or:

{

'21154a7c20684ceb91f9c9adc3b677c40': {'page': -1, 'dest': '/

˓→XYZ 15.75 1486 0'},

...

}

All names found in the catalog under keys “/Dests” and “/Names/Dests” are included.

• New in v1.23.6

page_cropbox(pno)

• New in v1.17.7

PDF only: Return the unrotated page rectangle – without loading the page (via Document.
load_page()). This is meant for internal purpose requiring best possible performance.

Parameters

pno (int) – 0-based page number.

Returns

Rect of the page like Page.rect(), but ignoring any rotation.

page_xref(pno)

• New in v1.17.7

PDF only: Return the xref of the page – without loading the page (via Document.
load_page()). This is meant for internal purpose requiring best possible performance.

Parameters

pno (int) – 0-based page number.

Returns

xref of the page like Page.xref.

pages(start=None[, stop=None[, step=None]])

• New in v1.16.4

A generator for a range of pages. Parameters have the same meaning as in the built-in function
range(). Intended for expressions of the form “for page in doc.pages(start, stop, step): ...”.

Parameters

• start (int) – start iteration with this page number. Default is zero, al-
lowed values are -∞ < start < page_count. While this is negative,
page_count is added before starting the iteration.

• stop (int) – stop iteration at this page number. Default is page_count,
possible are -∞ < stop <= page_count. Larger values are silently re-
placed by the default. Negative values will cyclically emit the pages in

204
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

reversed order. As with the built-in range(), this is the first page not re-
turned.

• step (int) – stepping value. Defaults are 1 if start < stop and -1 if start >
stop. Zero is not allowed.

Returns

a generator iterator over the document’s pages. Some examples:

• ”doc.pages()” emits all pages.

• ”doc.pages(4, 9, 2)” emits pages 4, 6, 8.

• ”doc.pages(0, None, 2)” emits all pages with even numbers.

• ”doc.pages(-2)” emits the last two pages.

• ”doc.pages(-1, -1)” emits all pages in reversed order.

• ”doc.pages(-1, -10)” always emits 10 pages in reversed order, starting with
the last page – repeatedly if the document has less than 10 pages. So for a
4-page document the following page numbers are emitted: 3, 2, 1, 0, 3, 2,
1, 0, 3, 2, 1, 0, 3.

convert_to_pdf(from_page=-1, to_page=-1, rotate=0)

Create a PDF version of the current document and write it to memory. All document types are
supported. The parameters have the same meaning as in insert_pdf(). In essence, you can
restrict the conversion to a page subset, specify page rotation, and revert page sequence.

Parameters

• from_page (int) – first page to copy (0-based). Default is first page.

• to_page (int) – last page to copy (0-based). Default is last page.

• rotate (int) – rotation angle. Default is 0 (no rotation). Should be n *
90 with an integer n (not checked).

Return type

bytes

Returns

a Python bytes object containing a PDF file image. It is created by internally us-
ing tobytes(garbage=4, deflate=True). See tobytes(). You can out-
put it directly to disk or open it as a PDF. Here are some examples:

>>> # convert an XPS file to PDF
>>> xps = fitz.open(""some.xps"")
>>> pdfbytes = xps.convert_to_pdf()
>>>
>>> # either do this -->
>>> pdf = fitz.open(""pdf"", pdfbytes)
>>> pdf.save(""some.pdf"")
>>>
>>> # or this -->
>>> pdfout = open(""some.pdf"", ""wb"")
>>> pdfout.tobytes(pdfbytes)
>>> pdfout.close()

19.5. Document
205

PyMuPDF Documentation, Release 1.23.25

>>> # copy image files to PDF pages
>>> # each page will have image dimensions
>>> doc = fitz.open()
# new PDF

>>> imglist = [ ... image file names ...] # e.g. a␣

˓→directory listing
>>> for img in imglist:

imgdoc=fitz.open(img)
# open image as a␣

˓→document

pdfbytes=imgdoc.convert_to_pdf()
# make a 1-page␣

˓→PDF of it

imgpdf=fitz.open(""pdf"", pdfbytes)
doc.insert_pdf(imgpdf)
# insert the␣

˓→image PDF
>>> doc.save(""allmyimages.pdf"")

Note:
The method uses the same logic as the mutool convert CLI. This works very well in
most cases – however, beware of the following limitations.

• Image files: perfect, no issues detected. However, image transparency is ignored. If you
need that (like for a watermark), use Page.insert_image() instead. Otherwise, this
method is recommended for its much better performance.

• XPS: appearance very good. Links work fine, outlines (bookmarks) are lost, but can easily
be recovered2.

• EPUB, CBZ, FB2: similar to XPS.

• SVG: medium. Roughly comparable to svglib.

get_toc(simple=True)

Creates a table of contents (TOC) out of the document’s outline chain.

Parameters

simple (bool) – Indicates whether a simple or a detailed TOC is required. If
False, each item of the list also contains a dictionary with linkDest details for
each outline entry.

Return type

list

Returns

a list of lists. Each entry has the form [lvl, title, page, dest]. Its entries have the
following meanings:

• lvl – hierarchy level (positive int). The first entry is always 1. Entries in a
row are either equal, increase by 1, or decrease by any number.

• title – title (str)

• page – 1-based source page number (int). -1 if no destination or outside
document.

• dest – (dict) included only if simple=False. Contains details of the TOC
item as follows:

2 However, you can use Document.get_toc() and Page.get_links() (which are available for all document types) and copy this information
over to the output PDF. See demo convert.py.

206
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

– kind: destination kind, see Link Destination Kinds.

– file: filename if kind is LINK_GOTOR or LINK_LAUNCH.

– page: target page, 0-based, LINK_GOTOR or LINK_GOTO only.

– to: position on target page (Point).

– zoom: (float) zoom factor on target page.

– xref: xref of the item (0 if no PDF).

– color: item color in PDF RGB format (red, green, blue), or omit-
ted (always omitted if no PDF).

– bold: true if bold item text or omitted. PDF only.

– italic: true if italic item text, or omitted. PDF only.

– collapse: true if sub-items are folded, or omitted. PDF only.

– nameddest: target name if kind=4. PDF only. (New in 1.23.7.)

xref_get_keys(xref )

• New in v1.18.7

PDF only: Return the PDF dictionary keys of the dictionary object provided by its xref
number.

Parameters

xref (int) – the xref. (Changed in v1.18.10) Use -1 to access the special
dictionary “PDF trailer”.

Returns

a tuple of dictionary keys present in object xref. Examples:

>>> from pprint import pprint
>>> import fitz
>>> doc=fitz.open(""pymupdf.pdf"")
>>> xref = doc.page_xref(0)
# xref of page 0

>>> pprint(doc.xref_get_keys(xref))
# primary level keys␣

˓→of a page
('Type', 'Contents', 'Resources', 'MediaBox', 'Parent')
>>> pprint(doc.xref_get_keys(-1))
# primary level keys of␣

˓→the trailer
('Type', 'Index', 'Size', 'W', 'Root', 'Info', 'ID',

˓→'Length', 'Filter')
>>>

xref_get_key(xref, key)

• New in v1.18.7

PDF only: Return type and value of a PDF dictionary key of a dictionary object given by its
xref.

Parameters

• xref (int) – the xref. Changed in v1.18.10: Use -1 to access the special
dictionary “PDF trailer”.

19.5. Document
207

PyMuPDF Documentation, Release 1.23.25

• key (str) – the desired PDF key. Must exactly match (case-sensitive) one
of the keys contained in Document.xref_get_keys().

Return type

tuple

Returns

A tuple (type, value) of strings, where type is one of “xref”, “array”, “dict”,
“int”, “float”, “null”, “bool”, “name”, “string” or “unknown” (should not oc-
cur). Independent of “type”, the value of the key is always formatted as a string
– see the following example – and (almost always) a faithful reflection of what
is stored in the PDF. In most cases, the format of the value string also gives a
clue about the key type:

• A “name” always starts with a “/” slash.

• An “xref” always ends with “ 0 R”.

• An “array” is always enclosed in “[...]” brackets.

• A “dict” is always enclosed in “<<...>>” brackets.

• A “bool”, resp. “null” always equal either “true”, “false”, resp. “null”.

• “float” and “int” are represented by their string format – and are thus not always distin-
guishable.

• A “string” is converted to UTF-8 and may therefore deviate from what is
stored in the PDF. For example, the PDF key “Author” may have a value of
“<FEFF004A006F0072006A00200058002E0020004D0063004B00690065>” in the file,
but the method will return ('string', 'Jorj X. McKie').

>>> for key in doc.xref_get_keys(xref):

print(key, ""="" , doc.xref_get_key(xref, key))

Type = ('name', '/Page')
Contents = ('xref', '1297 0 R')
Resources = ('xref', '1296 0 R')
MediaBox = ('array', '[0 0 612 792]')
Parent = ('xref', '1301 0 R')
>>> #
>>> # Now same thing for the PDF trailer.
>>> # It has no xref, so -1 must be used instead.
>>> #
>>> for key in doc.xref_get_keys(-1):

print(key, ""="", doc.xref_get_key(-1, key))

Type = ('name', '/XRef')
Index = ('array', '[0 8802]')
Size = ('int', '8802')
W = ('array', '[1 3 1]')
Root = ('xref', '8799 0 R')
Info = ('xref', '8800 0 R')
ID = ('array', '[<DC9D56A6277EFFD82084E64F9441E18C>

˓→<DC9D56A6277EFFD82084E64F9441E18C>]')
Length = ('int', '21111')
Filter = ('name', '/FlateDecode')
>>>

208
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

xref_set_key(xref, key, value)

• New in v1.18.7, changed in v 1.18.13

• Changed in v1.19.4: remove a key “physically” if set to “null”.

PDF only: Set (add, update, delete) the value of a PDF key for the dictionary object given
by its xref.

Caution: This is an expert function: if you do not know what you are doing, there is a high
risk to render (parts of) the PDF unusable. Please do consult Adobe PDF References about
object specification formats (page 18) and the structure of special dictionary types like page
objects.

Parameters

• xref (int) – the xref. Changed in v1.18.13: To update the PDF trailer,
specify -1.

• key (str) – the desired PDF key (without leading “/”). Must not be empty.
Any valid PDF key – whether already present in the object (which will
be overwritten) – or new. It is possible to use PDF path notation like
""Resources/ExtGState"" – which sets the value for key ""/ExtGState""
as a sub-object of ""/Resources"".

• value (str) – the value for the key. It must be a non-empty string and,
depending on the desired PDF object type, the following rules must be
observed. There is some syntax checking, but no type checking and no
checking if it makes sense PDF-wise, i.e. no semantics checking. Upper /
lower case is important!

• xref – must be provided as ""nnn 0 R"" with a valid xref number nnn of the PDF. The
suffix “0 R” is required to be recognizable as an xref by PDF applications.

• array – a string like ""[a b c d e f]"". The brackets are required. Array items must
be separated by at least one space (not commas like in Python). An empty array ""[]"" is
possible and equivalent to removing the key. Array items may be any PDF objects, like
dictionaries, xrefs, other arrays, etc. Like in Python, array items may be of different types.

• dict – a string like ""<< ... >>"". The brackets are required and must enclose a valid
PDF dictionary definition. The empty dictionary ""<<>>"" is possible and equivalent to
removing the key.

• int – an integer formatted as a string.

• float – a float formatted as a string. Scientific notation (with exponents) is not allowed
by PDF.

• null – the string ""null"". This is the PDF equivalent to Python’s None and causes the key
to be ignored – however not necessarily removed, resp. removed on saves with garbage
collection. Changed in v1.19.4: If the key is no path hierarchy (i.e. contains no slash “/”),
then it will be completely removed.

• bool – one of the strings ""true"" or ""false"".

• name – a valid PDF name with a leading slash like this: ""/PageLayout"". See page 16
of the Adobe PDF References.

19.5. Document
209

PyMuPDF Documentation, Release 1.23.25

• string – a valid PDF string. All PDF strings must be enclosed by brackets. Denote the
empty string as ""()"". Depending on its content, the possible brackets are

– “(...)” for ASCII-only text. Reserved PDF characters must be backslash-escaped
and non-ASCII characters must be provided as 3-digit backslash-escaped octals –
including leading zeros. Example: 12 = 0x0C must be encoded as 014.

– “<...>” for hex-encoded text. Every character must be represented by two hex-digits
(lower or upper case).

– If in doubt, we strongly recommend to use get_pdf_str()! This function auto-
matically generates the right brackets, escapes, and overall format. It will for example
do conversions like these:

>>> # because of the € symbol, the following yields UTF-16BE␣

˓→BOM
>>> fitz.get_pdf_str(""Pay in $ or €."")
'<feff00500061007900200069006e002000240020006f0072002020ac002e>

˓→'
>>> # escapes for brackets and non-ASCII
>>> fitz.get_pdf_str(""Prices in EUR (USD also accepted). Areas␣

˓→are in m2."")
'(Prices in EUR \\\\(USD also accepted\\\\). Areas are in m\\\\262.)'

get_page_pixmap(pno: int, *, matrix: matrix_like = Identity, dpi=None, colorspace: Colorspace

= csRGB, clip: rect_like = None, alpha: bool = False, annots: bool = True)

Creates a pixmap from page pno (zero-based). Invokes Page.get_pixmap().

All parameters except pno are keyword-only.

Parameters

pno (int) – page number, 0-based in -∞ < pno < page_count.

Return type

Pixmap

get_page_xobjects(pno)

• New in v1.16.13

• Changed in v1.18.11

PDF only: Return a list of all XObjects referenced by a page.

Parameters

pno (int) – page number, 0-based, -∞ < pno < page_count.

Return type

list

Returns

a list of (non-image) XObjects. These objects typically represent pages em-
bedded (not copied) from other PDFs. For example, Page.show_pdf_page()
will create this type of object. An item of this list has the following layout:
(xref, name, invoker, bbox), where

• xref (int) is the XObject’s xref.

• name (str) is the symbolic name to reference the XObject.

210
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• invoker (int) the xref of the invoking XObject or zero if the page directly
invokes it.

• bbox (Rect) the boundary box of the XObject’s location on the page
in untransformed coordinates.
To get actual, non-rotated page
coordinates, multiply with the page’s transformation matrix Page.
transformation_matrix. Changed in v.18.11: the bbox is now format-
ted as Rect.

get_page_images(pno, full=False)

PDF only: Return a list of all images (directly or indirectly) referenced by the page.

Parameters

• pno (int) – page number, 0-based, -∞ < pno < page_count.

• full (bool) – whether to also include the referencer’s xref (which is zero
if this is the page).

Return type

list

Returns

a list of images referenced by this page. Each item looks like

(xref, smask, width, height, bpc, colorspace, alt.
colorspace, name, filter, referencer)

Where

• xref (int) is the image object number

• smask (int) is the object number of its soft-mask image

• width and height (ints) are the image dimensions

• bpc (int) denotes the number of bits per component (normally 8)

• colorspace (str) a string naming the colorspace (like DeviceRGB)

• alt. colorspace (str) is any alternate colorspace depending on the value of
colorspace

• name (str) is the symbolic name by which the image is referenced

• filter (str) is the decode filter of the image (Adobe PDF References, pp.
22).

• referencer (int) the xref of the referencer. Zero if directly referenced by
the page. Only present if full=True.

Note: In general, this is not the list of images that are actually displayed. This method only
parses several PDF objects to collect references to embedded images. It does not analyse the
page’s contents, where all the actual image display commands are defined. To get this infor-
mation, please use Page.get_image_info(). Also have a look at the discussion in section
Structure of Dictionary Outputs.

get_page_fonts(pno, full=False)

PDF only: Return a list of all fonts (directly or indirectly) referenced by the page.

Parameters

19.5. Document
211

PyMuPDF Documentation, Release 1.23.25

• pno (int) – page number, 0-based, -∞ < pno < page_count.

• full (bool) – whether to also include the referencer’s xref. If True, the
returned items are one entry longer. Use this option if you need to know,
whether the page directly references the font. In this case the last entry is
0. If the font is referenced by an /XObject of the page, you will find its
xref here.

Return type

list

Returns

a list of fonts referenced by this page. Each entry looks like

(xref, ext, type, basefont, name, encoding, referencer),

where

• xref (int) is the font object number (may be zero if the PDF uses one of the builtin fonts
directly)

• ext (str) font file extension (e.g. “ttf”, see Font File Extensions)

• type (str) is the font type (like “Type1” or “TrueType” etc.)

• basefont (str) is the base font name,

• name (str) is the symbolic name, by which the font is referenced

• encoding (str) the font’s character encoding if different from its built-in encoding (Adobe
PDF References, p. 254):

• referencer (int optional) the xref of the referencer. Zero if directly referenced by the
page, otherwise the xref of an XObject. Only present if full=True.

Example:

>>> pprint(doc.get_page_fonts(0, full=False))
[(12, 'ttf', 'TrueType', 'FNUUTH+Calibri-Bold', 'R8', ''),

(13, 'ttf', 'TrueType', 'DOKBTG+Calibri', 'R10', ''),
(14, 'ttf', 'TrueType', 'NOHSJV+Calibri-Light', 'R12', ''),
(15, 'ttf', 'TrueType', 'NZNDCL+CourierNewPSMT', 'R14', ''),
(16, 'ttf', 'Type0', 'MNCSJY+SymbolMT', 'R17', 'Identity-H'),
(17, 'cff', 'Type1', 'UAEUYH+Helvetica', 'R20', 'WinAnsiEncoding'),
(18, 'ttf', 'Type0', 'ECPLRU+Calibri', 'R23', 'Identity-H'),
(19, 'ttf', 'Type0', 'TONAYT+CourierNewPSMT', 'R27', 'Identity-H')]

Note:

• This list has no duplicate entries: the combination of xref, name and referencer is unique.

• In general, this is a superset of the fonts actually in use by this page. The PDF creator may
e.g. have specified some global list, of which each page only makes partial use.

get_page_text(pno, output='text', flags=3, textpage=None, sort=False)

Extracts the text of a page given its page number pno (zero-based). Invokes Page.get_text().

Parameters

pno (int) – page number, 0-based, any value -∞ < pno < page_count.

For other parameter refer to the page method.

212
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Return type

str

layout(rect=None, width=0, height=0, fontsize=11)

Re-paginate (“reflow”) the document based on the given page dimension and fontsize. This
only affects some document types like e-books and HTML. Ignored if not supported. Supported
documents have True in property is_reflowable.

Parameters

• rect (rect_like) – desired page size. Must be finite, not empty and start
at point (0, 0).

• width (float) – use it together with height as alternative to rect.

• height (float) – use it together with width as alternative to rect.

• fontsize (float) – the desired default fontsize.

select(s)

PDF only: Keeps only those pages of the document whose numbers occur in the list. Empty
sequences or elements outside range(doc.page_count) will cause a ValueError. For more
details see remarks at the bottom or this chapter.

Parameters

s (sequence) – The sequence (see Using Python Sequences as Arguments in
PyMuPDF) of page numbers (zero-based) to be included. Pages not in the se-
quence will be deleted (from memory) and become unavailable until the docu-
ment is reopened. Page numbers can occur multiple times and in any order:
the resulting document will reflect the sequence exactly as specified.

Note:

• Page numbers in the sequence need not be unique nor be in any particular order. This
makes the method a versatile utility to e.g. select only the even or the odd pages or meeting
some other criteria and so forth.

• On a technical level, the method will always create a new pagetree.

• When dealing with only a few pages,
methods copy_page(),
move_page(),

delete_page() are easier to use. In fact, they are also much faster – by at least one
order of magnitude when the document has many pages.

set_metadata(m)

PDF only: Sets or updates the metadata of the document as specified in m, a Python dictionary.

Parameters

m (dict) – A dictionary with the same keys as metadata (see below). All keys
are optional. A PDF’s format and encryption method cannot be set or changed
and will be ignored. If any value should not contain data, do not specify its key
or set the value to None. If you use {} all metadata information will be cleared to
the string “none”. If you want to selectively change only some values, modify
a copy of doc.metadata and use it as the argument. Arbitrary unicode values
are possible if specified as UTF-8-encoded.

(Changed in v1.18.4) Empty values or “none” are no longer written, but completely omitted.

get_xml_metadata()

PDF only: Get the document XML metadata.

19.5. Document
213

PyMuPDF Documentation, Release 1.23.25

Return type

str

Returns

XML metadata of the document. Empty string if not present or not a PDF.

set_xml_metadata(xml)

PDF only: Sets or updates XML metadata of the document.

Parameters

xml (str) – the new XML metadata. Should be XML syntax, however no
checking is done by this method and any string is accepted.

set_pagelayout(value)

• New in v1.22.2

PDF only: Set the /PageLayout.

Parameters

value (str) – one of the strings “SinglePage”, “OneColumn”, “TwoColumn-
Left”, “TwoColumnRight”, “TwoPageLeft”, “TwoPageRight”. Lower case is
supported.

set_pagemode(value)

• New in v1.22.2

PDF only: Set the /PageMode.

Parameters

value (str) – one of the strings “UseNone”, “UseOutlines”, “UseThumbs”,
“FullScreen”, “UseOC”, “UseAttachments”. Lower case is supported.

set_markinfo(value)

• New in v1.22.2

PDF only: Set the /MarkInfo values.

Parameters

value (dict) – a dictionary like this one:
{""Marked"":
False,
""UserProperties"":
False, ""Suspects"":
False}.
This dictionary
contains information about the usage of Tagged PDF conventions. For details
please see the PDF specifications.

set_toc(toc, collapse=1)

PDF only: Replaces the complete current outline tree (table of contents) with the one provided
as the argument. After successful execution, the new outline tree can be accessed as usual via
Document.get_toc() or via Document.outline. Like with other output-oriented methods,
changes become permanent only via save() (incremental save supported). Internally, this
method consists of the following two steps. For a demonstration see example below.

• Step 1 deletes all existing bookmarks.

• Step 2 creates a new TOC from the entries contained in toc.

Parameters

• toc (sequence) – A list / tuple with all bookmark entries that should form
the new table of contents. Output variants of get_toc() are acceptable.

214
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

To completely remove the table of contents specify an empty sequence or
None. Each item must be a list with the following format.

– [lvl, title, page [, dest]] where

∗ lvl is the hierarchy level (int > 0) of the item, which must be 1 for the
first item and at most 1 larger than the previous one.

∗ title (str) is the title to be displayed. It is assumed to be UTF-8-
encoded (relevant for multibyte code points only).

∗ page (int) is the target page number (attention: 1-based). Must be in
valid range if positive. Set it to -1 if there is no target, or the target is
external.

∗ dest (optional) is a dictionary or a number. If a number, it will be
interpreted as the desired height (in points) this entry should point
to on the page. Use a dictionary (like the one given as output by
get_toc(False)) for a detailed control of the bookmark’s proper-
ties, see Document.get_toc() for a description.

• collapse (int) – (new in v1.16.9) controls the hierarchy level beyond
which outline entries should initially show up collapsed. The default 1 will
hence only display level 1, higher levels must be unfolded using the PDF
viewer. To unfold everything, specify either a large integer, 0 or None.

Return type

int

Returns

the number of inserted, resp. deleted items.

Changed in v1.23.8: Destination ‘to’ coordinates should now be in the same coordinate system
as those returned by get_toc() (internally they are now transformed with page.cropbox
and page.rotation_matrix). So for example set_toc(get_toc()) now gives unchanged
destination ‘to’ coordinates.

outline_xref(idx)

• New in v1.17.7

PDF only: Return the xref of the outline item. This is mainly used for internal purposes.

arg int idx: index of the item in list Document.get_toc().

Returns

xref.

del_toc_item(idx)

• New in v1.17.7

• Changed in v1.18.14: no longer remove the item’s text, but show it grayed-out.

PDF only: Remove this TOC item. This is a high-speed method, which disables the respective
item, but leaves the overall TOC structure intact. Physically, the item still exists in the TOC
tree, but is shown grayed-out and will no longer point to any destination.

This also implies that you can reassign the item to a new destination using Document.
set_toc_item(), when required.

Parameters

idx (int) – the index of the item in list Document.get_toc().

19.5. Document
215

PyMuPDF Documentation, Release 1.23.25

set_toc_item(idx, dest_dict=None, kind=None, pno=None, uri=None, title=None, to=None,
filename=None, zoom=0)

• New in v1.17.7

• Changed in v1.18.6

PDF only: Changes the TOC item identified by its index. Change the item title, destination,
appearance (color, bold, italic) or collapsing sub-items – or to remove the item altogether.

Use this method if you need specific changes for selected entries only and want to avoid replac-
ing the complete TOC. This is beneficial especially when dealing with large table of contents.

Parameters

• idx (int) – the index of the entry in the list created by Document.
get_toc().

• dest_dict (dict) – the new destination. A dictionary like the last entry
of an item in doc.get_toc(False). Using this as a template is recom-
mended. When given, all other parameters are ignored – except title.

• kind (int) – the link kind, see Link Destination Kinds. If LINK_NONE,
then all remaining parameter will be ignored, and the TOC item will be
removed – same as Document.del_toc_item(). If None, then only the
title is modified and the remaining parameters are ignored. All other val-
ues will lead to making a new destination dictionary using the subsequent
arguments.

• pno (int) – the 1-based page number, i.e.
a value 1 <= pno <=
doc.page_count. Required for LINK_GOTO.

• uri (str) – the URL text. Required for LINK_URI.

• title (str) – the desired new title. None if no change.

• to (point_like) – (optional) points to a coordinate on the target page.
Relevant for LINK_GOTO. If omitted, a point near the page’s top is chosen.

• filename (str) – required for LINK_GOTOR and LINK_LAUNCH.

• zoom (float) – use this zoom factor when showing the target page.

Example use: Change the TOC of the SWIG manual to achieve this:

Collapse everything below top level and show the chapter on Python support in red, bold and
italic:

>>> import fitz
>>> doc=fitz.open(""SWIGDocumentation.pdf"")
>>> toc = doc.get_toc(False)
# we need the detailed TOC

>>> # list of level 1 indices and their titles
>>> lvl1 = [(i, item[1]) for i, item in enumerate(toc) if item[0] == 1]
>>> for i, title in lvl1:

d = toc[i][3]
# get the destination dict

d[""collapse""] = True
# collapse items underneath

if ""Python"" in title:
# show the 'Python' chapter

d[""color""] = (1, 0, 0)
# in red,

d[""bold""] = True
# bold and

d[""italic""] = True
# italic

(continues on next page)

216
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

doc.set_toc_item(i, dest_dict=d)
# update this toc item

>>> doc.save(""NEWSWIG.pdf"",garbage=3,deflate=True)

In the previous example, we have changed only 42 of the 1240 TOC items of the file.

can_save_incrementally()

• New in v1.16.0

Check whether the document can be saved incrementally. Use it to choose the right option
without encountering exceptions.

scrub(attached_files=True, clean_pages=True, embedded_files=True, hidden_text=True,
javascript=True, metadata=True, redactions=True, redact_images=0, remove_links=True,
reset_fields=True, reset_responses=True, thumbnails=True, xml_metadata=True)

• New in v1.16.14

PDF only: Remove potentially sensitive data from the PDF. This function is inspired by the
similar “Sanitize” function in Adobe Acrobat products. The process is configurable by a number
of options.

Parameters

• attached_files (bool) – Search for ‘FileAttachment’ annotations and
remove the file content.

• clean_pages (bool) – Remove any comments from page painting
sources. If this option is set to False, then this is also done for hidden_text
and redactions.

• embedded_files (bool) – Remove embedded files.

• hidden_text (bool) – Remove OCRed text and invisible text7.

• javascript (bool) – Remove JavaScript sources.

• metadata (bool) – Remove PDF standard metadata.

• redactions (bool) – Apply redaction annotations.

• redact_images (int) – how to handle images if applying redactions. One
of 0 (ignore), 1 (blank out overlaps) or 2 (remove).

• remove_links (bool) – Remove all links.

• reset_fields (bool) – Reset all form fields to their defaults.

• reset_responses (bool) – Remove all responses from all annotations.

• thumbnails (bool) – Remove thumbnail images from pages.

• xml_metadata (bool) – Remove XML metadata.

save(outfile, garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False,
incremental=False, ascii=False, expand=0, linear=False, pretty=False, no_new_id=False,
encryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None, user_pw=None)

• Changed in v1.18.7

• Changed in v1.19.0

7 This only works under certain conditions. For example, if there is normal text covered by some image on top of it, then this is undetectable and
the respective text is not removed. Similar is true for white text on white background, and so on.

19.5. Document
217

PyMuPDF Documentation, Release 1.23.25

PDF only: Saves the document in its current state.

Parameters

• outfile (str,Path,fp) – The file path, pathlib.Path or file object
to save to. A file object must have been created before via open(...)
or io.BytesIO(). Choosing io.BytesIO() is similar to Document.
tobytes() below, which equals the getvalue() output of an internally
created io.BytesIO().

• garbage (int) – Do garbage collection. Positive values exclude “incre-
mental”.

– 0 = none

– 1 = remove unused (unreferenced) objects.

– 2 = in addition to 1, compact the xref table.

– 3 = in addition to 2, merge duplicate objects.

– 4 = in addition to 3, check stream objects for duplication. This may be
slow because such data are typically large.

• clean (bool) – Clean and sanitize content streams1. Corresponds to “mu-
tool clean -sc”.

• deflate (bool) – Deflate (compress) uncompressed streams.

• deflate_images (bool) – (new in v1.18.3) Deflate (compress) uncom-
pressed image streams4.

• deflate_fonts (bool) – (new in v1.18.3) Deflate (compress) uncom-
pressed fontfile streamsPage 218, 4.

• incremental (bool) – Only save changes to the PDF. Excludes “garbage”
and “linear”. Can only be used if outfile is a string or a pathlib.Path
and equal to Document.name. Cannot be used for files that are decrypted
or repaired and also in some other cases. To be sure, check Document.
can_save_incrementally(). If this is false, saving to a new file is re-
quired.

• ascii (bool) – convert binary data to ASCII.

• expand (int) – Decompress objects. Generates versions that can be better
read by some other programs and will lead to larger files.

– 0 = none

– 1 = images

– 2 = fonts

– 255 = all

• linear (bool) – Save a linearised version of the document. This option
creates a file format for improved performance for Internet access. Excludes
“incremental”.

1 Content streams describe what (e.g. text or images) appears where and how on a page. PDF uses a specialized mini language similar to
PostScript to do this (pp. 643 in Adobe PDF References), which gets interpreted when a page is loaded.
4 These parameters cause separate handling of stream categories: use it together with expand to restrict decompression to streams other than
images / fontfiles.

218
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• pretty (bool) – Prettify the document source for better readability. PDF
objects will be reformatted to look like the default output of Document.
xref_object().

• no_new_id (bool) – Suppress the update of the file’s /ID field. If the file
happens to have no such field at all, also suppress creation of a new one.
Default is False, so every save will lead to an updated file identification.

• permissions (int) – (new in v1.16.0) Set the desired permission levels.
See Document Permissions for possible values. Default is granting all.

• encryption (int) – (new in v1.16.0) set the desired encryption method.
See PDF encryption method codes for possible values.

• owner_pw (str) – (new in v1.16.0) set the document’s owner password.
(Changed in v1.18.3) If not provided, the user password is taken if provided.
The string length must not exceed 40 characters.

• user_pw (str) – (new in v1.16.0) set the document’s user password. The
string length must not exceed 40 characters.

Note: The method does not check, whether a file of that name already exists, will hence not
ask for confirmation, and overwrite the file. It is your responsibility as a programmer to handle
this.

ez_save(*args, **kwargs)

• New in v1.18.11

PDF only: The same as Document.save() but with the changed defaults deflate=True,
garbage=3.

saveIncr()

PDF only:
saves the document incrementally.
This is a convenience abbreviation for
doc.save(doc.name, incremental=True, encryption=PDF_ENCRYPT_KEEP).

Note:
Saving incrementally may be required if the document contains verified signatures which
would be invalidated by saving to a new file.

tobytes(garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False,
ascii=False, expand=0, linear=False, pretty=False, no_new_id=False,
encryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None,
user_pw=None)

• Changed in v1.18.7

• Changed in v1.19.0

PDF only: Writes the current content of the document to a bytes object instead of to a file.
Obviously, you should be wary about memory requirements. The meanings of the parameters
exactly equal those in save(). Chapter FAQ contains an example for using this method as a
pre-processor to pdfrw.

(Changed in v1.16.0) for extended encryption support.

Return type

bytes

19.5. Document
219

PyMuPDF Documentation, Release 1.23.25

Returns

a bytes object containing the complete document.

search_page_for(pno, text, quads=False)

Search for “text” on page number “pno”.
Works exactly like the corresponding Page.
search_for(). Any integer -∞ < pno < page_count is acceptable.

insert_pdf(docsrc, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True,
show_progress=0, final=1)

• Changed in v1.19.3 - as a fix to issue #537, form fields are always excluded.

PDF only: Copy the page range [from_page, to_page] (including both) of PDF document
docsrc into the current one. Inserts will start with page number start_at. Value -1 indicates
default values. All pages thus copied will be rotated as specified. Links and annotations can be
excluded in the target, see below. All page numbers are 0-based.

Parameters

• docsrc (Document) – An opened PDF Document which must not be the
current document. However, it may refer to the same underlying file.

• from_page (int) – First page number in docsrc. Default is zero.

• to_page (int) – Last page number in docsrc to copy. Defaults to last page.

• start_at (int) – First copied page, will become page number start_at in
the target. Default -1 appends the page range to the end. If zero, the page
range will be inserted before current first page.

• rotate (int) – All copied pages will be rotated by the provided value
(degrees, integer multiple of 90).

• links (bool) – Choose whether (internal and external) links should be
included in the copy. Default is True. Internal links to outside the copied
page range are always excluded.

• annots (bool) – (new in v1.16.1) choose whether annotations should be
included in the copy. (Fixed in v1.19.3) Form fields can never be copied.

• show_progress (int) – (new in v1.17.7) specify an interval size greater
zero to see progress messages on sys.stdout. After each interval, a mes-
sage like Inserted 30 of 47 pages. will be printed.

• final (int) – (new in v1.18.0) controls whether the list of already copied
objects should be dropped after this method, default True. Set it to 0 except
for the last one of multiple insertions from the same source PDF. This saves
target file size and speeds up execution considerably.

Note:

1. If from_page > to_page, pages will be copied in reverse order. If 0 <= from_page == to_page,
then one page will be copied.

2. docsrc TOC entries will not be copied. It is easy however, to recover a table of contents for
the resulting document. Look at the examples below and at program join.py in the examples
directory: it can join PDF documents and at the same time piece together respective parts of
the tables of contents.

220
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

insert_file(infile, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True,
show_progress=0, final=1)

• New in v1.22.0

PDF only: Add an arbitrary supported document to the current PDF. Opens “infile” as a doc-
ument, converts it to a PDF and then invokes Document.insert_pdf(). Parameters are the
same as for that method. Among other things, this features an easy way to append images as
full pages to an output PDF.

Parameters

infile (multiple) – the input document to insert. May be a filename speci-
fication as is valid for creating a Document or a Pixmap.

new_page(pno=-1, width=595, height=842)

PDF only: Insert an empty page.

Parameters

• pno (int) – page number in front of which the new page should be inserted.
Must be in 1 < pno <= page_count. Special values -1 and doc.page_count
insert after the last page.

• width (float) – page width.

• height (float) – page height.

Return type

Page

Returns

the created page object.

insert_page(pno, text=None, fontsize=11, width=595, height=842, fontname='helv',
fontfile=None, color=None)

PDF only: Insert a new page and insert some text. Convenience function which combines
Document.new_page() and (parts of) Page.insert_text().

Parameters

pno (int) – page number (0-based) in front of which to insert.
Must
be in range(-1, doc.page_count + 1).
Special values -1 and doc.
page_count insert after the last page.

Changed in v1.14.12

This is now a positional parameter

For the other parameters, please consult the aforementioned methods.

Return type

int

Returns

the result of Page.insert_text() (number of successfully inserted lines).

delete_page(pno=-1)

PDF only: Delete a page given by its 0-based number in -∞ < pno < page_count - 1.

• Changed in v1.18.14: support Python’s del statement.

Parameters

pno (int) – the page to be deleted. Negative number count backwards from the
end of the document (like with indices). Default is the last page.

19.5. Document
221

PyMuPDF Documentation, Release 1.23.25

delete_pages(*args, **kwds)

• Changed in v1.18.13: more flexibility specifying pages to delete.

• Changed in v1.18.14: support Python’s del statement.

PDF only: Delete multiple pages given as 0-based numbers.

Format 1: Use keywords. Represents the old format. A contiguous range of pages is
removed.

• “from_page”: first page to delete. Zero if omitted.

• “to_page”: last page to delete. Last page in document if omitted. Must not be less
then “from_page”.

Format 2: Two page numbers as positional parameters. Handled like Format 1.

Format 3: One positional integer parameter. Equivalent to Page.delete_page().

Format 4: One positional parameter of type list, tuple or range() of page numbers. The items
of this sequence may be in any order and may contain duplicates.

Format 5: (New in v1.18.14) Using the Python del statement and index / slice notation is now
possible.

Note: (Changed in v1.14.17, optimized in v1.17.7) In an effort to maintain a valid PDF struc-
ture, this method and delete_page() will also deactivate items in the table of contents which
point to deleted pages. “Deactivation” here means, that the bookmark will point to nowhere
and the title will be shown grayed-out by supporting PDF viewers. The overall TOC structure
is left intact.

It will also remove any links on remaining pages which point to a deleted one. This action
may have an extended response time for documents with many pages.

Following examples will all delete pages 500 through 519:

• doc.delete_pages(500, 519)

• doc.delete_pages(from_page=500, to_page=519)

• doc.delete_pages((500, 501, 502, ... , 519))

• doc.delete_pages(range(500, 520))

• del doc[500:520]

• del doc[(500, 501, 502, ... , 519)]

• del doc[range(500, 520)]

For the Adobe PDF References the above takes about 0.6 seconds, because the remaining 1290
pages must be cleaned from invalid links.

In general, the performance of this method is dependent on the number of remaining pages –
not on the number of deleted pages: in the above example, deleting all pages except those 20,
will need much less time.

copy_page(pno, to=-1)

PDF only: Copy a page reference within the document.

Parameters

222
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• pno (int) – the page to be copied.
Must be in range 0 <= pno <
page_count.

• to (int) – the page number in front of which to copy. The default inserts
after the last page.

Note:
Only a new reference to the page object will be created – not a new page object, all
copied pages will have identical attribute values, including the Page.xref. This implies that
any changes to one of these copies will appear on all of them.

fullcopy_page(pno, to=-1)

• New in v1.14.17

PDF only: Make a full copy (duplicate) of a page.

Parameters

• pno (int) – the page to be duplicated. Must be in range 0 <= pno <
page_count.

• to (int) – the page number in front of which to copy. The default inserts
after the last page.

Note:

• In contrast to copy_page(), this method creates a new page object (with a new xref),
which can be changed independently from the original.

• Any Popup and “IRT” (“in response to”) annotations are not copied to avoid potentially
incorrect situations.

move_page(pno, to=-1)

PDF only: Move (copy and then delete original) a page within the document.

Parameters

• pno (int) – the page to be moved.
Must be in range 0 <= pno <
page_count.

• to (int) – the page number in front of which to insert the moved page. The
default moves after the last page.

need_appearances(value=None)

• New in v1.17.4

PDF only: Get or set the /NeedAppearances property of Form PDFs. Quote: “(Optional) A
flag specifying whether to construct appearance streams and appearance dictionaries for all
widget annotations in the document ... Default value: false.” This may help controlling the
behavior of some readers / viewers.

Parameters

value (bool) – set the property to this value. If omitted or None, inquire the
current value.

Return type

bool

Returns

19.5. Document
223

PyMuPDF Documentation, Release 1.23.25

• None: not a Form PDF, or property not defined.

• True / False: the value of the property (either just set or existing for in-
quiries). Has no effect if no Form PDF.

get_sigflags()

PDF only: Return whether the document contains signature fields. This is an optional PDF
property: if not present (return value -1), no conclusions can be drawn – the PDF creator may
just not have bothered using it.

Return type

int

Returns

• -1: not a Form PDF / no signature fields recorded / no SigFlags found.

• 1: at least one signature field exists.

• 3: contains signatures that may be invalidated if the file is saved (written) in
a way that alters its previous contents, as opposed to an incremental update.

embfile_add(name, buffer, filename=None, ufilename=None, desc=None)

• Changed in v1.14.16: The sequence of positional parameters “name” and “buffer” has
been changed to comply with the call pattern of other functions.

PDF only: Embed a new file. All string parameters except the name may be unicode (in previous
versions, only ASCII worked correctly). File contents will be compressed (where beneficial).

Parameters

• name (str) – entry identifier, must not already exist.

• buffer (bytes,bytearray,BytesIO) – file contents.

(Changed in v1.14.13) io.BytesIO is now also supported.

• filename (str) – optional filename. Documentation only, will be set to
name if None.

• ufilename (str) – optional unicode filename. Documentation only, will
be set to filename if None.

• desc (str) – optional description. Documentation only, will be set to name
if None.

Return type

int

Returns

(Changed in v1.18.13) The method now returns the xref of the inserted file.
In addition, the file object now will be automatically given the PDF keys /
CreationDate and /ModDate based on the current date-time.

embfile_count()

• Changed in v1.14.16: This is now a method. In previous versions, this was a property.

PDF only: Return the number of embedded files.

embfile_get(item)

PDF only: Retrieve the content of embedded file by its entry number or name. If the document
is not a PDF, or entry cannot be found, an exception is raised.

224
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Parameters

item (int,str) – index or name of entry.
An integer must be in
range(embfile_count()).

Return type

bytes

embfile_del(item)

• Changed in v1.14.16: Items can now be deleted by index, too.

PDF only: Remove an entry from /EmbeddedFiles. As always, physical deletion of the em-
bedded file content (and file space regain) will occur only when the document is saved to a new
file with a suitable garbage option.

Parameters

item (int/str) – index or name of entry.

Warning:
When specifying an entry name, this function will only delete the first item
with that name. Be aware that PDFs not created with PyMuPDF may contain duplicate
names. So you may want to take appropriate precautions.

embfile_info(item)

• Changed in v1.18.13

PDF only: Retrieve information of an embedded file given by its number or by its name.

Parameters

item (int/str) – index or name of entry.
An integer must be in
range(embfile_count()).

Return type

dict

Returns

a dictionary with the following keys:

• name – (str) name under which this entry is stored

• filename – (str) filename

• ufilename – (unicode) filename

• desc – (str) description

• size – (int) original file size

• length – (int) compressed file length

• creationDate – (New in v1.18.13) (str) date-time of item creation in PDF
format

• modDate – (New in v1.18.13) (str) date-time of last change in PDF format

• collection – (New in v1.18.13) (int) xref of the associated PDF portfolio
item if any, else zero.

• checksum – (New in v1.18.13) (str) a hashcode of the stored file content as
a hexadecimal string. Should be MD5 according to PDF specifications, but
be prepared to see other hashing algorithms.

19.5. Document
225

PyMuPDF Documentation, Release 1.23.25

embfile_names()

• New in v1.14.16

PDF only: Return a list of embedded file names. The sequence of the names equals the physical
sequence in the document.

Return type

list

embfile_upd(item, buffer=None, filename=None, ufilename=None, desc=None)

PDF only: Change an embedded file given its entry number or name. All parameters are op-
tional. Letting them default leads to a no-operation.

Parameters

• item (int/str) – index or name of entry.
An integer must be in
range(embfile_count()).

• buffer (bytes,bytearray,BytesIO) – the new file content.

(Changed in v1.14.13) io.BytesIO is now also supported.

• filename (str) – the new filename.

• ufilename (str) – the new unicode filename.

• desc (str) – the new description.

(Changed in v1.18.13) The method now returns the xref of the file object.

Return type

int

Returns

xref of the file object. Automatically, its /ModDate PDF key will be updated
with the current date-time.

close()

Release objects and space allocations associated with the document. If created from a file, also
closes filename (releasing control to the OS). Explicitly closing a document is equivalent to
deleting it, del doc, or assigning it to something else like doc = None.

xref_object(xref, compressed=False, ascii=False)

• New in v1.16.8

• Changed in v1.18.10

PDF only: Return the definition source of a PDF object.

Parameters

• xref (int) – the object’s xref. Changed in v1.18.10: A value of -1
returns the PDF trailer source.

• compressed (bool) – whether to generate a compact output with no line
breaks or spaces.

• ascii (bool) – whether to ASCII-encode binary data.

Return type

str

Returns

The object definition source.

226
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

pdf_catalog()

• New in v1.16.8

PDF only: Return the xref number of the PDF catalog (or root) object. Use that number with
Document.xref_object() to see its source.

pdf_trailer(compressed=False)

• New in v1.16.8

PDF only: Return the trailer source of the PDF, which is usually located at the PDF file’s end.
This is Document.xref_object() with an xref argument of -1.

xref_stream(xref )

• New in v1.16.8

PDF only: Return the decompressed contents of the xref stream object.

Parameters

xref (int) – xref number.

Return type

bytes

Returns

the (decompressed) stream of the object.

xref_stream_raw(xref )

• New in v1.16.8

PDF only: Return the unmodified (esp. not decompressed) contents of the xref stream ob-
ject. Otherwise equal to Document.xref_stream().

Return type

bytes

Returns

the (original, unmodified) stream of the object.

update_object(xref, obj_str, page=None)

• New in v1.16.8

PDF only: Replace object definition of xref with the provided string. The xref may also be
new, in which case this instruction completes the object definition. If a page object is also given,
its links and annotations will be reloaded afterwards.

Parameters

• xref (int) – xref number.

• obj_str (str) – a string containing a valid PDF object definition.

• page (Page) – a page object. If provided, indicates, that annotations of this
page should be refreshed (reloaded) to reflect changes incurred with links
and / or annotations.

Return type

int

Returns

zero if successful, otherwise an exception will be raised.

19.5. Document
227

PyMuPDF Documentation, Release 1.23.25

update_stream(xref, data, new=False, compress=True)

• New in v.1.16.8

• Changed in v1.19.2: added parameter “compress”

• Changed in v1.19.6: deprecated parameter “new”. Now confirms that the object is a PDF
dictionary object.

Replace the stream of an object identified by xref, which must be a PDF dictionary. If the object
is no stream, it will be turned into one. The function automatically performs a compress
operation (“deflate”) where beneficial.

Parameters

• xref (int) – xref number.

• stream (bytes|bytearray|BytesIO) – the new content of the stream.

(Changed in v1.14.13:) io.BytesIO objects are now also supported.

• new (bool) – deprecated and ignored. Will be removed some time after
v1.20.0.

• compress (bool) – whether to compress the inserted stream. If True (de-
fault), the stream will be inserted using /FlateDecode compression (if
beneficial), otherwise the stream will inserted as is.

Raises

ValueError – if xref does not represent a PDF dict. An empty dictionary
<<>> is accepted. So if you just created the xref and want to give it a stream, first
execute doc.update_object(xref, ""<<>>""), and then insert the stream
data with this method.

The method is primarily (but not exclusively) intended to manipulate streams containing PDF
operator syntax (see pp. 643 of the Adobe PDF References) as it is the case for e.g. page content
streams.

If you update a contents stream, consider using save parameter clean=True to ensure consis-
tency between PDF operator source and the object structure.

Example: Let us assume that you no longer want a certain image appear on a page. This can be
achieved by deleting the respective reference in its contents source(s) – and indeed: the image
will be gone after reloading the page. But the page’s resources object would still show the
image as being referenced by the page. This save option will clean up any such mismatches.

xref_copy(source, target, *, keep=None)

• New in v1.19.5

PDF Only: Make target xref an exact copy of source. If source is a stream, then these data are also
copied.

Parameters

• source (int) – the source xref. It must be an existing dictionary object.

• target (int) – the target xref. Must be an existing dictionary object. If the xref
has just been created, make sure to initialize it as a PDF dictionary with the mini-
mum specification <<>>.

• keep (list) – an optional list of top-level keys in target, that should not be removed
in preparation of the copy process.

228
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Note:

• This method has much in common with Python’s dict method copy().

• Both xref numbers must represent existing dictionaries.

• Before data is copied from source, all target dictionary keys are deleted. You can specify exceptions
from this in the keep list. If source however has a same-named key, its value will still replace the
target.

• If source is a stream object, then these data will also be copied over, and target will be converted
to a stream object.

• A typical use case is to replace or remove an existing image without using redaction annotations.
Example scripts can be seen here.

extract_image(xref )

PDF Only: Extract data and meta information of an image stored in the document. The output can directly
be used to be stored as an image file, as input for PIL, Pixmap creation, etc. This method avoids using
pixmaps wherever possible to present the image in its original format (e.g. as JPEG).

Parameters

xref (int) – xref of an image object.
If this is not in range(1, doc.
xref_length()), or the object is no image or other errors occur, None is returned
and no exception is raised.

Return type

dict

Returns

a dictionary with the following keys

• ext (str) image type (e.g. ‘jpeg’), usable as image file extension

• smask (int) xref number of a stencil (/SMask) image or zero

• width (int) image width

• height (int) image height

• colorspace (int) the image’s colorspace.n number.

• cs-name (str) the image’s colorspace.name.

• xres (int) resolution in x direction. Please also see resolution.

• yres (int) resolution in y direction. Please also see resolution.

• image (bytes) image data, usable as image file content

>>> d = doc.extract_image(1373)
>>> d
{'ext': 'png', 'smask': 2934, 'width': 5, 'height': 629, 'colorspace': 3, 'xres

˓→': 96,
'yres': 96, 'cs-name': 'DeviceRGB',
'image': b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x05\\ ...'}
>>> imgout = open(f""image.{d['ext']}"", ""wb"")
>>> imgout.write(d[""image""])
102
>>> imgout.close()

19.5. Document
229

PyMuPDF Documentation, Release 1.23.25

Note: There is a functional overlap with pix = fitz.Pixmap(doc, xref), followed by a pix.tobytes(). Main
differences are that extract_image, (1) does not always deliver PNG image formats, (2) is very much faster
with non-PNG images, (3) usually results in much less disk storage for extracted images, (4) returns None
in error cases (generates no exception). Look at the following example images within the same PDF.

• xref 1268 is a PNG – Comparable execution time and identical output:

In [23]: %timeit pix = fitz.Pixmap(doc, 1268);pix.tobytes()
10.8 ms ± 52.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
In [24]: len(pix.tobytes())
Out[24]: 21462

In [25]: %timeit img = doc.extract_image(1268)
10.8 ms ± 86 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
In [26]: len(img[""image""])
Out[26]: 21462

• xref 1186 is a JPEG – Document.extract_image() is many times faster and produces a much
smaller output (2.48 MB vs. 0.35 MB):

In [27]: %timeit pix = fitz.Pixmap(doc, 1186);pix.tobytes()
341 ms ± 2.86 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
In [28]: len(pix.tobytes())
Out[28]: 2599433

In [29]: %timeit img = doc.extract_image(1186)
15.7 µs ± 116 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
In [30]: len(img[""image""])
Out[30]: 371177

extract_font(xref, info_only=False, named=None)

• Changed in v1.19.4: return a dictionary if named == True.

PDF Only: Return an embedded font file’s data and appropriate file extension. This can be
used to store the font as an external file. The method does not throw exceptions (other than
via checking for PDF and valid xref).

arg int xref

PDF object number of the font to extract.

arg bool info_only

only return font information, not the buffer. To be used for information-only
purposes, avoids allocation of large buffer areas.

arg bool named

If true, a dictionary with the following keys is returned: ‘name’ (font base
name), ‘ext’ (font file extension), ‘type’ (font type), ‘content’ (font file con-
tent).

rtype

tuple,dict

returns

a tuple (basename, ext, type, content), where ext is a 3-byte sug-
gested file extension (str), basename is the font’s name (str), type is the font’s

230
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

type (e.g. “Type1”) and content is a bytes object containing the font file’s con-
tent (or b””). For possible extension values and their meaning see Font File
Extensions. Return details on error:

• ("""", """", """", b"""") – invalid xref or xref is not a (valid) font object.

• (basename, ""n/a"", ""Type1"", b"""") – basename is not embedded
and thus cannot be extracted. This is the case for e.g. the PDF Base
14 Fonts and Type 3 fonts.

Example:

>>> # store font as an external file
>>> name, ext, _, content = doc.extract_font(4711)
>>> # assuming content is not None:
>>> ofile = open(name + ""."" + ext, ""wb"")
>>> ofile.write(content)
>>> ofile.close()

Warning: The basename is returned unchanged from the PDF. So it may contain char-
acters (such as blanks) which may disqualify it as a filename for your operating system.
Take appropriate action.

Note:

• The returned basename in general is not the original file name, but it probably has some
similarity.

• If parameter named == True, a dictionary with the following keys is returned:
{'name':
'T1', 'ext':
'n/a', 'type':
'Type3', 'content':
b''}.

xref_xml_metadata()

• New in v1.16.8

PDF only: Return the xref of the document’s XML metadata.

has_links()

has_annots()

• New in v1.18.7

PDF only: Check whether there are links, resp. annotations anywhere in the document.

Returns

True / False. As opposed to fields, which are also stored in a central place of a PDF
document, the existence of links / annotations can only be detected by parsing each
page. These methods are tuned to do this efficiently and will immediately return,
if the answer is True for a page. For PDFs with many thousand pages however, an
answer may take some time6 if no link, resp. no annotation is found.

6 For a False the complete document must be scanned. Both methods do not load pages, but only scan object definitions. This makes them
at least 10 times faster than application-level loops (where total response time roughly equals the time for loading all pages). For the Adobe PDF
References (756 pages) and the Pandas documentation (over 3070 pages) – both have no annotations – the method needs about 11 ms for the answer
False. So response times will probably become significant only well beyond this order of magnitude.

19.5. Document
231

PyMuPDF Documentation, Release 1.23.25

subset_fonts()

• New in v1.18.7, changed in v1.18.9

PDF only: Investigate eligible fonts for their use by text in the document. If a font is supported and
a size reduction is possible, that font is replaced by a version with a character subset.

Use this method immediately before saving the document. The following features and restrictions
apply for the time being:

• Package fontTools must be installed. It is required for creating the font subsets. If not installed,
the method raises an ImportError exception.

• Supported font types only include embedded OTF, TTF and WOFF that are not already sub-
sets.

• Changed in v1.18.9: A subset font directly replaces its original – text remains untouched and
is not rewritten. It thus should retain all its properties, like spacing, hiddenness, control by
Optional Content, etc.

The greatest benefit can be achieved when creating new PDFs using large fonts like is typical for
Asian scripts. In these cases, the set of actually used unicodes mostly is small compared to the
number of glyphs in the font. Using this feature can easily reduce the embedded font binary by two
orders of magnitude – from several megabytes to a low two-digit kilobyte amount.

journal_enable()

• New in v1.19.0

PDF only: Enable journalling. Use this before you start logging operations.

journal_start_op(name)

• New in v1.19.0

PDF only: Start journalling an “operation” identified by a string “name”. Updates will fail for a
journal-enabled PDF, if no operation has been started.

journal_stop_op()

• New in v1.19.0

PDF only: Stop the current operation. The updates between start and stop of an operation belong to
the same unit of work and will be undone / redone together.

journal_position()

• New in v1.19.0

PDF only: Return the numbers of the current operation and the total operation count.

Returns

a tuple (step, steps) containing the current operation number and the total num-
ber of operations in the journal. If step is 0, we are at the top of the journal. If step
equals steps, we are at the bottom. Updating the PDF with anything other than undo
or redo will automatically remove all journal entries after the current one and the new
update will become the new last entry in the journal. The updates corresponding to
the removed journal entries will be permanently lost.

journal_op_name(step)

• New in v1.19.0

PDF only: Return the name of operation number step.

232
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

journal_can_do()

• New in v1.19.0

PDF only: Show whether forward (“redo”) and / or backward (“undo”) executions are possible from
the current journal position.

Returns

a dictionary {""undo"":
bool, ""redo"":
bool}.
The respective method is
available if its value is True.

journal_undo()

• New in v1.19.0

PDF only: Revert (undo) the current step in the journal. This moves towards the journal’s top.

journal_redo()

• New in v1.19.0

PDF only: Re-apply (redo) the current step in the journal. This moves towards the journal’s bottom.

journal_save(filename)

• New in v1.19.0

PDF only: Save the journal to a file.

Parameters

filename (str,fp) – either a filename as string or a file object opened as “wb” (or
an io.BytesIO() object).

journal_load(filename)

• New in v1.19.0

PDF only: Load journal from a file. Enables journalling for the document. If journalling is already
enabled, an exception is raised.

Parameters

filename (str,fp) – the filename (str) of the journal or a file object opened as “rb”
(or an io.BytesIO() object).

save_snapshot()

• New in v1.19.0

PDF only: Saves a “snapshot” of the document. This is a PDF document with a special, incremental-
save format compatible with journalling – therefore no save options are available. Saving a snapshot
is not possible for new documents.

This is a normal PDF document with no usage restrictions whatsoever. If it is not being changed in
any way, it can be used together with its journal to undo / redo operations or continue updating.

outline

Contains the first Outline entry of the document (or None). Can be used as a starting point to walk
through all outline items. Accessing this property for encrypted, not authenticated documents will
raise an AttributeError.

Type

Outline

19.5. Document
233

PyMuPDF Documentation, Release 1.23.25

is_closed

False if document is still open. If closed, most other attributes and methods will have been deleted
/ disabled. In addition, Page objects referring to this document (i.e. created with Document.
load_page()) and their dependent objects will no longer be usable.
For reference purposes,

Document.name still exists and will contain the filename of the original document (if applicable).

Type

bool

is_dirty

True if this is a PDF document and contains unsaved changes, else False.

Type

bool

is_pdf

True if this is a PDF document, else False.

Type

bool

is_form_pdf

False if this is not a PDF or has no form fields, otherwise the number of root form fields (fields with
no ancestors).

(Changed in v1.16.4) Returns the total number of (root) form fields.

Type

bool,int

is_reflowable

True if document has a variable page layout (like e-books or HTML). In this case you can set the
desired page dimensions during document creation (open) or via method layout().

Type

bool

is_repaired

• New in v1.18.2

True if PDF has been repaired during open (because of major structure issues). Always False for
non-PDF documents. If true, more details have been stored in TOOLS.mupdf_warnings(), and
Document.can_save_incrementally() will return False.

Type

bool

is_fast_webaccess

• New in v1.22.2

True if PDF is in linearized format. False for non-PDF documents.

Type

bool

markinfo

• New in v1.22.2

A dictionary indicating the /MarkInfo value. If not specified, the empty dictionary is returned. If
not a PDF, None is returned.

234
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Type

dict

pagemode

• New in v1.22.2

A string containing the /PageMode value. If not specified, the default “UseNone” is returned. If
not a PDF, None is returned.

Type

str

pagelayout

• New in v1.22.2

A string containing the /PageLayout value. If not specified, the default “SinglePage” is returned.
If not a PDF, None is returned.

Type

str

version_count

• New in v1.22.2

An integer counting the number of versions present in the document. Zero if not a PDF, otherwise
the number of incremental saves plus one.

Type

int

needs_pass

Indicates whether the document is password-protected against access. This indicator remains un-
changed – even after the document has been authenticated. Precludes incremental saves if true.

Type

bool

is_encrypted

This indicator initially equals Document.needs_pass. After successful authentication, it is set to
False to reflect the situation.

Type

bool

permissions

• Changed in v1.16.0: This is now an integer comprised of bit indicators. Was a dictionary
previously.

Contains the permissions to access the document. This is an integer containing bool values in re-
spective bit positions. For example, if doc.permissions & fitz.PDF_PERM_MODIFY > 0, you may
change the document. See Document Permissions for details.

Type

int

metadata

Contains the document’s meta data as a Python dictionary or None (if is_encrypted=True and need-
Pass=True). Keys are format, encryption, title, author, subject, keywords, creator, producer, cre-
ationDate, modDate, trapped. All item values are strings or None.

19.5. Document
235

PyMuPDF Documentation, Release 1.23.25

Except format and encryption, for PDF documents, the key names correspond in an obvious way
to the PDF keys /Creator, /Producer, /CreationDate, /ModDate, /Title, /Author, /Subject, /Trapped
and /Keywords respectively.

• format contains the document format (e.g. ‘PDF-1.6’, ‘XPS’, ‘EPUB’).

• encryption either contains None (no encryption), or a string naming an encryption method
(e.g. ‘Standard V4 R4 128-bit RC4’). Note that an encryption method may be specified even if
needs_pass=False. In such cases not all permissions will probably have been granted. Check
Document.permissions for details.

• If the date fields contain valid data (which need not be the case at all!), they are strings in the
PDF-specific timestamp format “D:<TS><TZ>”, where

– <TS> is the 12 character ISO timestamp YYYYMMDDhhmmss (YYYY - year, MM - month,
DD - day, hh - hour, mm - minute, ss - second), and

– <TZ> is a time zone value (time interval relative to GMT) containing a sign (‘+’ or ‘-‘),
the hour (hh), and the minute (‘mm’, note the apostrophes!).

• A Paraguayan value might hence look like D:20150415131602-04’00’, which corresponds to
the timestamp April 15, 2015, at 1:16:02 pm local time Asuncion.

Type

dict

name

Contains the filename or filetype value with which Document was created.

Type

str

page_count

Contains the number of pages of the document. May return 0 for documents with no pages. Function
len(doc) will also deliver this result.

Type

int

chapter_count

• New in v1.17.0

Contains the number of chapters in the document. Always at least 1. Relevant only for document
types with chapter support (EPUB currently). Other documents will return 1.

Type

int

last_location

• New in v1.17.0

Contains (chapter, pno) of the document’s last page. Relevant only for document types with chapter
support (EPUB currently). Other documents will return (0, page_count - 1) and (0, -1) if
it has no pages.

Type

int

236
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

FormFonts

A list of form field font names defined in the /AcroForm object. None if not a PDF.

Type

list

Note: For methods that change the structure of a PDF (insert_pdf(), select(), copy_page(), delete_page()
and others), be aware that objects or properties in your program may have been invalidated or orphaned. Examples are
Page objects and their children (links, annotations, widgets), variables holding old page counts, tables of content and
the like. Remember to keep such variables up to date or delete orphaned objects. Also refer to Ensuring Consistency
of Important Objects in PyMuPDF.

19.5.1 set_metadata() Example

Clear metadata information. If you do this out of privacy / data protection concerns, make sure you save the document
as a new file with garbage > 0. Only then the old /Info object will also be physically removed from the file. In this
case, you may also want to clear any XML metadata inserted by several PDF editors:

>>> import fitz
>>> doc=fitz.open(""pymupdf.pdf"")
>>> doc.metadata
# look at what we currently have

{'producer': 'rst2pdf, reportlab', 'format': 'PDF 1.4', 'encryption': None, 'author':
'Jorj X. McKie', 'modDate': ""D:20160611145816-04'00'"", 'keywords': 'PDF, XPS, EPUB, CBZ',
'title': 'The PyMuPDF Documentation', 'creationDate': ""D:20160611145816-04'00'"",
'creator': 'sphinx', 'subject': 'PyMuPDF 1.9.1'}
>>> doc.set_metadata({})
# clear all fields

>>> doc.metadata
# look again to show what happened

{'producer': 'none', 'format': 'PDF 1.4', 'encryption': None, 'author': 'none',
'modDate': 'none', 'keywords': 'none', 'title': 'none', 'creationDate': 'none',
'creator': 'none', 'subject': 'none'}
>>> doc._delXmlMetadata()
# clear any XML metadata

>>> doc.save(""anonymous.pdf"", garbage = 4)
# save anonymized doc

19.5.2 set_toc() Demonstration

This shows how to modify or add a table of contents. Also have a look at import.py and export.py in the examples
directory.

>>> import fitz
>>> doc = fitz.open(""test.pdf"")
>>> toc = doc.get_toc()
>>> for t in toc: print(t)
# show what we have

[1, 'The PyMuPDF Documentation', 1]
[2, 'Introduction', 1]
[3, 'Note on the Name fitz', 1]
[3, 'License', 1]
>>> toc[1][1] += "" modified by set_toc""
# modify something

>>> doc.set_toc(toc)
# replace outline tree

3
# number of bookmarks inserted

>>> for t in doc.get_toc(): print(t)
# demonstrate it worked

(continues on next page)

19.5. Document
237

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

[1, 'The PyMuPDF Documentation', 1]
[2, 'Introduction modified by set_toc', 1]
# <<< this has changed

[3, 'Note on the Name fitz', 1]
[3, 'License', 1]

19.5.3 insert_pdf() Examples

(1) Concatenate two documents including their TOCs:

>>> doc1 = fitz.open(""file1.pdf"")
# must be a PDF

>>> doc2 = fitz.open(""file2.pdf"")
# must be a PDF

>>> pages1 = len(doc1)
# save doc1's page count

>>> toc1 = doc1.get_toc(False)
# save TOC 1

>>> toc2 = doc2.get_toc(False)
# save TOC 2

>>> doc1.insert_pdf(doc2)
# doc2 at end of doc1

>>> for t in toc2:
# increase toc2 page numbers

t[2] += pages1
# by old len(doc1)

>>> doc1.set_toc(toc1 + toc2)
# now result has total TOC

Obviously, similar ways can be found in more general situations. Just make sure that hierarchy levels in a row do not
increase by more than one. Inserting dummy bookmarks before and after toc2 segments would heal such cases. A
ready-to-use GUI (wxPython) solution can be found in script join.py of the examples directory.

(2) More examples:

>>> # insert 5 pages of doc2, where its page 21 becomes page 15 in doc1
>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=15)

>>> # same example, but pages are rotated and copied in reverse order
>>> doc1.insert_pdf(doc2, from_page=25, to_page=21, start_at=15, rotate=90)

>>> # put copied pages in front of doc1
>>> doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=0)

19.5.4 Other Examples

Extract all page-referenced images of a PDF into separate PNG files:

for i in range(doc.page_count):
imglist = doc.get_page_images(i)
for img in imglist:
xref = img[0]
# xref number

pix = fitz.Pixmap(doc, xref)
# make pixmap from image

if pix.n - pix.alpha < 4:
# can be saved as PNG

pix.save(""p%s-%s.png"" % (i, xref))

else:
# CMYK: must convert first

pix0 = fitz.Pixmap(fitz.csRGB, pix)
pix0.save(""p%s-%s.png"" % (i, xref))
pix0 = None
# free Pixmap resources

pix = None
# free Pixmap resources

238
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Rotate all pages of a PDF:

>>> for page in doc: page.set_rotation(90)

This documentation covers all versions up to 1.23.25.

19.6 DocumentWriter

• New in v1.21.0

This class represents a utility which can output various document types supported by MuPDF.

In PyMuPDF only used for outputting PDF documents whose pages are populated by Story DOMs.

Using DocumentWriter also for other document types might happen in the future.

Method / Attribute
Short Description

DocumentWriter.begin_page()
start a new output page

DocumentWriter.end_page()
finish the current output page

DocumentWriter.close()
flush pending output and close the file

Class API

class DocumentWriter

__init__(self, path, options=None)

Create a document writer object, passing a Python file pointer or a file path. Options to use when saving
the file may also be passed.

This class can also be used as a Python context manager.

Parameters

• path – the output file. This may be a string file name, or any Python file pointer.

Note:
By using a io.BytesIO() object as file pointer, a document writer can
create a PDF in memory. Subsequently, this PDF can be re-opened for input and be
further manipulated. This technique is used by several example scripts in Stories
recipes.

• options (str) – specify saving options for the output PDF. Typical are “compress”
or “clean”. More possible values may be taken from help output of the mutool
convert CLI utility.

begin_page(mediabox)

Start a new output page of a given dimension.

Parameters

mediabox (rect_like) – a rectangle specifying the page size. After this method, out-
put operations may write content to the page.

19.6. DocumentWriter
239

PyMuPDF Documentation, Release 1.23.25

end_page()

Finish a page. This flushes any pending data and appends the page to the output document.

close()

Close the output file. This method is required for writing any pending data.

For usage examples consult the section of Story.

This documentation covers all versions up to 1.23.25.

19.7 Font

• New in v1.16.18

This class represents a font as defined in MuPDF (fz_font_s structure). It is required for the new class TextWriter and the
new Page.write_text(). Currently, it has no connection to how fonts are used in methods Page.insert_text()
or Page.insert_textbox(), respectively.

A Font object also contains useful general information, like the font bbox, the number of defined glyphs, glyph names
or the bbox of a single glyph.

Method / Attribute
Short Description

glyph_advance()
Width of a character

glyph_bbox()
Glyph rectangle

glyph_name_to_unicode()
Get unicode from glyph name

has_glyph()
Return glyph id of unicode

text_length()
Compute string length

char_lengths()
Tuple of char widths of a string

unicode_to_glyph_name()
Get glyph name of a unicode

valid_codepoints()
Array of supported unicodes

ascender
Font ascender

descender
Font descender

bbox
Font rectangle

buffer
Copy of the font’s binary image

flags
Collection of font properties

glyph_count
Number of supported glyphs

name
Name of font

is_writable
Font usable with TextWriter

Class API

class Font

__init__(self, fontname=None, fontfile=None,
fontbuffer=None, script=0, language=None, ordering=-1, is_bold=0,
is_italic=0, is_serif=0)

Font constructor. The large number of parameters are used to locate font, which most closely resembles
the requirements. Not all parameters are ever required – see the below pseudo code explaining the logic
how the parameters are evaluated.

Parameters

240
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• fontname (str) – one of the PDF Base 14 Fonts or CJK fontnames. Also possible
are a select few other names like (watch the correct spelling): “Arial”, “Times”,
“Times Roman”.

(Changed in v1.17.5)

If you have installed pymupdf-fonts, there are also new “reserved” fontnames avail-
able, which are listed in fitz_fonts and in the table further down.

• fontfile (str) – the filename of a fontfile somewhere on your system1.

• fontbuffer (bytes,bytearray,io.BytesIO) – a fontfile loaded in mem-
oryPage 241, 1.

• script (in) – the number of a UCDN script. Currently supported in PyMuPDF
are numbers 24, and 32 through 35.

• language (str) – one of the values “zh-Hant” (traditional Chinese), “zh-Hans”
(simplified Chinese), “ja” (Japanese) and “ko” (Korean). Otherwise, all ISO 639
codes from the subsets 1, 2, 3 and 5 are also possible, but are currently documentary
only.

• ordering (int) – an alternative selector for one of the CJK fonts.

• is_bold (bool) – look for a bold font.

• is_italic (bool) – look for an italic font.

• is_serif (bool) – look for a serifed font.

Returns

a MuPDF font if successful. This is the overall sequence of checks to determine an
appropriate font:

Argu-
ment

Action

fontfile?
Create font from file, exception if failure.

font-
buffer?

Create font from buffer, exception if failure.

order-
ing>=0

Create universal font, always succeeds.

font-
name?

Create a Base-14 font, universal font, or font provided by pymupdf-
fonts. See table below.

Note: With the usual reserved names “helv”, “tiro”, etc., you will create fonts with the expected names
“Helvetica”, “Times-Roman” and so on. However, and in contrast to Page.insert_font() and friends,

• a font file will always be embedded in your PDF,

• Greek and Cyrillic characters are supported without needing the encoding parameter.

Using ordering >= 0, or fontnames “cjk”, “china-t”, “china-s”, “japan” or “korea” will always create
the same “universal” font “Droid Sans Fallback Regular”. This font supports all Chinese, Japanese,
Korean and Latin characters, including Greek and Cyrillic. This is a sans-serif font.

Actually, you would rarely ever need another sans-serif font than “Droid Sans Fallback Regular”. Except
that this font file is relatively large and adds about 1.65 MB (compressed) to your PDF file size. If you do

1 MuPDF does not support all fontfiles with this feature and will raise exceptions like “mupdf: FT_New_Memory_Face((null)): unknown file
format”, if it encounters issues. The TextWriter methods check Font.is_writable.

19.7. Font
241

PyMuPDF Documentation, Release 1.23.25

not need CJK support, stick with specifying “helv”, “tiro” etc., and you will get away with about 35 KB
compressed.

If you know you have a mixture of CJK and Latin text, consider just using Font(""cjk"") because this
supports everything and also significantly (by a factor of up to three) speeds up execution: MuPDF will
always find any character in this single font and never needs to check fallbacks.

But if you do use some other font, you will still automatically be able to also write CJK characters: MuPDF
detects this situation and silently falls back to the universal font (which will then of course also be embedded
in your PDF).

(New in v1.17.5) Optionally, some new “reserved” fontname codes become available if you install
pymupdf-fonts, pip install pymupdf-fonts. “Fira Mono” is a mono-spaced sans font set and Fi-
raGO is another non-serifed “universal” font set which supports all Latin (including Cyrillic and Greek)
plus Thai, Arabian, Hewbrew and Devanagari – but none of the CJK languages. The size of a FiraGO font
is only a quarter of the “Droid Sans Fallback” size (compressed 400 KB vs. 1.65 MB) – and it provides
the weights bold, italic, bold-italic – which the universal font doesn’t.

“Space Mono” is another nice and small mono-spaced font from Google Fonts, which supports Latin
Extended characters and comes with all 4 important weights.

The following table maps a fontname code to the corresponding font. For the current content of the package
please see its documentation:

Code
Fontname
New in
Comment

figo
FiraGO Regular
v1.0.0
narrower than Helvetica

figbo
FiraGO Bold
v1.0.0

figit
FiraGO Italic
v1.0.0

figbi
FiraGO Bold Italic
v1.0.0

fimo
Fira Mono Regular
v1.0.0

fimbo
Fira Mono Bold
v1.0.0

spacemo
Space Mono Regular
v1.0.1

spacembo
Space Mono Bold
v1.0.1

spacemit
Space Mono Italic
v1.0.1

spacembi
Space Mono Bold-Italic
v1.0.1

math
Noto Sans Math Regular
v1.0.2
math symbols

music
Noto Music Regular
v1.0.2
musical symbols

symbol1
Noto Sans Symbols Regular
v1.0.2
replacement for “symb”

symbol2
Noto Sans Symbols2 Regular
v1.0.2
extended symbol set

notos
Noto Sans Regular
v1.0.3
alternative to Helvetica

notosit
Noto Sans Italic
v1.0.3

notosbo
Noto Sans Bold
v1.0.3

notosbi
Noto Sans BoldItalic
v1.0.3

has_glyph(chr, language=None, script=0, fallback=False)

Check whether the unicode chr exists in the font or (option) some fallback font. May be used to check
whether any “TOFU” symbols will appear on output.

Parameters

• chr (int) – the unicode of the character (i.e. ord()).

• language (str) – the language – currently unused.

• script (int) – the UCDN script number.

242
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• fallback (bool) – (new in v1.17.5) perform an extended search in fallback fonts
or restrict to current font (default).

Returns

(changed in 1.17.7) the glyph number. Zero indicates no glyph found.

valid_codepoints()

• New in v1.17.5

Return an array of unicodes supported by this font.

Returns

an array.array2 of length at most Font.glyph_count. I.e. chr() of every item in this
array has a glyph in the font without using fallbacks. This is an example display of the
supported glyphs:

>>> import fitz
>>> font = fitz.Font(""math"")
>>> vuc = font.valid_codepoints()
>>> for i in vuc:

print(""%04X %s (%s)"" % (i, chr(i), font.unicode_to_glyph_

˓→name(i)))
0000
000D
(CR)

0020
(space)

0021 ! (exclam)
0022 "" (quotedbl)
0023 # (numbersign)
0024 $ (dollar)
0025 % (percent)
...
00AC ¬ (logicalnot)
00B1 ± (plusminus)
...
21D0
(arrowdblleft)

21D1
(arrowdblup)

21D2
(arrowdblright)

21D3
(arrowdbldown)

21D4
(arrowdblboth)

...
221E ∞ (infinity)
...

Note: This method only returns meaningful data for fonts having a CMAP (character map, charmap, the
/ToUnicode PDF key). Otherwise, this array will have length 1 and contain zero only.

glyph_advance(chr, language=None, script=0, wmode=0)

Calculate the “width” of the character’s glyph (visual representation).

Parameters

2 The built-in module array has been chosen for its speed and its compact representation of values.

19.7. Font
243

PyMuPDF Documentation, Release 1.23.25

• chr (int) – the unicode number of the character. Use ord(), not the character itself.
Again, this should normally work even if a character is not supported by that font,
because fallback fonts will be checked where necessary.

• wmode (int) – write mode, 0 = horizontal, 1 = vertical.

The other parameters are not in use currently.

Returns

a float representing the glyph’s width relative to fontsize 1.

glyph_name_to_unicode(name)

Return the unicode value for a given glyph name. Use it in conjunction with chr() if you want to output
e.g. a certain symbol.

Parameters

name (str) – The name of the glyph.

Returns

The unicode integer,
or 65533 = 0xFFFD if the name is unknown.
Ex-
amples:
font.glyph_name_to_unicode(""Sigma"") = 931,
font.
glyph_name_to_unicode(""sigma"") = 963.
Refer to the Adobe Glyph List

publication for a list of glyph names and their unicode numbers. Example:

>>> font = fitz.Font(""helv"")
>>> font.has_glyph(font.glyph_name_to_unicode(""infinity""))
True

glyph_bbox(chr, language=None, script=0)

The glyph rectangle relative to fontsize 1.

Parameters

chr (int) – ord() of the character.

Returns

a Rect.

unicode_to_glyph_name(ch)

Show the name of the character’s glyph.

Parameters

ch (int) – the unicode number of the character. Use ord(), not the character itself.

Returns

a string representing the glyph’s name.
E.g.
font.glyph_name(ord(""#"")) =
""numbersign"". For an invalid code “.notfound” is returned.

Note:
(Changed in v1.18.0) This method and Font.glyph_name_to_unicode()

no longer depend on a font and instead retrieve information from the Adobe Glyph
List.
Also available as fitz.unicode_to_glyph_name() and resp.
fitz.
glyph_name_to_unicode().

text_length(text, fontsize=11)

Calculate the length in points of a unicode string.

244
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Note: There is a functional overlap with get_text_length() for Base-14 fonts only.

Parameters

• text (str) – a text string, UTF-8 encoded.

• fontsize (float) – the fontsize.

Return type

float

Returns

the length of the string in points when stored in the PDF. If a character is not contained
in the font, it will automatically be looked up in a fallback font.

Note:
This method was originally implemented in Python, based on calling Font.
glyph_advance(). For performance reasons, it has been rewritten in C for v1.18.14.
To compute the width of a single character, you can now use either of the following
without performance penalty:

1. font.glyph_advance(ord(""Ä"")) * fontsize

2. font.text_length(""Ä"", fontsize=fontsize)

For multi-character strings, the method offers a huge performance advantage compared
to the previous implementation: instead of about 0.5 microseconds for each character,
only 12.5 nanoseconds are required for the second and subsequent ones.

char_lengths(text, fontsize=11)

New in v1.18.14

Sequence of character lengths in points of a unicode string.

Parameters

• text (str) – a text string, UTF-8 encoded.

• fontsize (float) – the fontsize.

Return type

tuple

Returns

the lengths in points of the characters of a string when stored in the PDF. It works like
Font.text_length() broken down to single characters. This is a high speed method,
used e.g. in TextWriter.fill_textbox(). The following is true (allowing rounding
errors): font.text_length(text) == sum(font.char_lengths(text)).

>>> font = fitz.Font(""helv"")
>>> text = ""PyMuPDF""
>>> font.text_length(text)
50.115999937057495
>>> fitz.get_text_length(text, fontname=""helv"")
50.115999937057495
>>> sum(font.char_lengths(text))

(continues on next page)

19.7. Font
245

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

50.115999937057495
>>> pprint(font.char_lengths(text))
(7.336999952793121,
# P

5.5,
# y

9.163000047206879,
# M

6.115999937057495,
# u

7.336999952793121,
# P

7.942000031471252,
# D

6.721000015735626)
# F

buffer

• New in v1.17.6

Copy of the binary font file content.

Return type

bytes

flags

A dictionary with various font properties, each represented as bools. Example for Helvetica:

>>> pprint(font.flags)
{'bold': 0,
'fake-bold': 0,
'fake-italic': 0,
'invalid-bbox': 0,
'italic': 0,
'mono': 0,
'opentype': 0,
'serif': 1,
'stretch': 0,
'substitute': 0}

Return type

dict

name

Return type

str

Name of the font. May be “” or “(null)”.

bbox

The font bbox. This is the maximum of its glyph bboxes.

Return type

Rect

glyph_count

Return type

int

The number of glyphs defined in the font.

246
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

ascender

• New in v1.18.0

The ascender value of the font, see here for details. Please note that there is a difference to the strict
definition: our value includes everything above the baseline – not just the height difference between upper
case “A” and and lower case “a”.

Return type

float

descender

• New in v1.18.0

The descender value of the font, see here for details. This value always is negative and is the portion that
some glyphs descend below the base line, for example “g” or “y”. As a consequence, the value ascender
- descender is the total height, that every glyph of the font fits into. This is true at least for most fonts –
as always, there are exceptions, especially for calligraphic fonts, etc.

Return type

float

is_writable

• New in v1.18.0

Indicates whether this font can be used with TextWriter.

Return type

bool

This documentation covers all versions up to 1.23.25.

19.8 Identity

Identity is a Matrix that performs no action – to be used whenever the syntax requires a matrix, but no actual transfor-
mation should take place. It has the form fitz.Matrix(1, 0, 0, 1, 0, 0).

Identity is a constant, an “immutable” object. So, all of its matrix properties are read-only and its methods are disabled.

If you need a mutable identity matrix as a starting point, use one of the following statements:

>>> m = fitz.Matrix(1, 0, 0, 1, 0, 0)
# specify the values

>>> m = fitz.Matrix(1, 1)
# use scaling by factor 1

>>> m = fitz.Matrix(0)
# use rotation by zero degrees

>>> m = fitz.Matrix(fitz.Identity)
# make a copy of Identity

This documentation covers all versions up to 1.23.25.

19.8. Identity
247

PyMuPDF Documentation, Release 1.23.25

19.9 IRect

IRect is a rectangular bounding box, very similar to Rect, except that all corner coordinates are integers. IRect is used
to specify an area of pixels, e.g. to receive image data during rendering. Otherwise, e.g. considerations concerning
emptiness and validity of rectangles also apply to this class. Methods and attributes have the same names, and in many
cases are implemented by re-using the respective Rect counterparts.

Attribute / Method
Short Description

IRect.contains()
checks containment of another object

IRect.get_area()
calculate rectangle area

IRect.intersect()
common part with another rectangle

IRect.intersects()
checks for non-empty intersection

IRect.morph()
transform with a point and a matrix

IRect.torect()
matrix that transforms to another rectangle

IRect.norm()
the Euclidean norm

IRect.normalize()
makes a rectangle finite

IRect.bottom_left
bottom left point, synonym bl

IRect.bottom_right
bottom right point, synonym br

IRect.height
height of the rectangle

IRect.is_empty
whether rectangle is empty

IRect.is_infinite
whether rectangle is infinite

IRect.rect
the Rect equivalent

IRect.top_left
top left point, synonym tl

IRect.top_right
top_right point, synonym tr

IRect.quad
Quad made from rectangle corners

IRect.width
width of the rectangle

IRect.x0
X-coordinate of the top left corner

IRect.x1
X-coordinate of the bottom right corner

IRect.y0
Y-coordinate of the top left corner

IRect.y1
Y-coordinate of the bottom right corner

Class API

class IRect

__init__(self )

__init__(self, x0, y0, x1, y1)

__init__(self, irect)

__init__(self, sequence)

Overloaded constructors. Also see examples below and those for the Rect class.

If another irect is specified, a new copy will be made.

If sequence is specified, it must be a Python sequence type of 4 numbers (see Using Python Sequences
as Arguments in PyMuPDF). Non-integer numbers will be truncated, non-numeric values will raise an
exception.

The other parameters mean integer coordinates.

get_area([unit])

Calculates the area of the rectangle and, with no parameter, equals abs(IRect). Like an empty rectangle,
the area of an infinite rectangle is also zero.

248
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Parameters

unit (str) – Specify required unit: respective squares of “px” (pixels, default), “in”
(inches), “cm” (centimeters), or “mm” (millimeters).

Return type

float

intersect(ir)

The intersection (common rectangular area) of the current rectangle and ir is calculated and replaces the
current rectangle. If either rectangle is empty, the result is also empty. If either rectangle is infinite, the
other one is taken as the result – and hence also infinite if both rectangles were infinite.

Parameters

ir (rect_like) – Second rectangle.

contains(x)

Checks whether x is contained in the rectangle. It may be rect_like, point_like or a number. If x is
an empty rectangle, this is always true. Conversely, if the rectangle is empty this is always False, if x is not
an empty rectangle and not a number. If x is a number, it will be checked to be one of the four components.
x in irect and irect.contains(x) are equivalent.

Parameters

x (IRect or Rect or Point or int) – the object to check.

Return type

bool

intersects(r)

Checks whether the rectangle and the rect_like “r” contain a common non-empty IRect. This will
always be False if either is infinite or empty.

Parameters

r (rect_like) – the rectangle to check.

Return type

bool

torect(rect)

• New in version 1.19.3

Compute the matrix which transforms this rectangle to a given one. See Rect.torect().

Parameters

rect (rect_like) – the target rectangle. Must not be empty or infinite.

Return type

Matrix

Returns

a matrix mat such that self * mat = rect. Can for example be used to transform
between the page and the pixmap coordinates.

morph(fixpoint, matrix)

• New in version 1.17.0

Return a new quad after applying a matrix to it using a fixed point.

Parameters

• fixpoint (point_like) – the fixed point.

19.9. IRect
249

PyMuPDF Documentation, Release 1.23.25

• matrix (matrix_like) – the matrix.

Returns

a new Quad. This a wrapper of the same-named quad method. If infinite, the infinite
quad is returned.

norm()

• New in version 1.16.0

Return the Euclidean norm of the rectangle treated as a vector of four numbers.

normalize()

Make the rectangle finite. This is done by shuffling rectangle corners. After this, the bottom right corner
will indeed be south-eastern to the top left one. See Rect for a more details.

top_left

tl

Equals Point(x0, y0).

Type

Point

top_right

tr

Equals Point(x1, y0).

Type

Point

bottom_left

bl

Equals Point(x0, y1).

Type

Point

bottom_right

br

Equals Point(x1, y1).

Type

Point

rect

The Rect with the same coordinates as floats.

Type

Rect

quad

The quadrilateral Quad(irect.tl, irect.tr, irect.bl, irect.br).

Type

Quad

250
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

width

Contains the width of the bounding box. Equals abs(x1 - x0).

Type

int

height

Contains the height of the bounding box. Equals abs(y1 - y0).

Type

int

x0

X-coordinate of the left corners.

Type

int

y0

Y-coordinate of the top corners.

Type

int

x1

X-coordinate of the right corners.

Type

int

y1

Y-coordinate of the bottom corners.

Type

int

is_infinite

True if rectangle is infinite, False otherwise.

Type

bool

is_empty

True if rectangle is empty, False otherwise.

Type

bool

Note:

• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also
refer to Using Python Sequences as Arguments in PyMuPDF.

• Rectangles can be used with arithmetic operators – see chapter Operator Algebra for Geometry Objects.

This documentation covers all versions up to 1.23.25.

19.9. IRect
251

PyMuPDF Documentation, Release 1.23.25

19.10 Link

Represents a pointer to somewhere (this document, other documents, the internet). Links exist per document page,
and they are forward-chained to each other, starting from an initial link which is accessible by the Page.first_link
property.

There is a parent-child relationship between a link and its page. If the page object becomes unusable (closed document,
any document structure change, etc.), then so does every of its existing link objects – an exception is raised saying that
the object is “orphaned”, whenever a link property or method is accessed.

Attribute
Short Description

Link.set_border()
modify border properties

Link.set_colors()
modify color properties

Link.set_flags()
modify link flags

Link.border
border characteristics

Link.colors
border line color

Link.dest
points to destination details

Link.is_external
checks if the link is an external destination

Link.flags
link annotation flags

Link.next
points to next link

Link.rect
clickable area in untransformed coordinates

Link.uri
link destination

Link.xref
xref number of the entry

Class API

class Link

set_border(border=None, width=0, style=None, dashes=None)

PDF only: Change border width and dashing properties.

(Changed in version 1.16.9) Allow specification without using a dictionary. The direct parameters are used
if border is not a dictionary.

Parameters

• border (dict) – a dictionary as returned by the border property, with keys
“width” (float), “style” (str) and “dashes” (sequence). Omitted keys will leave
the resp. property unchanged. To e.g. remove dashing use: “dashes”: []. If dashes
is not an empty sequence, “style” will automatically be set to “D” (dashed).

• width (float) – see above.

• style (str) – see above.

• dashes (sequence) – see above.

set_colors(colors=None, stroke=None)

PDF only: Changes the “stroke” color.

Note: In PDF, links are a subtype of annotations technically and do not support fill colors. However, to
keep a consistent API, we do allow specifying a fill= parameter like with all annotations, which will be
ignored with a warning.

(Changed in version 1.16.9) Allow colors to be directly set. These parameters are used if colors is not a
dictionary.

252
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Parameters

• colors (dict) – a dictionary containing color specifications. For accepted dictio-
nary keys and values see below. The most practical way should be to first make a
copy of the colors property and then modify this dictionary as required.

• stroke (sequence) – see above.

set_flags(flags)

New in v1.18.16

Set the PDF /F property of the link annotation. See Annot.set_flags() for details. If not a PDF, this
method is a no-op.

flags

New in v1.18.16

Return the link annotation flags, an integer (see Annot.flags for details). Zero if not a PDF.

colors

Meaningful for PDF only: A dictionary of two tuples of floats in range 0 <= float <= 1 specifying the
stroke and the interior (fill) colors. If not a PDF, None is returned. As mentioned above, the fill color is
always None for links. The stroke color is used for the border of the link rectangle. The length of the tuple
implicitly determines the colorspace: 1 = GRAY, 3 = RGB, 4 = CMYK. So (1.0, 0.0, 0.0) stands
for RGB color red. The value of each float f is mapped to the integer value i in range 0 to 255 via the
computation f = i / 255.

Return type

dict

border

Meaningful for PDF only: A dictionary containing border characteristics. It will be None for non-PDFs
and an empty dictionary if no border information exists. The following keys can occur:

• width – a float indicating the border thickness in points. The value is -1.0 if no width is specified.

• dashes – a sequence of integers specifying a line dash pattern. [] means no dashes, [n] means equal
on-off lengths of n points, longer lists will be interpreted as specifying alternating on-off length
values. See the Adobe PDF References page 126 for more detail.

• style – 1-byte border style: S (Solid) = solid rectangle surrounding the annotation, D (Dashed) =
dashed rectangle surrounding the link, the dash pattern is specified by the dashes entry, B (Beveled)
= a simulated embossed rectangle that appears to be raised above the surface of the page, I (Inset) = a
simulated engraved rectangle that appears to be recessed below the surface of the page, U (Underline)
= a single line along the bottom of the annotation rectangle.

Return type

dict

rect

The area that can be clicked in untransformed coordinates.

Type

Rect

is_external

A bool specifying whether the link target is outside of the current document.

Type

bool

19.10. Link
253

PyMuPDF Documentation, Release 1.23.25

uri

A string specifying the link target. The meaning of this property should be evaluated in conjunction with
property isExternal. The value may be None, in which case isExternal == False. If uri starts with file://,
mailto:, or an internet resource name, isExternal is True. In all other cases isExternal == False and uri
points to an internal location. In case of PDF documents, this should either be #nnnn to indicate a 1-
based (!) page number nnnn, or a named location. The format varies for other document types, e.g. uri =
‘../FixedDoc.fdoc#PG_2_LNK_1’ for page number 2 (1-based) in an XPS document.

Type

str

xref

An integer specifying the PDF xref. Zero if not a PDF.

Type

int

next

The next link or None.

Type

Link

dest

The link destination details object.

Type

linkDest

This documentation covers all versions up to 1.23.25.

19.11 linkDest

Class representing the dest property of an outline entry or a link. Describes the destination to which such entries
point.

Note:
Up to MuPDF v1.9.0 this class existed inside MuPDF and was dropped in version 1.10.0. For backward
compatibility, PyMuPDF is still maintaining it, although some of its attributes are no longer backed by data actually
available via MuPDF.

254
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Attribute
Short Description

linkDest.dest
destination

linkDest.fileSpec
file specification (path, filename)

linkDest.flags
descriptive flags

linkDest.isMap
is this a MAP?

linkDest.isUri
is this a URI?

linkDest.kind
kind of destination

linkDest.lt
top left coordinates

linkDest.named
name if named destination

linkDest.newWindow
name of new window

linkDest.page
page number

linkDest.rb
bottom right coordinates

linkDest.uri
URI

Class API

class linkDest

dest

Target destination name if linkDest.kind is LINK_GOTOR and linkDest.page is -1.

Type

str

fileSpec

Contains the filename and path this link points to, if linkDest.kind is LINK_GOTOR or LINK_LAUNCH.

Type

str

flags

A bitfield describing the validity and meaning of the different aspects of the destination. As far as possible,
link destinations are constructed such that e.g. linkDest.lt and linkDest.rb can be treated as defining
a bounding box. But the flags indicate which of the values were actually specified, see Link Destination
Flags.

Type

int

isMap

This flag specifies whether to track the mouse position when the URI is resolved. Default value: False.

Type

bool

isUri

Specifies whether this destination is an internet resource (as opposed to e.g. a local file specification in
URI format).

Type

bool

kind

Indicates the type of this destination, like a place in this document, a URI, a file launch, an action or a
place in another file. Look at Link Destination Kinds to see the names and numerical values.

Type

int

19.11. linkDest
255

PyMuPDF Documentation, Release 1.23.25

lt

The top left Point of the destination.

Type

Point

named

This destination refers to some named action to perform (e.g. a javascript, see Adobe PDF References).
Standard actions provided are NextPage, PrevPage, FirstPage, and LastPage.

Type

str

newWindow

If true, the destination should be launched in a new window.

Type

bool

page

The page number (in this or the target document) this destination points to. Only set if linkDest.kind is
LINK_GOTOR or LINK_GOTO. May be -1 if linkDest.kind is LINK_GOTOR. In this case linkDest.dest
contains the name of a destination in the target document.

Type

int

rb

The bottom right Point of this destination.

Type

Point

uri

The name of the URI this destination points to.

Type

str

This documentation covers all versions up to 1.23.25.

19.12 Matrix

Matrix is a row-major 3x3 matrix used by image transformations in MuPDF (which complies with the respective
concepts laid down in the Adobe PDF References). With matrices you can manipulate the rendered image of a page in
a variety of ways: (parts of) the page can be rotated, zoomed, flipped, sheared and shifted by setting some or all of just
six float values.

Since all points or pixels live in a two-dimensional space, one column vector of that matrix is a constant unit vector,
and only the remaining six elements are used for manipulations. These six elements are usually represented by [a, b,
c, d, e, f]. Here is how they are positioned in the matrix:

256
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Please note:

• the below methods are just convenience functions – everything they do, can also be achieved by directly manip-
ulating the six numerical values

• all manipulations can be combined – you can construct a matrix that rotates and shears and scales and shifts,
etc. in one go. If you however choose to do this, do have a look at the remarks further down or at the Adobe
PDF References.

Method / Attribute
Description

Matrix.prerotate()
perform a rotation

Matrix.prescale()
perform a scaling

Matrix.preshear()
perform a shearing (skewing)

Matrix.pretranslate()
perform a translation (shifting)

Matrix.concat()
perform a matrix multiplication

Matrix.invert()
calculate the inverted matrix

Matrix.norm()
the Euclidean norm

Matrix.a
zoom factor X direction

Matrix.b
shearing effect Y direction

Matrix.c
shearing effect X direction

Matrix.d
zoom factor Y direction

Matrix.e
horizontal shift

Matrix.f
vertical shift

Matrix.is_rectilinear
true if rect corners will remain rect corners

Class API

class Matrix

__init__(self )

__init__(self, zoom-x, zoom-y)

__init__(self, shear-x, shear-y, 1)

__init__(self, a, b, c, d, e, f )

__init__(self, matrix)

__init__(self, degree)

__init__(self, sequence)

Overloaded constructors.

Without parameters, the zero matrix Matrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) will be created.

zoom-* and shear-* specify zoom or shear values (float) and create a zoom or shear matrix, respectively.

For “matrix” a new copy of another matrix will be made.

Float value “degree” specifies the creation of a rotation matrix which rotates anti-clockwise.

19.12. Matrix
257

PyMuPDF Documentation, Release 1.23.25

A “sequence” must be any Python sequence object with exactly 6 float entries (see Using Python Sequences
as Arguments in PyMuPDF).

fitz.Matrix(1, 1) and fitz.Matrix(fitz.Identity) create modifiable versions of the Identity matrix, which looks
like [1, 0, 0, 1, 0, 0].

norm()

• New in version 1.16.0

Return the Euclidean norm of the matrix as a vector.

prerotate(deg)

Modify the matrix to perform a counter-clockwise rotation for positive deg degrees, else clockwise. The
matrix elements of an identity matrix will change in the following way:

[1, 0, 0, 1, 0, 0] -> [cos(deg), sin(deg), -sin(deg), cos(deg), 0, 0].

Parameters

deg (float) – The rotation angle in degrees (use conventional notation based on Pi =
180 degrees).

prescale(sx, sy)

Modify the matrix to scale by the zoom factors sx and sy. Has effects on attributes a thru d only: [a, b, c,
d, e, f] -> [a*sx, b*sx, c*sy, d*sy, e, f].

Parameters

• sx (float) – Zoom factor in X direction. For the effect see description of attribute
a.

• sy (float) – Zoom factor in Y direction. For the effect see description of attribute
d.

preshear(sx, sy)

Modify the matrix to perform a shearing, i.e. transformation of rectangles into parallelograms (rhomboids).
Has effects on attributes a thru d only: [a, b, c, d, e, f] -> [c*sy, d*sy, a*sx, b*sx, e, f].

Parameters

• sx (float) – Shearing effect in X direction. See attribute c.

• sy (float) – Shearing effect in Y direction. See attribute b.

pretranslate(tx, ty)

Modify the matrix to perform a shifting / translation operation along the x and / or y axis. Has effects on
attributes e and f only: [a, b, c, d, e, f] -> [a, b, c, d, tx*a + ty*c, tx*b + ty*d].

Parameters

• tx (float) – Translation effect in X direction. See attribute e.

• ty (float) – Translation effect in Y direction. See attribute f.

concat(m1, m2)

Calculate the matrix product m1 * m2 and store the result in the current matrix. Any of m1 or m2 may be
the current matrix. Be aware that matrix multiplication is not commutative. So the sequence of m1, m2 is
important.

Parameters

• m1 (Matrix) – First (left) matrix.

• m2 (Matrix) – Second (right) matrix.

258
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

invert(m=None)

Calculate the matrix inverse of m and store the result in the current matrix. Returns 1 if m is not invertible
(“degenerate”). In this case the current matrix will not change. Returns 0 if m is invertible, and the current
matrix is replaced with the inverted m.

Parameters

m (Matrix) – Matrix to be inverted. If not provided, the current matrix will be used.

Return type

int

a

Scaling in X-direction (width). For example, a value of 0.5 performs a shrink of the width by a factor of
2. If a < 0, a left-right flip will (additionally) occur.

Type

float

b

Causes a shearing effect: each Point(x, y) will become Point(x, y - b*x). Therefore, horizontal
lines will be “tilt”.

Type

float

c

Causes a shearing effect: each Point(x, y) will become Point(x - c*y, y). Therefore, vertical lines
will be “tilt”.

Type

float

d

Scaling in Y-direction (height). For example, a value of 1.5 performs a stretch of the height by 50%. If d
< 0, an up-down flip will (additionally) occur.

Type

float

e

Causes a horizontal shift effect: Each Point(x, y) will become Point(x + e, y). Positive (negative) values
of e will shift right (left).

Type

float

f

Causes a vertical shift effect: Each Point(x, y) will become Point(x, y - f). Positive (negative) values of f
will shift down (up).

Type

float

is_rectilinear

Rectilinear means that no shearing is present and that any rotations are integer multiples of 90 degrees.
Usually this is used to confirm that (axis-aligned) rectangles before the transformation are still axis-aligned
rectangles afterwards.

Type

bool

19.12. Matrix
259

PyMuPDF Documentation, Release 1.23.25

Note:

• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also
refer to Using Python Sequences as Arguments in PyMuPDF.

• Matrices can be used with arithmetic operators almost like ordinary numbers: they can be added, subtracted,
multiplied or divided – see chapter Operator Algebra for Geometry Objects.

• Matrix multiplication is not commutative – changing the sequence of the multiplicands will change the result
in general. So it can quickly become unclear which result a transformation will yield.

19.12.1 Examples

Here are examples that illustrate some of the achievable effects. All pictures show some text, inserted under control of
some matrix and relative to a fixed reference point (the red dot).

1. The Identity matrix performs no operation.

2. The scaling matrix Matrix(2, 0.5) stretches by a factor of 2 in horizontal, and shrinks by factor 0.5 in vertical
direction.

3. Attributes Matrix.e and Matrix.f shift horizontally and, respectively vertically. In the following 10 to the
right and 20 down.

260
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

4. A negative Matrix.a causes a left-right flip.

5. A negative Matrix.d causes an up-down flip.

6. Attribute Matrix.b tilts upwards / downwards along the x-axis.

7. Attribute Matrix.c tilts left / right along the y-axis.

19.12. Matrix
261

PyMuPDF Documentation, Release 1.23.25

8. Matrix Matrix(beta) performs counterclockwise rotations for positive angles beta.

This documentation covers all versions up to 1.23.25.

19.13 Outline

outline (or “bookmark”), is a property of Document. If not None, it stands for the first outline item of the document.
Its properties in turn define the characteristics of this item and also point to other outline items in “horizontal” or
downward direction. The full tree of all outline items for e.g. a conventional table of contents (TOC) can be recovered
by following these “pointers”.

Method / Attribute
Short Description

Outline.down
next item downwards

Outline.next
next item same level

Outline.page
page number (0-based)

Outline.title
title

Outline.uri
string further specifying outline target

Outline.is_external
target outside document

Outline.is_open
whether sub-outlines are open or collapsed

Outline.dest
points to destination details object

Class API

class Outline

down

The next outline item on the next level down. Is None if the item has no children.

262
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Type

Outline

next

The next outline item at the same level as this item. Is None if this is the last one in its level.

Type

Outline

page

The page number (0-based) this bookmark points to.

Type

int

title

The item’s title as a string or None.

Type

str

is_open

Indicator showing whether any sub-outlines should be expanded (True) or be collapsed (False). This
information is interpreted by PDF reader software.

Type

bool

is_external

A bool specifying whether the target is outside (True) of the current document.

Type

bool

uri

A string specifying the link target. The meaning of this property should be evaluated in conjunction with
isExternal. The value may be None, in which case isExternal == False. If uri starts with file://, mailto:,
or an internet resource name, isExternal is True. In all other cases isExternal == False and uri points
to an internal location. In case of PDF documents, this should either be #nnnn to indicate a 1-based
(!) page number nnnn, or a named location. The format varies for other document types, e.g. uri =
‘../FixedDoc.fdoc#PG_21_LNK_84’ for page number 21 (1-based) in an XPS document.

Type

str

dest

The link destination details object.

Type

linkDest

This documentation covers all versions up to 1.23.25.

19.13. Outline
263

PyMuPDF Documentation, Release 1.23.25

19.14 Page

Class representing a document page. A page object is created by Document.load_page() or, equivalently, via index-
ing the document like doc[n] - it has no independent constructor.

There is a parent-child relationship between a document and its pages. If the document is closed or deleted, all page
objects (and their respective children, too) in existence will become unusable (“orphaned”): If a page property or
method is being used, an exception is raised.

Several page methods have a Document counterpart for convenience. At the end of this chapter you will find a synopsis.

Note: Many times in this chapter we are using the term coordinate. It is of high importance to have at least a basic
understanding of what that is and that you feel comfortable with the section Coordinates.

19.14.1 Modifying Pages

Changing page properties and adding or changing page content is available for PDF documents only.

In a nutshell, this is what you can do with PyMuPDF:

• Modify page rotation and the visible part (“cropbox”) of the page.

• Insert images, other PDF pages, text and simple geometrical objects.

• Add annotations and form fields.

Note:
Methods require coordinates (points, rectangles) to put content in desired places. Please be aware that these
coordinates must always be provided relative to the unrotated page (since v1.17.0). The reverse is also true: except
Page.rect, resp. Page.bound() (both reflect when the page is rotated), all coordinates returned by methods and
attributes pertain to the unrotated page.

So the returned value of e.g. Page.get_image_bbox() will not change if you do a Page.set_rotation(). The
same is true for coordinates returned by Page.get_text(), annotation rectangles, and so on. If you want to find out,
where an object is located in rotated coordinates, multiply the coordinates with Page.rotation_matrix. There
also is its inverse, Page.derotation_matrix, which you can use when interfacing with other readers, which may
behave differently in this respect.

Note: If you add or update annotations, links or form fields on the page and immediately afterwards need to work with
them (i.e. without leaving the page), you should reload the page using Document.reload_page() before referring
to these new or updated items.

Reloading the page is generally recommended – although not strictly required in all cases. However, some annotation
and widget types have extended features in PyMuPDF compared to MuPDF. More of these extensions may also be
added in the future.

Releoading the page ensures all your changes have been fully applied to PDF structures, so you can safely create
Pixmaps or successfully iterate over annotations, links and form fields.

Method / Attribute
Short Description

Page.add_caret_annot()
PDF only: add a caret annotation

Page.add_circle_annot()
PDF only: add a circle annotation

continues on next page

264
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Table 3 – continued from previous page

Method / Attribute
Short Description

Page.add_file_annot()
PDF only: add a file attachment annotation

Page.add_freetext_annot()
PDF only: add a text annotation

Page.add_highlight_annot()
PDF only: add a “highlight” annotation

Page.add_ink_annot()
PDF only: add an ink annotation

Page.add_line_annot()
PDF only: add a line annotation

Page.add_polygon_annot()
PDF only: add a polygon annotation

Page.add_polyline_annot()
PDF only: add a multi-line annotation

Page.add_rect_annot()
PDF only: add a rectangle annotation

Page.add_redact_annot()
PDF only: add a redaction annotation

Page.add_squiggly_annot()
PDF only: add a “squiggly” annotation

Page.add_stamp_annot()
PDF only: add a “rubber stamp” annotation

Page.add_strikeout_annot()
PDF only: add a “strike-out” annotation

Page.add_text_annot()
PDF only: add a comment

Page.add_underline_annot()
PDF only: add an “underline” annotation

Page.add_widget()
PDF only: add a PDF Form field

Page.annot_names()
PDF only: a list of annotation (and widget) names

Page.annot_xrefs()
PDF only: a list of annotation (and widget) xrefs

Page.annots()
return a generator over the annots on the page

Page.apply_redactions()
PDF only: process the redactions of the page

Page.bound()
rectangle of the page

Page.delete_annot()
PDF only: delete an annotation

Page.delete_image()
PDF only: delete an image

Page.delete_link()
PDF only: delete a link

Page.delete_widget()
PDF only: delete a widget / field

Page.draw_bezier()
PDF only: draw a cubic Bezier curve

Page.draw_circle()
PDF only: draw a circle

Page.draw_curve()
PDF only: draw a special Bezier curve

Page.draw_line()
PDF only: draw a line

Page.draw_oval()
PDF only: draw an oval / ellipse

Page.draw_polyline()
PDF only: connect a point sequence

Page.draw_quad()
PDF only: draw a quad

Page.draw_rect()
PDF only: draw a rectangle

Page.draw_sector()
PDF only: draw a circular sector

Page.draw_squiggle()
PDF only: draw a squiggly line

Page.draw_zigzag()
PDF only: draw a zig-zagged line

Page.find_tables()
locate tables on the page

Page.get_drawings()
get vector graphics on page

Page.get_fonts()
PDF only: get list of referenced fonts

Page.get_image_bbox()
PDF only: get bbox and matrix of embedded image

Page.get_image_info()
get list of meta information for all used images

Page.get_image_rects()
PDF only: improved version of Page.get_image_bbox()

Page.get_images()
PDF only: get list of referenced images

Page.get_label()
PDF only: return the label of the page

Page.get_links()
get all links

Page.get_pixmap()
create a page image in raster format

Page.get_svg_image()
create a page image in SVG format

Page.get_text()
extract the page’s text

Page.get_textbox()
extract text contained in a rectangle

Page.get_textpage_ocr()
create a TextPage with OCR for the page

continues on next page

19.14. Page
265

PyMuPDF Documentation, Release 1.23.25

Table 3 – continued from previous page

Method / Attribute
Short Description

Page.get_textpage()
create a TextPage for the page

Page.get_xobjects()
PDF only: get list of referenced xobjects

Page.insert_font()
PDF only: insert a font for use by the page

Page.insert_image()
PDF only: insert an image

Page.insert_link()
PDF only: insert a link

Page.insert_text()
PDF only: insert text

Page.insert_htmlbox()
PDF only: insert html text in a rectangle

Page.insert_textbox()
PDF only: insert a text box

Page.links()
return a generator of the links on the page

Page.load_annot()
PDF only: load a specific annotation

Page.load_widget()
PDF only: load a specific field

Page.load_links()
return the first link on a page

Page.new_shape()
PDF only: create a new Shape

Page.replace_image()
PDF only: replace an image

Page.search_for()
search for a string

Page.set_artbox()
PDF only: modify /ArtBox

Page.set_bleedbox()
PDF only: modify /BleedBox

Page.set_cropbox()
PDF only: modify the cropbox (visible page)

Page.set_mediabox()
PDF only: modify /MediaBox

Page.set_rotation()
PDF only: set page rotation

Page.set_trimbox()
PDF only: modify /TrimBox

Page.show_pdf_page()
PDF only: display PDF page image

Page.update_link()
PDF only: modify a link

Page.widgets()
return a generator over the fields on the page

Page.write_text()
write one or more TextWriter objects

Page.cropbox_position
displacement of the cropbox

Page.cropbox
the page’s cropbox

Page.artbox
the page’s /ArtBox

Page.bleedbox
the page’s /BleedBox

Page.trimbox
the page’s /TrimBox

Page.derotation_matrix
PDF only: get coordinates in unrotated page space

Page.first_annot
first Annot on the page

Page.first_link
first Link on the page

Page.first_widget
first widget (form field) on the page

Page.mediabox_size
bottom-right point of mediabox

Page.mediabox
the page’s mediabox

Page.number
page number

Page.parent
owning document object

Page.rect
rectangle of the page

Page.rotation_matrix
PDF only: get coordinates in rotated page space

Page.rotation
PDF only: page rotation

Page.transformation_matrix
PDF only: translate between PDF and MuPDF space

Page.xref
PDF only: page xref

Class API

class Page

bound()

Determine the rectangle of the page. Same as property Page.rect. For PDF documents this usually also
coincides with mediabox and cropbox, but not always. For example, if the page is rotated, then this is

266
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

reflected by this method – the Page.cropbox however will not change.

Return type

Rect

add_caret_annot(point)

PDF only: Add a caret icon. A caret annotation is a visual symbol normally used to indicate the presence
of text edits on the page.

Parameters

point (point_like) – the top left point of a 20 x 20 rectangle containing the MuPDF-
provided icon.

Return type

Annot

Returns

the created annotation. Stroke color blue = (0, 0, 1), no fill color support.

• New in v1.16.0

add_text_annot(point, text, icon='Note')

PDF only: Add a comment icon (“sticky note”) with accompanying text. Only the icon is visible, the
accompanying text is hidden and can be visualized by many PDF viewers by hovering the mouse over the
symbol.

Parameters

• point (point_like) – the top left point of a 20 x 20 rectangle containing the
MuPDF-provided “note” icon.

• text (str) – the commentary text. This will be shown on double clicking or hov-
ering over the icon. May contain any Latin characters.

• icon (str) – choose one of “Note” (default), “Comment”, “Help”, “Insert”, “Key”,
“NewParagraph”, “Paragraph” as the visual symbol for the embodied text4. (New
in v1.16.0)

Return type

Annot

Returns

the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.

add_freetext_annot(rect, text, fontsize=12, fontname='helv', border_color=None, text_color=0,
fill_color=1, rotate=0, align=TEXT_ALIGN_LEFT)

PDF only: Add text in a given rectangle.

Parameters

4 You are generally free to choose any of the Annotation Icons in MuPDF you consider adequate.

19.14. Page
267

PyMuPDF Documentation, Release 1.23.25

• rect (rect_like) – the rectangle into which the text should be inserted. Text is
automatically wrapped to a new line at box width. Lines not fitting into the box will
be invisible.

• text (str) – the text. May contain any mixture of Latin, Greek, Cyrillic, Chinese,
Japanese and Korean characters. The respective required font is automatically de-
termined. (New in v1.17.0)

• fontsize (float) – the fontsize. Default is 12.

• fontname (str) – the font name. Default is “Helv”. Accepted alternatives are
“Cour”, “TiRo”, “ZaDb” and “Symb”. The name may be abbreviated to the first two
characters, like “Co” for “Cour”. Lower case is also accepted. Bold or italic variants
of the fonts are not accepted (changed in v1.16.0). A user-contributed script pro-
vides a circumvention for this restriction – see section Using Buttons and JavaScript
in chapter FAQ. The actual font to use is now determined on a by-character level, and
all required fonts (or sub-fonts) are automatically included. Therefore, you should
rarely ever need to care about this parameter and let it default (except you insist on
a serifed font for your non-CJK text parts). (New in v1.17.0)

• text_color (sequence,float) – the text color.
Default is black.
(New in
v1.16.0)

• fill_color (sequence,float) – the fill color.
Default is white.
(New in
v1.16.0)

• text_color – the text color. Default is black.

• border_color (sequence,float) – the border color. Default is None. (New in
v1.19.6)

• align
(int)
–
text
alignment,
one
of
TEXT_ALIGN_LEFT,
TEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT - justify is not supported.
(New in v1.17.0)

• rotate (int) – the text orientation. Accepted values are 0, 90, 270, invalid entries
are set to zero.

Return type

Annot

Returns

the created annotation. Color properties can only be changed using special parameters
of Annot.update(). There, you can also set a border color different from the text color.

• Changed in v1.19.6: add border color parameter

add_file_annot(pos, buffer, filename, ufilename=None, desc=None, icon='PushPin')

PDF only: Add a file attachment annotation with a “PushPin” icon at the specified location.

Parameters

• pos (point_like) – the top-left point of a 18x18 rectangle containing the MuPDF-
provided “PushPin” icon.

• buffer (bytes,bytearray,BytesIO) – the data to be stored (actual file content,
any data, etc.).

268
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Changed in v1.14.13: io.BytesIO is now also supported.

• filename (str) – the filename to associate with the data.

• ufilename (str) – the optional PDF unicode version of filename. Defaults to
filename.

• desc (str) – an optional description of the file. Defaults to filename.

• icon (str) – choose one of “PushPin” (default), “Graph”, “Paperclip”, “Tag” as
the visual symbol for the attached dataPage 267, 4. (New in v1.16.0)

Return type

Annot

Returns

the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.

add_ink_annot(list)

PDF only: Add a “freehand” scribble annotation.

Parameters

list (sequence) – a list of one or more lists, each containing point_like items. Each
item in these sublists is interpreted as a Point through which a connecting line is drawn.
Separate sublists thus represent separate drawing lines.

Return type

Annot

Returns

the created annotation in default appearance black =(0, 0, 0),line width 1. No fill color
support.

add_line_annot(p1, p2)

PDF only: Add a line annotation.

Parameters

• p1 (point_like) – the starting point of the line.

• p2 (point_like) – the end point of the line.

Return type

Annot

Returns

the created annotation. It is drawn with line (stroke) color red = (1, 0, 0) and line width
1. No fill color support. The annot rectangle is automatically created to contain both
points, each one surrounded by a circle of radius 3 * line width to make room for any
line end symbols.

add_rect_annot(rect)

add_circle_annot(rect)

PDF only: Add a rectangle, resp. circle annotation.

Parameters

rect (rect_like) – the rectangle in which the circle or rectangle is drawn, must be
finite and not empty. If the rectangle is not equal-sided, an ellipse is drawn.

Return type

Annot

19.14. Page
269

PyMuPDF Documentation, Release 1.23.25

Returns

the created annotation. It is drawn with line (stroke) color red = (1, 0, 0), line width 1,
fill color is supported.

add_redact_annot(quad, text=None, fontname=None, fontsize=11, align=TEXT_ALIGN_LEFT, fill=(1, 1,
1), text_color=(0, 0, 0), cross_out=True)

PDF only: Add a redaction annotation. A redaction annotation identifies content to be removed from the
document. Adding such an annotation is the first of two steps. It makes visible what will be removed in
the subsequent step, Page.apply_redactions().

Parameters

• quad (quad_like,rect_like) – specifies the (rectangular) area to be removed
which is always equal to the annotation rectangle. This may be a rect_like or
quad_like object. If a quad is specified, then the enveloping rectangle is taken.

• text (str) – text to be placed in the rectangle after applying the redaction (and
thus removing old content). (New in v1.16.12)

• fontname (str) – the font to use when text is given, otherwise ignored. The
same rules apply as for Page.insert_textbox() – which is the method Page.
apply_redactions() internally invokes. The replacement text will be vertically
centered, if this is one of the CJK or PDF Base 14 Fonts. (New in v1.16.12)

Note:

– For an existing font of the page, use its reference name as fontname (this is
item[4] of its entry in Page.get_fonts()).

– For a new, non-builtin font, proceed as follows:

page.insert_text(point,
# anywhere, but outside all␣

˓→redaction rectangles

""something"",
# some non-empty string

fontname=""newname"",
# new, unused reference name

fontfile=""..."",
# desired font file

render_mode=3,
# makes the text invisible

)
page.add_redact_annot(..., fontname=""newname"")

• fontsize (float) – the fontsize to use for the replacing text. If the text is
too large to fit, several insertion attempts will be made, gradually reducing the
fontsize to no less than 4. If then the text will still not fit, no text insertion will
take place at all. (New in v1.16.12)

• align (int) – the horizontal alignment for the replacing text.
See

insert_textbox() for available values.
The vertical alignment is (approxi-
mately) centered if a PDF built-in font is used (CJK or PDF Base 14 Fonts). (New
in v1.16.12)

• fill (sequence) – the fill color of the rectangle after applying the redaction. The
default is white = (1, 1, 1), which is also taken if None is specified. To suppress a
fill color altogether, specify False. In this cases the rectangle remains transparent.
(New in v1.16.12)

• text_color (sequence) – the color of the replacing text. Default is black = (0, 0,
0). (New in v1.16.12)

270
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• cross_out (bool) – add two diagonal lines to the annotation rectangle. (New in
v1.17.2)

Return type

Annot

Returns

the created annotation. Its standard appearance looks like a red rectangle (no fill color),
optionally showing two diagonal lines. Colors, line width, dashing, opacity and blend
mode can now be set and applied via Annot.update() like with other annotations.
(Changed in v1.17.2)

• New in v1.16.11

add_polyline_annot(points)

add_polygon_annot(points)

PDF only: Add an annotation consisting of lines which connect the given points. A Polygon’s first and last
points are automatically connected, which does not happen for a PolyLine. The rectangle is automatically
created as the smallest rectangle containing the points, each one surrounded by a circle of radius 3 (= 3 *
line width). The following shows a ‘PolyLine’ that has been modified with colors and line ends.

Parameters

points (list) – a list of point_like objects.

Return type

Annot

Returns

the created annotation. It is drawn with line color black, line width 1 no fill color but
fill color support. Use methods of Annot to make any changes to achieve something like
this:

add_underline_annot(quads=None, start=None, stop=None, clip=None)

add_strikeout_annot(quads=None, start=None, stop=None, clip=None)

add_squiggly_annot(quads=None, start=None, stop=None, clip=None)

add_highlight_annot(quads=None, start=None, stop=None, clip=None)

PDF only: These annotations are normally used for marking text which has previously been somehow
located (for example via Page.search_for()). But this is not required: you are free to “mark” just
anything.

19.14. Page
271

PyMuPDF Documentation, Release 1.23.25

Standard (stroke only – no fill color support) colors are chosen per annotation type: yellow for highlighting,
red for striking out, green for underlining, and magenta for wavy underlining.

All these four methods convert the arguments into a list of Quad objects. The annotation rectangle is then
calculated to envelop all these quadrilaterals.

Note: search_for() delivers a list of either Rect or Quad objects. Such a list can be directly used as an
argument for these annotation types and will deliver one common annotation for all occurrences of the
search string:

>>> # prefer quads=True in text searching for annotations!
>>> quads = page.search_for(""pymupdf"", quads=True)
>>> page.add_highlight_annot(quads)

Note: Obviously, text marker annotations need to know what is the top, the bottom, the left, and the right
side of the area(s) to be marked. If the arguments are quads, this information is given by the sequence of
the quad points. In contrast, a rectangle delivers much less information – this is illustrated by the fact, that
4! = 24 different quads can be constructed with the four corners of a rectangle.

Therefore, we strongly recommend to use the quads option for text searches, to ensure correct annota-
tions. A similar consideration applies to marking text spans extracted with the “dict” / “rawdict” options
of Page.get_text(). For more details on how to compute quadrilaterals in this case, see section “How
to Mark Non-horizontal Text” of FAQ.

Parameters

• quads (rect_like,quad_like,list,tuple) – the location(s) – rectangle(s) or
quad(s) – to be marked. (Changed in v1.14.20) A list or tuple must consist of
rect_like or quad_like items (or even a mixture of either). Every item must
be finite, convex and not empty (as applicable). Set this parameter to None if you
want to use the following arguments (Changed in v1.16.14). And vice versa: if not
None, the remaining parameters must be None.

• start (point_like) – start text marking at this point. Defaults to the top-left
point of clip. Must be provided if quads is None. (New in v1.16.14)

• stop (point_like) – stop text marking at this point. Defaults to the bottom-right
point of clip. Must be used if quads is None. (New in v1.16.14)

• clip (rect_like) – only consider text lines intersecting this area. Defaults to the
page rectangle. Only use if start and stop are provided. (New in v1.16.14)

Return type

Annot or None (changed in v1.16.14).

Returns

the created annotation. If quads is an empty list, no annotation is created (changed in
v1.16.14).

Note: You can use parameters start, stop and clip to highlight consecutive lines between the points start
and stop (starting with v1.16.14). Make use of clip to further reduce the selected line bboxes and thus deal
with e.g. multi-column pages. The following multi-line highlight on a page with three text columns was
created by specifying the two red points and setting clip accordingly.

272
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

find_tables(clip=None, strategy=None, vertical_strategy=None, horizontal_strategy=None,
vertical_lines=None, horizontal_lines=None, snap_tolerance=None, snap_x_tolerance=None,
snap_y_tolerance=None, join_tolerance=None, join_x_tolerance=None,
join_y_tolerance=None, edge_min_length=3, min_words_vertical=3,
min_words_horizontal=1, intersection_tolerance=None, intersection_x_tolerance=None,
intersection_y_tolerance=None, text_tolerance=None, text_x_tolerance=None,
text_y_tolerance=None, add_lines=None)

Find tables on the page and return an object with related information. Typically, the default values of the
many parameters will be sufficient. Adjustments should ever only be needed in corner case situations.

Parameters

• clip (rect_like) – specify a region to consider within the page rectangle and
ignore the rest. Default is the full page.

• strategy (str) – Request a table detection strategy. Valid values are “lines”,
“lines_strict” and “text”.

Default is “lines” which uses all vector graphics on the page to detect grid lines.

Strategy “lines_strict” ignores borderless rectangle vector graphics. Sometimes
single text pieces have background colors which may lead to false columns or lines.
This strategy ignores them and can thus increase detection precision.

If “text” is specified, text positions are used to generate “virtual” column and / or
row boundaries. Use min_words_* to request the number of words for considering
their coordinates.

Use parameters vertical_strategy and horizontal_strategy instead for a
more fine-grained treatment of the dimensions.

• horizontal_lines (sequence[floats]) – y-coordinates of rows. If provided,
there will be no attempt to identify additional table rows. This influences table
detection.

• vertical_lines (sequence[floats]) – x-coordinates of columns. If provided,
there will be no attempt to identify additional table columns. This influences table
detection.

• min_words_vertical (int) – relevant for vertical strategy option “text”: at least
this many words must coincide to establish a virtual column boundary.

• min_words_horizontal (int) – relevant for horizontal strategy option “text”: at
least this many words must coincide to establish a virtual row boundary.

• snap_tolerance (float) – Any two horizontal lines whose y-values differ by
no more than this value will be snapped into one. Accordingly for vertical lines.

19.14. Page
273

PyMuPDF Documentation, Release 1.23.25

Default is 3. Separate values can be specified instead for the dimensions, using
snap_x_tolerance and snap_y_tolerance.

• join_tolerance (float) – Any two lines will be joined to one if the end and
the start points differ by no more than this value (in points). Default is 3. In-
stead of this value, separate values can be specified for the dimensions using
join_x_tolerance and join_y_tolerance.

• edge_min_length (float) – Ignore a line if its length does not exceed this value
(points). Default is 3.

• intersection_tolerance (float) – When combining lines into cell borders,
orthogonal lines must be within this value (points) to be considered intersecting.
Default is 3. Instead of this value, separate values can be specified for the dimen-
sions using intersection_x_tolerance and intersection_y_tolerance.

• text_tolerance (float) – Characters will be combined into words only if their
distance is no larger than this value (points). Default is 3. Instead of this value,
separate values can be specified for the dimensions using text_x_tolerance and
text_y_tolerance.

• add_lines (tuple,list) – Specify a list of “lines” (i.e. pairs of point_like

objects) as additional, “virtual” vector graphics. These lines may help with table
and / or cell detection and will not otherwise influence the detection strategy. Espe-
cially, in contrast to parameters horizontal_lines and vertical_lines, they
will not prevent detecting rows or columns in other ways. These lines will be treated
exactly like “real” vector graphics in terms of joining, snapping, intersectiing, min-
imum length and containment in the clip rectangle. Similarly, lines not parallel to
any of the coordinate axes will be ignored.

Returns

a TableFinder object that has the following significant attributes:

• cells: a list of all bboxes on the page, that have been identified as table cells (across
all tables). Each cell is a tuple (x0, y0, x1, y1) of coordinates or None.

• tables: a list of Table objects. This is [] if the page has no tables. Single tables can
be found as items of this list. But the TableFinder object itself is also a sequence

274
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

of its tables. This means that if tabs is a TableFinder object, then table “n” is
delivered by tabs.tables[n] as well as by the shorter tabs[n].

• The Table object has the following attributes:

– bbox: the bounding box of the table as a tuple (x0, y0, x1, y1).

– cells: bounding boxes of the table’s cells (list of tuples). A cell may also be
None.

– extract(): this method returns the text content of each table cell as a list of list
of strings.

– to_pandas(): this method returns the table as a pandas DataFrame.

– header: a TableHeader object containing header information of the table.

– col_count: an integer containing the number of table columns.

– row_count: an integer containing the number of table rows.

– rows: a list of TableRow objects containing two attributes: bbox is the bound-
ary box of the row, and cells is a list of table cells contained in this row.

• The TableHeader object has the following attributes:

– bbox: the bounding box of the header.

– cells: a list of bounding boxes containing the name of the respective column.

– names: a list of strings containing the text of each of the cell bboxes. They
represent the column names – which can be used when exporting the table to
pandas DataFrames or CSV, etc.

– external: a bool indicating whether the header bbox is outside the table body
(True) or not. Table headers are never identified by the TableFinder logic.
Therefore, if external is true, then the header cells are not part of any cell iden-
tified by TableFinder. If external == False, then the first table row is the
header.

Please have a look at these Jupyter notebooks, which cover standard situations like mul-
tiple tables on one page or joining table fragments across multiple pages.

• New in version 1.23.0

• Changed in version 1.23.19: new argument add_lines.

Important: There is also the pdf2docx extract tables method which is capable of table extraction if you
prefer.

add_stamp_annot(rect, stamp=0)

PDF only: Add a “rubber stamp” like annotation to e.g. indicate the document’s intended use (“DRAFT”,
“CONFIDENTIAL”, etc.).

Parameters

• rect (rect_like) – rectangle where to place the annotation.

19.14. Page
275

PyMuPDF Documentation, Release 1.23.25

• stamp (int) – id number of the stamp text. For available stamps see Stamp Anno-
tation Icons.

Note:

• The stamp’s text and its border line will automatically be sized and be put horizontally and vertically
centered in the given rectangle. Annot.rect is automatically calculated to fit the given width and
will usually be smaller than this parameter.

• The font chosen is “Times Bold” and the text will be upper case.

• The appearance can be changed using Annot.set_opacity() and by setting the “stroke” color (no
“fill” color supported).

• This can be used to create watermark images: on a temporary PDF page create a stamp annotation
with a low opacity value, make a pixmap from it with alpha=True (and potentially also rotate it),
discard the temporary PDF page and use the pixmap with insert_image() for your target PDF.

add_widget(widget)

PDF only: Add a PDF Form field (“widget”) to a page. This also turns the PDF into a Form PDF.
Because of the large amount of different options available for widgets, we have developed a new class
Widget, which contains the possible PDF field attributes. It must be used for both, form field creation and
updates.

Parameters

widget (Widget) – a Widget object which must have been created upfront.

Returns

a widget annotation.

delete_annot(annot)

• The removal will now include any bound ‘Popup’ or response annotations and related objects
(changed in v1.16.6).

PDF only: Delete annotation from the page and return the next one.

Parameters

annot (Annot) – the annotation to be deleted.

Return type

Annot

Returns

the annotation following the deleted one. Please remember that physical removal re-
quires saving to a new file with garbage > 0.

delete_widget(widget)

PDF only: Delete field from the page and return the next one.

Parameters

widget (Widget) – the widget to be deleted.

Return type

Widget

276
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Returns

the widget following the deleted one. Please remember that physical removal requires
saving to a new file with garbage > 0.

(New in v1.18.4)

apply_redactions(images=PDF_REDACT_IMAGE_PIXELS)

PDF only: Remove all text content contained in any redaction rectangle.

This method applies and then deletes all redactions from the page.

Parameters

images (int) – How to redact overlapping images.
The default (2) blanks
out
overlapping
pixels.
PDF_REDACT_IMAGE_NONE
(0)
ignores,
and
PDF_REDACT_IMAGE_REMOVE (1) completely removes all overlapping images.

Returns

True if at least one redaction annotation has been processed, False otherwise.

Note:

• Text contained in a redaction rectangle will be physically removed from the page (assuming

Document.save() with a suitable garbage option) and will no longer appear in e.g. text extractions
or anywhere else. All redaction annotations will also be removed. Other annotations are unaffected.

• All overlapping links will be removed. If the rectangle of the link was covering text, then only the
overlapping part of the text is being removed. Similar applies to images covered by link rectangles.

• The
overlapping
parts
of
images
will
be
blanked-out
for
default
option
PDF_REDACT_IMAGE_PIXELS (changed in v1.18.0).
Option 0 does not touch any images
and 1 will remove any image with an overlap.
Please be aware that there is a bug for option
PDF_REDACT_IMAGE_PIXELS = 2: transparent images will be incorrectly handled!

• For option images=PDF_REDACT_IMAGE_REMOVE only this page’s references to the images are
removed - not necessarily the images themselves. Images are completely removed from the file
only, if no longer referenced at all (assuming suitable garbage collection options).

• For option images=PDF_REDACT_IMAGE_PIXELS a new image of format PNG is created, which
the page will use in place of the original one. The original image is not deleted or replaced as part of
this process, so other pages may still show the original. In addition, the new, modified PNG image
currently is stored uncompressed. Do keep these aspects in mind when choosing the right garbage
collection method and compression options during save.

• Text removal is done by character: A character is removed if its bbox has a non-empty over-
lap with a redaction rectangle (changed in MuPDF v1.17).
Depending on the font properties
and / or the chosen line height, deletion may occur for undesired text parts.
Using Tools.
set_small_glyph_heights() with a True argument before text search may help to prevent this.

• Redactions are a simple way to replace single words in a PDF, or to just physically remove them.
Locate the word “secret” using some text extraction or search method and insert a redaction using
“xxxxxx” as replacement text for each occurrence.

– Be wary if the replacement is longer than the original – this may lead to an awkward appear-
ance, line breaks or no new text at all.

– For a number of reasons, the new text may not exactly be positioned on the same line like the
old one – especially true if the replacement font was not one of CJK or PDF Base 14 Fonts.

19.14. Page
277

PyMuPDF Documentation, Release 1.23.25

• New in v1.16.11

• Changed in v1.16.12: The previous mark parameter is gone. Instead, the respective rectangles are
filled with the individual fill color of each redaction annotation. If a text was given in the annotation,
then insert_textbox() is invoked to insert it, using parameters provided with the redaction.

• Changed in v1.18.0: added option for handling images that overlap redaction areas.

delete_link(linkdict)

PDF only: Delete the specified link from the page.
The parameter must be an original item of

get_links(), see Description of get_links() Entries. The reason for this is the dictionary’s “xref” key,
which identifies the PDF object to be deleted.

Parameters

linkdict (dict) – the link to be deleted.

insert_link(linkdict)

PDF only: Insert a new link on this page. The parameter must be a dictionary of format as provided by
get_links(), see Description of get_links() Entries.

Parameters

linkdict (dict) – the link to be inserted.

update_link(linkdict)

PDF only: Modify the specified link. The parameter must be a (modified) original item of get_links(),
see Description of get_links() Entries. The reason for this is the dictionary’s “xref” key, which identifies
the PDF object to be changed.

Parameters

linkdict (dict) – the link to be modified.

Warning:
If updating / inserting a URI link (""kind"":
LINK_URI), please make sure to start the
value for the ""uri"" key with a disambiguating string like ""http://"", ""https://"", ""file://"",
""ftp://"", ""mailto:"", etc. Otherwise – depending on your browser or other “consumer” software –
unexpected default assumptions may lead to unwanted behaviours.

get_label()

PDF only: Return the label for the page.

Return type

str

Returns

the label string like “vii” for Roman numbering or “” if not defined.

• New in v1.18.6

278
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

get_links()

Retrieves all links of a page.

Return type

list

Returns

A list of dictionaries. For a description of the dictionary entries, see Description of
get_links() Entries. Always use this or the Page.links() method if you intend to make
changes to the links of a page.

links(kinds=None)

Return a generator over the page’s links. The results equal the entries of Page.get_links().

Parameters

kinds (sequence) – a sequence of integers to down-select to one or more link kinds.
Default is all links. Example: kinds=(fitz.LINK_GOTO,) will only return internal links.

Return type

generator

Returns

an entry of Page.get_links() for each iteration.

• New in v1.16.4

annots(types=None)

Return a generator over the page’s annotations.

Parameters

types (sequence) – a sequence of integers to down-select to one or more annotation
types. Default is all annotations. Example: types=(fitz.PDF_ANNOT_FREETEXT,
fitz.PDF_ANNOT_TEXT) will only return ‘FreeText’ and ‘Text’ annotations.

Return type

generator

Returns

an Annot for each iteration.

Caution: You cannot safely update annotations from within this generator. This
is because most annotation updates require reloading the page via page = doc.
reload_page(page). To circumvent this restriction, make a list of annotations
xref numbers first and then iterate over these numbers:

In [4]: xrefs = [annot.xref for annot in page.annots(types=[...

˓→])]
In [5]: for xref in xrefs:

...:
annot = page.load_annot(xref)

...:
annot.update()

...:
page = doc.reload_page(page)
In [6]:

19.14. Page
279

PyMuPDF Documentation, Release 1.23.25

• New in v1.16.4

widgets(types=None)

Return a generator over the page’s form fields.

Parameters

types (sequence) – a sequence of integers to down-select to one or more widget types.
Default is all form fields. Example: types=(fitz.PDF_WIDGET_TYPE_TEXT,) will
only return ‘Text’ fields.

Return type

generator

Returns

a Widget for each iteration.

• New in v1.16.4

write_text(rect=None, writers=None, overlay=True, color=None, opacity=None, keep_proportion=True,
rotate=0, oc=0)

PDF only: Write the text of one or more TextWriter objects to the page.

Parameters

• rect (rect_like) – where to place the text. If omitted, the rectangle union of the
text writers is used.

• writers (sequence) – a non-empty tuple / list of TextWriter objects or a single

TextWriter.

• opacity (float) – set transparency, overwrites resp. value in the text writers.

• color (sequ) – set the text color, overwrites resp. value in the text writers.

• overlay (bool) – put the text in foreground or background.

• keep_proportion (bool) – maintain the aspect ratio.

• rotate (float) – rotate the text by an arbitrary angle.

• oc (int) – the xref of an OCG or OCMD. (New in v1.18.4)

Note:
Parameters overlay, keep_proportion, rotate and oc have the same meaning as in Page.
show_pdf_page().

• New in v1.16.18

280
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

insert_text(point, text, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None,
render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, rotate=0,
morph=None, stroke_opacity=1, fill_opacity=1, overlay=True, oc=0)

PDF only: Insert text starting at point_like point. See Shape.insert_text().

• Changed in v1.18.4

insert_textbox(rect, buffer, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None,
render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, expandtabs=8,
align=TEXT_ALIGN_LEFT, charwidths=None, rotate=0, morph=None,
stroke_opacity=1, fill_opacity=1, oc=0, overlay=True)

PDF only: Insert text into the specified rect_like rect. See Shape.insert_textbox().

• Changed in v1.18.4

insert_htmlbox(rect, text, *, css=None, scale_low=0, archive=None, rotate=0, oc=0, opacity=1,
overlay=True)

PDF only: Insert text into the specified rectangle. The method has similarities with methods Page.
insert_textbox() and TextWriter.fill_textbox(), but is much more powerful. This is achieved
by letting a Story object do all the required processing.

• Parameter text may be a string as in the other methods. But it will be interpreted as HTML source
and may therefore also contain HTML language elements – including styling. The css parameter
may be used to pass in additional styling instructions.

• Automatic line breaks are generated at word boundaries. The “soft hyphen” character ""&#173;"" (or
&shy;) can be used to cause hyphenation and thus may also cause line breaks. Forced line breaks
however are only achievable via the HTML tag <br> - ""\\n"" is ignored and will be treated like a
space.

• With this method the following can be achieved:

– Styling effects like bold, italic, text color, text alignment, font size or font switching.

– The text may include arbitrary languages – including right-to-left languages.

– Scripts like Devanagari and several others in Asia have a highly complex system of ligatures,
where two or more unicodes together yield one glyph. The Story uses the software package
HarfBuzz , to deal with these things and produce correct output.

– One can also include images via HTML tag <img> – the Story will take care of the appropriate
layout. This is an alternative option to insert images, compared to Page.insert_image().

– HTML tables (tag <table>) may be included in the text and will be handled appropriately.

– Links are automatically generated when present.

• If content does not fit in the rectangle, the developer has two choices:

– either only be informed about this (and accept a no-op, just like with the other textbox insertion
methods),

– or (scale_low=0 - the default) scale down the content until it fits.

19.14. Page
281

PyMuPDF Documentation, Release 1.23.25

Parameters

• rect (rect_like) – rectangle on page to receive the text.

• text (str,Story) – the text to be written. Can contain a mixture of plain text and
HTML tags with styling instructions. Alternatively, a Story object may be specified
(in which case the internal Story generation step will be omitted). A Story must
have been generated with all required styling and Archive information.

• css (str) – optional string containing additional CSS instructions. This parameter
is ignored if text is a Story.

• scale_low (float) – if necessary, scale down the content until it fits in the target
rectangle. This sets the down scaling limit. Default is 0, no limit. A value of 1
means no down-scaling permitted. A value of e.g. 0.2 means maximum down-
scaling by 80%.

• archive (Archive) – an Archive object that points to locations where to find im-
ages or non-standard fonts. If text refers to images or non-standard fonts, this
parameter is required. This parameter is ignored if text is a Story.

• rotate (int) – one of the values 0, 90, 180, 270. Depending on this, text will be
filled:

– 0: top-left to bottom-right.

– 90: bottom-left to top-right.

– 180: bottom-right to top-left.

– 270: top-right to bottom-left.

• oc (int) – the xref of an OCG / OCMD or 0. Please refer to Page.show_pdf_page()

for details.

• opacity (float) – set the fill and stroke opacity of the content. Only values 0 <=
opacity < 1 are considered.

• overlay (bool) – put the text in front of other content. Please refer to Page.
show_pdf_page() for details.

Returns

A tuple of floats (spare_height, scale).

• spare_height: -1 if content did not fit, else >= 0. It is the height of the unused (still
available) rectangle stripe. Positive only if scale = 1 (no down-scaling happened).

• scale: down-scaling factor, 0 < scale <= 1.

Please refer to examples in this section of the recipes: How to Fill a Box with HTML
Text.

282
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• New in v1.23.8; rebased-only.

• New in v1.23.9: opacity parameter.

draw_line(p1, p2, color=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,
morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: Draw a line from p1 to p2 (point_like s). See Shape.draw_line().

• Changed in v1.18.4

draw_zigzag(p1, p2, breadth=2, color=None, width=1, dashes=None, lineCap=0, lineJoin=0,
overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: Draw a zigzag line from p1 to p2 (point_like s). See Shape.draw_zigzag().

• Changed in v1.18.4

draw_squiggle(p1, p2, breadth=2, color=None, width=1, dashes=None, lineCap=0, lineJoin=0,
overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: Draw a squiggly (wavy, undulated) line from p1 to p2 (point_like s).
See Shape.
draw_squiggle().

• Changed in v1.18.4

draw_circle(center, radius, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,
overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only:
Draw a circle around center (point_like) with a radius of radius.
See Shape.
draw_circle().

• Changed in v1.18.4

draw_oval(quad, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,
morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: Draw an oval (ellipse) within the given rect_like or quad_like. See Shape.draw_oval().

• Changed in v1.18.4

19.14. Page
283

PyMuPDF Documentation, Release 1.23.25

draw_sector(center, point, angle, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,
fullSector=True, overlay=True, closePath=False, morph=None, stroke_opacity=1,
fill_opacity=1, oc=0)

PDF only: Draw a circular sector, optionally connecting the arc to the circle’s center (like a piece of pie).
See Shape.draw_sector().

• Changed in v1.18.4

draw_polyline(points, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,
overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only:
Draw several connected lines defined by a sequence of point_like s.
See Shape.
draw_polyline().

• Changed in v1.18.4

draw_bezier(p1, p2, p3, p4, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,
overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: Draw a cubic Bézier curve from p1 to p4 with the control points p2 and p3 (all are point_like
s). See Shape.draw_bezier().

• Changed in v1.18.4

draw_curve(p1, p2, p3, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0,
overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: This is a special case of draw_bezier(). See Shape.draw_curve().

• Changed in v1.18.4

draw_rect(rect, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,
morph=None, stroke_opacity=1, fill_opacity=1, radius=None, oc=0)

PDF only: Draw a rectangle. See Shape.draw_rect().

• Changed in v1.18.4

• Changed in v1.22.0: Added parameter radius.

284
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

draw_quad(quad, color=None, fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True,
morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: Draw a quadrilateral. See Shape.draw_quad().

• Changed in v1.18.4

insert_font(fontname='helv', fontfile=None, fontbuffer=None, set_simple=False,
encoding=TEXT_ENCODING_LATIN)

PDF only: Add a new font to be used by text output methods and return its xref. If not already present in
the file, the font definition will be added. Supported are the built-in Base14_Fonts and the CJK fonts via
“reserved” fontnames. Fonts can also be provided as a file path or a memory area containing the image
of a font file.

Parameters

• fontname (str) – The name by which this font shall be referenced when outputting
text on this page. In general, you have a “free” choice here (but consult the Adobe
PDF References, page 16, section 7.3.5 for a formal description of building legal
PDF names). However, if it matches one of the Base14_Fonts or one of the CJK
fonts, fontfile and fontbuffer are ignored.

In other words, you cannot insert a font via fontfile / fontbuffer and also give it a
reserved fontname.

Note: A reserved fontname can be specified in any mixture of upper or lower case
and still match the right built-in font definition: fontnames “helv”, “Helv”, “HELV”,
“Helvetica”, etc. all lead to the same font definition “Helvetica”. But from a Page
perspective, these are different references. You can exploit this fact when using
different encoding variants (Latin, Greek, Cyrillic) of the same font on a page.

• fontfile (str) – a path to a font file. If used, fontname must be different from
all reserved names.

• fontbuffer (bytes/bytearray) – the memory image of a font file. If used, font-
name must be different from all reserved names. This parameter would typically
be used with Font.buffer for fonts supported / available via Font.

• set_simple (int) – applicable for fontfile / fontbuffer cases only: enforce treat-
ment as a “simple” font, i.e. one that only uses character codes up to 255.

• encoding (int) – applicable for the “Helvetica”, “Courier” and “Times” sets of

Base14_Fonts only. Select one of the available encodings Latin (0), Cyrillic (2)
or Greek (1). Only use the default (0 = Latin) for “Symbol” and “ZapfDingBats”.

Rytpe

int

Returns

the xref of the installed font.

Note:
Built-in fonts will not lead to the inclusion of a font file. So the resulting PDF file will remain
small. However, your PDF viewer software is responsible for generating an appropriate appearance – and
there exist differences on whether or how each one of them does this. This is especially true for the CJK

19.14. Page
285

PyMuPDF Documentation, Release 1.23.25

fonts. But also Symbol and ZapfDingbats are incorrectly handled in some cases. Following are the Font
Names and their correspondingly installed Base Font names:

Base-14 Fonts1

Font Name
Installed Base Font
Comments

helv
Helvetica
normal

heit
Helvetica-Oblique
italic

hebo
Helvetica-Bold
bold

hebi
Helvetica-BoldOblique
bold-italic

cour
Courier
normal

coit
Courier-Oblique
italic

cobo
Courier-Bold
bold

cobi
Courier-BoldOblique
bold-italic

tiro
Times-Roman
normal

tiit
Times-Italic
italic

tibo
Times-Bold
bold

tibi
Times-BoldItalic
bold-italic

symb
Symbol
3

zadb
ZapfDingbats
3

CJK Fonts2 (China, Japan, Korea)

Font Name
Installed Base Font
Comments

china-s
Heiti
simplified Chinese

china-ss
Song
simplified Chinese (serif)

china-t
Fangti
traditional Chinese

china-ts
Ming
traditional Chinese (serif)

japan
Gothic
Japanese

japan-s
Mincho
Japanese (serif)

korea
Dotum
Korean

korea-s
Batang
Korean (serif)

insert_image(rect, *, alpha=-1, filename=None, height=0, keep_proportion=True, mask=None, oc=0,
overlay=True, pixmap=None, rotate=0, stream=None, width=0, xref=0)

PDF only: Put an image inside the given rectangle. The image may already exist in the PDF or be taken
from a pixmap, a file, or a memory area.

Parameters

• rect (rect_like) – where to put the image. Must be finite and not empty.

• alpha (int) – deprecated and ignored.

• filename (str) – name of an image file (all formats supported by MuPDF – see

Supported Input Image Formats).

• height (int) –

1 If your existing code already uses the installed base name as a font reference (as it was supported by PyMuPDF versions earlier than 1.14), this
will continue to work.
3 Not all PDF readers display these fonts at all. Some others do, but use a wrong character spacing, etc.
2 Not all PDF reader software (including internet browsers and office software) display all of these fonts. And if they do, the difference between
the serifed and the non-serifed version may hardly be noticeable. But serifed and non-serifed versions lead to different installed base fonts, thus
providing an option to be displayable with your specific PDF viewer.

286
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• keep_proportion (bool) – maintain the aspect ratio of the image.

• mask (bytes,bytearray,io.BytesIO) – image in memory – to be used as image
mask (alpha values) for the base image. When specified, the base image must be
provided as a filename or a stream – and must not be an image that already has a
mask.

• oc (int) – (xref) make image visibility dependent on this OCG or OCMD. Ignored
after the first of multiple insertions. The property is stored with the generated PDF
image object and therefore controls the image’s visibility throughout the PDF.

• overlay – see Common Parameters.

• pixmap (Pixmap) – a pixmap containing the image.

• rotate (int) – rotate the image. Must be an integer multiple of 90 degrees. Posi-
tive values rotate anti-clockwise. If you need a rotation by an arbitrary angle, con-
sider converting the image to a PDF (Document.convert_to_pdf()) first and
then use Page.show_pdf_page() instead.

• stream (bytes,bytearray,io.BytesIO) – image in memory (all formats sup-
ported by MuPDF – see Supported Input Image Formats).

• width (int) –

• xref (int) – the xref of an image already present in the PDF. If given, parameters
filename, Pixmap, stream, alpha and mask are ignored. The page will simply
receive a reference to the existing image.

Returns

The xref of the embedded image. This can be used as the xref argument for very
significant performance boosts, if the image is inserted again.

This example puts the same image on every page of a document:

>>> doc = fitz.open(...)
>>> rect = fitz.Rect(0, 0, 50, 50)
# put thumbnail in upper left corner

>>> img = open(""some.jpg"", ""rb"").read()
# an image file

>>> img_xref = 0
# first execution embeds the image

>>> for page in doc:

img_xref = page.insert_image(rect, stream=img,

xref=img_xref,
2nd time reuses existing image

)

>>> doc.save(...)

Note:

1. The method detects multiple insertions of the same image (like in the above example) and will store
its data only on the first execution. This is even true (although less performant), if using the default
xref=0.

2. The method cannot detect if the same image had already been part of the file before opening it.

3. You can use this method to provide a background or foreground image for the page, like a copyright
or a watermark. Please remember, that watermarks require a transparent image if put in foreground
...

4. The image may be inserted uncompressed, e.g. if a Pixmap is used or if the image has an alpha
channel. Therefore, consider using deflate=True when saving the file. In addition, there are ways

19.14. Page
287

PyMuPDF Documentation, Release 1.23.25

to control the image size – even if transparency comes into play. Have a look at How to Add Images
to a PDF Page.

5. The image is stored in the PDF at its original quality level. This may be much better than what
you need for your display. Consider decreasing the image size before insertion – e.g. by using
the pixmap option and then shrinking it or scaling it down (see Pixmap chapter). The PIL method
Image.thumbnail() can also be used for that purpose. The file size savings can be very significant.

6. Another efficient way to display the same image on multiple pages is another method:

show_pdf_page(). Consult Document.convert_to_pdf() for how to obtain intermediary PDFs
usable for that method.

• Changed in v1.14.1: By default, the image keeps its aspect ratio.

• Changed in v1.14.11: Added args keep_proportion, rotate.

• Changed in v1.14.13:

– The image is now always placed centered in the rectangle, i.e. the centers of image and rect-
angle are equal.

– Added support for stream as io.BytesIO.

• Changed in v1.17.6: Insertion rectangle no longer needs to have a non-empty intersection with the
page’s Page.cropbox5.

• Changed in v1.18.1: Added mask arg.

• Changed in v1.18.3: Added oc arg.

• Changed in v1.18.13:

– Allow providing the image as the xref of an existing one.

– Added xref arg.

– Return xref of stored image.

• Changed in v1.19.3: deprecate and ignore alpha arg.

replace_image(xref, filename=None, pixmap=None, stream=None)

Replace the image at xref with another one.

Parameters

• xref (int) – the xref of the image.

• filename – the filename of the new image.

• pixmap – the Pixmap of the new image.

• stream – the memory area containing the new image.

Arguments filename, Pixmap, stream have the same meaning as in Page.insert_image(), especially
exactly one of these must be provided.

This is a global replacement: the new image will also be shown wherever the old one has been displayed
throughout the file.

5 The previous algorithm caused images to be shrunk to this intersection. Now the image can be anywhere on Page.mediabox, potentially
being invisible or only partially visible if the cropbox (representing the visible page part) is smaller.

288
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

This method mainly exists for technical purposes. Typical uses include replacing large images by smaller
versions, like a lower resolution, graylevel instead of colored, etc., or changing transparency.

• New in v1.21.0

delete_image(xref )

Delete the image at xref. This is slightly misleading: actually the image is being replaced with a small
transparent Pixmap using above Page.replace_image(). The visible effect however is equivalent.

Parameters

xref (int) – the xref of the image.

This is a global replacement: the image will disappear wherever the old one has been displayed throughout
the file.

If you inspect / extract a page’s images by methods like Page.get_images(), Page.get_image_info()
or Page.get_text(), the replacing “dummy” image will be detected like so (45, 47, 1, 1, 8,
'DeviceGray', '', 'Im1', 'FlateDecode') and also seem to “cover” the same boundary box on
the page.

• New in v1.21.0

get_text(option, *, clip=None, flags=None, textpage=None, sort=False, delimiters=None)

Retrieves the content of a page in a variety of formats. This is a wrapper for multiple TextPage methods
by choosing the output option opt as follows:

• “text” – TextPage.extractTEXT(), default

• “blocks” – TextPage.extractBLOCKS()

• “words” – TextPage.extractWORDS()

• “html” – TextPage.extractHTML()

• “xhtml” – TextPage.extractXHTML()

• “xml” – TextPage.extractXML()

• “dict” – TextPage.extractDICT()

• “json” – TextPage.extractJSON()

• “rawdict” – TextPage.extractRAWDICT()

• “rawjson” – TextPage.extractRAWJSON()

Parameters

• opt (str) – A string indicating the requested format, one of the above. A mixture
of upper and lower case is supported.

Values “words” and “blocks” are also accepted (changed in v1.16.3).

• clip (rect-like) – restrict extracted text to this rectangle. If None, the full page
is taken. Has no effect for options “html”, “xhtml” and “xml”. (New in v1.17.7)

19.14. Page
289

PyMuPDF Documentation, Release 1.23.25

• flags (int) – indicator bits to control whether to include images or how text should
be handled with respect to white spaces and ligatures. See Text Extraction Flags
for available indicators and Text Extraction Flags Defaults for default settings. (New
in v1.16.2)

• textpage – use a previously created TextPage. This reduces execution time very
significantly: by more than 50% and up to 95%, depending on the extraction option.
If specified, the ‘flags’ and ‘clip’ arguments are ignored, because they are textpage-
only properties. If omitted, a new, temporary textpage will be created. (New in
v1.19.0)

• sort (bool) – sort the output by vertical, then horizontal coordinates. In many
cases, this should suffice to generate a “natural” reading order. Has no effect on
(X)HTML and XML. Output option “words” sorts by (y1, x0) of the words’
bboxes. Similar is true for “blocks”, “dict”, “json”, “rawdict”, “rawjson”: they
all are sorted by (y1, x0) of the resp. block bbox. If specified for “text”, then
internally “blocks” is used. (New in v1.19.1)

• delimiters (str) – use these characters as additional word separators with the
“words” output option (ignored otherwise). By default, all white spaces (includ-
ing non-breaking space 0xA0) indicate start and end of a word. Now you can
specify more characters causing this. For instance, the default will return ""john.
doe@outlook.com"" as one word. If you specify delimiters=""@."" then the four
words ""john"", ""doe"", ""outlook"", ""com"" will be returned. Other possible uses in-
clude ignoring punctuation characters delimiters=string.punctuation. The
“word” strings will not contain any delimiting character. (New in v1.23.5)

Return type

str, list, dict

Returns

The page’s content as a string, a list or a dictionary. Refer to the corresponding TextPage
method for details.

Note:

1. You can use this method as a document conversion tool from any supported document type to one
of TEXT, HTML, XHTML or XML documents.

2. The inclusion of text via the clip parameter is decided on a by-character level: a character becomes
part of the output, if its bbox is contained in clip (changed in v1.18.2). This deviates from the
algorithm used in redaction annotations: a character will be removed if its bbox intersects any
redaction annotation.

• Changed in v1.19.0: added TextPage parameter

• Changed in v1.19.1: added sort parameter

• Changed in v1.19.6: added new constants for defining default flags per method.

• Changed in v1.23.5: added delimiters parameter

get_textbox(rect, textpage=None)

Retrieve the text contained in a rectangle.

290
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Parameters

• rect (rect-like) – rect-like.

• textpage – a TextPage to use. If omitted, a new, temporary textpage will be cre-
ated.

Returns

a string with interspersed linebreaks where necessary. It is based on dedicated code
(changed in v1.19.0). A tyical use is checking the result of Page.search_for():

>>> rl = page.search_for(""currency:"")
>>> page.get_textbox(rl[0])
'Currency:'
>>>

• New in v1.17.7

• Changed in v1.19.0: add TextPage parameter

get_textpage(clip=None, flags=3)

Create a TextPage for the page.

Parameters

• flags (int) – indicator bits controlling the content available for subsequent text
extractions and searches – see the parameter of Page.get_text().

• clip (rect-like) – restrict extracted text to this area. (New in v1.17.7)

Returns

TextPage

• New in v1.16.5

• Changed in v1.17.7: introduced clip parameter.

get_textpage_ocr(flags=3, language='eng', dpi=72, full=False, tessdata=None)

Create a TextPage for the page that includes OCRed text. MuPDF will invoke Tesseract-OCR if this method
is used. Otherwise this is a normal TextPage object.

Parameters

• flags (int) – indicator bits controlling the content available for subsequent test
extractions and searches – see the parameter of Page.get_text().

• language (str) – the expected language(s). Use “+”-separated values if multiple
languages are expected, “eng+spa” for English and Spanish.

• dpi (int) – the desired resolution in dots per inch. Influences recognition quality
(and execution time).

• full (bool) – whether to OCR the full page, or just the displayed images.

19.14. Page
291

PyMuPDF Documentation, Release 1.23.25

• tessdata (str) – The name of Tesseract’s language support folder tessdata.
If
omitted,
this
information
must
be
present
as
environment
variable

TESSDATA_PREFIX. Can be determined by function get_tessdata().

Note: This method does not support a clip parameter – OCR will always happen for the complete page
rectangle.

Returns

a TextPage. Execution may be significantly longer than Page.get_textpage().

For a full page OCR, all text will have the font “GlyphlessFont” from Tesseract. In case
of partial OCR, normal text will keep its properties, and only text coming from images
will have the GlyphlessFont.

Note:
OCRed text is only available to PyMuPDF’s text extractions and searches if
their TextPage parameter specifies the output of this method.

This Jupyter notebook walks through an example for using OCR textpages.

• New in v.1.19.0

• Changed in v1.19.1: support full and partial OCRing a page.

get_drawings(extended=False)

Return the vector graphics of the page. These are instructions which draw lines, rectangles, quadruples or
curves, including properties like colors, transparency, line width and dashing, etc. Alternative terms are
“line art” and “drawings”.

Returns

a list of dictionaries. Each dictionary item contains one or more single draw commands
belonging together: they have the same properties (colors, dashing, etc.). This is called
a “path” in PDF, so we adopted that name here, but the method works for all document
types.

The path dictionary for fill, stroke and fill-stroke paths has been designed to be compatible with class
Shape. There are the following keys:

292
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Key
Value

closePath
Same as the parameter in Shape.

color
Stroke color (see Shape).

dashes
Dashed line specification (see Shape).

even_odd
Fill colors of area overlaps – same as the parameter in Shape.

fill
Fill color (see Shape).

items
List of draw commands: lines, rectangles, quads or curves.

lineCap
Number 3-tuple, use its max value on output with Shape.

lineJoin
Same as the parameter in Shape.

fill_opacity
fill color transparency (see Shape). (New in v1.18.17)

stroke_opacity
stroke color transparency (see Shape). (New in v1.18.17)

rect
Page area covered by this path. Information only.

layer
name of applicable Optional Content Group. (New in v1.22.0)

level
the hierarchy level if extended=True. (New in v1.22.0)

seqno
command number when building page appearance. (New in v1.19.0)

type
type of this path. (New in v1.18.17)

width
Stroke line width. (see Shape).

Key ""opacity"" has been replaced by the new keys ""fill_opacity"" and ""stroke_opacity"". This is
now compatible with the corresponding parameters of Shape.finish(). (Changed in v1.18.17)

For paths other than groups or clips, key ""type"" takes one of the following values:

• “f” – this is a fill-only path. Only key-values relevant for this operation have a meaning, not ap-
plicable ones are present with a value of None: ""color"", ""lineCap"", ""lineJoin"", ""width"",
""closePath"", ""dashes"" and should be ignored.

• “s” – this is a stroke-only path. Similar to previous, key ""fill"" is present with value None.

• “fs” – this is a path performing combined fill and stroke operations.

Each item in path[""items""] is one of the following:

• (""l"", p1, p2) - a line from p1 to p2 (Point objects).

• (""c"", p1, p2, p3, p4) - cubic Bézier curve from p1 to p4 (p2 and p3 are the control points).
All objects are of type Point.

• (""re"", rect, orientation) - a Rect. Multiple rectangles within the same path are now detected
(changed in v1.18.17). Integer orientation is 1 resp. -1 indicating whether the enclosed area is
rotated left (1 = anti-clockwise), or resp. right7 (changed in v1.19.2).

• (""qu"", quad) - a Quad. 3 or 4 consecutive lines are detected to actually represent a Quad (changed
in v1.19.2:). (New in v1.18.17)

Using class Shape, you should be able to recreate the original drawings on a separate (PDF) page with
high fidelity under normal, not too sophisticated circumstances. Please see the following comments on
restrictions. A coding draft can be found in section “Extractings Drawings” of chapter FAQ.

Specifying extended=True significantly alters the output. Most importantly, new dictionary types are
present: “clip” and “group”. All paths will now be organized in a hierarchic structure which is encoded
by the new integer key “level”, the hierarchy level. Each group or clip establishes a new hierarchy, which
applies to all subsequent paths having a larger level value. (New in v1.22.0)

7 In PDF, an area enclosed by some lines or curves can have a property called “orientation”. This is significant for switching on or off the fill
color of that area when there exist multiple area overlaps - see discussion in method Shape.finish() using the “non-zero winding number” rule.
While orientation of curves, quads, triangles and other shapes enclosed by lines always was detectable, this has been impossible for “re” (rectangle)
items in the past. Adding the orientation parameter now delivers the missing information.

19.14. Page
293

PyMuPDF Documentation, Release 1.23.25

Any path with a smaller level value than its predecessor will end the scope of (at least) the preceeding
hierarchy level. A “clip” path with the same level as the preceding clip will end the scope of that clip.
Same is true for groups. This is best explained by an example:

+------+------+--------+------+--------+
| line | lvl0 | lvl1
| lvl2 |
lvl3
|

+------+------+--------+------+--------+
|
0
| clip |
|
|
|

|
1
|
| fill
|
|
|

|
2
|
| group
|
|
|

|
3
|
|
| clip |
|

|
4
|
|
|
| stroke |

|
5
|
|
| fill |
|
ends scope of clip in line 3

|
6
|
| stroke |
|
|
ends scope of group in line 2

|
7
|
| clip
|
|
|

|
8
| fill |
|
|
|
ends scope of line 0

+------+------+--------+------+--------+

The clip in line 0 applies to line including line 7. Group in line 2 applies to lines 3 to 5, clip in line 3 only
applies to line 4.

“stroke” in line 4 is under control of “group” in line 2 and “clip” in line 3 (which in turn is a subset of line
0 clip).

• “clip” dictionary. Its values (most importantly “scissor”) remain valid / apply as long as following
dictionaries have a larger “level” value.

Key
Value

closePath
Same as in “stroke” or “fill” dictionaries

even_odd
Same as in “stroke” or “fill” dictionaries

items
Same as in “stroke” or “fill” dictionaries

rect
Same as in “stroke” or “fill” dictionaries

layer
Same as in “stroke” or “fill” dictionaries

level
Same as in “stroke” or “fill” dictionaries

scissor
the clip rectangle

type
“clip”

• “group” dictionary. Its values remain valid (apply) as long as following dictionaries have a larger
“level” value. Any dictionary with an equal or lower level end this group.

Key
Value

rect
Same as in “stroke” or “fill” dictionaries

layer
Same as in “stroke” or “fill” dictionaries

level
Same as in “stroke” or “fill” dictionaries

isolated
(bool) Whether this group is isolated

knockout
(bool) Whether this is a “Knockout Group”

blendmode
Name of the BlendMode, default is “Normal”

opacity
Float value in range [0, 1].

type
“group”

Note: The method is based on the output of Page.get_cdrawings() – which is much faster, but requires
somewhat more attention processing its output.

294
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• New in v1.18.0

• Changed in v1.18.17

• Changed in v1.19.0: add “seqno” key, remove “clippings” key

• Changed in v1.19.1: “color” / “fill” keys now always are either are RGB tuples or None. This resolves
issues caused by exotic colorspaces.

• Changed in v1.19.2: add an indicator for the “orientation” of the area covered by an “re” item.

• Changed in v1.22.0: add new key ""layer"" which contains the name of the Optional Content Group
of the path (or None).

• Changed in v1.22.0: add parameter extended to also return clipping and group paths.

get_cdrawings(extended=False)

Extract the vector graphics on the page. Apart from following technical differences, functionally equivalent
to Page.get_drawings(), but much faster:

• Every path type only contains the relevant keys, e.g. a stroke path has no ""fill"" color key. See
comment in method Page.get_drawings().

• Coordinates are given as point_like, rect_like and quad_like tuples – not as Point, Rect,

Quad objects.

If performance is a concern, consider using this method: Compared to versions earlier than 1.18.17, you
should see much shorter response times. We have seen pages that required 2 seconds then, now only need
200 ms with this method.

• New in v1.18.17

• Changed in v1.19.0: removed “clippings” key, added “seqno” key.

• Changed in v1.19.1: always generate RGB color tuples.

• Changed in v1.22.0: added new key ""layer"" which contains the name of the Optional Content
Group of the path (or None).

• Changed in v1.22.0: added parameter extended to also return clipping paths.

get_fonts(full=False)

PDF only: Return a list of fonts referenced by the page. Wrapper for Document.get_page_fonts().

get_images(full=False)

PDF only: Return a list of images referenced by the page. Wrapper for Document.get_page_images().

get_image_info(hashes=False, xrefs=False)

Return a list of meta information dictionaries for all images shown on the page. This works for all document
types. Technically, this is a subset of the dictionary output of Page.get_text(): the image binary content
and any text on the page are ignored.

Parameters

19.14. Page
295

PyMuPDF Documentation, Release 1.23.25

• hashes (bool) – Compute the MD5 hashcode for each encountered image, which
allows identifying image duplicates. This adds the key ""digest"" to the output,
whose value is a 16 byte bytes object. (New in v1.18.13)

• xrefs (bool) – PDF only.
Try to find the xref for each image.
Implies
hashes=True. Adds the ""xref"" key to the dictionary. If not found, the value
is 0, which means, the image is either “inline” or otherwise undetectable. Please
note that this option has an extended response time, because the MD5 hashcode will
be computed at least two times for each image with an xref. (New in v1.18.13)

Return type

list[dict]

Returns

A list of dictionaries. This includes information for exactly those images, that are
shown on the page – including “inline images”. In contrast to images included in
Page.get_text(), image binary content is not loaded, which drastically reduces
memory usage.
The dictionary layout is similar to that of image blocks in page.
get_text(""dict"").

Key
Value

number
block number (int)

bbox
image bbox on page, rect_like

width
original image width (int)

height
original image height (int)

cs-name
colorspace name (str)

colorspace
colorspace.n (int)

xres
resolution in x-direction (int)

yres
resolution in y-direction (int)

bpc
bits per component (int)

size
storage occupied by image (int)

digest
MD5 hashcode (bytes), if hashes is true

xref
image xref or 0, if xrefs is true

transform
matrix transforming image rect to bbox, matrix_like

Multiple occurrences of the same image are always reported. You can detect duplicates
by comparing their digest values.

• New in v1.18.11

• Changed in v1.18.13: added image MD5 hashcode computation and xref search.

get_xobjects()

PDF only:
Return a list of Form XObjects referenced by the page.
Wrapper for Document.
get_page_xobjects().

get_image_rects(item, transform=False)

PDF only: Return boundary boxes and transformation matrices of an embedded image. This is an improved
version of Page.get_image_bbox() with the following differences:

• There is no restriction on how the image is invoked (by the page or one of its Form XObjects). The
result is always complete and correct.

296
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• The result is a list of Rect or (Rect, Matrix) objects – depending on transform. Each list item rep-
resents one location of the image on the page. Multiple occurrences might not be detectable by
Page.get_image_bbox().

• The method invokes Page.get_image_info() with xrefs=True and therefore has a noticeably
longer response time than Page.get_image_bbox().

Parameters

• item (list,str,int) – an item of the list Page.get_images(), or the reference
name entry of such an item (item[7]), or the image xref.

• transform (bool) – also return the matrix used to transform the image rectangle
to the bbox on the page. If true, then tuples (bbox, matrix) are returned.

Return type

list

Returns

Boundary boxes and respective transformation matrices for each image occurrence on
the page. If the item is not on the page, an empty list [] is returned.

New in v1.18.13

get_image_bbox(item, transform=False)

PDF only: Return boundary box and transformation matrix of an embedded image.

Parameters

• item (list,str) – an item of the list Page.get_images() with full=True spec-
ified, or the reference name entry of such an item, which is item[-3] (or item[7]
respectively).

• transform (bool) – return the matrix used to transform the image rectangle to the
bbox on the page (new in v1.18.11). Default is just the bbox. If true, then a tuple
(bbox, matrix) is returned.

Return type

Rect or (Rect, Matrix)

Returns

the boundary box of the image – optionally also its transformation matrix.

• (Changed in v1.16.7): If the page in fact does not display this image, an infinite
rectangle is returned now. In previous versions, an exception was raised. Formally
invalid parameters still raise exceptions.

• (Changed in v1.17.0): Only images referenced directly by the page are considered.
This means that images occurring in embedded PDF pages are ignored and an ex-
ception is raised.

• (Changed in v1.18.5): Removed the restriction introduced in v1.17.0: any item of
the page’s image list may be specified.

19.14. Page
297

PyMuPDF Documentation, Release 1.23.25

• (Changed in v1.18.11): Partially re-instated a restriction: only those images are
considered, that are either directly referenced by the page or by a Form XObject
directly referenced by the page.

• (Changed in v1.18.11): Optionally also return the transformation matrix together
with the bbox as the tuple (bbox, transform).

Note:

1. Be aware that Page.get_images() may contain “dead” entries i.e. images, which the page does
not display. This is no error, but intended by the PDF creator. No exception will be raised in this
case, but an infinite rectangle is returned. You can avoid this from happening by executing Page.
clean_contents() before this method.

2. The image’s “transformation matrix” is defined as the matrix, for which the expression bbox /
transform == fitz.Rect(0, 0, 1, 1) is true, lookup details here: Image Transformation
Matrix.

• Changed in v1.18.11: return image transformation matrix

get_svg_image(matrix=fitz.Identity, text_as_path=True)

Create an SVG image from the page. Only full page images are currently supported.

Parameters

• matrix (matrix_like) – a matrix, default is Identity.

• text_as_path (bool) – – controls how text is represented. True outputs each
character as a series of elementary draw commands, which leads to a more precise
text display in browsers, but a very much larger output for text-oriented pages.
Display quality for False relies on the presence of the referenced fonts on the current
system. For missing fonts, the internet browser will fall back to some default –
leading to unpleasant appearances. Choose False if you want to parse the text of
the SVG. (New in v1.17.5)

Returns

a UTF-8 encoded string that contains the image. Because SVG has XML syntax it can
be saved in a text file, the standard extension is .svg.

Note: In case of a PDF, you can circumvent the “full page image only” restriction by
modifying the page’s CropBox before using the method.

get_pixmap(*, matrix=fitz.Identity, dpi=None, colorspace=fitz.csRGB, clip=None, alpha=False,
annots=True)

Create a pixmap from the page. This is probably the most often used method to create a Pixmap.

All parameters are keyword-only.

Parameters

298
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• matrix (matrix_like) – default is Identity.

• dpi (int) – desired resolution in x and y direction. If not None, the ""matrix""
parameter is ignored. (New in v1.19.2)

• colorspace (str or Colorspace) – The desired colorspace, one of “GRAY”, “RGB”
or “CMYK” (case insensitive). Or specify a Colorspace, ie. one of the predefined
ones: csGRAY, csRGB or csCMYK.

• clip (irect_like) – restrict rendering to the intersection of this area with the
page’s rectangle.

• alpha (bool) – whether to add an alpha channel. Always accept the default False
if you do not really need transparency. This will save a lot of memory (25% in
case of RGB ... and pixmaps are typically large!), and also processing time. Also
note an important difference in how the image will be rendered: with True the
pixmap’s samples area will be pre-cleared with 0x00. This results in transparent
areas where the page is empty. With False the pixmap’s samples will be pre-cleared
with 0xff. This results in white where the page has nothing to show.

Changed in v1.14.17

The default alpha value is now False.

– Generated with alpha=True

– Generated with alpha=False

• annots (bool) – (new in version 1.16.0) whether to also render annotations or to
suppress them. You can create pixmaps for annotations separately.

Return type

Pixmap

19.14. Page
299

PyMuPDF Documentation, Release 1.23.25

Returns

Pixmap of the page. For fine-controlling the generated image, the by far most important
parameter is matrix. E.g. you can increase or decrease the image resolution by using
Matrix(xzoom, yzoom). If zoom > 1, you will get a higher resolution: zoom=2 will
double the number of pixels in that direction and thus generate a 2 times larger image.
Non-positive values will flip horizontally, resp. vertically. Similarly, matrices also let
you rotate or shear, and you can combine effects via e.g. matrix multiplication. See the
Matrix section to learn more.

Note:

• The pixmap will have “premultiplied” pixels if alpha=True. To learn about some background, e.g.
look for “Premultiplied alpha” here.

• The method will respect any page rotation and will not exceed the intersection of clip and Page.
cropbox. If you need the page’s mediabox (and if this is a different rectangle), you can use a snippet
like the following to achieve this:

In [1]: import fitz
In [2]: doc=fitz.open(""demo1.pdf"")
In [3]: page=doc[0]
In [4]: rotation = page.rotation
In [5]: cropbox = page.cropbox
In [6]: page.set_cropbox(page.mediabox)
In [7]: page.set_rotation(0)
In [8]: pix = page.get_pixmap()
In [9]: page.set_cropbox(cropbox)
In [10]: if rotation != 0:

...:
page.set_rotation(rotation)

...:
In [11]:

• Changed in v1.19.2: added support of parameter dpi.

annot_names()

PDF only: return a list of the names of annotations, widgets and links. Technically, these are the /NM
values of every PDF object found in the page’s /Annots array.

Return type

list

• New in v1.16.10

annot_xrefs()

PDF only: return a list of the :data`xref` numbers of annotations, widgets and links – technically of all
entries found in the page’s /Annots array.

300
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Return type

list

Returns

a list of items (xref, type) where type is the annotation type. Use the type to tell apart
links, fields and annotations, see Annotation Types.

• New in v1.17.1

load_annot(ident)

PDF only: return the annotation identified by ident. This may be its unique name (PDF /NM key), or its
xref.

Parameters

ident (str,int) – the annotation name or xref.

Return type

Annot

Returns

the annotation or None.

Note: Methods Page.annot_names(), Page.annot_xrefs() provide lists of names or xrefs, respec-
tively, from where an item may be picked and loaded via this method.

• New in v1.17.1

load_widget(xref )

PDF only: return the field identified by xref.

Parameters

xref (int) – the field’s xref.

Return type

Widget

Returns

the field or None.

Note: This is similar to the analogous method Page.load_annot() – except that here only the xref is
supported as identifier.

• New in v1.19.6

19.14. Page
301

PyMuPDF Documentation, Release 1.23.25

load_links()

Return the first link on a page. Synonym of property first_link.

Return type

Link

Returns

first link on the page (or None).

set_rotation(rotate)

PDF only: Set the rotation of the page.

Parameters

rotate (int) – An integer specifying the required rotation in degrees. Must be an
integer multiple of 90. Values will be converted to one of 0, 90, 180, 270.

show_pdf_page(rect, docsrc, pno=0, keep_proportion=True, overlay=True, oc=0, rotate=0, clip=None)

PDF only:
Display a page of another PDF as a vector image (otherwise similar to Page.
insert_image()). This is a multi-purpose method. For example, you can use it to

• create “n-up” versions of existing PDF files, combining several input pages into one output page
(see example combine.py),

• create “posterized” PDF files, i.e. every input page is split up in parts which each create a separate
output page (see posterize.py),

• include PDF-based vector images like company logos, watermarks, etc., see svg-logo.py, which puts
an SVG-based logo on each page (requires additional packages to deal with SVG-to-PDF conver-
sions).

Parameters

• rect (rect_like) – where to place the image on current page. Must be finite and
its intersection with the page must not be empty.

• docsrc (Document) – source PDF document containing the page. Must be a dif-
ferent document object, but may be the same file.

• pno (int) – page number (0-based, in -∞ < pno < docsrc.page_count) to be
shown.

• keep_proportion (bool) – whether to maintain the width-height-ratio (default).
If false, all 4 corners are always positioned on the border of the target rectangle
– whatever the rotation value. In general, this will deliver distorted and /or non-
rectangular images.

• overlay (bool) – put image in foreground (default) or background.

• oc (int) – (xref) make visibility dependent on this OCG / OCMD (which must be
defined in the target PDF)9. (New in v1.18.3)

• rotate (float) – show the source rectangle rotated by some angle. Any angle is
supported (changed in v1.14.11). (New in v1.14.10)

• clip (rect_like) – choose which part of the source page to show. Default is the
full page, else must be finite and its intersection with the source page must not be
empty.

9 Objects inside the source page, like images, text or drawings, are never aware of whether their owning page now is under OC control inside the
target PDF. If source page objects are OC-controlled in the source PDF, then this will not be retained on the target: they will become unconditionally
visible.

302
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Note: In contrast to method Document.insert_pdf(), this method does not copy annotations, widgets
or links, so these are not included in the target6. But all its other resources (text, images, fonts, etc.) will
be imported into the current PDF. They will therefore appear in text extractions and in get_fonts() and
get_images() lists – even if they are not contained in the visible area given by clip.

Example: Show the same source page, rotated by 90 and by -90 degrees:

>>> doc = fitz.open()
# new empty PDF

>>> page=doc.new_page()
# new page in A4 format

>>>
>>> # upper half page
>>> r1 = fitz.Rect(0, 0, page.rect.width, page.rect.height/2)
>>>
>>> # lower half page
>>> r2 = r1 + (0, page.rect.height/2, 0, page.rect.height/2)
>>>
>>> src = fitz.open(""PyMuPDF.pdf"")
# show page 0 of this

>>>
>>> page.show_pdf_page(r1, src, 0, rotate=90)
>>> page.show_pdf_page(r2, src, 0, rotate=-90)
>>> doc.save(""show.pdf"")

6 If you need to also see annotations or fields in the target page, you can try and convert the source PDF to another PDF using Document.
convert_to_pdf().
The underlying MuPDF function of that method will convert these objects to normal page content.
Then use Page.
show_pdf_page() with the converted PDF page.

19.14. Page
303

PyMuPDF Documentation, Release 1.23.25

• Changed in v1.14.11: Parameter reuse_xref has been deprecated. Position the source rectangle
centered in target rectangle. Any rotation angle is now supported.

• Changed in v1.18.3: New parameter oc.

new_shape()

PDF only: Create a new Shape object for the page.

Return type

Shape

Returns

a new Shape to use for compound drawings. See description there.

search_for(needle, *, clip=None, quads=False, flags=TEXT_DEHYPHENATE |
TEXT_PRESERVE_WHITESPACE | TEXT_PRESERVE_LIGATURES |
TEXT_MEDIABOX_CLIP, textpage=None)

Search for needle on a page. Wrapper for TextPage.search().

Parameters

• needle (str) – Text to search for. May contain spaces. Upper / lower case is ig-
nored, but only works for ASCII characters: For example, “COMPÉTENCES” will
not be found if needle is “compétences” – “compÉtences” however will. Similar is
true for German umlauts and the like.

• clip (rect_like) – only search within this area. (New in v1.18.2)

• quads (bool) – Return object type Quad instead of Rect.

• flags (int) – Control the data extracted by the underlying TextPage. By default,
ligatures and white spaces are kept, and hyphenation8 is detected.

• textpage – use a previously created TextPage. This reduces execution time sig-
nificantly. If specified, the ‘flags’ and ‘clip’ arguments are ignored. If omitted, a
temporary textpage will be created. (New in v1.19.0)

Return type

list

Returns

A list of Rect or Quad objects, each of which – normally! – surrounds one occurrence
of needle. However: if parts of needle occur on more than one line, then a separate item
is generated for each these parts. So, if needle = ""search string"", two rectangles
may be generated.

Changes in v1.18.2:

• There no longer is a limit on the list length (removal of the hit_max parameter).

• If a word is hyphenated at a line break, it will still be found. E.g. the needle
“method” will be found even if hyphenated as “meth-od” at a line break, and two
rectangles will be returned: one surrounding “meth” (without the hyphen) and an-
other one surrounding “od”.

8 Hyphenation detection simply means that if the last character of a line is “-”, it will be assumed to be a continuation character. That character
will not be found by text searching with its default flag setting. Please take note, that a MuPDF line may not always be what you expect: words
separated by overly large gaps (e.g. caused by text justification) may constitute separate MuPDF lines. If then any of these words ends with a hyphen,
it will only be found by text searching if hyphenation is switched off.

304
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Note: The method supports multi-line text marker annotations: you can use the full returned list as one
single parameter for creating the annotation.

Caution:

• There is a tricky aspect: the search logic regards contiguous multiple occurrences of needle
as one: assuming needle is “abc”, and the page contains “abc” and “abcabc”, then only two
rectangles will be returned, one for “abc”, and a second one for “abcabc”.

• You can always use Page.get_textbox() to check what text actually is being surrounded by
each rectangle.

Note: A feature repeatedly asked for is supporting regular expressions when specifying the ""needle""
string: There is no way to do this. If you need something in that direction, first extract text in the desired
format and then subselect the result by matching with some regex pattern. Here is an example for matching
words:

>>> pattern = re.compile(r""..."")
# the regex pattern

>>> words = page.get_text(""words"")
# extract words on page

>>> matches = [w for w in words if pattern.search(w[4])]

The matches list will contain the words matching the given pattern. In the same way you can select
span[""text""] from the output of page.get_text(""dict"").

• Changed in v1.18.2: added clip parameter. Remove hit_max parameter. Add default “dehyphen-
ate”.

• Changed in v1.19.0: added TextPage parameter.

set_mediabox(r)

PDF only: Change the physical page dimension by setting mediabox in the page’s object definition.

Parameters

r (rect-like) – the new mediabox value.

Note: This method also removes the page’s other (optional) rectangles (cropbox, ArtBox, TrimBox and
Bleedbox) to prevent inconsistent situations. This will cause those to assume their default values.

Caution:
For non-empty pages this may have undesired effects, because the location of all content
depends on this value and will therefore change position or even disappear.

19.14. Page
305

PyMuPDF Documentation, Release 1.23.25

• New in v1.16.13

• Changed in v1.19.4: remove all other rectangle definitions.

set_cropbox(r)

PDF only: change the visible part of the page.

Parameters

r (rect_like) – the new visible area of the page. Note that this must be specified
in unrotated coordinates, not empty, nor infinite and be completely contained in the
Page.mediabox.

After execution (if the page is not rotated), Page.rect will equal this rectangle, but be shifted to the
top-left position (0, 0) if necessary. Example session:

>>> page = doc.new_page()
>>> page.rect
fitz.Rect(0.0, 0.0, 595.0, 842.0)
>>>
>>> page.cropbox
# cropbox and mediabox still equal

fitz.Rect(0.0, 0.0, 595.0, 842.0)
>>>
>>> # now set cropbox to a part of the page
>>> page.set_cropbox(fitz.Rect(100, 100, 400, 400))
>>> # this will also change the ""rect"" property:
>>> page.rect
fitz.Rect(0.0, 0.0, 300.0, 300.0)
>>>
>>> # but mediabox remains unaffected
>>> page.mediabox
fitz.Rect(0.0, 0.0, 595.0, 842.0)
>>>
>>> # revert CropBox change
>>> # either set it to MediaBox
>>> page.set_cropbox(page.mediabox)
>>> # or 'refresh' MediaBox: will remove all other rectangles
>>> page.set_mediabox(page.mediabox)

set_artbox(r)

set_bleedbox(r)

set_trimbox(r)

PDF only: Set the resp. rectangle in the page object. For the meaning of these objects see Adobe PDF
References, page 77. Parameter and restrictions are the same as for Page.set_cropbox().

• New in v1.19.4

rotation

Contains the rotation of the page in degrees (always 0 for non-PDF types). This is a copy of the value in
the PDF file. The PDF documentation says:

306
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

“The number of degrees by which the page should be rotated clockwise when displayed or
printed. The value must be a multiple of 90. Default value: 0.”

In PyMuPDF, we make sure that this attribute is always one of 0, 90, 180 or 270.

Type

int

cropbox_position

Contains the top-left point of the page’s /CropBox for a PDF, otherwise Point(0, 0).

Type

Point

cropbox

The page’s /CropBox for a PDF. Always the unrotated page rectangle is returned. For a non-PDF this
will always equal the page rectangle.

Note:
In PDF, the relationship between /MediaBox, /CropBox and page rectangle may sometimes be
confusing, please do lookup the glossary for MediaBox.

Type

Rect

artbox

bleedbox

trimbox

The page’s /ArtBox, /BleedBox, /TrimBox, respectively. If not provided, defaulting to Page.cropbox.

Type

Rect

mediabox_size

Contains the width and height of the page’s Page.mediabox for a PDF, otherwise the bottom-right coor-
dinates of Page.rect.

Type

Point

mediabox

The page’s mediabox for a PDF, otherwise Page.rect.

Type

Rect

Note: For most PDF documents and for all other document types, page.rect == page.cropbox ==
page.mediabox is true. However, for some PDFs the visible page is a true subset of mediabox. Also, if
the page is rotated, its Page.rect may not equal Page.cropbox. In these cases the above attributes help
to correctly locate page elements.

19.14. Page
307

PyMuPDF Documentation, Release 1.23.25

transformation_matrix

This matrix translates coordinates from the PDF space to the MuPDF space. For example, in PDF /Rect
[x0 y0 x1 y1] the pair (x0, y0) specifies the bottom-left point of the rectangle – in contrast to MuPDF’s
system, where (x0, y0) specify top-left. Multiplying the PDF coordinates with this matrix will deliver the
(Py-) MuPDF rectangle version. Obviously, the inverse matrix will again yield the PDF rectangle.

Type

Matrix

rotation_matrix

derotation_matrix

These matrices may be used for dealing with rotated PDF pages. When adding / inserting anything to a
PDF page, the coordinates of the unrotated page are always used. These matrices help translating between
the two states. Example: if a page is rotated by 90 degrees – what would then be the coordinates of the
top-left Point(0, 0) of an A4 page?

>>> page.set_rotation(90)
# rotate an ISO A4 page

>>> page.rect
Rect(0.0, 0.0, 842.0, 595.0)
>>> p = fitz.Point(0, 0)
# where did top-left point land?

>>> p * page.rotation_matrix
Point(842.0, 0.0)
>>>

Type

Matrix

first_link

Contains the first Link of a page (or None).

Type

Link

first_annot

Contains the first Annot of a page (or None).

Type

Annot

first_widget

Contains the first Widget of a page (or None).

Type

Widget

number

The page number.

Type

int

parent

The owning document object.

Type

Document

308
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

rect

Contains the rectangle of the page. Same as result of Page.bound().

Type

Rect

xref

The page’s PDF xref. Zero if not a PDF.

Type

Rect

19.14.2 Description of get_links() Entries

Each entry of the Page.get_links() list is a dictionary with the following keys:

• kind: (required) an integer indicating the kind of link. This is one of LINK_NONE, LINK_GOTO, LINK_GOTOR,
LINK_LAUNCH, or LINK_URI. For values and meaning of these names refer to Link Destination Kinds.

• from: (required) a Rect describing the “hot spot” location on the page’s visible representation (where the cursor
changes to a hand image, usually).

• page: a 0-based integer indicating the destination page. Required for LINK_GOTO and LINK_GOTOR, else
ignored.

• to: either a fitz.Point, specifying the destination location on the provided page, default is fitz.Point(0, 0), or a
symbolic (indirect) name. If an indirect name is specified, page = -1 is required and the name must be defined
in the PDF in order for this to work. Required for LINK_GOTO and LINK_GOTOR, else ignored.

• file: a string specifying the destination file. Required for LINK_GOTOR and LINK_LAUNCH, else ignored.

• uri: a string specifying the destination internet resource. Required for LINK_URI, else ignored. You should make
sure to start this string with an unambiguous substring, that classifies the subtype of the URL, like ""http://"",
""https://"", ""file://"", ""ftp://"", ""mailto:"", etc. Otherwise your browser will try to interpret the text and
come to unwanted / unexpected conclusions about the intended URL type.

• xref : an integer specifying the PDF xref of the link object. Do not change this entry in any way. Required for
link deletion and update, otherwise ignored. For non-PDF documents, this entry contains -1. It is also -1 for all
entries in the get_links() list, if any of the links is not supported by MuPDF - see Notes on Supporting Links.

19.14.3 Notes on Supporting Links

MuPDF’s support for links has changed in v1.10a. These changes affect link types LINK_GOTO and LINK_GOTOR.

Reading (pertains to method get_links() and the first_link property chain)

If MuPDF detects a link to another file, it will supply either a LINK_GOTOR or a LINK_LAUNCH link kind. In case
of LINK_GOTOR destination details may either be given as page number (eventually including position information),
or as an indirect destination.

If an indirect destination is given, then this is indicated by page = -1, and link.dest.dest will contain this name. The
dictionaries in the get_links() list will contain this information as the to value.

Internal links are always of kind LINK_GOTO. If an internal link specifies an indirect destination, it will always
be resolved and the resulting direct destination will be returned. Names are never returned for internal links, and
undefined destinations will cause the link to be ignored.

19.14. Page
309

PyMuPDF Documentation, Release 1.23.25

Writing

PyMuPDF writes (updates, inserts) links by constructing and writing the appropriate PDF object source. This makes
it possible to specify indirect destinations for LINK_GOTOR and LINK_GOTO link kinds (pre PDF 1.2 file formats
are not supported).

Warning: If a LINK_GOTO indirect destination specifies an undefined name, this link can later on not be found /
read again with MuPDF / PyMuPDF. Other readers however will detect it, but flag it as erroneous.

Indirect LINK_GOTOR destinations can in general of course not be checked for validity and are therefore always
accepted.

Example: How to insert a link pointing to another page in the same document

1. Determine the rectangle on the current page, where the link should be placed. This may be the bbox of an image
or some text.

2. Determine the target page number (“pno”, 0-based) and a Point on it, where the link should be directed to.

3. Create
a
dictionary
d = {""kind"":
fitz.LINK_GOTO, ""page"":
pno, ""from"":
bbox, ""to"":
point}.

4. Execute page.insert_link(d).

19.14.4 Homologous Methods of Document and Page

This is an overview of homologous methods on the Document and on the Page level.

Document Level
Page Level

Document.get_page_fonts(pno)
Page.get_fonts()

Document.get_page_images(pno)
Page.get_images()

Document.get_page_pixmap(pno, ...)
Page.get_pixmap()

Document.get_page_text(pno, ...)
Page.get_text()

Document.search_page_for(pno, ...)
Page.search_for()

The page number “pno” is a 0-based integer -∞ < pno < page_count.

Note:
Most document methods (left column) exist for convenience reasons, and are just wrappers for: Docu-
ment[pno].<page method>. So they load and discard the page on each execution.

However, the first two methods work differently. They only need a page’s object definition statement - the page itself will
not be loaded. So e.g. Page.get_fonts() is a wrapper the other way round and defined as follows: page.get_fonts
== page.parent.get_page_fonts(page.number).

This documentation covers all versions up to 1.23.25.

310
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.15 Pixmap

Pixmaps (“pixel maps”) are objects at the heart of MuPDF’s rendering capabilities. They represent plane rectangular
sets of pixels. Each pixel is described by a number of bytes (“components”) defining its color, plus an optional alpha
byte defining its transparency.

In PyMuPDF, there exist several ways to create a pixmap. Except the first one, all of them are available as overloaded
constructors. A pixmap can be created ...

1. from a document page (method Page.get_pixmap())

2. empty, based on Colorspace and IRect information

3. from a file

4. from an in-memory image

5. from a memory area of plain pixels

6. from an image inside a PDF document

7. as a copy of another pixmap

Note: A number of image formats is supported as input for points 3. and 4. above. See section Supported Input Image
Formats.

Have a look at the FAQ section to see some pixmap usage “at work”.

Method / Attribute
Short Description

Pixmap.clear_with()
clear parts of the pixmap

Pixmap.color_count()
determine used colors

Pixmap.color_topusage()
determine share of most used color

Pixmap.copy()
copy parts of another pixmap

Pixmap.gamma_with()
apply a gamma factor to the pixmap

Pixmap.invert_irect()
invert the pixels of a given area

Pixmap.pdfocr_save()
save the pixmap as an OCRed 1-page PDF

Pixmap.pdfocr_tobytes()
save the pixmap as an OCRed 1-page PDF

Pixmap.pil_save()
save as image using pillow

Pixmap.pil_tobytes()
write to bytes object using pillow

Pixmap.pixel()
return the value of a pixel

Pixmap.save()
save the pixmap in a variety of formats

Pixmap.set_alpha()
set alpha values

Pixmap.set_dpi()
set the image resolution

Pixmap.set_origin()
set pixmap x,y values

Pixmap.set_pixel()
set color and alpha of a pixel

Pixmap.set_rect()
set color and alpha of all pixels in a rectangle

Pixmap.shrink()
reduce size keeping proportions

Pixmap.tint_with()
tint the pixmap

Pixmap.tobytes()
return a memory area in a variety of formats

Pixmap.warp()
return a pixmap made from a quad inside

Pixmap.alpha
transparency indicator

Pixmap.colorspace
pixmap’s Colorspace

Pixmap.digest
MD5 hashcode of the pixmap

Pixmap.height
pixmap height

continues on next page

19.15. Pixmap
311

PyMuPDF Documentation, Release 1.23.25

Table 4 – continued from previous page

Method / Attribute
Short Description

Pixmap.interpolate
interpolation method indicator

Pixmap.is_monochrome
check if only black and white occur

Pixmap.is_unicolor
check if only one color occurs

Pixmap.irect
IRect of the pixmap

Pixmap.n
bytes per pixel

Pixmap.samples_mv
memoryview of pixel area

Pixmap.samples_ptr
Python pointer to pixel area

Pixmap.samples
bytes copy of pixel area

Pixmap.size
pixmap’s total length

Pixmap.stride
size of one image row

Pixmap.width
pixmap width

Pixmap.x
X-coordinate of top-left corner

Pixmap.xres
resolution in X-direction

Pixmap.y
Y-coordinate of top-left corner

Pixmap.yres
resolution in Y-direction

Class API

class Pixmap

__init__(self, colorspace, irect, alpha)

New empty pixmap: Create an empty pixmap of size and origin given by the rectangle. So, irect.top_left
designates the top left corner of the pixmap, and its width and height are irect.width resp. irect.height. Note
that the image area is not initialized and will contain crap data – use eg. clear_with() or set_rect()
to be sure.

Parameters

• colorspace (Colorspace) – colorspace.

• irect (irect_like) – The pixmap’s position and dimension.

• alpha (bool) – Specifies whether transparency bytes should be included. Default
is False.

__init__(self, colorspace, source)

Copy and set colorspace: Copy source pixmap converting colorspace. Any colorspace combination is
possible, but source colorspace must not be None.

Parameters

• colorspace (Colorspace) – desired target colorspace. This may also be None.
In this case, a “masking” pixmap is created: its Pixmap.samples will consist of
the source’s alpha bytes only.

• source (Pixmap) – the source pixmap.

__init__(self, source, mask)

• New in v1.18.18

Copy and add image mask: Copy source pixmap, add an alpha channel with transparency data from a
mask pixmap.

Parameters

• source (Pixmap) – pixmap without alpha channel.

312
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• mask (Pixmap) – a mask pixmap. Must be a graysale pixmap.

__init__(self, source, width, height[, clip])

Copy and scale: Copy source pixmap, scaling new width and height values – the image will appear
stretched or shrunk accordingly. Supports partial copying. The source colorspace may be None.

Parameters

• source (Pixmap) – the source pixmap.

• width (float) – desired target width.

• height (float) – desired target height.

• clip (irect_like) – restrict the resulting pixmap to this region of the scaled
pixmap.

Note:
If width or height do not represent integers (i.e. value.is_integer() != True), then the
resulting pixmap will have an alpha channel.

__init__(self, source, alpha=1)

Copy and add or drop alpha: Copy source and add or drop its alpha channel. Identical copy if alpha
equals source.alpha. If an alpha channel is added, its values will be set to 255.

Parameters

• source (Pixmap) – source pixmap.

• alpha (bool) – whether the target will have an alpha channel, default and manda-
tory if source colorspace is None.

Note:
A typical use includes separation of color and transparency bytes in separate pixmaps. Some
applications require this like e.g. wx.Bitmap.FromBufferAndAlpha() of wxPython:

>>> # 'pix' is an RGBA pixmap
>>> pixcolors = fitz.Pixmap(pix, 0)
# extract the RGB part (drop alpha)

>>> pixalpha = fitz.Pixmap(None, pix)
# extract the alpha part

>>> bm = wx.Bitmap.FromBufferAndAlpha(pix.width, pix.height, pixcolors.samples,

˓→ pixalpha.samples)

__init__(self, filename)

From a file: Create a pixmap from filename. All properties are inferred from the input. The origin of the
resulting pixmap is (0, 0).

Parameters

filename (str) – Path of the image file.

__init__(self, stream)

From memory: Create a pixmap from a memory area. All properties are inferred from the input. The
origin of the resulting pixmap is (0, 0).

Parameters

stream (bytes,bytearray,BytesIO) – Data containing a complete, valid image.
Could have been created by e.g. stream = bytearray(open(‘image.file’, ‘rb’).read()).
Type bytes is supported in Python 3 only, because bytes == str in Python 2 and the
method will interpret the stream as a filename.

19.15. Pixmap
313

PyMuPDF Documentation, Release 1.23.25

Changed in version 1.14.13: io.BytesIO is now also supported.

__init__(self, colorspace, width, height, samples, alpha)

From plain pixels: Create a pixmap from samples. Each pixel must be represented by a number of bytes
as controlled by the colorspace and alpha parameters. The origin of the resulting pixmap is (0, 0). This
method is useful when raw image data are provided by some other program – see FAQ.

Parameters

• colorspace (Colorspace) – Colorspace of image.

• width (int) – image width

• height (int) – image height

• samples (bytes,bytearray,BytesIO) – an area containing all pixels of the im-
age. Must include alpha values if specified.

Changed in version 1.14.13: (1) io.BytesIO can now also be used. (2) Data are now
copied to the pixmap, so may safely be deleted or become unavailable.

• alpha (bool) – whether a transparency channel is included.

Note:

1. The following equation must be true: (colorspace.n + alpha) * width * height == len(samples).

2. Starting with version 1.14.13, the samples data are copied to the pixmap.

__init__(self, doc, xref )

From a PDF image: Create a pixmap from an image contained in PDF doc identified by its xref. All
pimap properties are set by the image. Have a look at extract-img1.py and extract-img2.py to see how this
can be used to recover all of a PDF’s images.

Parameters

• doc (Document) – an opened PDF document.

• xref (int) – the xref of an image object. For example, you can make a list of
images used on a particular page with Document.get_page_images(), which
also shows the xref numbers of each image.

clear_with([value[, irect]])

Initialize the samples area.

Parameters

• value (int) – if specified, values from 0 to 255 are valid. Each color byte of each
pixel will be set to this value, while alpha will be set to 255 (non-transparent) if
present. If omitted, then all bytes (including any alpha) are cleared to 0x00.

• irect (irect_like) – the area to be cleared. Omit to clear the whole pixmap.
Can only be specified, if value is also specified.

tint_with(black, white)

Colorize a pixmap by replacing black and / or white with colors given as sRGB integer values. Only
colorspaces CS_GRAY and CS_RGB are supported, others are ignored with a warning.

If the colorspace is CS_GRAY, the average (red + green + blue)/3 will be taken. The pixmap will be changed
in place.

Parameters

314
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• black (int) – replace black with this value.
Specifying 0x000000 makes no
changes.

• white (int) – replace white with this value. Specifying 0xFFFFFF makes no
changes.

Examples:

• tint_with(0x000000, 0xFFFFFF) is a no-op.

• tint_with(0x00FF00, 0xFFFFFF) changes black to green, leaves white intact.

• tint_with(0xFF0000, 0x0000FF) changes black to red and white to blue.

gamma_with(gamma)

Apply a gamma factor to a pixmap, i.e. lighten or darken it. Pixmaps with colorspace None are ignored
with a warning.

Parameters

gamma (float) – gamma = 1.0 does nothing, gamma < 1.0 lightens, gamma > 1.0
darkens the image.

shrink(n)

Shrink the pixmap by dividing both, its width and height by 2:sup:n.

Parameters

n (int) – determines the new pixmap (samples) size. For example, a value of 2 divides
width and height by 4 and thus results in a size of one 16th of the original. Values less
than 1 are ignored with a warning.

Note:
Use this methods to reduce a pixmap’s size retaining its proportion. The pixmap is changed “in
place”. If you want to keep original and also have more granular choices, use the resp. copy constructor
above.

pixel(x, y)

New in version:: 1.14.5: Return the value of the pixel at location (x, y) (column, line).

Parameters

• x (int) – the column number of the pixel. Must be in range(pix.width).

• y (int) – the line number of the pixel, Must be in range(pix.height).

Return type

list

Returns

a list of color values and, potentially the alpha value. Its length and content depend on
the pixmap’s colorspace and the presence of an alpha. For RGBA pixmaps the result
would e.g. be [r, g, b, a]. All items are integers in range(256).

set_pixel(x, y, color)

New in version 1.14.7: Manipulate the pixel at location (x, y) (column, line).

Parameters

• x (int) – the column number of the pixel. Must be in range(pix.width).

• y (int) – the line number of the pixel. Must be in range(pix.height).

19.15. Pixmap
315

PyMuPDF Documentation, Release 1.23.25

• color (sequence) – the desired pixel value given as a sequence of integers in
range(256). The length of the sequence must equal Pixmap.n, which includes
any alpha byte.

set_rect(irect, color)

New in version 1.14.8: Set the pixels of a rectangle to a value.

Parameters

• irect (irect_like) – the rectangle to be filled with the value. The actual area is
the intersection of this parameter and Pixmap.irect. For an empty intersection
(or an invalid parameter), no change will happen.

• color (sequence) – the desired value, given as a sequence of integers in
range(256). The length of the sequence must equal Pixmap.n, which includes
any alpha byte.

Return type

bool

Returns

False if the rectangle was invalid or had an empty intersection with Pixmap.irect, else
True.

Note:

1. This method is equivalent to Pixmap.set_pixel() executed for each pixel in the rectangle, but is
obviously very much faster if many pixels are involved.

2. This method can be used similar to Pixmap.clear_with() to initialize a pixmap with a certain
color like this: pix.set_rect(pix.irect, (255, 255, 0)) (RGB example, colors the complete pixmap with
yellow).

set_origin(x, y)

• New in v1.17.7

Set the x and y values of the pixmap’s top-left point.

Parameters

• x (int) – x coordinate

• y (int) – y coordinate

set_dpi(xres, yres)

• New in v1.16.17

• Changed in v1.18.0: When saving as a PNG image, these values will be stored now.

Set the resolution (dpi) in x and y direction.

Parameters

• xres (int) – resolution in x direction.

• yres (int) – resolution in y direction.

set_alpha(alphavalues, premultiply=1, opaque=None)

• Changed in v 1.18.13

316
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Change the alpha values. The pixmap must have an alpha channel.

Parameters

• alphavalues (bytes,bytearray,BytesIO) – the new alpha values. If provided,
its length must be at least width * height. If omitted (None), all alpha values are
set to 255 (no transparency). Changed in version 1.14.13: io.BytesIO is now also
accepted.

• premultiply (bool) – New in v1.18.13: whether to premultiply color components
with the alpha value.

• opaque (list,tuple) – ignore the alpha value and set this color to fully transpar-
ent. A sequence of integers in range(256) with a length of Pixmap.n. Default
is None. For example, a typical choice for RGB would be opaque=(255, 255,
255) (white).

invert_irect([irect])

Invert the color of all pixels in IRect irect. Will have no effect if colorspace is None.

Parameters

irect (irect_like) – The area to be inverted. Omit to invert everything.

copy(source, irect)

Copy the irect part of the source pixmap into the corresponding area of this one. The two pixmaps may
have different dimensions and can each have CS_GRAY or CS_RGB colorspaces, but they currently must
have the same alpha property2. The copy mechanism automatically adjusts discrepancies between source
and target like so:

If copying from CS_GRAY to CS_RGB, the source gray-shade value will be put into each of the three rgb
component bytes. If the other way round, (r + g + b) / 3 will be taken as the gray-shade value of the target.

Between irect and the target pixmap’s rectangle, an “intersection” is calculated at first. This takes into
account the rectangle coordinates and the current attribute values Pixmap.x and Pixmap.y (which you
are free to modify for this purpose via Pixmap.set_origin()). Then the corresponding data of this
intersection are copied. If the intersection is empty, nothing will happen.

Parameters

• source (Pixmap) – source pixmap.

• irect (irect_like) – The area to be copied.

Note:
Example: Suppose you have two pixmaps, pix1 and pix2 and you want to copy the lower right
quarter of pix2 to pix1 such that it starts at the top-left point of pix1. Use the following snippet:

>>> # safeguard: set top-left of pix1 and pix2 to (0, 0)
>>> pix1.set_origin(0, 0)
>>> pix2.set_origin(0, 0)
>>> # compute top-left coordinates of pix2 region to copy
>>> x1 = int(pix2.width / 2)
>>> y1 = int(pix2.height / 2)
>>> # shift top-left of pix2 such, that the to-be-copied
>>> # area starts at (0, 0):
>>> pix2.set_origin(-x1, -y1)
>>> # now copy ...
>>> pix1.copy(pix2, (0, 0, x1, y1))

2 To also set the alpha property, add an additional step to this method by dropping or adding an alpha channel to the result.

19.15. Pixmap
317

PyMuPDF Documentation, Release 1.23.25

save(filename, output=None, jpg_quality=95)

• Changed in v1.22.0: Added direct support of JPEG images. Image quality can be controlled via
parameter “jpg_quality”.

Save pixmap as an image file. Depending on the output chosen, only some or all colorspaces are supported
and different file extensions can be chosen. Please see the table below.

Parameters

• filename (str,Path,file) – The file to save to. May be provided as a string, as
a pathlib.Path or as a Python file object. In the latter two cases, the filename is
taken from the resp. object. The filename’s extension determines the image format,
which can be overruled by the output parameter.

• output (str) – The desired image format. The default is the filename’s extension.
If both, this value and the file extension are unsupported, an exception is raised. For
possible values see Supported Output Image Formats.

• jpg_quality (int) – The desired image quality, default 95. Only applies to JPEG
images, else ignored. This parameter trades quality against file size. A value of 98
is close to lossless. Higher values should not lead to better quality.

Raises

ValueError – For unsupported image formats.

tobytes(output='png', jpg_quality=95)

• New in version 1.14.5: Return the pixmap as a bytes memory object of the specified format – similar
to save().

• Changed in v1.22.0: Added direct JPEG support. Image quality can be influenced via new param-
eter “jpg_quality”.

Parameters

• output (str) – The desired image format. The default is “png”. For possible
values see Supported Output Image Formats.

• jpg_quality (int) – The desired image quality, default 95. Only applies to JPEG
images, else ignored. This parameter trades quality against file size. A value of 98
is close to lossless. Higher values should not lead to better quality.

• output – The requested image format. The default is “png”. For other possible
values see Supported Output Image Formats.

Raises

ValueError – For unsupported image formats.

Return type

bytes

318
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

pdfocr_save(filename, compress=True, language='eng', tessdata=None)

• New in v1.19.0

• Changed in v1.22.5: Support of new parameter for Tesseract’s tessdata.

Perform text recognition using Tesseract and save the image as a 1-page PDF with an OCR text layer.

Parameters

• filename (str,fp) – identifies the file to save to. May be either a string or a
pointer to a file opened with “wb” (includes io.BytesIO() objects).

• compress (bool) – whether to compress the resulting PDF, default is True.

• language (str) – the languages occurring in the image. This must be specified
in Tesseract format. Default is “eng” for English. Use “+”-separated Tesseract
language codes for multiple languages, like “eng+spa” for English and Spanish.

• tessdata (str) – folder name of Tesseract’s language support. If omitted, this
information must be present as environment variable TESSDATA_PREFIX.

Note: Will fail if Tesseract is not installed or if the environment variable “TESSDATA_PREFIX” is not
set to the tessdata folder name and not provided as parameter.

pdfocr_tobytes(compress=True, language='eng', tessdata=None)

• New in v1.19.0

• Changed in v1.22.5: Support of new parameter for Tesseract’s tessdata.

Perform text recognition using Tesseract and convert the image to a 1-page PDF with an OCR text layer.
Internally invokes Pixmap.pdfocr_save().

Returns

A 1-page PDF file in memory. Could be opened like doc=fitz.open(""pdf"", pix.
pdfocr_tobytes()), and text extractions could be performed on its page=doc[0].

Note: Another possible use is insertion into some pdf. The following snippet reads the
images of a folder and stores them as pages in a new PDF that contain an OCR text layer:

doc = fitz.open()
for imgfile in os.listdir(folder):
pix = fitz.Pixmap(imgfile)
imgpdf = fitz.open(""pdf"", pix.pdfocr_tobytes())
doc.insert_pdf(imgpdf)
pix = None
imgpdf.close()
doc.save(""ocr-images.pdf"")

pil_save(*args, unmultiply=False, **kwargs)

• New in v1.17.3

Write the pixmap as an image file using Pillow. Use this method for output unsupported by MuPDF.
Examples are

• Formats JPX, J2K, WebP, etc.

19.15. Pixmap
319

PyMuPDF Documentation, Release 1.23.25

• Storing EXIF information.

• If you do not provide dpi information, the values xres, yres stored with the pixmap are automatically
used.

A simple example: pix.pil_save(""some.webp"", optimize=True, dpi=(150, 150)).

Parameters

unmultiply (bool) – If the pixmap’s colorspace is RGB with transparency, the alpha
values may or may not already be multiplied into the color components ref/green/blue
(called “premultiplied”). To enforce undoing premultiplication, set this parameter to
True. To learn about some background, e.g. look for “Premultiplied alpha” here.

For details on other parameters see the Pillow documentation.

Since v1.22.0, PyMuPDF supports JPEG output directly. We recommended to no longer use this method
for JPEG output – for performance reasons and for avoiding unnecessary external dependencies.

Raises

ImportError – if Pillow is not installed.

pil_tobytes(*args, unmultiply=False, **kwargs)

• New in v1.17.3

Return an image as a bytes object in the specified format using Pillow. For example stream = pix.
pil_tobytes(format=""WEBP"", optimize=True, dpi=(150, 150)). Also see above. For details
on other parameters see the Pillow documentation.

Raises

ImportError – if Pillow is not installed.

Return type

bytes

warp(quad, width, height)

• New in v1.19.3

Return a new pixmap by “warping” the quad such that the quad corners become the new pixmap’s corners.
The target pixmap’s IRect will be (0, 0, width, height).

Parameters

• quad (quad_like) – a convex quad with coordinates inside Pixmap.irect (in-
cluding the border points).

• width (int) – desired resulting width.

• height (int) – desired resulting height.

Returns

A new pixmap where the quad corners are mapped to the pixmap corners in a clockwise
fashion: quad.ul -> irect.tl, quad.ur -> irect.tr, etc.

Return type

320
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Pixmap

color_count(colors=False, clip=None)

• New in v1.19.2

• Changed in v1.19.3

Determine the pixmap’s unique colors and their count.

Parameters

• colors (bool) – (changed in v1.19.3) If True return a dictionary of color pixels
and their usage count, else just the number of unique colors.

• clip (rect_like) – a rectangle inside Pixmap.irect. If provided, only those
pixels are considered. This allows inspecting sub-rectangles of a given pixmap
directly – instead of building sub-pixmaps.

Return type

dict or int

Returns

either the number of colors, or a dictionary with the items pixel:
count. The pixel
key is a bytes object of length Pixmap.n.

Note:
To recover the tuple of a pixel, use tuple(colors.keys()[i]) for the i-th
item.

• The response time depends on the pixmap’s samples size and may be more than a
second for very large pixmaps.

• Where applicable, pixels with different alpha values will be treated as different col-
ors.

color_topusage(clip=None)

• New in v1.19.3

Return the most frequently used color and its relative frequency.

Parameters

clip (rect_like) – A rectangle inside Pixmap.irect. If provided, only those pix-
els are considered. This allows inspecting sub-rectangles of a given pixmap directly –
instead of building sub-pixmaps.

Return type

tuple

Returns

A tuple (ratio, pixel) where 0 < ratio <= 1 and pixel is the pixel value of

19.15. Pixmap
321

PyMuPDF Documentation, Release 1.23.25

the color. Use this to decide if the image is “almost” unicolor: a response (0.95,
b""x00x00x00"") means that 95% of all pixels are black. See an example here How to
Use Pixmaps: Checking Text Visibility.

alpha

Indicates whether the pixmap contains transparency information.

Type

bool

digest

The MD5 hashcode (16 bytes) of the pixmap. This is a technical value used for unique identifications.

Type

bytes

colorspace

The colorspace of the pixmap. This value may be None if the image is to be treated as a so-called image
mask or stencil mask (currently happens for extracted PDF document images only).

Type

Colorspace

stride

Contains the length of one row of image data in Pixmap.samples. This is primarily used for calculation
purposes. The following expressions are true:

• len(samples) == height * stride

• width * n == stride

Type

int

is_monochrome

• New in v1.19.2

Is True for a gray pixmap which only has the colors black and white.

Type

bool

is_unicolor

• New in v1.19.2

Is True if all pixels are identical (any colorspace). Where applicable, pixels with different alpha values
will be treated as different colors.

Type

bool

irect

Contains the IRect of the pixmap.

Type

IRect

322
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

samples

The color and (if Pixmap.alpha is true) transparency values for all pixels. It is an area of width *
height * n bytes. Each n bytes define one pixel. Each successive n bytes yield another pixel in scanline
order. Subsequent scanlines follow each other with no padding. E.g. for an RGBA colorspace this means,
samples is a sequence of bytes like ..., R, G, B, A, ..., and the four byte values R, G, B, A define one pixel.

This area can be passed to other graphics libraries like PIL (Python Imaging Library) to do additional
processing like saving the pixmap in other image formats.

Note:

• The underlying data is typically a large memory area, from which a bytes copy is made for this
attribute ... each time you access it: for example an RGB-rendered letter page has a samples size of
almost 1.4 MB. So consider assigning a new variable to it or use the memoryview version Pixmap.
samples_mv (new in v1.18.17).

• Any changes to the underlying data are available only after accessing this attribute again. This is
different from using the memoryview version.

Type

bytes

samples_mv

• New in v1.18.17

Like Pixmap.samples, but in Python memoryview format. It is built pointing to the memory in the
pixmap – not from a copy of it. So its creation speed is independent from the pixmap size, and any
changes to pixels will be available immediately.

Copies like bytearray(pix.samples_mv), or bytes(pixmap.samples_mv) are equivalent to and can
be used in place of pix.samples.

We also have len(pix.samples) == len(pix.samples_mv).

Look at this example from a 2 MB JPEG: the memoryview is ten thousand times faster:

In [3]: %timeit len(pix.samples_mv)
367 ns ± 1.75 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
In [4]: %timeit len(pix.samples)
3.52 ms ± 57.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

Type

memoryview

samples_ptr

• New in v1.18.17

Python pointer to the pixel area. This is a special integer format, which can be used by supporting appli-
cations (such as PyQt) to directly address the samples area and thus build their images extremely fast. For
example:

img = QtGui.QImage(pix.samples, pix.width, pix.height, format) # (1)
img = QtGui.QImage(pix.samples_ptr, pix.width, pix.height, format) # (2)

19.15. Pixmap
323

PyMuPDF Documentation, Release 1.23.25

Both of the above lead to the same Qt image, but (2) can be many hundred times faster, because it avoids
an additional copy of the pixel area.

Type

int

size

Contains len(pixmap). This will generally equal len(pix.samples) plus some platform-specific value for
defining other attributes of the object.

Type

int

width

w

Width of the region in pixels.

Type

int

height

h

Height of the region in pixels.

Type

int

x

X-coordinate of top-left corner in pixels. Cannot directly be changed – use Pixmap.set_origin().

Type

int

y

Y-coordinate of top-left corner in pixels. Cannot directly be changed – use Pixmap.set_origin().

Type

int

n

Number of components per pixel. This number depends on colorspace and alpha. If colorspace is not
None (stencil masks), then Pixmap.n - Pixmap.alpha == pixmap.colorspace.n is true. If colorspace is
None, then n == alpha == 1.

Type

int

xres

Horizontal resolution in dpi (dots per inch). Please also see resolution. Cannot directly be changed –
use Pixmap.set_dpi().

Type

int

yres

Vertical resolution in dpi (dots per inch). Please also see resolution. Cannot directly be changed – use
Pixmap.set_dpi().

324
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Type

int

interpolate

An information-only boolean flag set to True if the image will be drawn using “linear interpolation”. If
False “nearest neighbour sampling” will be used.

Type

bool

19.15.1 Supported Input Image Formats

The following file types are supported as input to construct pixmaps: BMP, JPEG, GIF, TIFF, JXR, JPX, PNG,
PAM and all of the Portable Anymap family (PBM, PGM, PNM, PPM). This support is two-fold:

1. Directly create a pixmap with Pixmap(filename) or Pixmap(byterray). The pixmap will then have properties as
determined by the image.

2. Open such files with fitz.open(...). The result will then appear as a document containing one single page. Cre-
ating a pixmap of this page offers all the options available in this context: apply a matrix, choose colorspace and
alpha, confine the pixmap to a clip area, etc.

SVG images are only supported via method 2 above, not directly as pixmaps. But remember: the result of this is a
raster image as is always the case with pixmaps1.

19.15.2 Supported Output Image Formats

A number of image output formats are supported. You have the option to either write an image directly to a file
(Pixmap.save()), or to generate a bytes object (Pixmap.tobytes()). Both methods accept a string identifying the
desired format (Format column below). Please note that not all combinations of pixmap colorspace, transparency
support (alpha) and image format are possible.

Format
Colorspaces
alpha
Extensions
Description

jpg, jpeg
gray, rgb, cmyk
no
.jpg, .jpeg
Joint Photographic Experts Group

pam
gray, rgb, cmyk
yes
.pam
Portable Arbitrary Map

pbm
gray, rgb
no
.pbm
Portable Bitmap

pgm
gray, rgb
no
.pgm
Portable Graymap

png
gray, rgb
yes
.png
Portable Network Graphics

pnm
gray, rgb
no
.pnm
Portable Anymap

ppm
gray, rgb
no
.ppm
Portable Pixmap

ps
gray, rgb, cmyk
no
.ps
Adobe PostScript Image

psd
gray, rgb, cmyk
yes
.psd
Adobe Photoshop Document

Note:

• Not all image file types are supported (or at least common) on all OS platforms. E.g. PAM and the Portable
Anymap formats are rare or even unknown on Windows.

• Especially pertaining to CMYK colorspaces, you can always convert a CMYK pixmap to an RGB pixmap with
rgb_pix = fitz.Pixmap(fitz.csRGB, cmyk_pix) and then save that in the desired format.

1 If you need a vector image from the SVG, you must first convert it to a PDF. Try Document.convert_to_pdf(). If this is not good enough,
look for other SVG-to-PDF conversion tools like the Python packages svglib, CairoSVG, Uniconvertor or the Java solution Apache Batik. Have a
look at our Wiki for more examples.

19.15. Pixmap
325

PyMuPDF Documentation, Release 1.23.25

• As can be seen, MuPDF’s image support range is different for input and output. Among those supported both
ways, PNG and JPEG are probably the most popular.

• We also recommend using “ppm” formats as input to tkinter’s PhotoImage method like this: tkimg = tkin-
ter.PhotoImage(data=pix.tobytes(“ppm”)) (also see the tutorial). This is very fast (60 times faster than PNG).

This documentation covers all versions up to 1.23.25.

19.16 Point

Point represents a point in the plane, defined by its x and y coordinates.

Attribute / Method
Description

Point.distance_to()
calculate distance to point or rect

Point.norm()
the Euclidean norm

Point.transform()
transform point with a matrix

Point.abs_unit
same as unit, but positive coordinates

Point.unit
point coordinates divided by abs(point)

Point.x
the X-coordinate

Point.y
the Y-coordinate

Class API

class Point

__init__(self )

__init__(self, x, y)

__init__(self, point)

__init__(self, sequence)

Overloaded constructors.

Without parameters, Point(0, 0) will be created.

With another point specified, a new copy will be created, “sequence” is a Python sequence of
2 numbers (see Using Python Sequences as Arguments in PyMuPDF).

Parameters

• x (float) – x coordinate of the point

• y (float) – y coordinate of the point

distance_to(x[, unit])

Calculate the distance to x, which may be point_like or rect_like. The distance is given
in units of either pixels (default), inches, centimeters or millimeters.

Parameters

326
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• x (point_like,rect_like) – to which to compute the distance.

• unit (str) – the unit to be measured in. One of “px”, “in”, “cm”, “mm”.

Return type

float

Returns

the distance to x. If this is rect_like, then the distance

• is the length of the shortest line connecting to one of the rectangle sides

• is calculated to the finite version of it

• is zero if it contains the point

norm()

• New in version 1.16.0

Return the Euclidean norm (the length) of the point as a vector. Equals result of function abs().

transform(m)

Apply a matrix to the point and replace it with the result.

Parameters

m (matrix_like) – The matrix to be applied.

Return type

Point

unit

Result of dividing each coordinate by norm(point), the distance of the point to (0,0). This is a vector of
length 1 pointing in the same direction as the point does. Its x, resp. y values are equal to the cosine, resp.
sine of the angle this vector (and the point itself) has with the x axis.

Type

Point

19.16. Point
327

PyMuPDF Documentation, Release 1.23.25

abs_unit

Same as unit above, replacing the coordinates with their absolute values.

Type

Point

x

The x coordinate

Type

float

y

The y coordinate

Type

float

Note:

• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also
refer to Using Python Sequences as Arguments in PyMuPDF.

• Rectangles can be used with arithmetic operators – see chapter Operator Algebra for Geometry Objects.

This documentation covers all versions up to 1.23.25.

19.17 Quad

Represents a four-sided mathematical shape (also called “quadrilateral” or “tetragon”) in the plane, defined as a se-
quence of four Point objects ul, ur, ll, lr (conveniently called upper left, upper right, lower left, lower right).

Quads can be obtained as results of text search methods (Page.search_for()), and they are used to define text
marker annotations (see e.g. Page.add_squiggly_annot() and friends), and in several draw methods (like Page.
draw_quad() / Shape.draw_quad(), Page.draw_oval()/ Shape.draw_quad()).

Note:

• If the corners of a rectangle are transformed with a rotation, scale or translation Matrix, then the resulting quad
is rectangular (= congruent to a rectangle), i.e. all of its corners again enclose angles of 90 degrees. Property
Quad.is_rectangular checks whether a quad can be thought of being the result of such an operation.

• This is not true for all matrices: e.g. shear matrices produce parallelograms, and non-invertible matrices deliver
“degenerate” tetragons like triangles or lines.

• Attribute Quad.rect obtains the enveloping rectangle. Vice versa, rectangles now have attributes Rect.quad,
resp. IRect.quad to obtain their respective tetragon versions.

328
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Methods / Attributes
Short Description

Quad.transform()
transform with a matrix

Quad.morph()
transform with a point and matrix

Quad.ul
upper left point

Quad.ur
upper right point

Quad.ll
lower left point

Quad.lr
lower right point

Quad.is_convex
true if quad is a convex set

Quad.is_empty
true if quad is an empty set

Quad.is_rectangular
true if quad is congruent to a rectangle

Quad.rect
smallest containing Rect

Quad.width
the longest width value

Quad.height
the longest height value

Class API

class Quad

__init__(self )

__init__(self, ul, ur, ll, lr)

__init__(self, quad)

__init__(self, sequence)

Overloaded constructors: “ul”, “ur”, “ll”, “lr” stand for point_like objects (the four corners), “sequence”
is a Python sequence with four point_like objects.

If “quad” is specified, the constructor creates a new copy of it.

Without parameters, a quad consisting of 4 copies of Point(0, 0) is created.

transform(matrix)

Modify the quadrilateral by transforming each of its corners with a matrix.

Parameters

matrix (matrix_like) – the matrix.

morph(fixpoint, matrix)

(New in version 1.17.0) “Morph” the quad with a matrix-like using a point-like as fixed point.

Parameters

• fixpoint (point_like) – the point.

• matrix (matrix_like) – the matrix.

Returns

a new quad (no operation if this is the infinite quad).

rect

The smallest rectangle containing the quad, represented by the blue area in the following picture.

19.17. Quad
329

PyMuPDF Documentation, Release 1.23.25

Type

Rect

ul

Upper left point.

Type

Point

ur

Upper right point.

Type

Point

ll

Lower left point.

Type

Point

lr

Lower right point.

Type

Point

is_convex

• New in version 1.16.1

Checks if for any two points of the quad, all points on their connecting line also belong to the quad.

330
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Type

bool

is_empty

True if enclosed area is zero, which means that at least three of the four corners are on the same line. If
this is false, the quad may still be degenerate or not look like a tetragon at all (triangles, parallelograms,
trapezoids, ...).

Type

bool

is_rectangular

True if all corner angles are 90 degrees. This implies that the quad is convex and not empty.

Type

bool

width

The maximum length of the top and the bottom side.

Type

float

height

The maximum length of the left and the right side.

Type

float

19.17.1 Remark

This class adheres to the sequence protocol, so components can be dealt with via their indices, too. Also refer to Using
Python Sequences as Arguments in PyMuPDF.

19.17.2 Algebra and Containment Checks

Starting with v1.19.6, quads can be used in algebraic expressions like the other geometry object – the respective re-
strictions have been lifted. In particular, all the following combinations of containment checking are now possible:

{Point | IRect | Rect | Quad} in {IRect | Rect | Quad}

Please note the following interesting detail:

For a rectangle, only its top-left point belongs to it. Since v1.19.0, rectangles are defined to be “open”, such that its
bottom and its right edge do not belong to it – including the respective corners. But for quads there exists no such
notion like “openness”, so we have the following somewhat surprising implication:

>>> rect.br in rect
False
>>> # but:
>>> rect.br in rect.quad
True

This documentation covers all versions up to 1.23.25.

19.17. Quad
331

PyMuPDF Documentation, Release 1.23.25

19.18 Rect

Rect represents a rectangle defined by four floating point numbers x0, y0, x1, y1. They are treated as being coordinates
of two diagonally opposite points. The first two numbers are regarded as the “top left” corner P(x0,y0) and P(x1,y1) as the
“bottom right” one. However, these two properties need not coincide with their intuitive meanings – read on.

The following remarks are also valid for IRect objects:

• A rectangle in the sense of (Py-) MuPDF (and PDF) always has borders parallel to the x- resp. y-axis. A
general orthogonal tetragon is not a rectangle – in contrast to the mathematical definition.

• The constructing points can be (almost! – see below) anywhere in the plane – they need not even be different,
and e.g. “top left” need not be the geometrical “north-western” point.

• Units are in points, where 72 points is 1 inch.

• For any given quadruple of numbers, the geometrically “same” rectangle can be defined in four different
ways:

1. Rect(P(x0,y0), P(x1,y1))

2. Rect(P(x1,y1), P(x0,y0))

3. Rect(P(x0,y1), P(x1,y0))

4. Rect(P(x1,y0), P(x0,y1))

(Changed in v1.19.0) Hence some classification:

• A rectangle is called valid if x0 <= x1 and y0 <= y1 (i.e. the bottom right point is “south-eastern” to the top
left one), otherwise invalid. Of the four alternatives above, only the first is valid. Please take into account, that
in MuPDF’s coordinate system, the y-axis is oriented from top to bottom. Invalid rectangles have been called
infinite in earlier versions.

• A rectangle is called empty if x0 >= x1 or y0 >= y1. This implies, that invalid rectangles are also always
empty. And width (resp. height) is set to zero if x0 > x1 (resp. y0 > y1). In previous versions, a rectangle
was empty only if one of width or height was zero.

• Rectangle coordinates cannot be outside the number range from FZ_MIN_INF_RECT = -2147483648 to
FZ_MAX_INF_RECT = 2147483520. Both values have been chosen, because they are the smallest / largest 32bit
integers that survive C float conversion roundtrips. In previous versions there was no limit for coordinate values.

• There is exactly one “infinite” rectangle, defined by x0 = y0 = FZ_MIN_INF_RECT and x1 = y1 =
FZ_MAX_INF_RECT. It contains every other rectangle. It is mainly used for technical purposes – e.g. when a
function call should ignore a formally required rectangle argument. This rectangle is not empty.

• Rectangles are (semi-) open: The right and the bottom edges (including the resp. corners) are not considered
part of the rectangle. This implies, that only the top-left corner (x0, y0) can ever belong to the rectangle - the
other three corners never do. An empty rectangle contains no corners at all.

• Here is an overview of the changes.

332
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Notion
Versions < 1.19.0
Versions 1.19.*

empty
x0 = x1 or y0 = y1
x0 >= x1 or y0 >= y1 – includes invalid rects

valid
n/a
x0 <= x1 and y0 <= y1

infinite
all rects where x0 > x1 or y1
> y0

exactly one infinite rect / irect!

coordinate
values

all numbers
FZ_MIN_INF_RECT <= number <=
FZ_MAX_INF_RECT

borders,
corners

are parts of the rectangle
right and bottom corners and edges are outside

• There are new top level functions defining infinite and standard empty rectangles and quads, see

INFINITE_RECT() and friends.

Methods / Attributes
Short Description

Rect.contains()
checks containment of point_likes and rect_likes

Rect.get_area()
calculate rectangle area

Rect.include_point()
enlarge rectangle to also contain a point

Rect.include_rect()
enlarge rectangle to also contain another one

Rect.intersect()
common part with another rectangle

Rect.intersects()
checks for non-empty intersections

Rect.morph()
transform with a point and a matrix

Rect.torect()
the matrix that transforms to another rectangle

Rect.norm()
the Euclidean norm

Rect.normalize()
makes a rectangle valid

Rect.round()
create smallest IRect containing rectangle

Rect.transform()
transform rectangle with a matrix

Rect.bottom_left
bottom left point, synonym bl

Rect.bottom_right
bottom right point, synonym br

Rect.height
rectangle height

Rect.irect
equals result of method round()

Rect.is_empty
whether rectangle is empty

Rect.is_valid
whether rectangle is valid

Rect.is_infinite
whether rectangle is infinite

Rect.top_left
top left point, synonym tl

Rect.top_right
top_right point, synonym tr

Rect.quad
Quad made from rectangle corners

Rect.width
rectangle width

Rect.x0
left corners’ x coordinate

Rect.x1
right corners’ x -coordinate

Rect.y0
top corners’ y coordinate

Rect.y1
bottom corners’ y coordinate

Class API

class Rect

__init__(self )

__init__(self, x0, y0, x1, y1)

__init__(self, top_left, bottom_right)

19.18. Rect
333

PyMuPDF Documentation, Release 1.23.25

__init__(self, top_left, x1, y1)

__init__(self, x0, y0, bottom_right)

__init__(self, rect)

__init__(self, sequence)

Overloaded constructors: top_left, bottom_right stand for point_like objects, “sequence” is a Python
sequence type of 4 numbers (see Using Python Sequences as Arguments in PyMuPDF), “rect” means
another rect_like, while the other parameters mean coordinates.

If “rect” is specified, the constructor creates a new copy of it.

Without parameters, the empty rectangle Rect(0.0, 0.0, 0.0, 0.0) is created.

round()

Creates the smallest containing IRect. This is not the same as simply rounding the rectangle’s edges: The
top left corner is rounded upwards and to the left while the bottom right corner is rounded downwards and
to the right.

>>> fitz.Rect(0.5, -0.01, 123.88, 455.123456).round()
IRect(0, -1, 124, 456)

1. If the rectangle is empty, the result is also empty.

2. Possible paradox: The result may be empty, even if the rectangle is not empty! In such cases, the
result obviously does not contain the rectangle. This is because MuPDF’s algorithm allows for a
small tolerance (1e-3). Example:

>>> r = fitz.Rect(100, 100, 200, 100.001)
>>> r.is_empty
# rect is NOT empty

False
>>> r.round()
# but its irect IS empty!

fitz.IRect(100, 100, 200, 100)
>>> r.round().is_empty
True

Return type

IRect

transform(m)

Transforms the rectangle with a matrix and replaces the original. If the rectangle is empty or infinite, this
is a no-operation.

Parameters

m (Matrix) – The matrix for the transformation.

Return type

Rect

Returns

the smallest rectangle that contains the transformed original.

intersect(r)

The intersection (common rectangular area, largest rectangle contained in both) of the current rectangle
and r is calculated and replaces the current rectangle. If either rectangle is empty, the result is also empty.

334
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

If r is infinite, this is a no-operation. If the rectangles are (mathematically) disjoint sets, then the result is
invalid. If the result is valid but empty, then the rectangles touch each other in a corner or (part of) a side.

Parameters

r (Rect) – Second rectangle

include_rect(r)

The smallest rectangle containing the current one and r is calculated and replaces the current one. If
either rectangle is infinite, the result is also infinite. If one is empty, the other one will be taken as the
result.

Parameters

r (Rect) – Second rectangle

include_point(p)

The smallest rectangle containing the current one and point p is calculated and replaces the current one.
The infinite rectangle remains unchanged. To create a rectangle containing a series of points, start with
(the empty) fitz.Rect(p1, p1) and successively include the remaining points.

Parameters

p (Point) – Point to include.

get_area([unit])

Calculate the area of the rectangle and, with no parameter, equals abs(rect). Like an empty rectangle, the
area of an infinite rectangle is also zero. So, at least one of fitz.Rect(p1, p2) and fitz.Rect(p2, p1) has a zero
area.

Parameters

unit (str) – Specify required unit: respective squares of px (pixels, default), in (inches),
cm (centimeters), or mm (millimeters).

Return type

float

contains(x)

Checks whether x is contained in the rectangle. It may be an IRect, Rect, Point or number. If x is an empty
rectangle, this is always true. If the rectangle is empty this is always False for all non-empty rectangles
and for all points. x in rect and rect.contains(x) are equivalent.

Parameters

x (rect_like or point_like.) – the object to check.

Return type

bool

intersects(r)

Checks whether the rectangle and a rect_like “r” contain a common non-empty Rect. This will always
be False if either is infinite or empty.

Parameters

r (rect_like) – the rectangle to check.

Return type

bool

torect(rect)

• New in version 1.19.3

Compute the matrix which transforms this rectangle to a given one.

19.18. Rect
335

PyMuPDF Documentation, Release 1.23.25

Parameters

rect (rect_like) – the target rectangle. Must not be empty or infinite.

Return type

Matrix

Returns

a matrix mat such that self * mat = rect. Can for example be used to transform
between the page and the pixmap coordinates. See an example use here How to Use
Pixmaps: Checking Text Visibility.

morph(fixpoint, matrix)

• New in version 1.17.0

Return a new quad after applying a matrix to the rectangle using the fixed point fixpoint.

Parameters

• fixpoint (point_like) – the fixed point.

• matrix (matrix_like) – the matrix.

Returns

a new Quad. This a wrapper for the same-named quad method. If infinite, the infinite
quad is returned.

norm()

• New in version 1.16.0

Return the Euclidean norm of the rectangle treated as a vector of four numbers.

normalize()

Replace the rectangle with its valid version. This is done by shuffling the rectangle corners. After com-
pletion of this method, the bottom right corner will indeed be south-eastern to the top left one (but may
still be empty).

irect

Equals result of method round().

top_left

tl

Equals Point(x0, y0).

Type

Point

top_right

tr

Equals Point(x1, y0).

Type

Point

bottom_left

bl

Equals Point(x0, y1).

336
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Type

Point

bottom_right

br

Equals Point(x1, y1).

Type

Point

quad

The quadrilateral Quad(rect.tl, rect.tr, rect.bl, rect.br).

Type

Quad

width

Width of the rectangle. Equals max(x1 - x0, 0).

Return type

float

height

Height of the rectangle. Equals max(y1 - y0, 0).

Return type

float

x0

X-coordinate of the left corners.

Type

float

y0

Y-coordinate of the top corners.

Type

float

x1

X-coordinate of the right corners.

Type

float

y1

Y-coordinate of the bottom corners.

Type

float

is_infinite

True if this is the infinite rectangle.

Type

bool

19.18. Rect
337

PyMuPDF Documentation, Release 1.23.25

is_empty

True if rectangle is empty.

Type

bool

is_valid

True if rectangle is valid.

Type

bool

Note:

• This class adheres to the Python sequence protocol, so components can be accessed via their index, too. Also
refer to Using Python Sequences as Arguments in PyMuPDF.

• Rectangles can be used with arithmetic operators – see chapter Operator Algebra for Geometry Objects.

This documentation covers all versions up to 1.23.25.

19.19 Shape

This class allows creating interconnected graphical elements on a PDF page. Its methods have the same meaning and
name as the corresponding Page methods.

In fact, each Page draw method is just a convenience wrapper for (1) one shape draw method, (2) the Shape.finish()
method, and (3) the Shape.commit() method. For page text insertion, only the Shape.commit() method is invoked.
If many draw and text operations are executed for a page, you should always consider using a Shape object.

Several draw methods can be executed in a row and each one of them will contribute to one drawing. Once the drawing is
complete, the Shape.finish() method must be invoked to apply color, dashing, width, morphing and other attributes.

Draw methods of this class (and Shape.insert_textbox()) are logging the area they are covering in a rectangle
(Shape.rect). This property can for instance be used to set Page.cropbox_position.

Text insertions Shape.insert_text() and Shape.insert_textbox() implicitly execute a “finish” and therefore
only require Shape.commit() to become effective. As a consequence, both include parameters for controlling prop-
erties like colors, etc.

338
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Method / Attribute
Description

Shape.commit()
update the page’s contents

Shape.draw_bezier()
draw a cubic Bezier curve

Shape.draw_circle()
draw a circle around a point

Shape.draw_curve()
draw a cubic Bezier using one helper point

Shape.draw_line()
draw a line

Shape.draw_oval()
draw an ellipse

Shape.draw_polyline()
connect a sequence of points

Shape.draw_quad()
draw a quadrilateral

Shape.draw_rect()
draw a rectangle

Shape.draw_sector()
draw a circular sector or piece of pie

Shape.draw_squiggle()
draw a squiggly line

Shape.draw_zigzag()
draw a zigzag line

Shape.finish()
finish a set of draw commands

Shape.insert_text()
insert text lines

Shape.insert_textbox()
fit text into a rectangle

Shape.doc
stores the page’s document

Shape.draw_cont
draw commands since last Shape.finish()

Shape.height
stores the page’s height

Shape.lastPoint
stores the current point

Shape.page
stores the owning page

Shape.rect
rectangle surrounding drawings

Shape.text_cont
accumulated text insertions

Shape.totalcont
accumulated string to be stored in contents

Shape.width
stores the page’s width

Class API

class Shape

__init__(self, page)

Create a new drawing. During importing PyMuPDF, the fitz.Page object is being given the convenience
method new_shape() to construct a Shape object. During instantiation, a check will be made whether we
do have a PDF page. An exception is otherwise raised.

Parameters

page (Page) – an existing page of a PDF document.

draw_line(p1, p2)

Draw a line from point_like objects p1 to p2.

Parameters

• p1 (point_like) – starting point

• p2 (point_like) – end point

Return type

Point

Returns

the end point, p2.

draw_squiggle(p1, p2, breadth=2)

Draw a squiggly (wavy, undulated) line from point_like objects p1 to p2. An integer number of full
wave periods will always be drawn, one period having a length of 4 * breadth. The breadth parameter will

19.19. Shape
339

PyMuPDF Documentation, Release 1.23.25

be adjusted as necessary to meet this condition. The drawn line will always turn “left” when leaving p1
and always join p2 from the “right”.

Parameters

• p1 (point_like) – starting point

• p2 (point_like) – end point

• breadth (float) – the amplitude of each wave. The condition 2 * breadth <
abs(p2 - p1) must be true to fit in at least one wave. See the following picture,
which shows two points connected by one full period.

Return type

Point

Returns

the end point, p2.

Here is an example of three connected lines, forming a closed, filled triangle. Little arrows indicate the
stroking direction.

>>> import fitz
>>> doc=fitz.open()
>>> page=doc.new_page()
>>> r = fitz.Rect(100, 100, 300, 200)
>>> shape=page.new_shape()
>>> shape.draw_squiggle(r.tl, r.tr)
>>> shape.draw_squiggle(r.tr, r.br)
>>> shape.draw_squiggle(r.br, r.tl)
>>> shape.finish(color=(0, 0, 1), fill=(1, 1, 0))
>>> shape.commit()
>>> doc.save(""x.pdf"")

340
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Note: Waves drawn are not trigonometric (sine / cosine). If you need that, have a look at draw.py.

draw_zigzag(p1, p2, breadth=2)

Draw a zigzag line from point_like objects p1 to p2.
Otherwise works exactly like Shape.
draw_squiggle().

Parameters

• p1 (point_like) – starting point

• p2 (point_like) – end point

• breadth (float) – the amplitude of the movement. The condition 2 * breadth <
abs(p2 - p1) must be true to fit in at least one period.

Return type

Point

Returns

the end point, p2.

draw_polyline(points)

Draw several connected lines between points contained in the sequence points. This can be used for cre-
ating arbitrary polygons by setting the last item equal to the first one.

Parameters

points (sequence) – a sequence of point_like objects. Its length must at least be 2
(in which case it is equivalent to draw_line()).

Return type

Point

Returns

points[-1] – the last point in the argument sequence.

draw_bezier(p1, p2, p3, p4)

Draw a standard cubic Bézier curve from p1 to p4, using p2 and p3 as control points.

19.19. Shape
341

PyMuPDF Documentation, Release 1.23.25

All arguments are point_like s.

Return type

Point

Returns

the end point, p4.

Note: The points do not need to be different – experiment a bit with some of them being equal!

Example:

draw_oval(tetra)

Draw an “ellipse” inside the given tetragon (quadrilateral). If it is a square, a regular circle is drawn, a
general rectangle will result in an ellipse. If a quadrilateral is used instead, a plethora of shapes can be the
result.

The drawing starts and ends at the middle point of the line bottom-left -> top-left corners in an
anti-clockwise movement.

Parameters

tetra (rect_like,quad_like) – rect_like or quad_like.

Changed in version 1.14.5: Quads are now also supported.

Return type

Point

Returns

the middle point of line rect.bl -> rect.tl, or resp. quad.ll -> quad.ul. Look
at just a few examples here, or at the quad-show?.py scripts in the PyMuPDF-Utilities
repository.

342
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

draw_circle(center, radius)

Draw a circle given its center and radius. The drawing starts and ends at point center - (radius, 0)
in an anti-clockwise movement. This point is the middle of the enclosing square’s left side.

This is a shortcut for draw_sector(center, start, 360, fullSector=False). To draw the same
circle in a clockwise movement, use -360 as degrees.

Parameters

• center (point_like) – the center of the circle.

• radius (float) – the radius of the circle. Must be positive.

Return type

Point

Returns

Point(center.x - radius, center.y).

draw_curve(p1, p2, p3)

A special case of draw_bezier(): Draw a cubic Bezier curve from p1 to p3. On each of the two lines p1 ->
p2 and p3 -> p2 one control point is generated. Both control points will therefore be on the same side
of the line p1 -> p3. This guaranties that the curve’s curvature does not change its sign. If the lines to
p2 intersect with an angle of 90 degrees, then the resulting curve is a quarter ellipse (resp. quarter circle,
if of same length).

All arguments are point_like.

Return type

Point

Returns

the
end
point,
p3.
The
following
is
a
filled
quarter
el-
lipse
segment.
The
yellow
area
is
oriented
clockwise:

draw_sector(center, point, angle, fullSector=True)

Draw a circular sector, optionally connecting the arc to the circle’s center (like a piece of pie).

Parameters

19.19. Shape
343

PyMuPDF Documentation, Release 1.23.25

• center (point_like) – the center of the circle.

• point (point_like) – one of the two end points of the pie’s arc segment. The
other one is calculated from the angle.

• angle (float) – the angle of the sector in degrees. Used to calculate the other end
point of the arc. Depending on its sign, the arc is drawn anti-clockwise (positive)
or clockwise.

• fullSector (bool) – whether to draw connecting lines from the ends of the arc to
the circle center. If a fill color is specified, the full “pie” is colored, otherwise just
the sector.

Return type

Point

Returns

the other end point of the arc.
Can be used as starting point for a fol-
lowing
invocation
to
create
logically
connected
pies
charts.
Examples:

draw_rect(rect, *, radius=None)

• Changed in v1.22.0: Added parameter radius.

Draw a rectangle. The drawing starts and ends at the top-left corner in an anti-clockwise movement.

Parameters

• rect (rect_like) – where to put the rectangle on the page.

• radius (multiple) – draw rounded rectangle corners. If not None, specifies the
radius of the curvature as a percentage of a rectangle side length. This must one
or (a tuple of) two floats 0 < radius <= 0.5, where 0.5 corresponds to 50% of
the respective side. If a float, the radius of the curvature is computed as radius
* min(width, height), drawing the corner’s perimeter as a quarter circle. If a
tuple (rx, ry) is given, then the curvature is asymmetric with respect to the hor-
izontal and vertical directions. A value of radius=(0.5, 0.5) draws an ellipse.

Return type

Point

Returns

top-left corner of the rectangle.

draw_quad(quad)

Draw a quadrilateral. The drawing starts and ends at the top-left corner (Quad.ul) in an anti-clockwise
movement. It is a shortcut of Shape.draw_polyline() with the argument (ul, ll, lr, ur, ul).

Parameters

quad (quad_like) – where to put the tetragon on the page.

344
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Return type

Point

Returns

Quad.ul.

finish(width=1, color=None, fill=None, lineCap=0, lineJoin=0, dashes=None, closePath=True,
even_odd=False, morph=(fixpoint, matrix), stroke_opacity=1, fill_opacity=1, oc=0)

Finish a set of draw*() methods by applying Common Parameters to all of them.

It has no effect on Shape.insert_text() and Shape.insert_textbox().

The method also supports morphing the compound drawing using Point fixpoint and Matrix matrix.

Parameters

• morph (sequence) – morph the text or the compound drawing around some arbi-
trary Point fixpoint by applying Matrix matrix to it. This implies that fixpoint is a
fixed point of this operation: it will not change its position. Default is no morphing
(None). The matrix can contain any values in its first 4 components, matrix.e ==
matrix.f == 0 must be true, however. This means that any combination of scaling,
shearing, rotating, flipping, etc. is possible, but translations are not.

• stroke_opacity (float) – (new in v1.18.1) set transparency for stroke colors.
Value < 0 or > 1 will be ignored. Default is 1 (intransparent).

• fill_opacity (float) – (new in v1.18.1) set transparency for fill colors. Default
is 1 (intransparent).

• even_odd (bool) – request the “even-odd rule” for filling operations. Default
is False, so that the “nonzero winding number rule” is used. These rules are
alternative methods to apply the fill color where areas overlap. Only with fairly
complex shapes a different behavior is to be expected with these rules. For an in-
depth explanation, see Adobe PDF References, pp. 137 ff. Here is an example to
demonstrate the difference.

• oc (int) – (new in v1.18.4) the xref number of an OCG or OCMD to make this
drawing conditionally displayable.

19.19. Shape
345

PyMuPDF Documentation, Release 1.23.25

Note: For each pixel in a shape, the following will happen:

1. Rule “even-odd” counts, how many areas contain the pixel. If this count is odd, the pixel is regarded
inside the shape, if it is even, the pixel is outside.

2. The default rule “nonzero winding” in addition looks at the “orientation” of each area containing
the pixel: it adds 1 if an area is drawn anti-clockwise and it subtracts 1 for clockwise areas. If the
result is zero, the pixel is regarded outside, pixels with a non-zero count are inside the shape.

Of the four shapes in above image, the top two each show three circles drawn in standard manner (anti-
clockwise, look at the arrows). The lower two shapes contain one (the top-left) circle drawn clockwise.
As can be seen, area orientation is irrelevant for the right column (even-odd rule).

insert_text(point, text, fontsize=11, fontname='helv', fontfile=None, set_simple=False,
encoding=TEXT_ENCODING_LATIN, color=None, lineheight=None, fill=None,
render_mode=0, border_width=1, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1,
oc=0)

Insert text lines start at point.

346
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Parameters

• point (point_like) – the bottom-left position of the first character of text
in pixels.
It is important to understand, how this works in conjunction with
the rotate parameter.
Please have a look at the following picture.
The small
red dots indicate the positions of point in each of the four possible cases.

• text (str/sequence) – the text to be inserted. May be specified as either a string
type or as a sequence type. For sequences, or strings containing line breaks n,
several lines will be inserted. No care will be taken if lines are too wide, but the
number of inserted lines will be limited by “vertical” space on the page (in the
sense of reading direction as established by the rotate parameter). Any rest of text
is discarded – the return code however contains the number of inserted lines.

• lineheight (float) – a factor to override the line height calculated from font
properties. If not None, a line height of fontsize * lineheight will be used.

• stroke_opacity (float) – (new in v1.18.1) set transparency for stroke colors (the
border line of a character). Only 0 <= value <= 1 will be considered. Default
is 1 (intransparent).

• fill_opacity (float) – (new in v1.18.1) set transparency for fill colors. Default
is 1 (intransparent). Use this value to control transparency of the text color. Stroke
opacity only affects the border line of characters.

• rotate (int) – determines whether to rotate the text. Acceptable values are multi-
ples of 90 degrees. Default is 0 (no rotation), meaning horizontal text lines oriented
from left to right. 180 means text is shown upside down from right to left. 90
means anti-clockwise rotation, text running upwards. 270 (or -90) means clock-
wise rotation, text running downwards. In any case, point specifies the bottom-left
coordinates of the first character’s rectangle. Multiple lines, if present, always fol-
low the reading direction established by this parameter. So line 2 is located above
line 1 in case of rotate = 180, etc.

• oc (int) – (new in v1.18.4) the xref number of an OCG or OCMD to make this text
conditionally displayable.

Return type

int

Returns

number of lines inserted.

For a description of the other parameters see Common Parameters.

19.19. Shape
347

PyMuPDF Documentation, Release 1.23.25

insert_textbox(rect, buffer, fontsize=11, fontname='helv', fontfile=None, set_simple=False,
encoding=TEXT_ENCODING_LATIN, color=None, fill=None, render_mode=0,
border_width=1, expandtabs=8, align=TEXT_ALIGN_LEFT, rotate=0, lineheight=None,
morph=None, stroke_opacity=1, fill_opacity=1, oc=0)

PDF only: Insert text into the specified rectangle. The text will be split into lines and words and then filled
into the available space, starting from one of the four rectangle corners, which depends on rotate. Line
feeds and multiple space will be respected.

Parameters

• rect (rect_like) – the area to use. It must be finite and not empty.

• buffer (str/sequence) – the text to be inserted. Must be specified as a string or
a sequence of strings. Line breaks are respected also when occurring in a sequence
entry.

• align (int) – align each text line. Default is 0 (left). Centered, right and justified
are the other supported options, see Text Alignment. Please note that the effect of
parameter value TEXT_ALIGN_JUSTIFY is only achievable with “simple” (single-
byte) fonts (including the PDF Base 14 Fonts).

• lineheight (float) – a factor to override the line height calculated from font
properties. If not None, a line height of fontsize * lineheight will be used.

arg int expandtabs

controls
handling
of
tab
characters
\\t
using
the
string.
expandtabs() method per each line.

• stroke_opacity (float) – (new in v1.18.1) set transparency for stroke colors.
Negative values and values > 1 will be ignored. Default is 1 (intransparent).

• fill_opacity (float) – (new in v1.18.1) set transparency for fill colors. Default
is 1 (intransparent). Use this value to control transparency of the text color. Stroke
opacity only affects the border line of characters.

• rotate (int) – requests text to be rotated in the rectangle. This value must be a
multiple of 90 degrees. Default is 0 (no rotation). Effectively, the four values 0, 90,
180 and 270 (= -90) are processed, each causing the text to start in a different rect-
angle corner. Bottom-left is 90, bottom-right is 180, and -90 / 270 is top-right.
See the example how text is filled in a rectangle. This argument takes precedence
over morphing. See the second example, which shows text first rotated left by 90
degrees and then the whole rectangle rotated clockwise around is lower left corner.

• oc (int) – (new in v1.18.4) the xref number of an OCG or OCMD to make this text
conditionally displayable.

Return type

float

Returns

If positive or zero: successful execution. The value returned is the unused rectangle
line space in pixels. This may safely be ignored – or be used to optimize the rectangle,
position subsequent items, etc.

If negative: no execution. The value returned is the space deficit to store text lines.
Enlarge rectangle, decrease fontsize, decrease text amount, etc.

348
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

For a description of the other parameters see Common Parameters.

commit(overlay=True)

Update the page’s contents with the accumulated drawings, followed by any text insertions. If text over-
laps drawings, it will be written on top of the drawings.

Warning: Do not forget to execute this method:

If a shape is not committed, it will be ignored and the page will not be changed!

The method will reset attributes Shape.rect, lastPoint, draw_cont, text_cont and totalcont.
Afterwards, the shape object can be reused for the same page.

Parameters

overlay (bool) – determine whether to put content in foreground (default) or back-
ground. Relevant only, if the page already has a non-empty contents object.

———- Attributes ———-

doc

For reference only: the page’s document.

Type

Document

page

For reference only: the owning page.

Type

Page

19.19. Shape
349

PyMuPDF Documentation, Release 1.23.25

height

Copy of the page’s height

Type

float

width

Copy of the page’s width.

Type

float

draw_cont

Accumulated command buffer for draw methods since last finish. Every finish method will append its
commands to Shape.totalcont.

Type

str

text_cont

Accumulated text buffer. All text insertions go here. This buffer will be appended to totalcont Shape.
commit(), so that text will never be covered by drawings in the same Shape.

Type

str

rect

Rectangle surrounding drawings. This attribute is at your disposal and may be changed at any time.
Its value is set to None when a shape is created or committed.
Every draw* method, and Shape.
insert_textbox() update this property (i.e. enlarge the rectangle as needed). Morphing operations,
however (Shape.finish(), Shape.insert_textbox()) are ignored.

A typical use of this attribute would be setting Page.cropbox_position to this value, when you are
creating shapes for later or external use. If you have not manipulated the attribute yourself, it should
reflect a rectangle that contains all drawings so far.

If you have used morphing and need a rectangle containing the morphed objects, use the following code:

>>> # assuming ...
>>> morph = (point, matrix)
>>> # ... recalculate the shape rectangle like so:
>>> shape.rect = (shape.rect - fitz.Rect(point, point)) * ~matrix + fitz.

˓→Rect(point, point)

Type

Rect

totalcont

Total accumulated command buffer for draws and text insertions. This will be used by Shape.commit().

Type

str

lastPoint

For reference only: the current point of the drawing path. It is None at Shape creation and after each finish()
and commit().

Type

Point

350
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.19.1 Usage

A drawing object is constructed by shape = page.new_shape(). After this, as many draw, finish and text insertions
methods as required may follow. Each sequence of draws must be finished before the drawing is committed. The
overall coding pattern looks like this:

>>> shape = page.new_shape()
>>> shape.draw1(...)
>>> shape.draw2(...)
>>> ...
>>> shape.finish(width=..., color=..., fill=..., morph=...)
>>> shape.draw3(...)
>>> shape.draw4(...)
>>> ...
>>> shape.finish(width=..., color=..., fill=..., morph=...)
>>> ...
>>> shape.insert_text*
>>> ...
>>> shape.commit()
>>> ....

Note:

1. Each finish() combines the preceding draws into one logical shape, giving it common colors, line width, morph-
ing, etc. If closePath is specified, it will also connect the end point of the last draw with the starting point of the
first one.

2. To successfully create compound graphics, let each draw method use the end point of the previous one as its
starting point. In the above pseudo code, draw2 should hence use the returned Point of draw1 as its starting
point. Failing to do so, would automatically start a new path and finish() may not work as expected (but it won’t
complain either).

3. Text insertions may occur anywhere before the commit (they neither touch Shape.draw_cont nor Shape.
lastPoint). They are appended to Shape.totalcont directly, whereas draws will be appended by Shape.finish.

4. Each commit takes all text insertions and shapes and places them in foreground or background on the page – thus
providing a way to control graphical layers.

5. Only commit will update the page’s contents, the other methods are basically string manipulations.

19.19.2 Examples

1. Create a full circle of pieces of pie in different colors:

shape = page.new_shape()
# start a new shape

cols = (...)
# a sequence of RGB color triples

pieces = len(cols)
# number of pieces to draw

beta = 360. / pieces
# angle of each piece of pie

center = fitz.Point(...)
# center of the pie

p0 = fitz.Point(...)
# starting point

for i in range(pieces):
p0 = shape.draw_sector(center, p0, beta,
fullSector=True) # draw piece

(continues on next page)

19.19. Shape
351

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

# now fill it but do not connect ends of the arc
shape.finish(fill=cols[i], closePath=False)
shape.commit()
# update the page

Here is an example for 5 colors:

2. Create a regular n-edged polygon (fill yellow, red border). We use draw_sector() only to calculate the points on
the circumference, and empty the draw command buffer again before drawing the polygon:

shape = page.new_shape() # start a new shape
beta = -360.0 / n
# our angle, drawn clockwise

center = fitz.Point(...)
# center of circle

p0 = fitz.Point(...)
# start here (1st edge)

points = [p0]
# store polygon edges

for i in range(n):
# calculate the edges

p0 = shape.draw_sector(center, p0, beta)
points.append(p0)
shape.draw_cont = """"
# do not draw the circle sectors

shape.draw_polyline(points)
# draw the polygon

shape.finish(color=(1,0,0), fill=(1,1,0), closePath=False)
shape.commit()

Here is the polygon for n = 7:

352
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.19.3 Common Parameters

fontname (str)

In general, there are three options:

1. Use one of the standard PDF Base 14 Fonts. In this case, fontfile must not be specified and “Hel-
vetica” is used if this parameter is omitted, too.

2. Choose a font already in use by the page. Then specify its reference name prefixed with a slash “/”,
see example below.

3. Specify a font file present on your system. In this case choose an arbitrary, but new name for this
parameter (without “/” prefix).

If inserted text should re-use one of the page’s fonts, use its reference name appearing in Page.
get_fonts() like so:

Suppose the font list has the item [1024, 0, ‘Type1’, ‘NimbusMonL-Bold’, ‘R366’], then specify fontname
= “/R366”, fontfile = None to use font NimbusMonL-Bold.

fontfile (str)

File path of a font existing on your computer. If you specify fontfile, make sure you use a fontname not
occurring in the above list. This new font will be embedded in the PDF upon doc.save(). Similar to new
images, a font file will be embedded only once. A table of MD5 codes for the binary font contents is used
to ensure this.

set_simple (bool)

Fonts installed from files are installed as Type0 fonts by default. If you want to use 1-byte characters only,
set this to true. This setting cannot be reverted. Subsequent changes are ignored.

fontsize (float)

Font size of text, see: fontsize.

dashes (str)

Causes lines to be drawn dashed. The general format is ""[n m] p"" of (up to) 3 floats denoting pixel
lengths. n is the dash length, m (optional) is the subsequent gap length, and p (the “phase” - required,
even if 0!) specifies how many pixels should be skipped before the dashing starts. If m is omitted, it defaults
to n.

A continuous line (no dashes) is drawn with ""[] 0"" or None or """". Examples:

• Specifying ""[3 4] 0"" means dashes of 3 and gaps of 4 pixels following each other.

• ""[3 3] 0"" and ""[3] 0"" do the same thing.

For (the rather complex) details on how to achieve sophisticated dashing effects, see Adobe PDF Refer-
ences, page 217.

color / fill (list, tuple)

19.19. Shape
353

PyMuPDF Documentation, Release 1.23.25

Stroke and fill colors can be specified as tuples or list of of floats from 0 to 1. These sequences must have a
length of 1 (GRAY), 3 (RGB) or 4 (CMYK). For GRAY colorspace, a single float instead of the unwieldy
(float,) or [float] is also accepted. Accept (default) or use None to not use the parameter.

To simplify color specification, method getColor() in fitz.utils may be used to get predefined RGB color
triples by name. It accepts a string as the name of the color and returns the corresponding triple. The
method knows over 540 color names – see section Color Database.

Please note that the term color usually means “stroke” color when used in conjunction with fill color.

If letting default a color parameter to None, then no resp. color selection command will be generated. If fill
and color are both None, then the drawing will contain no color specification. But it will still be “stroked”,
which causes PDF’s default color “black” be used by Adobe Acrobat and all other viewers.

stroke_opacity / fill_opacity (floats)

Both values are floats in range [0, 1]. Negative values or values > 1 will ignored (in most cases). Both set
the transparency such that a value 0.5 corresponds to 50% transparency, 0 means invisible and 1 means
intransparent. For e.g. a rectangle the stroke opacity applies to its border and fill opacity to its interior.

For text insertions (Shape.insert_text() and Shape.insert_textbox()), use fill_opacity for the
text. At first sight this seems surprising, but it becomes obvious when you look further down to ren-
der_mode: fill_opacity applies to the yellow and stroke_opacity applies to the blue color.

border_width (float)

Set the border width for text insertions. New in v1.14.9. Relevant only if the render mode argument is
used with a value greater zero.

render_mode (int)

New in version 1.14.9: Integer in range(8) which controls the text appearance (Shape.insert_text()
and Shape.insert_textbox()). See page 246 in Adobe PDF References. New in v1.14.9. These
methods now also differentiate between fill and stroke colors.

• For default 0, only the text fill color is used to paint the text. For backward compatibility, using the
color parameter instead also works.

• For render mode 1, only the border of each glyph (i.e. text character) is drawn with a thickness
as set in argument border_width. The color chosen in the color argument is taken for this, the fill
parameter is ignored.

• For render mode 2, the glyphs are filled and stroked, using both color parameters and the specified
border width. You can use this value to simulate bold text without using another font: choose the
same value for fill and color and an appropriate value for border_width.

• For render mode 3, the glyphs are neither stroked nor filled: the text becomes invisible.

The following examples use border_width=0.3, together with a fontsize of 15. Stroke color is blue and fill
color is some yellow.

354
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

overlay (bool)

Causes the item to appear in foreground (default) or background.

morph (sequence)

Causes “morphing” of either a shape, created by the draw*() methods, or the text inserted by page methods
insert_textbox() / insert_text(). If not None, it must be a pair (fixpoint, matrix), where fixpoint is a Point
and matrix is a Matrix. The matrix can be anything except translations, i.e. matrix.e == matrix.f == 0
must be true. The point is used as a fixed point for the matrix operation. For example, if matrix is a rotation
or scaling, then fixpoint is its center. Similarly, if matrix is a left-right or up-down flip, then the mirroring
axis will be the vertical, respectively horizontal line going through fixpoint, etc.

Note:
Several methods contain checks whether the to be inserted items will actually fit into the page
(like Shape.insert_text(), or Shape.draw_rect()). For the result of a morphing operation there is
however no such guaranty: this is entirely the programmer’s responsibility.

lineCap (deprecated: “roundCap”) (int)

Controls the look of line ends. The default value 0 lets each line end at exactly the given coordinate in a
sharp edge. A value of 1 adds a semi-circle to the ends, whose center is the end point and whose diameter
is the line width. Value 2 adds a semi-square with an edge length of line width and a center of the line end.

Changed in version 1.14.15

lineJoin (int)

New in version 1.14.15: Controls the way how line connections look like. This may be either as a sharp
edge (0), a rounded join (1), or a cut-off edge (2, “butt”).

closePath (bool)

Causes the end point of a drawing to be automatically connected with the starting point (by a straight line).

This documentation covers all versions up to 1.23.25.

19.19. Shape
355

PyMuPDF Documentation, Release 1.23.25

19.20 Story

• New in v1.21.0

Method / Attribute
Short Description

Story.reset()
“rewind” story output to its beginning

Story.place()
compute story content to fit in provided rectangle

Story.draw()
write the computed content to current page

Story.element_positions()
callback function logging currently processed story content

Story.body
the story’s underlying body

Story.write()
places and draws Story to a DocumentWriter

Story.write_stabilized()
iterative layout of html content to a DocumentWriter

Story.write_with_links()
like write() but also creates PDF links

Story.write_stabilized_with_links()
like write_stabilized() but also creates PDF links

Story.fit()
Finds optimal rect that contains the story self.

Story.fit_scale()
Story.fit_height()
Story.fit_width()

Class API

class Story

__init__(self, html=None, user_css=None, em=12, archive=None)

Create a story, optionally providing HTML and CSS source. The HTML is parsed, and held within the
Story as a DOM (Document Object Model).

This structure may be modified: content (text, images) may be added, copied, modified or removed by
using methods of the Xml class.

When finished, the story can be written to any device; in typical usage the device may be provided by a
DocumentWriter to make new pages.

Here are some general remarks:

• The Story constructor parses and validates the provided HTML to create the DOM.

• PyMuPDF provides a number of ways to manipulate the HTML source by providing access to the
nodes of the underlying DOM. Documents can be completely built from ground up programmati-
cally, or the existing DOM can be modified pretty arbitrarily. For details of this interface, please see
the Xml class.

• If no (or no more) changes to the DOM are required, the story is ready to be laid out and to be fed
to a series of devices (typically devices provided by a DocumentWriter to produce new pages).

• The next step is to place the story and write it out. This can either be done directly, by looping around
calling place() and draw(), or alternatively, the looping can handled for you using the write()
or write_stabilised() methods. Which method you choose is largely a matter of taste.

– To work in the first of these styles, the following loop should be used:

1. Obtain a suitable device to write to; typically by requesting a new, empty page from a

DocumentWriter.

2. Determine one or more rectangles on the page, that should receive story data. Note that
not every page needs to have the same set of rectangles.

356
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

3. Pass each rectangle to the story to place it, learning what part of that rectangle has been
filled, and whether there is more story data that did not fit. This step can be repeated
several times with adjusted rectangles until the caller is happy with the results.

4. Optionally, at this point, we can request details of where interesting items have been
placed, by calling the element_positions() method. Items are deemed to be inter-
esting if their integer heading attribute is a non-zero (corresponding to HTML tags h1
- h6), if their id attribute is not None (corresponding to HTML tag id), or if their href
attribute is not None (responding to HTML tag href ). This can conveniently be used for
automatic generation of a Table of Contents, an index of images or the like.

5. Next, draw that rectangle out to the device with the draw() method.

6. If the most recent call to place() indicated that all the story data had fitted, stop now.

7. Otherwise, we can loop back. If there are more rectangles to be placed on the current
device (page), we jump back to step 3 - if not, we jump back to step 1 to get a new device.

– Alternatively, in the case where you are using a DocumentWriter, the write() or

write_stabilized() methods can be used. These handle all the looping for you, in ex-
change for being provided with callbacks that control the behaviour (notably a callback that
enumerates the rectangles/pages to use).

• Which part of the story will land on which rectangle / which page, is fully under control of the Story

object and cannot be predicted.

• Images may be part of a story. They will be placed together with any surrounding text.

• Multiple stories may - independently from each other - write to the same page. For example, one
may have separate stories for page header, page footer, regular text, comment boxes, etc.

Parameters

• html (str) – HTML source code. If omitted, a basic minimum is generated (see
below). If provided, not a complete HTML document is needed. The in-built source
parser will forgive (many / most) HTML syntax errors and also accepts HTML
fragments like ""<b>Hello, <i>World!</i></b>"".

• user_css (str) – CSS source code. If provided, must contain valid CSS specifi-
cations.

• em (float) – the default text font size.

• archive – an Archive from which to load resources for rendering. Currently sup-
ported resource types are images and text fonts. If omitted, the story will not try to
look up any such data and may thus produce incomplete output.

Note:
Instead of an actual archive, valid arguments for creating an Archive can
also be provided – in which case an archive will temporarily be constructed. So, in-
stead of story = fitz.Story(archive=fitz.Archive(""myfolder"")), one
can also shorter write story = fitz.Story(archive=""myfolder"").

place(where)

Calculate that part of the story’s content, that will fit in the provided rectangle. The method maintains a
pointer which part of the story’s content has already been written and upon the next invocation resumes
from that pointer’s position.

19.20. Story
357

PyMuPDF Documentation, Release 1.23.25

Parameters

where (rect_like) – layout the current part of the content to fit into this rectangle.
This must be a sub-rectangle of the page’s MediaBox.

Return type

tuple[bool, rect_like]

Returns

a bool (int) more and a rectangle filled. If more == 0, all content of the story has
been written, otherwise more is waiting to be written to subsequent rectangles / pages.
Rectangle filled is the part of where that has actually been filled.

draw(dev, matrix=None)

Write the content part prepared by Story.place() to the page.

Parameters

• dev – the Device created by dev = writer.begin_page(mediabox). The de-
vice knows how to call all MuPDF functions needed to write the content.

• matrix (matrix_like) – a matrix for transforming content when writing to the
page. An example may be writing rotated text. The default means no transformation
(i.e. the Identity matrix).

element_positions(function, args=None)

Let the Story provide positioning information about certain HTML elements once their place on the current
page has been computed - i.e. invoke this method directly after Story.place().

Story will pass position information to function. This information can for example be used to generate a
Table of Contents.

Parameters

• function (callable) – a Python function accepting an ElementPosition ob-
ject. It will be invoked by the Story object to process positioning information. The
function must be a callable accepting exactly one argument.

• args (dict) – an optional dictionary with any additional information that should
be added to the ElementPosition instance passed to function. Like for example
the current output page number. Every key in this dictionary must be a string that
conforms to the rules for a valid Python identifier. The complete set of information
is explained below.

reset()

Rewind the story’s document to the beginning for starting over its output.

body

The body part of the story’s DOM. This attribute contains the Xml node of body. All relevant content for
PDF production is contained between “<body>” and “</body>”.

write(writer, rectfn, positionfn=None, pagefn=None)

Places and draws Story to a DocumentWriter. Avoids the need for calling code to implement a loop that
calls Story.place() and Story.draw() etc, at the expense of having to provide at least the rectfn()
callback.

Parameters

• writer – a DocumentWriter or None.

• rectfn – a callable taking (rect_num:
int, filled:
Rect) and returning
(mediabox, rect, ctm):

358
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

– mediabox: None or rect for new page.

– rect: The next rect into which content should be placed.

– ctm: None or a Matrix.

• positionfn – None, or a callable taking (position:
ElementPosition):

– position:

An ElementPosition with an extra .page_num member.

Typically called multiple times as we generate elements that are headings or have
an id.

• pagefn – None, or a callable taking (page_num, mediabox, dev, after);
called at start (after=0) and end (after=1) of each page.

static write_stabilized(writer, contentfn, rectfn, user_css=None, em=12, positionfn=None,
pagefn=None, archive=None, add_header_ids=True)

Static method that does iterative layout of html content to a DocumentWriter.

For example this allows one to add a table of contents section while ensuring that page numbers are patched
up until stable.

Repeatedly creates a new Story from (contentfn(), user_css, em, archive) and lays it out with
internal call to Story.write(); uses a None writer and extracts the list of ElementPosition’s which
is passed to the next call of contentfn().

When the html from contentfn() becomes unchanged, we do a final iteration using writer.

Parameters

• writer – A DocumentWriter.

• contentfn – A function taking a list of ElementPositions and returning a string
containing html. The returned html can depend on the list of positions, for example
with a table of contents near the start.

• rectfn – A callable taking (rect_num:
int, filled:
Rect) and returning
(mediabox, rect, ctm):

– mediabox: None or rect for new page.

– rect: The next rect into which content should be placed.

– ctm: A Matrix.

• pagefn – None, or a callable taking (page_num, medibox, dev, after);
called at start (after=0) and end (after=1) of each page.

• archive –

• add_header_ids – If true, we add unique ids to all header tags that don’t already
have an id. This can help automatic generation of tables of contents.

Returns:

None.

write_with_links(rectfn, positionfn=None, pagefn=None)

Similar to write() except that we don’t have a writer arg and we return a PDF Document in which links
have been created for each internal html link.

19.20. Story
359

PyMuPDF Documentation, Release 1.23.25

static write_stabilized_with_links(contentfn, rectfn, user_css=None, em=12, positionfn=None,
pagefn=None, archive=None, add_header_ids=True)

Similar to write_stabilized() except that we don’t have a writer arg and instead return a PDF Doc-
ument in which links have been created for each internal html link.

class FitResult

The result from a Story.fit*() method.

Members:

big_enough:

True if the fit succeeded.

filled:

From the last call to Story.place().

more:

False if the fit succeeded.

numcalls:

Number of calls made to self.place().

parameter:

The successful parameter value, or the largest failing value.

Rect:

The rect created from parameter.

fit(self, fn, pmin=None, pmax=None, delta=0.001, verbose=False)

Finds optimal rect that contains the story self.

Returns a Story.FitResult instance.

On success, the last call to self.place() will have been with the returned rectangle, so self.draw()
can be used directly.

Parameters

• fn – A callable taking a floating point parameter and returning a fitz.Rect().
If the rect is empty, we assume the story will not fit and do not call self.place().

Must guarantee that self.place() behaves monotonically when given rect
fn(parameter) as parameter increases. This usually means that both width and
height increase or stay unchanged as parameter increases.

• pmin – Minimum parameter to consider; None for -infinity.

• pmax – Maximum parameter to consider; None for +infinity.

• delta – Maximum error in returned parameter.

• verbose – If true we output diagnostics.

fit_scale(self, rect, scale_min=0, scale_max=None, delta=0.001, verbose=False)

Finds smallest value scale in range scale_min..scale_max where scale * rect is large enough to
contain the story self.

Returns a Story.FitResult instance.

Parameters

• width – width of rect.

• height – height of rect.

360
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• scale_min – Minimum scale to consider; must be >= 0.

• scale_max – Maximum scale to consider, must be >= scale_min or None for infi-
nite.

• delta – Maximum error in returned scale.

• verbose – If true we output diagnostics.

fit_height(self, width, height_min=0, height_max=None, origin=(0, 0), delta=0.001, verbose=False)

Finds smallest height in range height_min..height_max where a rect with size (width, height) is
large enough to contain the story self.

Returns a Story.FitResult instance.

Parameters

• width – width of rect.

• height_min – Minimum height to consider; must be >= 0.

• height_max – Maximum height to consider, must be >= height_min or None for
infinite.

• origin – (x0, y0) of rect.

• delta – Maximum error in returned height.

• verbose – If true we output diagnostics.

fit_width(self, height, width_min=0, width_max=None, origin=(0, 0), delta=0.001, verbose=False)

Finds smallest width in range width_min..width_max where a rect with size (width, height) is large
enough to contain the story self.

Returns a Story.FitResult instance.

Parameters

• height – height of rect.

• width_min – Minimum width to consider; must be >= 0.

• width_max – Maximum width to consider, must be >= width_min or None for
infinite.

• origin – (x0, y0) of rect.

• delta – Maximum error in returned width.

• verbose – If true we output diagnostics.

19.20.1 Element Positioning CallBack function

The callback function can be used to log information about story output. The function’s access to the information is
read-only: it has no way to influence the story’s output.

A typical loop for executing a story with using this method would look like this:

HTML = """"""
<html>

<head></head>
<body>

<h1>Header level 1</h1>

(continues on next page)

19.20. Story
361

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

<h2>Header level 2</h2>
<p>Hello MuPDF!</p>

</body>

</html>
""""""
MEDIABOX = fitz.paper_rect(""letter"")
# size of a page

WHERE = MEDIABOX + (36, 36, -36, -36)
# leave borders of 0.5 inches

story =
fitz.Story(html=HTML)
# make the story

writer = fitz.DocumentWriter(""test.pdf"")
# make the writer

pno = 0 # current page number
more = 1
# will be set to 0 when done

while more:
# loop until all story content is processed

dev = writer.begin_page(MEDIABOX)
# make a device to write on the page

more, filled = story.place(WHERE)
# compute content positions on page

story.element_positions(recorder, {""page"": pno})
# provide page number in addition

story.draw(dev)
writer.end_page()
pno += 1
# increase page number

writer.close()
# close output file

def recorder(elpos):

pass

Attributes of the ElementPosition class

Exactly one parameter must be passed to the function provided by Story.element_positions(). It is an object with
the following attributes:

The parameter passed to the recorder function is an object with the following attributes:

• elpos.depth (int) – depth of this element in the box structure.

• elpos.heading (int) – the header level, 0 if no header, 1-6 for h1 - h6.

• elpos.href (str) – value of the href attribute, or None if not defined.

• elpos.id (str) – value of the id attribute, or None if not defined.

• elpos.rect (tuple) – element position on page.

• elpos.text (str) – immediate text of the element.

• elpos.open_close (int bit field) – bit 0 set: opens element, bit 1 set: closes element. Relevant for elements
that may contain other elements and thus may not immediately be closed after being created / opened.

• elpos.rect_num (int) – count of rectangles filled by the story so far.

• elpos.page_num (int) – page number; only present when using fitz.Story.write*() functions.

This documentation covers all versions up to 1.23.25.

362
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.21 TextPage

This class represents text and images shown on a document page. All MuPDF document types are supported.

The usual ways to create a textpage are DisplayList.get_textpage() and Page.get_textpage(). Because there
is a limited set of methods in this class, there exist wrappers in Page which are handier to use. The last column of this
table shows these corresponding Page methods.

For a description of what this class is all about, see Appendix 2.

Method
Description
page get_text or search method

extractText()
extract plain text
“text”

extractTEXT()
synonym of previous
“text”

extractBLOCKS()
plain text grouped in blocks
“blocks”

extractWORDS()
all words with their bbox
“words”

extractHTML()
page content in HTML format
“html”

extractXHTML()
page content in XHTML format
“xhtml”

extractXML()
page text in XML format
“xml”

extractDICT()
page content in dict format
“dict”

extractJSON()
page content in JSON format
“json”

extractRAWDICT()
page content in dict format
“rawdict”

extractRAWJSON()
page content in JSON format
“rawjson”

search()
Search for a string in the page
Page.search_for()

Class API

class TextPage

extractText(sort=False)

extractTEXT(sort=False)

Return a string of the page’s complete text. The text is UTF-8 unicode and in the same sequence as specified
at the time of document creation.

Parameters

sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.
In many cases, this should suffice to generate a “natural” reading order.

Return type

str

extractBLOCKS()

Textpage content as a list of text lines grouped by block. Each list items looks like this:

(x0, y0, x1, y1, ""lines in the block"", block_no, block_type)

The first four entries are the block’s bbox coordinates, block_type is 1 for an image block, 0 for text.
block_no is the block sequence number. Multiple text lines are joined via line breaks.

For an image block, its bbox and a text line with some image meta information is included – not the image
content.

This is a high-speed method with just enough information to output plain text in desired reading sequence.

Return type

list

19.21. TextPage
363

PyMuPDF Documentation, Release 1.23.25

extractWORDS(delimiters=None)

• Changed in v1.23.5: added delimiters parameter

Textpage content as a list of single words with bbox information. An item of this list looks like this:

(x0, y0, x1, y1, ""word"", block_no, line_no, word_no)

Parameters

delimiters (str) – (new in v1.23.5) use these characters as additional word sep-
arators. By default, all white spaces (including the non-breaking space 0xA0) indi-
cate start and end of a word.
Now you can specify more characters causing this.
For instance, the default will return ""john.doe@outlook.com"" as one word.
If
you specify delimiters=""@."" then the four words ""john"", ""doe"", ""outlook"",
""com"" will be returned. Other possible uses include ignoring punctuation characters
delimiters=string.punctuation. The “word” strings will not contain any delim-
iting character.

This is a high-speed method which e.g. allows extracting text from within given areas or recovering the
text reading sequence.

Return type

list

extractHTML()

Textpage content as a string in HTML format. This version contains complete formatting and positioning
information. Images are included (encoded as base64 strings). You need an HTML package to interpret
the output in Python. Your internet browser should be able to adequately display this information, but see
Controlling Quality of HTML Output.

Return type

str

extractDICT(sort=False)

Textpage content as a Python dictionary. Provides same information detail as HTML. See below for the
structure.

Parameters

sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.
In many cases, this should suffice to generate a “natural” reading order.

Return type

dict

extractJSON(sort=False)

Textpage content as a JSON string. Created by json.dumps(TextPage.extractDICT()). It is included
for backlevel compatibility. You will probably use this method ever only for outputting the result to some
file. The method detects binary image data and converts them to base64 encoded strings.

Parameters

sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.
In many cases, this should suffice to generate a “natural” reading order.

Return type

str

364
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

extractXHTML()

Textpage content as a string in XHTML format.
Text information detail is comparable with

extractTEXT(), but also contains images (base64 encoded). This method makes no attempt to re-create
the original visual appearance.

Return type

str

extractXML()

Textpage content as a string in XML format. This contains complete formatting information about every
single character on the page: font, size, line, paragraph, location, color, etc. Contains no images. You need
an XML package to interpret the output in Python.

Return type

str

extractRAWDICT(sort=False)

Textpage content as a Python dictionary – technically similar to extractDICT(), and it contains that
information as a subset (including any images). It provides additional detail down to each character, which
makes using XML obsolete in many cases. See below for the structure.

Parameters

sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.
In many cases, this should suffice to generate a “natural” reading order.

Return type

dict

extractRAWJSON(sort=False)

Textpage content as a JSON string. Created by json.dumps(TextPage.extractRAWDICT()). You will
probably use this method ever only for outputting the result to some file. The method detects binary image
data and converts them to base64 encoded strings.

Parameters

sort (bool) – (new in v1.19.1) sort the output by vertical, then horizontal coordinates.
In many cases, this should suffice to generate a “natural” reading order.

Return type

str

search(needle, quads=False)

• Changed in v1.18.2

Search for string and return a list of found locations.

Parameters

• needle (str) – the string to search for. Upper and lower cases will all match if
needle consists of ASCII letters only – it does not yet work for “Ä” versus “ä”, etc.

• quads (bool) – return quadrilaterals instead of rectangles.

Return type

list

Returns

a list of Rect or Quad objects, each surrounding a found needle occurrence. As the search
string may contain spaces, its parts may be found on different lines. In this case, more
than one rectangle (resp. quadrilateral) are returned. (Changed in v1.18.2) The method
now supports dehyphenation, so it will find e.g. “method”, even if it was hyphenated

19.21. TextPage
365

PyMuPDF Documentation, Release 1.23.25

in two parts “meth-” and “od” across two lines. The two returned rectangles will contain
“meth” (no hyphen) and “od”.

Note: Overview of changes in v1.18.2:

1. The hit_max parameter has been removed: all hits are always returned.

2. The Rect parameter of the TextPage is now respected: only text inside this area is examined. Only
characters with fully contained bboxes are considered. The wrapper method Page.search_for()
correspondingly supports a clip parameter.

3. Hyphenated words are now found.

4. Overlapping rectangles in the same line are now automatically joined. We assume that such sepa-
rations are an artifact created by multiple marked content groups, containing parts of the same search
needle.

Example Quad versus Rect: when searching for needle “pymupdf”, then the corresponding entry will either
be the blue rectangle, or, if quads was specified, the quad Quad(ul, ur, ll, lr).

rect

The rectangle associated with the text page. This either equals the rectangle of the creating page or the
clip parameter of Page.get_textpage() and text extraction / searching methods.

Note: The output of text searching and most text extractions is restricted to this rectangle. (X)HTML
and XML output will however always extract the full page.

366
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.21.1 Structure of Dictionary Outputs

Methods
TextPage.extractDICT(),
TextPage.extractJSON(),
TextPage.extractRAWDICT(),
and

TextPage.extractRAWJSON() return dictionaries, containing the page’s text and image content.
The dictio-
nary structures of all four methods are almost equal. They strive to map the text page’s information hierarchy of
blocks, lines, spans and characters as precisely as possible, by representing each of these by its own sub-dictionary:

• A page consists of a list of block dictionaries.

• A (text) block consists of a list of line dictionaries.

• A line consists of a list of span dictionaries.

• A span either consists of the text itself or, for the RAW variants, a list of character dictionaries.

• RAW variants: a character is a dictionary of its origin, bbox and unicode.

All PyMuPDF geometry objects herein (points, rectangles, matrices) are represented by there “like” formats: a
rect_like tuple is used instead of a Rect, etc. The reasons for this are performance and memory considerations:

• This code is written in C, where Python tuples can easily be generated. The geometry objects on the other hand
are defined in Python source only. A conversion of each Python tuple into its corresponding geometry object
would add significant – and largely unnecessary – execution time.

• A 4-tuple needs about 168 bytes, the corresponding Rect 472 bytes - almost three times the size. A “dict”
dictionary for a text-heavy page contains 300+ bbox objects – which thus require about 50 KB storage as 4-
tuples versus 140 KB as Rect objects. A “rawdict” output for such a page will however contain 4 to 5 thousand
bboxes, so in this case we talk about 750 KB versus 2 MB.

Please also note, that only bboxes (= rect_like 4-tuples) are returned, whereas a TextPage actually has the full
position information – in Quad format. The reason for this decision is again a memory consideration: a quad_like
needs 488 bytes (3 times the size of a rect_like). Given the mentioned amounts of generated bboxes, returning
quad_like information would have a significant impact.

In the vast majority of cases, we are dealing with horizontal text only, where bboxes provide entirely sufficient infor-
mation.

In addition, the full quad information is not lost: it can be recovered as needed for lines, spans, and characters by
using the appropriate function from the following list:

• recover_quad() – the quad of a complete span

• recover_span_quad() – the quad of a character subset of a span

• recover_line_quad() – the quad of a line

• recover_char_quad() – the quad of a character

As mentioned, using these functions is ever only needed, if the text is not written horizontally – line[""dir""] !=
(1, 0) – and you need the quad for text marker annotations (Page.add_highlight_annot() and friends).

19.21. TextPage
367

PyMuPDF Documentation, Release 1.23.25

Page Dictionary

Key
Value

width
width of the clip rectangle (float)

height
height of the clip rectangle (float)

blocks
list of block dictionaries

Block Dictionaries

Block dictionaries come in two different formats for image blocks and for text blocks.

• (Changed in v1.18.0) – new dict key number, the block number.

• (Changed in v1.18.11) – new dict key transform, the image transformation matrix for image blocks.

• (Changed in v1.18.11) – new dict key size, the size of the image in bytes for image blocks.

Image block:

368
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Key
Value

type
1 = image (int)

bbox
image bbox on page (rect_like)

number
block count (int)

ext
image type (str), as file extension, see below

width
original image width (int)

height
original image height (int)

colorspace
colorspace component count (int)

xres
resolution in x-direction (int)

yres
resolution in y-direction (int)

bpc
bits per component (int)

transform
matrix transforming image rect to bbox (matrix_like)

size
size of the image in bytes (int)

image
image content (bytes)

Possible values of the “ext” key are “bmp”, “gif”, “jpeg”, “jpx” (JPEG 2000), “jxr” (JPEG XR), “png”, “pnm”, and
“tiff”.

Note:

1. An image block is generated for all and every image occurrence on the page. Hence there may be duplicates,
if an image is shown at different locations.

2. TextPage and corresponding method Page.get_text() are available for all document types. Only for PDF
documents, methods Document.get_page_images() / Page.get_images() offer some overlapping func-
tionality as far as image lists are concerned. But both lists may or may not contain the same items. Any
differences are most probably caused by one of the following:

• “Inline” images (see page 214 of the Adobe PDF References) of a PDF page are contained in a textpage,
but do not appear in Page.get_images().

• Annotations may also contain images – these will not appear in Page.get_images().

• Image blocks in a textpage are generated for every image location – whether or not there are any duplicates.
This is in contrast to Page.get_images(), which will list each image only once (per reference name).

• Images mentioned in the page’s object definition will always appear in Page.get_images()1. But it
may happen, that there is no “display” command in the page’s contents (erroneously or on purpose). In
this case the image will not appear in the textpage.

3. The image’s “transformation matrix” is defined as the matrix, for which the expression bbox / transform ==
fitz.Rect(0, 0, 1, 1) is true, lookup details here: Image Transformation Matrix.

Text block:

Key
Value

type
0 = text (int)

bbox
block rectangle, rect_like

number
block count (int)

lines
list of text line dictionaries

1 Image specifications for a PDF page are done in a page’s (sub-) dictionary, called /Resources. Resource dictionaries can be inherited
from any of the page’s parent objects (usually the catalog – the top-level parent). The PDF creator may e.g. define one /Resources on file level,
naming all images and / or all fonts ever used by any page. In these cases, Page.get_images() and Page.get_fonts() will consequently return
the same lists for all pages. If desired, this situation can be reverted using Page.clean_contents(). After execution, the page’s object definition
will show fonts and images that are actually used.

19.21. TextPage
369

PyMuPDF Documentation, Release 1.23.25

Line Dictionary

Key
Value

bbox
line rectangle, rect_like

wmode
writing mode (int): 0 = horizontal, 1 = vertical

dir
writing direction, point_like

spans
list of span dictionaries

The value of key “dir” is the unit vector dir = (cosine, -sine) of the angle, which the text has relative to the
x-axis2. See the following picture: The word in each quadrant (counter-clockwise from top-right to bottom-right) is
rotated by 30, 120, 210 and 300 degrees respectively.

Span Dictionary

Spans contain the actual text. A line contains more than one span only, if it contains text with different font properties.

• Changed in version 1.14.17 Spans now also have a bbox key (again).

• Changed in version 1.17.6 Spans now also have an origin key.

2 The coordinate systems of MuPDF and PDF are different in that MuPDF uses the page’s top-left point as (0, 0). In PDF, this is the bottom-left
point. Therefore, the positive direction for MuPDF’s y-axis is from top to bottom. This causes the sign change for the sine value here: a negative
value indicates anti-clockwise rotation of the text.

370
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Key
Value

bbox
span rectangle, rect_like

origin
the first character’s origin, point_like

font
font name (str)

ascender
ascender of the font (float)

descender
descender of the font (float)

size
font size (float)

flags
font characteristics (int)

color
text color in sRGB format (int)

text
(only for extractDICT()) text (str)

chars
(only for extractRAWDICT()) list of character dictionaries

(New in version 1.16.0): “color” is the text color encoded in sRGB (int) format, e.g. 0xFF0000 for red. There are
functions for converting this integer back to formats (r, g, b) (PDF with float values from 0 to 1) sRGB_to_pdf(), or
(R, G, B), sRGB_to_rgb() (with integer values from 0 to 255).

(New in v1.18.5): “ascender” and “descender” are font properties, provided relative to fontsize 1. Note that de-
scender is a negative value. The following picture shows the relationship to other values and properties.

These numbers may be used to compute the minimum height of a character (or span) – as opposed to the standard
height provided in the “bbox” values (which actually represents the line height). The following code recalculates the
span bbox to have a height of fontsize exactly fitting the text inside:

>>> a = span[""ascender""]
>>> d = span[""descender""]
>>> r = fitz.Rect(span[""bbox""])
>>> o = fitz.Point(span[""origin""])
# its y-value is the baseline

>>> r.y1 = o.y - span[""size""] * d / (a - d)
>>> r.y0 = r.y1 - span[""size""]
>>> # r now is a rectangle of height 'fontsize'

Caution: The above calculation may deliver a larger height! This may e.g. happen for OCRed documents, where
the risk of all sorts of text artifacts is high. MuPDF tries to come up with a reasonable bbox height, indepen-
dently from the fontsize found in the PDF. So please ensure that the height of span[""bbox""] is larger than
span[""size""].

19.21. TextPage
371

PyMuPDF Documentation, Release 1.23.25

Note:
You may request PyMuPDF to do all of the above automatically by executing fitz.TOOLS.
set_small_glyph_heights(True). This sets a global parameter so that all subsequent text searches and text ex-
tractions are based on reduced glyph heights, where meaningful.

The following shows the original span rectangle in red and the rectangle with re-computed height in blue.

“flags” is an integer, which represents font properties except for the first bit 0. They are to be interpreted like this:

• bit 0: superscripted (20) – not a font property, detected by MuPDF code.

• bit 1: italic (21)

• bit 2: serifed (22)

• bit 3: monospaced (23)

• bit 4: bold (24)

Test these characteristics like so:

>>> if flags & 2**1: print(""italic"")
>>> # etc.

Bits 1 thru 4 are font properties, i.e. encoded in the font program. Please note, that this information is not necessarily
correct or complete: fonts quite often contain wrong data here.

Character Dictionary for extractRAWDICT()

Key
Value

origin
character’s left baseline point, point_like

bbox
character rectangle, rect_like

c
the character (unicode)

This image shows the relationship between a character’s bbox and its quad:

This documentation covers all versions up to 1.23.25.

372
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.22 TextWriter

• New in v1.16.18

This class represents a MuPDF text object. The basic idea is to decouple (1) text preparation, and (2) text output to
PDF pages.

During preparation, a text writer stores any number of text pieces (“spans”) together with their positions and individual
font information. The output of the writer’s prepared content may happen multiple times to any PDF page with a
compatible page size.

A text writer is an elegant alternative to methods Page.insert_text() and friends:

• Improved text positioning: Choose any point where insertion of text should start. Storing text returns the
“cursor position” after the last character of the span.

• Free font choice: Each text span has its own font and fontsize. This lets you easily switch when composing
a larger text.

• Automatic fallback fonts: If a character is not supported by the chosen font, alternative fonts are automatically
searched. This significantly reduces the risk of seeing unprintable symbols in the output (“TOFUs” – looking
like a small rectangle). PyMuPDF now also comes with the universal font “Droid Sans Fallback Regular”,
which supports all Latin characters (including Cyrillic and Greek), and all CJK characters (Chinese, Japanese,
Korean).

• Cyrillic and Greek Support: The PDF Base 14 Fonts have integrated support of Cyrillic and Greek characters
without specifying encoding. Your text may be a mixture of Latin, Greek and Cyrillic.

• Transparency support: Parameter opacity is supported. This offers a handy way to create watermark-style text.

• Justified text: Supported for any font – not just simple fonts as in Page.insert_textbox().

• Reusability: A TextWriter object exists independent from PDF pages. It can be written multiple times, either to
the same or to other pages, in the same or in different PDFs, choosing different colors or transparency.

Using this object entails three steps:

1. When created, a TextWriter requires a fixed page rectangle in relation to which it calculates text positions. A
text writer can write to pages of this size only.

2. Store text in the TextWriter using methods TextWriter.append(),
TextWriter.appendv() and

TextWriter.fill_textbox() as often as is desired.

3. Output the TextWriter object on some PDF page(s).

Note:

• Starting with version 1.17.0, TextWriters do support text rotation via the morph parameter of TextWriter.
write_text().

• There also exists Page.write_text() which combines one or more TextWriters and jointly writes them to a
given rectangle and with a given rotation angle – much like Page.show_pdf_page().

19.22. TextWriter
373

PyMuPDF Documentation, Release 1.23.25

Method / Attribute
Short Description

append()
Add text in horizontal write mode

appendv()
Add text in vertical write mode

fill_textbox()
Fill rectangle (horizontal write mode)

write_text()
Output TextWriter to a PDF page

color
Text color (can be changed)

last_point
Last written character ends here

opacity
Text opacity (can be changed)

rect
Page rectangle used by this TextWriter

text_rect
Area occupied so far

Class API

class TextWriter

__init__(self, rect, opacity=1, color=None)

Parameters

• rect (rect-like) – rectangle internally used for text positioning computations.

• opacity (float) – sets the transparency for the text to store here. Values outside
the interval [0, 1) will be ignored. A value of e.g. 0.5 means 50% transparency.

• color (float,sequ) – the color of the text. All colors are specified as floats 0
<= color <= 1. A single float represents some gray level, a sequence implies the
colorspace via its length.

append(pos, text, font=None, fontsize=11, language=None, right_to_left=False, small_caps=0)

• Changed in v1.18.9

• Changed in v1.18.15

Add some new text in horizontal writing.

Parameters

• pos (point_like) – start position of the text, the bottom left point of the first
character.

• text (str) – a string of arbitrary length. It will be written starting at position “pos”.

• font – a Font. If omitted, fitz.Font(""helv"") will be used.

• fontsize (float) – the fontsize, a positive number, default 11.

• language (str) – the language to use, e.g. “en” for English. Meaningful values
should be compliant with the ISO 639 standards 1, 2, 3 or 5. Reserved for future
use: currently has no effect as far as we know.

• right_to_left (bool) – (New in v1.18.9) whether the text should be written from
right to left. Applicable for languages like Arabian or Hebrew. Default is False.
If True, any Latin parts within the text will automatically converted. There are
no other consequences, i.e. TextWriter.last_point will still be the rightmost
character, and there neither is any alignment taking place. Hence you may want to
use TextWriter.fill_textbox() instead.

• small_caps (bool) – (New in v1.18.15) look for the character’s Small Capital ver-
sion in the font. If present, take that value instead. Otherwise the original character

374
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

(this font or the fallback font) will be taken. The fallback font will never return small
caps. For example, this snippet:

>>> doc = fitz.open()
>>> page = doc.new_page()
>>> text = ""PyMuPDF: the Python bindings for MuPDF""
>>> font = fitz.Font(""figo"")
# choose a font with small caps

>>> tw = fitz.TextWriter(page.rect)
>>> tw.append((50,100), text, font=font, small_caps=True)
>>> tw.write_text(page)
>>> doc.ez_save(""x.pdf"")

will produce this PDF text:

Returns

text_rect and last_point. (Changed in v1.18.0:) Raises an exception for an unsup-
ported font – checked via Font.is_writable.

appendv(pos, text, font=None, fontsize=11, language=None, small_caps=0)

Changed in v1.18.15

Add some new text in vertical, top-to-bottom writing.

Parameters

• pos (point_like) – start position of the text, the bottom left point of the first
character.

• text (str) – a string. It will be written starting at position “pos”.

• font – a Font. If omitted, fitz.Font(""helv"") will be used.

• fontsize (float) – the fontsize, a positive float, default 11.

• language (str) – the language to use, e.g. “en” for English. Meaningful values
should be compliant with the ISO 639 standards 1, 2, 3 or 5. Reserved for future
use: currently has no effect as far as we know.

• small_caps (bool) – (New in v1.18.15) see append().

Returns

text_rect and last_point. (Changed in v1.18.0:) Raises an exception for an unsup-
ported font – checked via Font.is_writable.

fill_textbox(rect, text, *, pos=None, font=None, fontsize=11, align=0, right_to_left=False, warn=None,
small_caps=0)

• Changed in 1.17.3: New parameter pos to specify where to start writing within rectangle.

• Changed in v1.18.9: Return list of lines which do not fit in rectangle. Support writing right-to-left
(e.g. Arabian, Hebrew).

• Changed in v1.18.15: Prefer small caps if supported by the font.

Fill a given rectangle with text in horizontal writing mode. This is a convenience method to use as an
alternative for append().

Parameters

• rect (rect_like) – the area to fill. No part of the text will appear outside of this.

19.22. TextWriter
375

PyMuPDF Documentation, Release 1.23.25

• text (str,sequ) – the text. Can be specified as a (UTF-8) string or a list / tuple
of strings. A string will first be converted to a list using splitlines(). Every list item
will begin on a new line (forced line breaks).

• pos (point_like) – (new in v1.17.3) start storing at this point. Default is a point
near rectangle top-left.

• font – the Font, default fitz.Font(""helv"").

• fontsize (float) – the fontsize.

• align
(int)
–
text
alignment.
Use
one
of
TEXT_ALIGN_LEFT,
TEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT or TEXT_ALIGN_JUSTIFY.

• right_to_left (bool) – (New in v1.18.9) whether the text should be written from
right to left. Applicable for languages like Arabian or Hebrew. Default is False. If
True, any Latin parts are automatically reverted. You must still set the alignment (if
you want right alignment), it does not happen automatically – the other alignment
options remain available as well.

• warn (bool) – on text overflow do nothing, warn, or raise an exception. Overflow
text will never be written. Changed in v1.18.9:

– Default is None.

– The list of overflow lines will be returned.

• small_caps (bool) – (New in v1.18.15) see append().

Return type

list

Returns

New in v1.18.9 – List of lines that did not fit in the rectangle. Each item is a tuple (text,
length) containing a string and its length (on the page).

Note: Use these methods as often as is required – there is no technical limit (except memory constraints of your
system). You can also mix append() and text boxes and have multiple of both. Text positioning is exclusively
controlled by the insertion point. Therefore there is no need to adhere to any order. (Changed in v1.18.0:) Raise
an exception for an unsupported font – checked via Font.is_writable.

write_text(page, opacity=None, color=None, morph=None, overlay=True, oc=0, render_mode=0)

Write the TextWriter text to a page, which is the only mandatory parameter. The other parameters can be
used to temporarily override the values used when the TextWriter was created.

Parameters

• page – write to this Page.

• opacity (float) – override the value of the TextWriter for this output.

• color (sequ) – override the value of the TextWriter for this output.

• morph (sequ) – modify the text appearance by applying a matrix to it. If provided,
this must be a sequence (fixpoint, matrix) with a point-like fixpoint and a matrix-like
matrix. A typical example is rotating the text around fixpoint.

• overlay (bool) – put in foreground (default) or background.

• oc (int) – (new in v1.18.4) the xref of an OCG or OCMD.

376
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• render_mode (int) – The PDF Tr operator value. Values: 0 (default), 1, 2, 3

(invisible).

text_rect

The area currently occupied.

Return type

Rect

last_point

The “cursor position” – a Point – after the last written character (its bottom-right).

Return type

Point

opacity

The text opacity (modifiable).

Return type

float

color

The text color (modifiable).

Return type

float,tuple

rect

The page rectangle for which this TextWriter was created. Must not be modified.

Return type

Rect

Note: To see some demo scripts dealing with TextWriter, have a look at this repository.

1. Opacity and color apply to all the text in this object.

2. If you need different colors / transparency, you must create a separate TextWriter. Whenever you determine
the color should change, simply append the text to the respective TextWriter using the previously returned
last_point as position for the new text span.

3. Appending items or text boxes can occur in arbitrary order: only the position parameter controls where text
appears.

4. Font and fontsize can freely vary within the same TextWriter. This can be used to let text with different
properties appear on the same displayed line: just specify pos accordingly, and e.g. set it to last_point of the
previously added item.

19.22. TextWriter
377

PyMuPDF Documentation, Release 1.23.25

5. You can use the pos argument of TextWriter.fill_textbox() to set the position of the first text character.
This allows filling the same textbox with contents from different TextWriter objects, thus allowing for multiple
colors, opacities, etc.

6. MuPDF does not support all fonts with this feature, e.g. no Type3 fonts. Starting with v1.18.0 this can be checked
via the font attribute Font.is_writable. This attribute is also checked when using TextWriter methods.

This documentation covers all versions up to 1.23.25.

19.23 Tools

This class is a collection of utility methods and attributes, mainly around memory management. To simplify and speed
up its use, it is automatically instantiated under the name TOOLS when PyMuPDF is imported.

Method / Attribute
Description

Tools.gen_id()
generate a unique identifier

Tools.store_shrink()
shrink the storables cache1

Tools.mupdf_warnings()
return the accumulated MuPDF warnings

Tools.mupdf_display_errors()
return the accumulated MuPDF warnings

Tools.reset_mupdf_warnings()
empty MuPDF messages on STDOUT

Tools.set_aa_level()
set the anti-aliasing values

Tools.set_annot_stem()
set the prefix of new annotation / link ids

Tools.set_small_glyph_heights()
search and extract using small bbox heights

Tools.set_subset_fontnames()
control suppression of subset fontname tags

Tools.show_aa_level()
return the anti-aliasing values

Tools.unset_quad_corrections()
disable PyMuPDF-specific code

Tools.fitz_config
configuration settings of PyMuPDF

Tools.store_maxsize
maximum storables cache size

Tools.store_size
current storables cache size

Class API

class Tools

gen_id()

A convenience method returning a unique positive integer which will increase by 1 on every invocation.
Example usages include creating unique keys in databases - its creation should be faster than using times-
tamps by an order of magnitude.

Note: MuPDF has dropped support for this in v1.14.0, so we have re-implemented a similar function with
the following differences:

• It is not part of MuPDF’s global context and not threadsafe (not an issue because we do not support
threads in PyMuPDF anyway).

1 This memory area is internally used by MuPDF, and it serves as a cache for objects that have already been read and interpreted, thus improving
performance. The most bulky object types are images and also fonts. When an application starts up the MuPDF library (in our case this happens as
part of import fitz), it must specify a maximum size for this area. PyMuPDF’s uses the default value (256 MB) to limit memory consumption. Use
the methods here to control or investigate store usage. For example: even after a document has been closed and all related objects have been deleted,
the store usage may still not drop down to zero. So you might want to enforce that before opening another document.

378
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

• It is implemented as int. This means that the maximum number is sys.maxsize. Should this number
ever be exceeded, the counter starts over again at 1.

Return type

int

Returns

a unique positive integer.

set_annot_stem(stem=None)

• New in v1.18.6

Set or inquire the prefix for the id of new annotations, fields or links.

Parameters

stem (str) – if omitted, the current value is returned, default is “fitz”. Annotations,
fields / widgets and links technically are subtypes of the same type of object (/Annot) in
PDF documents. An /Annot object may be given a unique identifier within a page. For
each of the applicable subtypes, PyMuPDF generates identifiers “stem-Annn”, “stem-
Wnnn” or “stem-Lnnn” respectively. The number “nnn” is used to enforce the required
uniqueness.

Return type

str

Returns

the current value.

set_small_glyph_heights(on=None)

• New in v1.18.5

Set or inquire reduced bbox heights in text extract and text search methods.

Parameters

on (bool) – if omitted or None, the current setting is returned. For other values the bool()
function is applied to set a global variable. If True, Page.search_for() and Page.
get_text() methods return character, span, line or block bboxes that have a height of
font size. If False (standard setting when PyMuPDF is imported), bbox height will be
based on font properties and normally equal line height.

Return type

bool

Returns

True or False.

Note:
Text extraction options “xml”, “xhtml” and “html”, which directly wrap MuPDF code, are not
influenced by this.

set_subset_fontnames(on=None)

• New in v1.18.9

Control suppression of subset fontname tags in text extractions.

19.23. Tools
379

PyMuPDF Documentation, Release 1.23.25

Parameters

on (bool) – if omitted / None, the current setting is returned. Arguments evaluat-
ing to True or False set a global variable. If True, options “dict”, “json”, “raw-
dict” and “rawjson” will return e.g.
""NOHSJV+Calibri-Light"", otherwise only
""Calibri-Light"" (the default). The setting remains in effect until changed again.

Return type

bool

Returns

True or False.

Note: Except mentioned above, no other text extraction variants are influenced by this. This is especially
true for the options “xml”, “xhtml” and “html”, which are based on MuPDF code. They extract the font
name ""Calibri-Light"", or even just the family name – Calibri in this example.

unset_quad_corrections(on=None)

• New in v1.18.10

Enable / disable PyMuPDF-specific code, that tries to rebuild valid character quads when encountering
nonsense in Page.get_text() text extractions. This code depends on certain font properties (ascender
and descender), which do not exist in rare situations and cause segmentation faults when trying to access
them. This method sets a global parameter in PyMuPDF, which suppresses execution of this code.

Parameters

on (bool) – if omitted or None, the current setting is returned. For other values the
bool() function is applied to set a global variable. If True, PyMuPDF will not try to
access the resp. font properties and use values ascender=0.8 and descender=-0.2
instead.

Return type

bool

Returns

True or False.

store_shrink(percent)

Reduce the storables cache by a percentage of its current size.

Parameters

percent (int) – the percentage of current size to free. If 100+ the store will be emptied,
if zero, nothing will happen. MuPDF’s caching strategy is “least recently used”, so low-
usage elements get deleted first.

Return type

int

Returns

the new current store size. Depending on the situation, the size reduction may be larger
than the requested percentage.

show_aa_level()

• New in version 1.16.14

Return the current anti-aliasing values. These values control the rendering quality of graphics and text
elements.

380
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

Return type

dict

Returns

A dictionary with the following initial content: {'graphics':
8, 'text':
8,
'graphics_min_line_width':
0.0}.

set_aa_level(level)

• New in version 1.16.14

Set the new number of bits to use for anti-aliasing. The same value is taken currently for graphics and text
rendering. This might change in a future MuPDF release.

Parameters

level (int) – an integer ranging between 0 and 8. Value outside this range will be
silently changed to valid values. The value will remain in effect throughout the current
session or until changed again.

reset_mupdf_warnings()

• New in version 1.16.0

Empty MuPDF warnings message buffer.

mupdf_display_errors(value=None)

• New in version 1.16.8

Show or set whether MuPDF errors should be displayed.

Parameters

value (bool) – if not a bool, the current setting is returned. If true, MuPDF errors
will be shown on sys.stderr, otherwise suppressed. In any case, messages continue to be
stored in the warnings store. Upon import of PyMuPDF this value is True.

Returns

True or False

mupdf_warnings(reset=True)

• New in version 1.16.0

Return all stored MuPDF messages as a string with interspersed line-breaks.

Parameters

reset (bool) – (new in version 1.16.7) whether to automatically empty the store.

fitz_config

A dictionary containing the actual values used for configuring PyMuPDF and MuPDF. Also refer to the
installation chapter. This is an overview of the keys, each of which describes the status of a support aspect.

19.23. Tools
381

PyMuPDF Documentation, Release 1.23.25

Key
Support included for ...

plotter-g
Gray colorspace rendering

plotter-rgb
RGB colorspace rendering

plotter-cmyk
CMYK colorspcae rendering

plotter-n
overprint rendering

pdf
PDF documents

xps
XPS documents

svg
SVG documents

cbz
CBZ documents

img
IMG documents

html
HTML documents

epub
EPUB documents

jpx
JPEG2000 images

js
JavaScript

tofu
all TOFU fonts

tofu-cjk
CJK font subset (China, Japan, Korea)

tofu-cjk-ext
CJK font extensions

tofu-cjk-lang
CJK font language extensions

tofu-emoji
TOFU emoji fonts

tofu-historic
TOFU historic fonts

tofu-symbol
TOFU symbol fonts

tofu-sil
TOFU SIL fonts

icc
ICC profiles

py-memory
using Python memory management2

base14
Base-14 fonts (should always be true)

For an explanation of the term “TOFU” see this Wikipedia article:

In [1]: import fitz
In [2]: TOOLS.fitz_config
Out[2]:
{'plotter-g': True,

'plotter-rgb': True,
'plotter-cmyk': True,
'plotter-n': True,
'pdf': True,
'xps': True,
'svg': True,
'cbz': True,
'img': True,
'html': True,
'epub': True,
'jpx': True,
'js': True,
'tofu': False,
'tofu-cjk': True,
'tofu-cjk-ext': False,
'tofu-cjk-lang': False,
'tofu-emoji': False,

(continues on next page)

2 By default PyMuPDF and MuPDF use malloc()/free() for dynamic memory management. One can instead force them to use the Python
allocation functions PyMem_New()/PyMem_Del(), by modifying fitz/fitz.i to do #define JM_MEMORY 1 and rebuilding PyMuPDF.

382
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

'tofu-historic': False,
'tofu-symbol': False,
'tofu-sil': False,
'icc': True,
'py-memory': False,
'base14': True}

Return type

dict

store_maxsize

Maximum storables cache size in bytes. PyMuPDF is generated with a value of 268’435’456 (256 MB,
the default value), which you should therefore always see here. If this value is zero, then an “unlimited”
growth is permitted.

Return type

int

store_size

Current storables cache size in bytes. This value may change (and will usually increase) with every use of
a PyMuPDF function. It will (automatically) decrease only when Tools.store_maxsize is going to be
exceeded: in this case, MuPDF will evict low-usage objects until the value is again in range.

Return type

int

19.23.1 Example Session

>>> import fitz
# print the maximum and current cache sizes
>>> fitz.TOOLS.store_maxsize
268435456
>>> fitz.TOOLS.store_size
0
>>> doc = fitz.open(""demo1.pdf"")
# pixmap creation puts lots of object in cache (text, images, fonts),
# apart from the pixmap itself
>>> pix = doc[0].get_pixmap(alpha=False)
>>> fitz.TOOLS.store_size
454519
# release (at least) 50% of the storage
>>> fitz.TOOLS.store_shrink(50)
13471
>>> fitz.TOOLS.store_size
13471
# get a few unique numbers
>>> fitz.TOOLS.gen_id()
1
>>> fitz.TOOLS.gen_id()
2
>>> fitz.TOOLS.gen_id()

(continues on next page)

19.23. Tools
383

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

3
# close document and see how much cache is still in use
>>> doc.close()
>>> fitz.TOOLS.store_size
0
>>>

This documentation covers all versions up to 1.23.25.

19.24 Widget

This class represents a PDF Form field, also called a “widget”. Throughout this documentation, we are using these terms
synonymously. Fields technically are a special case of PDF annotations, which allow users with limited permissions to
enter information in a PDF. This is primarily used for filling out forms.

Like annotations, widgets live on PDF pages. Similar to annotations, the first widget on a page is accessible via Page.
first_widget and subsequent widgets can be accessed via the Widget.next property.

(Changed in version 1.16.0) MuPDF no longer treats widgets as a subset of general annotations. Consequently, Page.
first_annot and Annot.next() will deliver non-widget annotations exclusively, and be None if only form fields
exist on a page. Vice versa, Page.first_widget and Widget.next() will only show widgets. This design decision
is purely internal to MuPDF; technically, links, annotations and fields have a lot in common and also continue to share
the better part of their code within (Py-) MuPDF.

Class API

class Widget

button_states()

New in version 1.18.15

Return the names of On / Off (i.e. selected / clicked or not) states a button field may have.
While the ‘Off’ state usually is also named like so, the ‘On’ state is often given a name relating
to the functional context, for example ‘Yes’, ‘Female’, etc.

This method helps finding out the possible values of field_value in these cases.

returns

a dictionary with the names of ‘On’ and ‘Off’ for the normal and the pressed-
down appearance of button widgets. The following example shows that the
“selected” value is “Male”:

>>> print(field.field_name, field.button_states())
Gender Second person {'down': ['Male', 'Off'], 'normal': [

˓→'Male', 'Off']}

on_state()

• New in version 1.22.2

Return the value of the “ON” state of check boxes and radio buttons. For check boxes this is
always the value “Yes”. For radio buttons, this is the value to select / activate the button.

384
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

returns

the value that sets the button to “selected”.
For non-checkbox, non-
radiobutton fields, always None is returned. For check boxes the return is
True. For radio buttons this is the value “Male” in the following example:

>>> print(field.field_name, field.button_states())
Gender Second person {'down': ['Male', 'Off'], 'normal': [

˓→'Male', 'Off']}
>>> print(field.on_state())
Male

So for check boxes and radio buttons, the recommended method to set them
to “selected”, or to check the state is the following:

>>> field.field_value = field.on_state()
>>> field.field_value == field.on_state()
True

update()

After any changes to a widget, this method must be used to store them in the PDF1.

reset()

Reset the field’s value to its default – if defined – or remove it. Do not forget to issue update() afterwards.

next

Point to the next form field on the page. The last widget returns None.

border_color

A list of up to 4 floats defining the field’s border color. Default value is None which causes border style
and border width to be ignored.

border_style

A string defining the line style of the field’s border. See Annot.border. Default is “s” (“Solid”) – a
continuous line. Only the first character (upper or lower case) will be regarded when creating a widget.

border_width

A float defining the width of the border line. Default is 1.

border_dashes

A list/tuple of integers defining the dash properties of the border line. This is only meaningful if bor-
der_style == “D” and border_color is provided.

choice_values

Python sequence of strings defining the valid choices of list boxes and combo boxes. For these widget
types, this property is mandatory and must contain at least two items. Ignored for other types.

field_name

A mandatory string defining the field’s name. No checking for duplicates takes place.

field_label

An optional string containing an “alternate” field name. Typically used for any notes, help on field usage,
etc. Default is the field name.

1 If you intend to re-access a new or updated field (e.g. for making a pixmap), make sure to reload the page first. Either close and re-open the
document, or load another page first, or simply do page = doc.reload_page(page).

19.24. Widget
385

PyMuPDF Documentation, Release 1.23.25

field_value

The value of the field.

field_flags

An integer defining a large amount of properties of a field. Be careful when changing this attribute as this
may change the field type.

field_type

A mandatory integer defining the field type. This is a value in the range of 0 to 6. It cannot be changed
when updating the widget.

field_type_string

A string describing (and derived from) the field type.

fill_color

A list of up to 4 floats defining the field’s background color.

button_caption

The caption string of a button-type field.

is_signed

A bool indicating the signing status of a signature field, else None.

rect

The rectangle containing the field.

text_color

A list of 1, 3 or 4 floats defining the text color. Default value is black ([0, 0, 0]).

text_font

A string defining the font to be used. Default and replacement for invalid values is “Helv”. For valid font
reference names see the table below.

text_fontsize

A float defining the text fontsize. Default value is zero, which causes PDF viewer software to dynami-
cally choose a size suitable for the annotation’s rectangle and text amount.

text_maxlen

An integer defining the maximum number of text characters. PDF viewers will (should) not accept a longer
text.

text_type

An integer defining acceptable text types (e.g. numeric, date, time, etc.). For reference only for the time
being – will be ignored when creating or updating widgets.

xref

The PDF xref of the widget.

script

• New in version 1.16.12

JavaScript text (unicode) for an action associated with the widget, or None. This is the only script action
supported for button type widgets.

script_stroke

• New in version 1.16.12

386
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

JavaScript text (unicode) to be performed when the user types a key-stroke into a text field or combo box
or modifies the selection in a scrollable list box. This action can check the keystroke for validity and reject
or modify it. None if not present.

script_format

• New in version 1.16.12

JavaScript text (unicode) to be performed before the field is formatted to display its current value. This
action can modify the field’s value before formatting. None if not present.

script_change

• New in version 1.16.12

JavaScript text (unicode) to be performed when the field’s value is changed. This action can check the new
value for validity. None if not present.

script_calc

• New in version 1.16.12

JavaScript text (unicode) to be performed to recalculate the value of this field when that of another field
changes. None if not present.

script_blur

• New in version 1.22.6

JavaScript text (unicode) to be performed on losing the focus of this field. None if not present.

script_focus

• New in version 1.22.6

JavaScript text (unicode) to be performed on focusing this field. None if not present.

Note:

1. For adding or changing one of the above scripts,

just put the appropriate JavaScript source code in the widget attribute. To remove a script, set the
respective attribute to None.

2. Button fields only support script.

Other script entries will automatically be set to None.

3. It is worthwhile to look at this manual with lots of information about Adobe’s standard scripts for various
field types. For example, if you want to add a text field representing a date, you may want to store the
following scripts. They will ensure pattern-compatible date formats and display date pickers in supporting
viewers:

widget.script_format = 'AFDate_FormatEx(""mm/dd/yyyy"");'
widget.script_stroke = 'AFDate_KeystrokeEx(""mm/dd/yyyy"");'

19.24. Widget
387

PyMuPDF Documentation, Release 1.23.25

19.24.1 Standard Fonts for Widgets

Widgets use their own resources object /DR. A widget resources object must at least contain a /Font object. Widget
fonts are independent from page fonts. We currently support the 14 PDF base fonts using the following fixed reference
names, or any name of an already existing field font. When specifying a text font for new or changed widgets, either
choose one in the first table column (upper and lower case supported), or one of the already existing form fonts. In the
latter case, spelling must exactly match.

To find out already existing field fonts, inspect the list Document.FormFonts.

Reference
Base14 Fontname

CoBI
Courier-BoldOblique

CoBo
Courier-Bold

CoIt
Courier-Oblique

Cour
Courier

HeBI
Helvetica-BoldOblique

HeBo
Helvetica-Bold

HeIt
Helvetica-Oblique

Helv
Helvetica (default)

Symb
Symbol

TiBI
Times-BoldItalic

TiBo
Times-Bold

TiIt
Times-Italic

TiRo
Times-Roman

ZaDb
ZapfDingbats

You are generally free to use any font for every widget. However, we recommend using ZaDb (“ZapfDingbats”) and
fontsize 0 for check boxes: typical viewers will put a correctly sized tickmark in the field’s rectangle, when it is
clicked.

19.24.2 Supported Widget Types

PyMuPDF supports the creation and update of many, but not all widget types.

• text (PDF_WIDGET_TYPE_TEXT)

• push button (PDF_WIDGET_TYPE_BUTTON)

• check box (PDF_WIDGET_TYPE_CHECKBOX)

• combo box (PDF_WIDGET_TYPE_COMBOBOX)

• list box (PDF_WIDGET_TYPE_LISTBOX)

• radio button (PDF_WIDGET_TYPE_RADIOBUTTON): PyMuPDF does not currently support the creation of groups
of (interconnected) radio buttons, where setting one automatically unsets the other buttons in the group. The
widget object also does not reflect the presence of a button group. However: consistently selecting (or unse-
lecting) a radio button is supported. This includes correctly setting the value maintained in the owning button
group. Selecting a radio button may be done by either assigning True or field.on_state() to the field value.
De-selecting the button should be done assigning False.

• signature (PDF_WIDGET_TYPE_SIGNATURE) read only.

This documentation covers all versions up to 1.23.25.

388
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

19.25 Xml

• New in v1.21.0

This represents an HTML or an XML node. It is a helper class intended to access the DOM (Document Object Model)
content of a Story object.

There is no need to ever directly construct an Xml object: after creating a Story, simply take Story.body – which is
an Xml node – and use it to navigate your way through the story’s DOM.

Method / Attribute
Description

add_bullet_list()
Add a ul tag - bulleted list, context manager.

add_codeblock()
Add a pre tag, context manager.

add_description_list()
Add a dl tag, context manager.

add_division()
add a div tag (renamed from “section”), context manager.

add_header()
Add a header tag (one of h1 to h6), context manager.

add_horizontal_line()
Add a hr tag.

add_image()
Add a img tag.

add_link()
Add a a tag.

add_number_list()
Add a ol tag, context manager.

add_paragraph()
Add a p tag.

add_span()
Add a span tag, context manager.

add_subscript()
Add subscript text(sub tag) - inline element, treated like text.

add_superscript()
Add subscript text (sup tag) - inline element, treated like text.

add_code()
Add code text (code tag) - inline element, treated like text.

add_var()
Add code text (code tag) - inline element, treated like text.

add_samp()
Add code text (code tag) - inline element, treated like text.

add_kbd()
Add code text (code tag) - inline element, treated like text.

add_text()
Add a text string. Line breaks n are honored as br tags.

append_child()
Append a child node.

clone()
Make a copy if this node.

create_element()
Make a new node with a given tag name.

create_text_node()
Create direct text for the current node.

find()
Find a sub-node with given properties.

find_next()
Repeat previous “find” with the same criteria.

insert_after()
Insert an element after current node.

insert_before()
Insert an element before current node.

remove()
Remove this node.

set_align()
Set the alignment using a CSS style spec. Only works for block-level tags.

set_attribute()
Set an arbitrary key to some value (which may be empty).

set_bgcolor()
Set the background color. Only works for block-level tags.

set_bold()
Set bold on or off or to some string value.

set_color()
Set text color.

set_columns()
Set the number of columns. Argument may be any valid number or string.

set_font()
Set the font-family, e.g. “sans-serif”.

set_fontsize()
Set the font size. Either a float or a valid HTML/CSS string.

set_id()
Set a id. A check for uniqueness is performed.

set_italic()
Set italic on or off or to some string value.

set_leading()
Set inter-block text distance (-mupdf-leading), only works on block-level nodes.

set_lineheight()
Set height of a line. Float like 1.5, which sets to 1.5 * fontsize.

set_margins()
Set the margin(s), float or string with up to 4 values.

set_pagebreak_after()
Insert a page break after this node.

continues on next page

19.25. Xml
389

PyMuPDF Documentation, Release 1.23.25

Table 5 – continued from previous page

Method / Attribute
Description

set_pagebreak_before()
Insert a page break before this node.

set_properties()
Set any or all desired properties in one call.

add_style()
Set (add) a “style” that is not supported by its own set_ method.

add_class()
Set (add) a “class” attribute.

set_text_indent()
Set indentation for first textblock line. Only works for block-level nodes.

tagname
Either the HTML tag name like p or None if a text node.

text
Either the node’s text or None if a tag node.

is_text
Check if the node is a text.

first_child
Contains the first node one level below this one (or None).

last_child
Contains the last node one level below this one (or None).

next
The next node at the same level (or None).

previous
The previous node at the same level.

root
The top node of the DOM, which hence has the tagname html.

Class API

class Xml

add_bullet_list()

Add an ul tag - bulleted list, context manager. See ul.

add_codeblock()

Add a pre tag, context manager. See pre.

add_description_list()

Add a dl tag, context manager. See dl.

add_division()

Add a div tag, context manager. See div.

add_header(value)

Add a header tag (one of h1 to h6), context manager. See headings.

Parameters

value (int) – a value 1 - 6.

add_horizontal_line()

Add a hr tag. See hr.

add_image(name, width=None, height=None)

Add an img tag. This causes the inclusion of the named image in the DOM.

Parameters

• name (str) – the filename of the image. This must be the member name of some
entry of the Archive parameter of the Story constructor.

• width – if provided, either an absolute (int) value, or a percentage string like “30%”.
A percentage value refers to the width of the specified where rectangle in Story.
place(). If this value is provided and height is omitted, the image will be in-
cluded keeping its aspect ratio.

• height – if provided, either an absolute (int) value, or a percentage string like
“30%”. A percentage value refers to the height of the specified where rectangle in
Story.place(). If this value is provided and width is omitted, the image’s aspect
ratio will be honored.

390
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

add_link(href, text=None)

Add an a tag - inline element, treated like text.

Parameters

• href (str) – the URL target.

• text (str) – the text to display. If omitted, the href text is shown instead.

add_number_list()

Add an ol tag, context manager.

add_paragraph()

Add a p tag, context manager.

add_span()

Add a span tag, context manager. See span

add_subscript(text)

Add “subscript” text(sub tag) - inline element, treated like text.

add_superscript(text)

Add “superscript” text (sup tag) - inline element, treated like text.

add_code(text)

Add “code” text (code tag) - inline element, treated like text.

add_var(text)

Add “variable” text (var tag) - inline element, treated like text.

add_samp(text)

Add “sample output” text (samp tag) - inline element, treated like text.

add_kbd(text)

Add “keyboard input” text (kbd tag) - inline element, treated like text.

add_text(text)

Add a text string. Line breaks n are honored as br tags.

set_align(value)

Set the text alignment. Only works for block-level tags.

Parameters

value – either one of the Text Alignment or the text-align values.

set_attribute(key, value=None)

Set an arbitrary key to some value (which may be empty).

Parameters

• key (str) – the name of the attribute.

• value (str) – the (optional) value of the attribute.

get_attributes()

Retrieve all attributes of the current nodes as a dictionary.

Returns

a dictionary with the attributes and their values of the node.

19.25. Xml
391

PyMuPDF Documentation, Release 1.23.25

get_attribute_value(key)

Get the attribute value of key.

Parameters

key (str) – the name of the attribute.

Returns

a string with the value of key.

remove_attribute(key)

Remove the attribute key from the node.

Parameters

key (str) – the name of the attribute.

set_bgcolor(value)

Set the background color. Only works for block-level tags.

Parameters

value – either an RGB value like (255, 0, 0) (for “red”) or a valid background-color
value.

set_bold(value)

Set bold on or off or to some string value.

Parameters

value – True, False or a valid font-weight value.

set_color(value)

Set the color of the text following.

Parameters

value – either an RGB value like (255, 0, 0) (for “red”) or a valid color value.

set_columns(value)

Set the number of columns.

Parameters

value – a valid columns value.

Note: Currently ignored - supported in a future MuPDF version.

set_font(value)

Set the font-family.

Parameters

value (str) – e.g. “sans-serif”.

set_fontsize(value)

Set the font size for text following.

Parameters

value – a float or a valid font-size value.

set_id(unqid)

Set a id. This serves as a unique identification of the node within the DOM. Use it to easily locate the node
to inspect or modify it. A check for uniqueness is performed.

Parameters

unqid (str) – id string of the node.

392
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

set_italic(value)

Set italic on or off or to some string value for the text following it.

Parameters

value – True, False or some valid font-style value.

set_leading(value)

Set inter-block text distance (-mupdf-leading), only works on block-level nodes.

Parameters

value (float) – the distance in points to the previous block.

set_lineheight(value)

Set height of a line.

Parameters

value – a float like 1.5 (which sets to 1.5 * fontsize), or some valid line-height
value.

set_margins(value)

Set the margin(s).

Parameters

value – float or string with up to 4 values. See CSS documentation.

set_pagebreak_after()

Insert a page break after this node.

set_pagebreak_before()

Insert a page break before this node.

set_properties(align=None, bgcolor=None, bold=None, color=None, columns=None, font=None,
fontsize=None, indent=None, italic=None, leading=None, lineheight=None,
margins=None, pagebreak_after=False, pagebreak_before=False, unqid=None,
cls=None)

Set any or all desired properties in one call. The meaning of argument values equal the values of the
corresponding set_ methods.

Note:
The properties set by this method are directly attached to the node, whereas every set_ method
generates a new span below the current node that has the respective property. So to e.g. “globally” set
some property for the body, this method must be used.

add_style(value)

Set (add) some style attribute not supported by its own set_ method.

Parameters

value (str) – any valid CSS style value.

add_class(value)

Set (add) some “class” attribute.

Parameters

value (str) – the name of the class. Must have been defined in either the HTML or the
CSS source of the DOM.

set_text_indent(value)

Set indentation for the first textblock line. Only works for block-level nodes.

19.25. Xml
393

PyMuPDF Documentation, Release 1.23.25

Parameters

value – a valid text-indent value. Please note that negative values do not work.

append_child(node)

Append a child node. This is a low-level method used by other methods like Xml.add_paragraph().

Parameters

node – the Xml node to append.

create_text_node(text)

Create direct text for the current node.

Parameters

text (str) – the text to append.

Return type

Xml

Returns

the created element.

create_element(tag)

Create a new node with a given tag.
This a low-level method used by other methods like Xml.
add_paragraph().

Parameters

tag (str) – the element tag.

Return type

Xml

Returns

the created element. To actually bind it to the DOM, use Xml.append_child().

insert_before(elem)

Insert the given element elem before this node.

Parameters

elem – some Xml element.

insert_after(elem)

Insert the given element elem after this node.

Parameters

elem – some Xml element.

clone()

Make a copy of this node, which then may be appended (using Xml.append_child()) or inserted (using
one of Xml.insert_before(), Xml.insert_after()) in this DOM.

Returns

the clone (Xml) of the current node.

remove()

Remove this node from the DOM.

debug()

For debugging purposes, print this node’s structure in a simplified form.

394
Chapter 19. Classes

PyMuPDF Documentation, Release 1.23.25

find(tag, att, match)

Under the current node, find the first node with the given tag, attribute att and value match.

Parameters

• tag (str) – restrict search to this tag. May be None for unrestricted searches.

• att (str) – check this attribute. May be None.

• match (str) – the desired attribute value to match. May be None.

Return type

Xml.

Returns

None if nothing found, otherwise the first matching node.

find_next(tag, att, match)

Continue a previous Xml.find() (or find_next()) with the same values.

Return type

Xml.

Returns

None if none more found, otherwise the next matching node.

tagname

Either the HTML tag name like p or None if a text node.

text

Either the node’s text or None if a tag node.

is_text

Check if a text node.

first_child

Contains the first node one level below this one (or None).

last_child

Contains the last node one level below this one (or None).

next

The next node at the same level (or None).

previous

The previous node at the same level.

root

The top node of the DOM, which hence has the tagname html.

19.25.1 Setting Text properties

In HTML tags can be nested such that innermost text inherits properties from the tag enveloping its parent tag. For
example <p>.

To achieve the same effect, methods like Xml.set_bold() and Xml.set_italic() each open a temporary span with
the desired property underneath the current node.

In addition, these methods return there parent node, so they can be concatenated with each other.

19.25. Xml
395

PyMuPDF Documentation, Release 1.23.25

19.25.2 Context Manager support

The standard way to add nodes to a DOM is this:

body = story.body
para = body.add_paragraph()
# add a paragraph

para.set_bold()
# text that follows will be bold

para.add_text(""some bold text"")
para.set_italic()
# text that follows will additionally be italic

para.add_txt(""this is bold and italic"")
para.set_italic(False).set_bold(False)
# all following text will be regular

para.add_text(""regular text"")

Methods that are flagged as “context managers” can conveniently be used in this way:

body = story.body
with body.add_paragraph() as para:
para.set_bold().add_text(""some bold text"")
para.set_italic().add_text(""this is bold and italic"")
para.set_italic(False).set_bold(False).add_text(""regular text"")
para.add_text(""more regular text"")

This documentation covers all versions up to 1.23.25.

This documentation covers all versions up to 1.23.25.

396
Chapter 19. Classes

CHAPTER

TWENTY

OPERATOR ALGEBRA FOR GEOMETRY OBJECTS

Instances of classes Point, IRect, Rect, Quad and Matrix are collectively also called “geometry” objects.

They all are special cases of Python sequences, see Using Python Sequences as Arguments in PyMuPDF for more
background.

We have defined operators for these classes that allow dealing with them (almost) like ordinary numbers in terms of
addition, subtraction, multiplication, division, and some others.

This chapter is a synopsis of what is possible.

20.1 General Remarks

1. Operators can be either binary (i.e. involving two objects) or unary.

2. The resulting type of binary operations is either a new object of the left operand’s class or a bool.

3. The result of unary operations is either a new object of the same class, a bool or a float.

4. The binary operators +, -, *, / are defined for all classes. They roughly do what you would expect – except, that
the second operand ...

• may always be a number which then performs the operation on every component of the first one,

• may always be a numeric sequence of the same length (2, 4 or 6) – we call such sequences point_like,

rect_like, quad_like or matrix_like, respectively.

5. Rectangles support additional binary operations: intersection (operator “&”), union (operator “|”) and con-
tainment checking.

6. Binary operators fully support in-place operations, so expressions like a /= b are valid if b is numeric or
“a_like”.

20.2 Unary Operations

Oper.
Result

bool(OBJ)
is false exactly if all components of OBJ are zero

abs(OBJ)
the rectangle area – equal to norm(OBJ) for the other types

norm(OBJ)
square root of the component squares (Euclidean norm)

+OBJ
new copy of OBJ

-OBJ
new copy of OBJ with negated components

~m
inverse of matrix “m”, or the null matrix if not invertible

397

PyMuPDF Documentation, Release 1.23.25

20.3 Binary Operations

For every geometry object “a” and every number “b”, the operations “a ° b” and “a °= b” are always defined for the
operators +, -, *, /. The respective operation is simply executed for each component of “a”. If the second operand is
not a number, then the following is defined:

Oper. Result
a+b,
a-b

component-wise execution, “b” must be “a-like”.

a*m,
a/m

“a” can be a point, rectangle or matrix, but “m” must be matrix_like. “a/m” is treated as “a*~m” (see
note below for non-invertible matrices). If “a” is a point or a rectangle, then “a.transform(m)” is executed.
If “a” is a matrix, then matrix concatenation takes place.

a&b
intersection rectangle: “a” must be a rectangle and “b” rect_like. Delivers the largest rectangle con-
tained in both operands.

a|b
union rectangle: “a” must be a rectangle, and “b” may be point_like or rect_like. Delivers the smallest
rectangle containing both operands.

b in
a

if “b” is a number, then b in tuple(a) is returned. If “b” is point_like, rect_like or quad_like,
then “a” must be a rectangle, and a.contains(b) is returned.

a
==
b

True if bool(a-b) is False (“b” may be “a-like”).

Note: Please note an important difference to usual arithmetic:

Matrix multiplication is not commutative, i.e. in general we have m*n != n*m for two matrices. Also, there are non-
zero matrices which have no inverse, for example m = Matrix(1, 0, 1, 0, 1, 0). If you try to divide by any of
these, you will receive a ZeroDivisionError exception using operator “/”, e.g. for the expression fitz.Identity
/ m. But if you formulate fitz.Identity * ~m, the result will be fitz.Matrix() (the null matrix).

Admittedly, this represents an inconsistency, and we are considering to remove it. For the time being, you can choose
to avoid an exception and check whether ~m is the null matrix, or accept a potential ZeroDivisionError by using fitz.
Identity / m.

Note:

• With these conventions, all the usual algebra rules apply. For example, arbitrarily using brackets (among objects
of the same class!) is possible: if r1, r2 are rectangles and m1, m2 are matrices, you can do this (r1 + r2) *
m1 * m2.

• For all objects of the same class, a + b + c == (a + b) + c == a + (b + c) is true.

• For matrices in addition the following is true: (m1 + m2) * m3 == m1 * m3 + m2 * m3 (distributivity prop-
erty).

• But the sequence of applying matrices is important: If r is a rectangle and m1, m2 are matrices, then –
caution!:

– r * m1 * m2 == (r * m1) * m2 != r * (m1 * m2)

398
Chapter 20. Operator Algebra for Geometry Objects

PyMuPDF Documentation, Release 1.23.25

20.4 Some Examples

20.4.1 Manipulation with numbers

For the usual arithmetic operations, numbers are always allowed as second operand. In addition, you can formulate ""x
in OBJ"", where x is a number. It is implemented as ""x in tuple(OBJ)"":

>>> fitz.Rect(1, 2, 3, 4) + 5
fitz.Rect(6.0, 7.0, 8.0, 9.0)
>>> 3 in fitz.Rect(1, 2, 3, 4)
True
>>>

The following will create the upper left quarter of a document page rectangle:

>>> page.rect
Rect(0.0, 0.0, 595.0, 842.0)
>>> page.rect / 2
Rect(0.0, 0.0, 297.5, 421.0)
>>>

The following will deliver the middle point of a line that connects two points p1 and p2:

>>> p1 = fitz.Point(1, 2)
>>> p2 = fitz.Point(4711, 3141)
>>> mp = (p1 + p2) / 2
>>> mp
Point(2356.0, 1571.5)
>>>

20.4.2 Manipulation with “like” Objects

The second operand of a binary operation can always be “like” the left operand. “Like” in this context means “a
sequence of numbers of the same length”. With the above examples:

>>> p1 + p2
Point(4712.0, 3143.0)
>>> p1 + (4711, 3141)
Point(4712.0, 3143.0)
>>> p1 += (4711, 3141)
>>> p1
Point(4712.0, 3143.0)
>>>

To shift a rectangle for 5 pixels to the right, do this:

>>> fitz.Rect(100, 100, 200, 200) + (5, 0, 5, 0)
# add 5 to the x coordinates

Rect(105.0, 100.0, 205.0, 200.0)
>>>

Points, rectangles and matrices can be transformed with matrices. In PyMuPDF, we treat this like a “multiplication”
(or resp. “division”), where the second operand may be “like” a matrix. Division in this context means “multiplication
with the inverted matrix”:

20.4. Some Examples
399

PyMuPDF Documentation, Release 1.23.25

>>> m = fitz.Matrix(1, 2, 3, 4, 5, 6)
>>> n = fitz.Matrix(6, 5, 4, 3, 2, 1)
>>> p = fitz.Point(1, 2)
>>> p * m
Point(12.0, 16.0)
>>> p * (1, 2, 3, 4, 5, 6)
Point(12.0, 16.0)
>>> p / m
Point(2.0, -2.0)
>>> p / (1, 2, 3, 4, 5, 6)
Point(2.0, -2.0)
>>>
>>> m * n
# matrix multiplication

Matrix(14.0, 11.0, 34.0, 27.0, 56.0, 44.0)
>>> m / n
# matrix division

Matrix(2.5, -3.5, 3.5, -4.5, 5.5, -7.5)
>>>
>>> m / m
# result is equal to the Identity matrix

Matrix(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)
>>>
>>> # look at this non-invertible matrix:
>>> m = fitz.Matrix(1, 0, 1, 0, 1, 0)
>>> ~m
Matrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
>>> # we try dividing by it in two ways:
>>> p = fitz.Point(1, 2)
>>> p * ~m
# this delivers point (0, 0):

Point(0.0, 0.0)
>>> p / m
# but this is an exception:

Traceback (most recent call last):

File ""<pyshell#6>"", line 1, in <module>

p / m
File ""... /site-packages/fitz/fitz.py"", line 869, in __truediv__

raise ZeroDivisionError(""matrix not invertible"")

ZeroDivisionError: matrix not invertible
>>>

As a specialty, rectangles support additional binary operations:

• intersection – the common area of rectangle-likes, operator “&”

• inclusion – enlarge to include a point-like or rect-like, operator “|”

• containment check – whether a point-like or rect-like is inside

Here is an example for creating the smallest rectangle enclosing given points:

>>> # first define some point-likes
>>> points = []
>>> for i in range(10):

for j in range(10):

points.append((i, j))

>>>
>>> # now create a rectangle containing all these 100 points
>>> # start with an empty rectangle

(continues on next page)

400
Chapter 20. Operator Algebra for Geometry Objects

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

>>> r = fitz.Rect(points[0], points[0])
>>> for p in points[1:]:
# and include remaining points one by one

r |= p

>>> r
# here is the to be expected result:

Rect(0.0, 0.0, 9.0, 9.0)
>>> (4, 5) in r
# this point-like lies inside the rectangle

True
>>> # and this rect-like is also inside
>>> (4, 4, 5, 5) in r
True
>>>

This documentation covers all versions up to 1.23.25.

20.4. Some Examples
401

PyMuPDF Documentation, Release 1.23.25

402
Chapter 20. Operator Algebra for Geometry Objects

CHAPTER

TWENTYONE

LOW LEVEL FUNCTIONS AND CLASSES

Contains a number of functions and classes for the experienced user. To be used for special needs or performance
requirements.

21.1 Functions

The following are miscellaneous functions and attributes on a fairly low-level technical detail.

Some functions provide detail access to PDF structures. Others are stripped-down, high performance versions of other
functions which provide more information.

Yet others are handy, general-purpose utilities.

Function
Short Description

Annot.apn_bbox
PDF only: bbox of the appearance object

Annot.apn_matrix
PDF only: the matrix of the appearance object

Page.is_wrapped
check whether contents wrapping is present

adobe_glyph_names()
list of glyph names defined in Adobe Glyph List

adobe_glyph_unicodes()
list of unicodes defined in Adobe Glyph List

Annot.clean_contents()
PDF only: clean the annot’s contents object

Annot.set_apn_bbox()
PDF only: set the bbox of the appearance object

Annot.set_apn_matrix()
PDF only: set the matrix of the appearance object

ConversionHeader()
return header string for get_text methods

ConversionTrailer()
return trailer string for get_text methods

Document.del_xml_metadata()
PDF only: remove XML metadata

Document.get_char_widths()
PDF only: return a list of glyph widths of a font

Document.get_new_xref()
PDF only: create and return a new xref entry

Document.is_stream()
PDF only: check whether an xref is a stream object

Document.xml_metadata_xref()
PDF only: return XML metadata xref number

Document.xref_length()
PDF only: return length of xref table

EMPTY_IRECT()
return the (standard) empty / invalid rectangle

EMPTY_QUAD()
return the (standard) empty / invalid quad

EMPTY_RECT()
return the (standard) empty / invalid rectangle

get_pdf_now()
return the current timestamp in PDF format

get_pdf_str()
return PDF-compatible string

get_text_length()
return string length for a given font & fontsize

glyph_name_to_unicode()
return unicode from a glyph name

image_profile()
return a dictionary of basic image properties

INFINITE_IRECT()
return the (only existing) infinite rectangle

continues on next page

403

PyMuPDF Documentation, Release 1.23.25

Table 1 – continued from previous page

Function
Short Description

INFINITE_QUAD()
return the (only existing) infinite quad

INFINITE_RECT()
return the (only existing) infinite rectangle

make_table()
split rectangle in sub-rectangles

Page.clean_contents()
PDF only: clean the page’s contents objects

Page.get_bboxlog()
list of rectangles that envelop text, drawing or image objects

Page.get_contents()
PDF only: return a list of content xref numbers

Page.get_displaylist()
create the page’s display list

Page.get_text_blocks()
extract text blocks as a Python list

Page.get_text_words()
extract text words as a Python list

Page.get_texttrace()
low-level text information

Page.read_contents()
PDF only: get complete, concatenated /Contents source

Page.run()
run a page through a device

Page.set_contents()
PDF only: set page’s contents to some xref

Page.wrap_contents()
wrap contents with stacking commands

css_for_pymupdf_font()
create CSS source for a font in package pymupdf_fonts

paper_rect()
return rectangle for a known paper format

paper_size()
return width, height for a known paper format

paper_sizes()
dictionary of pre-defined paper formats

planish_line()
matrix to map a line to the x-axis

recover_char_quad()
compute the quad of a char (“rawdict”)

recover_line_quad()
compute the quad of a subset of line spans

recover_quad()
compute the quad of a span (“dict”, “rawdict”)

recover_span_quad()
compute the quad of a subset of span characters

sRGB_to_pdf()
return PDF RGB color tuple from an sRGB integer

sRGB_to_rgb()
return (R, G, B) color tuple from an sRGB integer

unicode_to_glyph_name()
return glyph name from a unicode

get_tessdata()
locates the language support of the Tesseract-OCR installation

fitz_fontdescriptors
dictionary of available supplement fonts

TESSDATA_PREFIX
a copy of os.environ[""TESSDATA_PREFIX""]

pdfcolor
dictionary of almost 500 RGB colors in PDF format.

paper_size(s)

Convenience function to return width and height of a known paper format code. These values are
given in pixels for the standard resolution 72 pixels = 1 inch.

Currently defined formats include ‘A0’ through ‘A10’, ‘B0’ through ‘B10’, ‘C0’ through ‘C10’,
‘Card-4x6’, ‘Card-5x7’, ‘Commercial’, ‘Executive’, ‘Invoice’, ‘Ledger’, ‘Legal’, ‘Legal-13’,
‘Letter’, ‘Monarch’ and ‘Tabloid-Extra’, each in either portrait or landscape format.

A format name must be supplied as a string (case in sensitive), optionally suffixed with “-L” (land-
scape) or “-P” (portrait). No suffix defaults to portrait.

Parameters

s (str) – any format name from above in upper or lower case, like “A4” or “letter-
l”.

Return type

tuple

Returns

(width, height) of the paper format. For an unknown format (-1, -1) is returned.
Examples: fitz.paper_size(“A4”) returns (595, 842) and fitz.paper_size(“letter-l”)
delivers (792, 612).

404
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

paper_rect(s)

Convenience function to return a Rect for a known paper format.

Parameters

s (str) – any format name supported by paper_size().

Return type

Rect

Returns

fitz.Rect(0, 0, width, height) with width, height=fitz.paper_size(s).

>>> import fitz
>>> fitz.paper_rect(""letter-l"")
fitz.Rect(0.0, 0.0, 792.0, 612.0)
>>>

sRGB_to_pdf(srgb)

New in v1.17.4

Convenience function returning a PDF color triple (red, green, blue) for a given sRGB color integer
as it occurs in Page.get_text() dictionaries “dict” and “rawdict”.

Parameters

srgb (int) – an integer of format RRGGBB, where each color component is an
integer in range(255).

Returns

a tuple (red, green, blue) with float items in interval 0 <= item <= 1 representing
the same color. Example sRGB_to_pdf(0xff0000) = (1, 0, 0) (red).

sRGB_to_rgb(srgb)

New in v1.17.4

Convenience function returning a color (red, green, blue) for a given sRGB color integer.

Parameters

srgb (int) – an integer of format RRGGBB, where each color component is an
integer in range(255).

Returns

a tuple (red, green, blue) with integer items in range(256) representing the same
color. Example sRGB_to_pdf(0xff0000) = (255, 0, 0) (red).

glyph_name_to_unicode(name)

New in v1.18.0

Return the unicode number of a glyph name based on the Adobe Glyph List.

Parameters

name (str) – the name of some glyph. The function is based on the Adobe Glyph
List.

21.1. Functions
405

PyMuPDF Documentation, Release 1.23.25

Return type

int

Returns

the unicode. Invalid name entries return 0xfffd (65533).

Note: A similar functionality is provided by package fontTools in its agl sub-package.

unicode_to_glyph_name(ch)

New in v1.18.0

Return the glyph name of a unicode number, based on the Adobe Glyph List.

Parameters

ch (int) – the unicode given by e.g. ord(""ß""). The function is based on the
Adobe Glyph List.

Return type

str

Returns

the glyph name.
E.g.
fitz.unicode_to_glyph_name(ord(""Ä"")) returns
'Adieresis'.

Note: A similar functionality is provided by package fontTools: in its agl sub-package.

adobe_glyph_names()

New in v1.18.0

Return a list of glyph names defined in the Adobe Glyph List.

Return type

list

Returns

list of strings.

Note: A similar functionality is provided by package fontTools in its agl sub-package.

adobe_glyph_unicodes()

New in v1.18.0

Return a list of unicodes for there exists a glyph name in the Adobe Glyph List.

Return type

list

Returns

list of integers.

406
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

Note: A similar functionality is provided by package fontTools in its agl sub-package.

css_for_pymupdf_font(fontcode, *, CSS=None, archive=None, name=None)

New in v1.21.0

Utility function for use with “Story” applications.

Create CSS @font-face items for the given fontcode in pymupdf-fonts. Creates a CSS font-family
for all fonts starting with string “fontcode”.

The font naming convention in package pymupdf-fonts is “fontcode<sf>”, where the suffix “sf” is
one of “” (empty), “it”/”i”, “bo”/”b” or “bi”. These suffixes thus represent the regular, italic, bold
or bold-italic variants of that font.

For example, font code “notos” refers to fonts

• “notos” - “Noto Sans Regular”

• “notosit” - “Noto Sans Italic”

• “notosbo” - “Noto Sans Bold”

• “notosbi” - “Noto Sans Bold Italic”

The function creates (up to) four CSS @font-face definitions and collectively assigns the
font-family name “notos” to them (or the “name” value if provided). Associated font buffers
are placed / added to the provided archive.

To use the font in the Python API for Story, execute .set_font(fontcode) (or “name” if given).
The correct font weight or style will automatically be selected as required.

For example to replace the “sans-serif” HTML standard (i.e. Helvetica) with the above “notos”,
execute the following. Whenever “sans-serif” is used (whether explicitly or implicitly), the Noto
Sans fonts will be selected.

CSS = fitz.css_for_pymupdf_font(""notos"", name=""sans-serif"", archive=...)

Expects and returns the CSS source, with the new CSS definitions appended.

Parameters

• fontcode (str) – one of the font codes present in package pymupdf-fonts

(usually) representing the regular version of the font family.

• CSS (str) – any already existing CSS source, or None. The function will
append its new definitions to this. This is the string that must be used as
user_css when creating the Story.

• archive – Archive, mandatory. All font binaries (i.e. up to four) found for
“fontcode” will be added to the archive. This is the archive that must be used
as Archive when creating the Story.

• name (str) – the name under which the “fontcode” fonts should be found. If
omitted, “fontcode” will be used.

Return type

str

Returns

Modified CSS, with appended @font-face statements for each font variant
of fontcode.
Fontbuffers associated with “fontcode” will have been added

21.1. Functions
407

PyMuPDF Documentation, Release 1.23.25

to ‘archive’.
The function will automatically find up to 4 font variants.
All pymupdf-fonts (that are no special purpose like math or music, etc.)
have regular, bold, italic and bold-italic variants.
To see currently available
font codes check fitz.fitz_fontdescriptors.keys().
This will show
something like dict_keys(['cascadia', 'cascadiai', 'cascadiab',
'cascadiabi', 'figbo', 'figo', 'figbi', 'figit', 'fimbo',
'fimo', 'spacembo', 'spacembi', 'spacemit', 'spacemo',
'math', 'music', 'symbol1', 'symbol2', 'notosbo', 'notosbi',
'notosit', 'notos', 'ubuntu', 'ubuntubo', 'ubuntubi',
'ubuntuit', 'ubuntm', 'ubuntmbo', 'ubuntmbi', 'ubuntmit']).

Here is a complete snippet for using the “Noto Sans” font instead of “Helvetica”:

arch = fitz.Archive()
CSS = fitz.css_for_pymupdf_font(""notos"", name=""sans-serif"", archive=arch)
story = fitz.Story(user_css=CSS, archive=arch)

make_table(rect, cols=1, rows=1)

New in v1.17.4

Convenience function to split a rectangle into sub-rectangles of equal size. Returns a list of rows
lists, each containing cols Rect items. Each sub-rectangle can then be addressed by its row and
column index.

Parameters

• rect (rect_like) – the rectangle to split.

• cols (int) – the desired number of columns.

• rows (int) – the desired number of rows.

Returns

a list of Rect objects of equal size, whose union equals rect. Here is the layout of
a 3x4 table created by cell = fitz.make_table(rect, cols=4, rows=3):

planish_line(p1, p2)

• New in version 1.16.2)*

Return a matrix which maps the line from p1 to p2 to the x-axis such that p1 will become (0,0) and
p2 a point with the same distance to (0,0).

Parameters

• p1 (point_like) – starting point of the line.

• p2 (point_like) – end point of the line.

Return type

Matrix

408
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

Returns

a matrix which combines a rotation and a translation:

>>> p1 = fitz.Point(1, 1)
>>> p2 = fitz.Point(4, 5)
>>> abs(p2 - p1)
# distance of points

5.0
>>> m = fitz.planish_line(p1, p2)
>>> p1 * m
Point(0.0, 0.0)
>>> p2 * m
Point(5.0, -5.960464477539063e-08)
>>> # distance of the resulting points
>>> abs(p2 * m - p1 * m)
5.0

paper_sizes()

A dictionary of pre-defines paper formats. Used as basis for paper_size().

fitz_fontdescriptors

• New in v1.17.5

A dictionary of usable fonts from repository pymupdf-fonts. Items are keyed by their reserved font-
name and provide information like this:

In [2]: fitz.fitz_fontdescriptors.keys()
Out[2]: dict_keys(['figbo', 'figo', 'figbi', 'figit', 'fimbo', 'fimo',
'spacembo', 'spacembi', 'spacemit', 'spacemo', 'math', 'music', 'symbol1',
'symbol2'])
In [3]: fitz.fitz_fontdescriptors[""fimo""]
Out[3]:
{'name': 'Fira Mono Regular',
'size': 125712,
'mono': True,
'bold': False,
'italic': False,
'serif': True,
'glyphs': 1485}

21.1. Functions
409

PyMuPDF Documentation, Release 1.23.25

If pymupdf-fonts is not installed, the dictionary is empty.

The dictionary keys can be used to define a Font via e.g. font = fitz.Font(""fimo"") – just like
you can do it with the builtin fonts “Helvetica” and friends.

TESSDATA_PREFIX

• New in v1.19.4

Copy of os.environ[""TESSDATA_PREFIX""] for convenient checking whether there is integrated
Tesseract OCR support.

If this attribute is None, Tesseract-OCR is either not installed, or the environment variable is not set
to point to Tesseract’s language support folder.

Note: This variable is now checked before OCR functions are tried. This prevents verbose messages
from MuPDF.

pdfcolor

• New in v1.19.6

Contains about 500 RGB colors in PDF format with the color name as key. To see what is there, you
can obviously look at fitz.pdfcolor.keys().

Examples:

• fitz.pdfcolor[""red""] = (1.0, 0.0, 0.0)

• fitz.pdfcolor[""skyblue""] = (0.5294117647058824, 0.807843137254902,
0.9215686274509803)

• fitz.pdfcolor[""wheat""] = (0.9607843137254902, 0.8705882352941177, 0.
7019607843137254)

get_pdf_now()

Convenience function to return the current local timestamp in PDF compatible format, e.g.
D:20170501121525-04’00’ for local datetime May 1, 2017, 12:15:25 in a timezone 4 hours west-
ward of the UTC meridian.

Return type

str

Returns

current local PDF timestamp.

get_text_length(text, fontname='helv', fontsize=11, encoding=TEXT_ENCODING_LATIN)

• New in version 1.14.7

Calculate the length of text on output with a given builtin font, fontsize and encoding.

Parameters

410
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

• text (str) – the text string.

• fontname (str) – the fontname. Must be one of either the PDF Base 14
Fonts or the CJK fonts, identified by their “reserved” fontnames (see table in
Page.insert_font()).

• fontsize (float) – the fontsize.

• encoding (int) – the encoding to use. Besides 0 = Latin, 1 = Greek and
2 = Cyrillic (Russian) are available. Relevant for Base-14 fonts “Helvetica”,
“Courier” and “Times” and their variants only. Make sure to use the same
value as in the corresponding text insertion.

Return type

float

Returns

the length in points the string will have (e.g.
when used in Page.
insert_text()).

Note: This function will only do the calculation – it won’t insert font nor text.

Note:
The Font class offers a similar method, Font.text_length(), which supports Base-14
fonts and any font with a character map (CMap, Type 0 fonts).

Warning:
If you use this function to determine the required rectangle width for the (Page or

Shape) insert_textbox methods, be aware that they calculate on a by-character level. Because
of rounding effects, this will mostly lead to a slightly larger number: sum([fitz.get_text_length(c)
for c in text]) > fitz.get_text_length(text). So either (1) do the same, or (2) use something like
fitz.get_text_length(text + “’”) for your calculation.

get_pdf_str(text)

Make a PDF-compatible string: if the text contains code points ord(c) > 255, then it will be converted
to UTF-16BE with BOM as a hexadecimal character string enclosed in “<>” brackets like <feff...>.
Otherwise, it will return the string enclosed in (round) brackets, replacing any characters outside the
ASCII range with some special code. Also, every “(”, “)” or backslash is escaped with a backslash.

Parameters

text (str) – the object to convert

Return type

str

Returns

PDF-compatible string enclosed in either () or <>.

image_profile(stream)

• New in v1.16.7

• Changed in v1.19.5: also return natural image orientation extracted from EXIF data if present.

21.1. Functions
411

PyMuPDF Documentation, Release 1.23.25

• Changed in v1.22.5: always return None in error cases instead of an empty dictionary.

Show important properties of an image provided as a memory area. Its main purpose is to avoid
using other Python packages just to determine them.

Parameters

stream (bytes|bytearray|BytesIO|file) – either an image in memory or an
opened file. An image in memory may be any of the formats bytes, bytearray
or io.BytesIO.

Return type

dict

Returns

No exception is ever raised. In case of an error, None is returned. Otherwise, there
are the following items:

In [2]: fitz.image_profile(open(""nur-ruhig.jpg"", ""rb"").

˓→read())
Out[2]:
{'width': 439,
'height': 501,
'orientation': 0,
# natural orientation (from EXIF)

'transform': (1.0, 0.0, 0.0, 1.0, 0.0, 0.0),
# orientation␣

˓→matrix
'xres': 96,
'yres': 96,
'colorspace': 3,
'bpc': 8,
'ext': 'jpeg',
'cs-name': 'DeviceRGB'}

There is the following relation to Exif information encoded in orientation, and
correspondingly in the transform matrix-like (quoted from MuPDF documen-
tation, ccw = counter-clockwise):

0. Undefined

1. 0 degree ccw rotation. (Exif = 1)

2. 90 degree ccw rotation. (Exif = 8)

3. 180 degree ccw rotation. (Exif = 3)

4. 270 degree ccw rotation. (Exif = 6)

5. flip on X. (Exif = 2)

6. flip on X, then rotate ccw by 90 degrees. (Exif = 5)

7. flip on X, then rotate ccw by 180 degrees. (Exif = 4)

8. flip on X, then rotate ccw by 270 degrees. (Exif = 7)

Note:

• For some “exotic” images (FAX encodings, RAW formats and the like), this
method will not work.
You can however still work with such images in
PyMuPDF, e.g. by using Document.extract_image() or create pixmaps

412
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

via Pixmap(doc, xref). These methods will automatically convert exotic
images to the PNG format before returning results.

• You can also get the properties of images embedded in a PDF, via
their xref.
In this case make sure to extract the raw stream: fitz.
image_profile(doc.xref_stream_raw(xref)).

• Images as returned by the image blocks of Page.get_text() using “dict”
or “rawdict” options are also supported.

ConversionHeader(""text"", filename=""UNKNOWN"")

Return the header string required to make a valid document out of page text outputs.

Parameters

• output (str) – type of document. Use the same as the output parameter of
get_text().

• filename (str) – optional arbitrary name to use in output types “json” and
“xml”.

Return type

str

ConversionTrailer(output)

Return the trailer string required to make a valid document out of page text outputs. See Page.
get_text() for an example.

Parameters

output (str) – type of document. Use the same as the output parameter of
get_text().

Return type

str

Document.del_xml_metadata()

Delete an object containing XML-based metadata from the PDF. (Py-) MuPDF does not support
XML-based metadata. Use this if you want to make sure that the conventional metadata dictionary
will be used exclusively. Many thirdparty PDF programs insert their own metadata in XML format
and thus may override what you store in the conventional dictionary. This method deletes any such
reference, and the corresponding PDF object will be deleted during next garbage collection of the
file.

Document.xml_metadata_xref()

Return the XML-based metadata xref of the PDF if present – also refer to Document.
del_xml_metadata(). You can use it to retrieve the content via Document.xref_stream() and
then work with it using some XML software.

Return type

int

Returns

xref of PDF file level XML metadata – or 0 if none exists.

21.1. Functions
413

PyMuPDF Documentation, Release 1.23.25

Page.run(dev, transform)

Run a page through a device.

Parameters

• dev (Device) – Device, obtained from one of the Device constructors.

• transform (Matrix) – Transformation to apply to the page. Set it to Identity

if no transformation is desired.

Page.get_bboxlog(layers=False)

• New in v1.19.0

• Changed in v1.22.0: optionally also return the OCG name applicable to the boundary box.

Returns

a list of rectangles that envelop text, image or drawing objects. Each item is a
tuple (type, (x0, y0, x1, y1)) where the second tuple consists of rectangle
coordinates, and type is one of the following values. If layers=True, there is a
third item containing the OCG name or None: (type, (x0, y0, x1, y1),
None).

• ""fill-text"" – normal text (painted without character borders)

• ""stroke-text"" – text showing character borders only

• ""ignore-text"" – text that should not be displayed (e.g. as used by OCR
text layers)

• ""fill-path"" – drawing with fill color (and no border)

• ""stroke-path"" – drawing with border (and no fill color)

• ""fill-image"" – displays an image

• ""fill-shade"" – display a shading

The item sequence represents the sequence in which these commands are exe-
cuted to build the page’s appearance. Therefore, if an item’s bbox intersects or
contains that of a previous item, then the previous item may be (partially) covered
/ hidden.

So this list can be used to detect such situations. An item’s index in this list equals
the value of a ""seqno"" in dictionaries as returned by Page.get_drawings()
and Page.get_texttrace().

Page.get_texttrace()

• New in v1.18.16

• Changed in v1.19.0: added key “seqno”.

• Changed in v1.19.1: stroke and fill colors now always are either RGB or GRAY

• Changed in v1.19.3: span and character bboxes are now also correct if dir != (1, 0).

414
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

• Changed in v1.22.0: add new dictionary key “layer”.

Return low-level text information of the page. The method is available for all document types. The
result is a list of Python dictionaries with the following content:

{

'ascender': 0.83251953125,
# font ascender (1)

'bbox': (458.14019775390625,
# span bbox x0 (7)

749.4671630859375,
# span bbox y0

467.76458740234375,
# span bbox x1

757.5071411132812),
# span bbox y1

'bidi': 0,
# bidirectional level (1)

'chars': (
# char information, tuple[tuple]

(45,
# unicode (4)

16,
# glyph id (font dependent)

(458.14019775390625,
# origin.x (1)

755.3758544921875),
# origin.y (1)

(458.14019775390625,
# char bbox x0 (6)

749.4671630859375,
# char bbox y0

462.9649963378906,
# char bbox x1

757.5071411132812)),
# char bbox y1

( ... ),
# more characters

),

'color': (0.0,),
# text color, tuple[float] (1)

'colorspace': 1,
# number of colorspace components␣

˓→(1)

'descender': -0.30029296875,
# font descender (1)

'dir': (1.0, 0.0),
# writing direction (1)

'flags': 12,
# font flags (1)

'font': 'CourierNewPSMT',
# font name (1)

'linewidth': 0.4019999980926514,
# current line width value (3)

'opacity': 1.0,
# alpha value of the text (5)

'layer': None,
# name of Optional Content Group (9)

'seqno': 246,
# sequence number (8)

'size': 8.039999961853027,
# font size (1)

'spacewidth': 4.824785133358091,
# width of space char

'type': 0,
# span type (2)

'wmode': 0
# writing mode (1)

}

Details:

1. Information above tagged with “(1)” has the same meaning and value as explained in TextPage.

• Please note that the font flags value will never contain a superscript flag bit: the de-
tection of superscripts is done within MuPDF TextPage code – it is not a property of any
font.

• Also note, that the text color is encoded as the usual tuple of floats 0 <= f <= 1 – not in
sRGB format. Depending on span[""type""], interpret this as fill color or stroke color.

2. There are 3 text span types:

• 0: Filled text – equivalent to PDF text rendering mode 0 (0 Tr, the default in PDF), only
each character’s “inside” is shown.

• 1: Stroked text – equivalent to 1 Tr, only the character borders are shown.

21.1. Functions
415

PyMuPDF Documentation, Release 1.23.25

• 3: Ignored text – equivalent to 3 Tr (hidden text).

3. Line width in this context is important only for processing span[""type""] != 0: it deter-
mines the thickness of the character’s border line. This value may not be provided at all with
the text data. In this case, a value of 5% of the fontsize (span[""size""] * 0,05) is gen-
erated. Often, an “artificial” bold text in PDF is created by 2 Tr. There is no equivalent span
type for this case. Instead, respective text is represented by two consecutive spans – which are
identical in every aspect, except for their types, which are 0, resp 1. It is your responsibility
to handle this type of situation - in Page.get_text(), MuPDF is doing this for you.

4. For data compactness, the character’s unicode is provided here. Use built-in function chr()
for the character itself.

5. The alpha / opacity value of the span’s text, 0 <= opacity <= 1, 0 is invisible text, 1 (100%)
is intransparent. Depending on span[""type""], interpret this value as fill opacity or, resp.
stroke opacity.

6. (Changed in v1.19.0) This value is equal or close to char[""bbox""] of “rawdict”. In particu-
lar, the bbox height value is always computed as if “small glyph heights” had been requested.

7. (New in v1.19.0) This is the union of all character bboxes.

8. (New in v1.19.0) Enumerates the commands that build up the page’s appearance. Can be used
to find out whether text is effectively hidden by objects, which are painted “later”, or over
some object. So if there is a drawing or image with a higher sequence number, whose bbox
overlaps (parts of) this text span, one may assume that such an object hides the resp. text.
Different text spans have identical sequence numbers if they were created in one go.

9. (New in v1.22.0) The name of the Optional Content Group (OCG) if applicable or None.

Here is a list of similarities and differences of page.get_texttrace() compared to page.
get_text(""rawdict""):

• The method is up to twice as fast, compared to “rawdict” extraction. Depends on the amount
of text.

• The returned data is very much smaller in size – although it provides more information.

• Additional types of text invisibility can be detected: opacity = 0 or type > 1 or overlapping
bbox of an object with a higher sequence number.

• If MuPDF returns unicode 0xFFFD (65533) for unrecognized characters, you may still be able
to deduct desired information from the glyph id.

• The span[""chars""] contains no spaces, except the document creator has explicitly coded
them. They will never be generated like it happens in Page.get_text() methods. To
provide some help for doing your own computations here, the width of a space character is
given. This value is derived from the font where possible. Otherwise the value of a fallback
font is taken.

• There is no effort to organize text like it happens for a TextPage (the hierarchy of blocks, lines,
spans, and characters). Characters are simply extracted in sequence, one by one, and put in a
span. Whenever any of the span’s characteristics changes, a new span is started. So you may
find characters with different origin.y values in the same span (which means they would
appear in different lines). You cannot assume, that span characters are sorted in any particular
order – you must make sense of the info yourself, taking span[""dir""], span[""wmode""],
etc. into account.

• Ligatures are represented like this:

416
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

– MuPDF handles the following ligatures: “fi”, “ff”, “fl”, “ft”, “st”, “ffi”, and “ffl”
(only the first 3 are mostly ever used). If the page contains e.g. ligature “fi”, you
will find the following two character items subsequent to each other:

(102, glyph, (x, y), (x0, y0, x1, y1))
# 102 = ord(""f"")

(105, -1, (x, y), (x0, y0, x0, y1))
# 105 = ord(""i""),␣

˓→empty bbox!

– This means that the bbox of the first ligature character is the area containing the
complete, compound glyph. Subsequent ligature components are recognizable by
their glyph value -1 and a bbox of width zero.

– You may want to replace those 2 or 3 char tuples by one, that represents the ligature
itself. Use the following mapping of ligatures to unicodes:

∗ ""ff"" -> 0xFB00

∗ ""fi"" -> 0xFB01

∗ ""fl"" -> 0xFB02

∗ ""ffi"" -> 0xFB03

∗ ""ffl"" -> 0xFB04

∗ ""ft"" -> 0xFB05

∗ ""st"" -> 0xFB06

So you may want to replace the two example tuples above by the following
single one: (0xFB01, glyph, (x, y), (x0, y0, x1, y1)) (there is
usually no need to lookup the correct glyph id for 0xFB01 in the resp. font,
but you may execute font.has_glyph(0xFB01) and use its return value).

• Changed in v1.19.3: Similar to other text extraction methods, the character and span
bboxes envelop the character quads.
To recover the quads, follow the same methods

recover_quad(), recover_char_quad() or recover_span_quad() as explained in
Structure of Dictionary Outputs. Use either None or span[""dir""] for the writing direction.

• Changed in v1.21.1: If applicable, the name of the OCG is shown in ""layer"".

Page.wrap_contents()

Put string pair “q” / “Q” before, resp. after a page’s /Contents object(s) to ensure that any “geometry”
changes are local only.

Use this method as an alternative, minimalist version of Page.clean_contents(). Its advantage
is a small footprint in terms of processing time and impact on the data size of incremental saves.
Multiple executions of this method are no problem and have no functional impact: b""q q contents
Q Q"" is treated like b""q contents Q"".

Page.is_wrapped

Indicate whether Page.wrap_contents() may be required for object insertions in standard PDF
geometry. Note that this is a quick, basic check only: a value of False may still be a false alarm. But
nevertheless executing Page.wrap_contents() will have no negative side effects.

Return type

bool

21.1. Functions
417

PyMuPDF Documentation, Release 1.23.25

Page.get_text_blocks(flags=None)

Deprecated wrapper for TextPage.extractBLOCKS(). Use Page.get_text() with the “blocks”
option instead.

Return type

list[tuple]

Page.get_text_words(flags=None, delimiters=None)

Deprecated wrapper for TextPage.extractWORDS(). Use Page.get_text() with the “words”
option instead.

Return type

list[tuple]

Page.get_displaylist()

Run a page through a list device and return its display list.

Return type

DisplayList

Returns

the display list of the page.

Page.get_contents()

PDF only: Retrieve a list of xref of contents objects of a page. May be empty or contain multi-
ple integers. If the page is cleaned (Page.clean_contents()), it will be one entry at most. The
“source” of each /Contents object can be individually read by Document.xref_stream() us-
ing an item of this list. Method Page.read_contents() in contrast walks through this list and
concatenates the corresponding sources into one bytes object.

Return type

list[int]

Page.set_contents(xref )

PDF only: Let the page’s /Contents key point to this xref. Any previously used contents objects
will be ignored and can be removed via garbage collection.

Page.clean_contents(sanitize=True)

• Changed in v1.17.6

PDF only: Clean and concatenate all contents objects associated with this page. “Cleaning” in-
cludes syntactical corrections, standardizations and “pretty printing” of the contents stream. Dis-
crepancies between contents and resources objects will also be corrected if sanitize is true. See
Page.get_contents() for more details.

Changed in version 1.16.0 Annotations are no longer implicitly cleaned by this method. Use Annot.
clean_contents() separately.

418
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

Parameters

sanitize (bool) – (new in v1.17.6) if true, synchronization between resources
and their actual use in the contents object is snychronized. For example, if a font
is not actually used for any text of the page, then it will be deleted from the /
Resources/Font object.

Warning:
This is a complex function which may generate large amounts of new data and
render old data unused. It is not recommended using it together with the incremental save
option. Also note that the resulting singleton new /Contents object is uncompressed. So you
should save to a new file using options “deflate=True, garbage=3”.

Page.read_contents()

New in version 1.17.0. Return the concatenation of all contents objects associated with the page
– without cleaning or otherwise modifying them. Use this method whenever you need to parse this
source in its entirety without having to bother how many separate contents objects exist.

Return type

bytes

Annot.clean_contents(sanitize=True)

Clean the contents streams associated with the annotation. This is the same type of action which
Page.clean_contents() performs – just restricted to this annotation.

Document.get_char_widths(xref=0, limit=256)

Return a list of character glyphs and their widths for a font that is present in the document. A font
must be specified by its PDF cross reference number xref. This function is called automatically
from Page.insert_text() and Page.insert_textbox(). So you should rarely need to do this
yourself.

Parameters

• xref (int) – cross reference number of a font embedded in the PDF. To find
a font xref, use e.g. doc.get_page_fonts(pno) of page number pno and take
the first entry of one of the returned list entries.

• limit (int) – limits the number of returned entries. The default of 256 is
enforced for all fonts that only support 1-byte characters, so-called “simple
fonts” (checked by this method). All PDF Base 14 Fonts are simple fonts.

Return type

list

Returns

a list of limit tuples. Each character c has an entry (g, w) in this list with an index
of ord(c). Entry g (integer) of the tuple is the glyph id of the character, and float w
is its normalized width. The actual width for some fontsize can be calculated
as w * fontsize. For simple fonts, the g entry can always be safely ignored. In all
other cases g is the basis for graphically representing c.

This function calculates the pixel width of a string called text:

21.1. Functions
419

PyMuPDF Documentation, Release 1.23.25

def pixlen(text, widthlist, fontsize):

try:

return sum([widthlist[ord(c)] for c in text]) * fontsize

except IndexError:

raise ValueError:(""max. code point found: %i, increase limit"" %␣

˓→ord(max(text)))

Document.is_stream(xref )

• New in version 1.14.14

PDF only: Check whether the object represented by xref is a stream type. Return is False if not
a PDF or if the number is outside the valid xref range.

Parameters

xref (int) – xref number.

Returns

True if the object definition is followed by data wrapped in keyword pair stream,
endstream.

Document.get_new_xref()

Increase the xref by one entry and return that number. This can then be used to insert a new object.

Return type

int :returns: the number of the new xref entry. Please note, that only a new entry
in the PDF’s cross reference table is created. At this point, there will not yet exist
a PDF object associated with it. To create an (empty) object with this number use
doc.update_xref(xref, ""<<>>"").

Document.xref_length()

Return length of xref table.

Return type

int

Returns

the number of entries in the xref table.

recover_quad(line_dir, span)

Compute the quadrilateral of a text span extracted via options “dict” or “rawdict” of Page.
get_text().

Parameters

• line_dir (tuple) – line[""dir""] of the owning line. Use None for a span
from Page.get_texttrace().

• span (dict) – the span.

Returns

the Quad of the span, usable for text marker annotations (‘Highlight’, etc.).

420
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

recover_char_quad(line_dir, span, char)

Compute the quadrilateral of a text character extracted via option “rawdict” of Page.get_text().

Parameters

• line_dir (tuple) – line[""dir""] of the owning line. Use None for a span
from Page.get_texttrace().

• span (dict) – the span.

• char (dict) – the character.

Returns

the Quad of the character, usable for text marker annotations (‘Highlight’, etc.).

recover_span_quad(line_dir, span, chars=None)

Compute the quadrilateral of a subset of characters of a span extracted via option “rawdict” of Page.
get_text().

Parameters

• line_dir (tuple) – line[""dir""] of the owning line. Use None for a span
from Page.get_texttrace().

• span (dict) – the span.

• chars (list) – the characters to consider. If given, the selected extraction
option must be “rawdict”.

Returns

the Quad of the selected characters, usable for text marker annotations (‘High-
light’, etc.).

recover_line_quad(line, spans=None)

Compute the quadrilateral of a subset of spans of a text line extracted via options “dict” or “rawdict”
of Page.get_text().

Parameters

• line (dict) – the line.

• spans (list) – a sub-list of line[""spans""]. If omitted, the full line quad
will be returned.

Returns

the Quad of the selected line spans, usable for text marker annotations (‘High-
light’, etc.).

get_tessdata()

Return the name of Tesseract’s language support folder. Use this function if the environment variable
TESSDATA_PREFIX has not been set.

Returns

os.getenv(""TESSDATA_PREFIX"") if not None. Otherwise, if Tesseract-OCR is
installed, locate the name of tessdata. If no installation is found, return False.

21.1. Functions
421

PyMuPDF Documentation, Release 1.23.25

The
folder
name
can
be
used
as
parameter
tessdata
in
methods

Page.get_textpage_ocr(),
Pixmap.pdfocr_save()
and
Pixmap.
pdfocr_tobytes().

INFINITE_QUAD()

INFINITE_RECT()

INFINITE_IRECT()

Return the (unique) infinite rectangle Rect(-2147483648.0, -2147483648.0, 2147483520.
0, 2147483520.0), resp. the IRect and Quad counterparts. It is the largest possible rectangle: all
valid rectangles are contained in it.

EMPTY_QUAD()

EMPTY_RECT()

EMPTY_IRECT()

Return the “standard” empty and invalid rectangle Rect(2147483520.0, 2147483520.0,
-2147483648.0, -2147483648.0) resp. quad. Its top-left and bottom-right point values are
reversed compared to the infinite rectangle. It will e.g. be used to indicate empty bboxes in page.
get_text(""dict"") dictionaries. There are however infinitely many empty or invalid rectangles.

This documentation covers all versions up to 1.23.25.

21.2 Device

The different format handlers (pdf, xps, etc.) interpret pages to a “device”. Devices are the basis for everything that
can be done with a page: rendering, text extraction and searching. The device type is determined by the selected
construction method.

Class API

class Device

__init__(self, object, clip)

Constructor for either a pixel map or a display list device.

Parameters

• object (Pixmap or DisplayList) – either a Pixmap or a DisplayList.

• clip (IRect) – An optional IRect for Pixmap devices to restrict rendering to a cer-
tain area of the page. If the complete page is required, specify None. For display
list devices, this parameter must be omitted.

422
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

__init__(self, textpage, flags=0)

Constructor for a text page device.

Parameters

• textpage (TextPage) – TextPage object

• flags (int) – control the way how text is parsed into the text page. Currently 3
options can be coded into this parameter, see Text Extraction Flags. To set these
options use something like flags=0 | TEXT_PRESERVE_LIGATURES | ....

This documentation covers all versions up to 1.23.25.

21.3 Working together: DisplayList and TextPage

Here are some instructions on how to use these classes together.

In some situations, performance improvements may be achievable, when you fall back to the detail level explained here.

21.3.1 Create a DisplayList

A DisplayList represents an interpreted document page. Methods for pixmap creation, text extraction and text search
are – behind the curtain – all using the page’s display list to perform their tasks. If a page must be rendered several
times (e.g. because of changed zoom levels), or if text search and text extraction should both be performed, overhead
can be saved, if the display list is created only once and then used for all other tasks.

>>> dl = page.get_displaylist()
# create the display list

You can also create display lists for many pages “on stack” (in a list), may be during document open, during idling
times, or you store it when a page is visited for the first time (e.g. in GUI scripts).

Note, that for everything what follows, only the display list is needed – the corresponding Page object could have been
deleted.

21.3.2 Generate Pixmap

The following creates a Pixmap from a DisplayList. Parameters are the same as for Page.get_pixmap().

>>> pix = dl.get_pixmap()
# create the page's pixmap

The execution time of this statement may be up to 50% shorter than that of Page.get_pixmap().

21.3. Working together: DisplayList and TextPage
423

PyMuPDF Documentation, Release 1.23.25

21.3.3 Perform Text Search

With the display list from above, we can also search for text.

For this we need to create a TextPage.

>>> tp = dl.get_textpage()
# display list from above

>>> rlist = tp.search(""needle"")
# look up ""needle"" locations

>>> for r in rlist:
# work with the found locations, e.g.

pix.invert_irect(r.irect)
# invert colors in the rectangles

21.3.4 Extract Text

With the same TextPage object from above, we can now immediately use any or all of the 5 text extraction methods.

Note: Above, we have created our text page without argument. This leads to a default argument of 3 (ligatures and
white-space are preserved), IAW images will not be extracted – see below.

>>> txt
= tp.extractText()
# plain text format

>>> json = tp.extractJSON()
# json format

>>> html = tp.extractHTML()
# HTML format

>>> xml
= tp.extractXML()
# XML format

>>> xml
= tp.extractXHTML()
# XHTML format

21.3.5 Further Performance improvements

Pixmap

As explained in the Page chapter:

If you do not need transparency set alpha = 0 when creating pixmaps. This will save 25% memory (if RGB, the most
common case) and possibly 5% execution time (depending on the GUI software).

TextPage

If you do not need images extracted alongside the text of a page, you can set the following option:

>>> flags = fitz.TEXT_PRESERVE_LIGATURES | fitz.TEXT_PRESERVE_WHITESPACE
>>> tp = dl.get_textpage(flags)

This will save ca. 25% overall execution time for the HTML, XHTML and JSON text extractions and hugely reduce
the amount of storage (both, memory and disk space) if the document is graphics oriented.

If you however do need images, use a value of 7 for flags:

>>> flags = fitz.TEXT_PRESERVE_LIGATURES | fitz.TEXT_PRESERVE_WHITESPACE | fitz.TEXT_

˓→PRESERVE_IMAGES

This documentation covers all versions up to 1.23.25.

424
Chapter 21. Low Level Functions and Classes

PyMuPDF Documentation, Release 1.23.25

This documentation covers all versions up to 1.23.25.

21.3. Working together: DisplayList and TextPage
425

PyMuPDF Documentation, Release 1.23.25

426
Chapter 21. Low Level Functions and Classes

CHAPTER

TWENTYTWO

GLOSSARY

coordinate

This is an esential general mathematical / geometrical term for understanding this documentation. Please see
this section for a more detailed discussion: Coordinates.

matrix_like

A Python sequence of 6 numbers.

rect_like

A Python sequence of 4 numbers.

irect_like

A Python sequence of 4 integers.

point_like

A Python sequence of 2 numbers.

quad_like

A Python sequence of 4 point_like items.

inheritable

A number of values in a PDF can inherited by objects further down in a parent-child relationship. The mediabox
(physical size) of pages may for example be specified only once or in some node(s) of the pagetree and will
then be taken as value for all kids, that do not specify their own value.

MediaBox

A PDF array of 4 floats specifying a physical page size – (inheritable, mandatory). This rectangle should
contain all other PDF – optional – page rectangles, which may be specified in addition: CropBox, TrimBox,
ArtBox and BleedBox. Please consult Adobe PDF References for details. The MediaBox is the only rectangle,
for which there is no difference between MuPDF and PDF coordinate systems: Page.mediabox will always
show the same coordinates as the /MediaBox key in a page’s object definition. For all other rectangles, MuPDF
transforms y coordinates such that the top border is the point of reference. This can sometimes be confusing –
you may for example encounter a situation like this one:

• The page definition contains the following identical values: /MediaBox [ 36 45 607.5 765 ], /
CropBox [ 36 45 607.5 765 ].

• PyMuPDF accordingly shows page.mediabox = Rect(36.0, 45.0, 607.5, 765.0).
• BUT: page.cropbox = Rect(36.0, 0.0, 607.5, 720.0), because the two y-coordinates have been
transformed (45 subtracted from both of them).

CropBox

A PDF array of 4 floats specifying a page’s visible area – (inheritable, optional). It is the default for TrimBox,
ArtBox and BleedBox. If not present, it defaults to MediaBox. This value is not affected if the page is rotated
– in contrast to Page.rect. Also, other than the page rectangle, the top-left corner of the cropbox may or may
not be (0, 0).

427

PyMuPDF Documentation, Release 1.23.25

catalog

A central PDF dictionary – also called the “root” – containing document-wide parameters and pointers to
many other information. Its xref is returned by Document.pdf_catalog().

trailer

More precisely, the PDF trailer contains information in dictionary format. It is usually located at the file’s
end. In this dictionary, you will find things like the xrefs of the catalog and the metadata, the number of xref
numbers, etc. Here is the definition of the PDF spec:

“The trailer of a PDF file enables an application reading the file to quickly find the cross-reference table and
certain special objects. Applications should read a PDF file from its end.”

To access the trailer in PyMuPDF, use the usual methods Document.xref_object(), Document.
xref_get_key() and Document.xref_get_keys() with -1 instead of a positive xref number.

contents

A content stream is a PDF object with an attached stream, whose data consists of a sequence of instructions
describing the graphical elements to be painted on a page, see “Stream Objects” on page 19 of Adobe PDF
References. For an overview of the mini-language used in these streams, see chapter “Operator Summary” on
page 643 of the Adobe PDF References. A PDF page can have none to many contents objects. If it has none,
the page is empty (but still may show annotations). If it has several, they will be interpreted in sequence as if
their instructions had been present in one such object (i.e. like in a concatenated string). It should be noted
that there are more stream object types which use the same syntax: e.g. appearance dictionaries associated with
annotations and Form XObjects.

PyMuPDF provides a number of methods to deal with contents of PDF pages:

• Page.read_contents() – reads and concatenates all page contents into one bytes object.
• Page.clean_contents() – a wrapper of a MuPDF function that reads, concatenates and syntax-cleans
all page contents. After this, only one /Contents object will exist. In addition, page resources will
have been synchronized with it such that it will contain exactly those images, fonts and other objects that
the page actually references.

• Page.get_contents() – return a list of xref numbers of a page’s contents objects. May be empty.
Use Document.xref_stream() with one of these xrefs to read the resp. contents section.

• Page.set_contents() – set a page’s /Contents key to the provided xref number.

resources

A dictionary containing references to any resources (like images or fonts) required by a PDF page (required,
inheritable, Adobe PDF References p. 81) and certain other objects (Form XObjects). This dictionary appears
as a sub-dictionary in the object definition under the key /Resources. Being an inheritable object type, there may
exist “parent” resources for all pages or certain subsets of pages.

dictionary

A PDF object type, which is somewhat comparable to the same-named Python notion: “A dictionary object
is an associative table containing pairs of objects, known as the dictionary’s entries. The first element of each
entry is the key and the second element is the value. The key must be a name (...). The value can be any kind
of object, including another dictionary. A dictionary entry whose value is null (...) is equivalent to an absent
entry.” (Adobe PDF References p. 18).

Dictionaries are the most important object type in PDF. Here is an example (describing a page):

<<
/Contents 40 0 R
% value: an indirect object

/Type/Page
% value: a name object

/MediaBox[0 0 595.32 841.92]
% value: an array object

/Rotate 0
% value: a number object

/Parent 12 0 R
% value: an indirect object

(continues on next page)

428
Chapter 22. Glossary

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

/Resources<<
% value: a dictionary object

/ExtGState<</R7 26 0 R>>
/Font<<

/R8 27 0 R/R10 21 0 R/R12 24 0 R/R14 15 0 R
/R17 4 0 R/R20 30 0 R/R23 7 0 R /R27 20 0 R
>>

/ProcSet[/PDF/Text]
% value: array of two name objects

>>

/Annots[55 0 R]
% value: array, one entry (indirect object)

>>

Contents, Type, MediaBox, etc. are keys, 40 0 R, Page, [0 0 595.32 841.92], etc. are the respective values. The
strings “<<” and “>>” are used to enclose object definitions.

This example also shows the syntax of nested dictionary values: Resources has an object as its value, which in
turn is a dictionary with keys like ExtGState (with the value <</R7 26 0 R>>, which is another dictionary), etc.

page

A PDF page is a dictionary object which defines one page in a PDF, see Adobe PDF References p. 71.

pagetree

The pages of a document are accessed through a structure known as the page tree, which defines the ordering
of pages in the document. The tree structure allows PDF consumer applications, using only limited memory,
to quickly open a document containing thousands of pages. The tree contains nodes of two types: intermediate
nodes, called page tree nodes, and leaf nodes, called page objects. (Adobe PDF References p. 75).

While it is possible to list all page references in just one array, PDFs with many pages are often created using
balanced tree structures (“page trees”) for faster access to any single page. In relation to the total number of
pages, this can reduce the average page access time by page number from a linear to some logarithmic order of
magnitude.

For fast page access, MuPDF can use its own array in memory – independently from what may or may not be
present in the document file. This array is indexed by page number and therefore much faster than even the access
via a perfectly balanced page tree.

object

Similar to Python, PDF supports the notion object, which can come in eight basic types: boolean values (“true”
or “false”), integer and real numbers, strings (always enclosed in brackets – either “()”, or “<>” to indicate hex-
adecimal), names (must always start with a “/”, e.g. /Contents), arrays (enclosed in brackets “[]”), dictionaries
(enclosed in brackets “<<>>”), streams (enclosed by keywords “stream” / “endstream”), and the null object
(“null”) (Adobe PDF References p. 13). Objects can be made identifiable by assigning a label. This label is
then called indirect object. PyMuPDF supports retrieving definitions of indirect objects via their cross reference
number via Document.xref_object().

stream

A PDF dictionary object type which is followed by a sequence of bytes, similar to Python bytes. “However,
a PDF application can read a stream incrementally, while a string must be read in its entirety. Furthermore, a
stream can be of unlimited length, whereas a string is subject to an implementation limit. For this reason, objects
with potentially large amounts of data, such as images and page descriptions, are represented as streams.” “A
stream consists of a dictionary followed by zero or more bytes bracketed between the keywords stream and
endstream”:

nnn 0 obj
<<

dictionary definition

(continues on next page)

429

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

>>
stream
(zero or more bytes)
endstream
endobj

See Adobe PDF References p.
19.
PyMuPDF supports retrieving stream content via Document.
xref_stream(). Use Document.is_stream() to determine whether an object is of stream type.

unitvector

A mathematical notion meaning a vector of norm (“length”) 1 – usually the Euclidean norm is implied. In
PyMuPDF, this term is restricted to Point objects, see Point.unit.

xref

Abbreviation for cross-reference number: this is an integer unique identification for objects in a PDF. There
exists a cross-reference table (which may physically consist of several separate segments) in each PDF, which
stores the relative position of each object for quick lookup. The cross-reference table is one entry longer than
the number of existing object: item zero is reserved and must not be used in any way. Many PyMuPDF classes
have an xref attribute (which is zero for non-PDFs), and one can find out the total number of objects in a PDF
via Document.xref_length() - 1.

fontsize

When referring to font size this metric is measured in points where 1 inch = 72 points.

resolution

Images and Pixmap objects may contain resolution information provided as “dots per inch”, dpi, in each direction
(horizontal and vertical). When MuPDF reads an image from a file or from a PDF object, it will parse this
information and put it in Pixmap.xres, Pixmap.yres, respectively. If it finds no meaningful information in
the input (like non-positive values or values exceeding 4800), it will use “sane” defaults instead. The usual default
value is 96, but it may also be 72 in some cases (e.g. for JPX images).

OCPD

Optional content properties dictionary - a sub dictionary of the PDF catalog. The central place to store op-
tional content information, which is identified by the key /OCProperties. This dictionary has two required and
one optional entry: (1) /OCGs, required, an array listing all optional content groups, (2) /D, required, the default
optional content configuration dictionary (OCCD), (3) /Configs, optional, an array of alternative OCCDs.

OCCD

Optional content configuration dictionary - a PDF dictionary inside the PDF OCPD. It stores a setting of ON
/ OFF states of OCGs and how they are presented to a PDF viewer program. Selecting a configuration is quick
way to achieve temporary mass visibility state changes. After opening a PDF, the /D configuration of the OCPD
is always activated. Viewer should offer a way to switch between the /D, or one of the optional configurations
contained in array /Configs.

OCG

Optional content group – a dictionary object used to control the visibility of other PDF objects like images
or annotations. Independently on which page they are defined, objects with the same OCG can simultaneously
be shown or hidden by setting their OCG to ON or OFF. This can be achieved via the user interface provided by
many PDF viewers (Adobe Acrobat), or programmatically.

OCMD

Optional content membership dictionary – a dictionary object which can be used like an OCG: it has a visibility
state. The visibility of an OCMD is computed: it is a logical expression, which uses the state of one or more
OCGs to produce a boolean value. The expression’s result is interpreted as ON (true) or OFF (false).

430
Chapter 22. Glossary

PyMuPDF Documentation, Release 1.23.25

ligature

Some frequent character combinations are represented by their own special glyphs in more advanced fonts. Typ-
ical examples are “fi”, “fl”, “ffi” and “ffl”. These compounds are called ligatures. In PyMuPDF text extractions,
there is the option to either return the corresponding unicode unchanged, or split ligatures up into their constituent
parts: “fi” ==> “f” + “i”, etc.

This documentation covers all versions up to 1.23.25.

431

PyMuPDF Documentation, Release 1.23.25

432
Chapter 22. Glossary

CHAPTER

TWENTYTHREE

CONSTANTS AND ENUMERATIONS

Constants and enumerations of MuPDF as implemented by PyMuPDF. Each of the following variables is accessible
as fitz.variable.

23.1 Constants

Base14_Fonts

Predefined Python list of valid PDF Base 14 Fonts.

Return type

list

csRGB

Predefined RGB colorspace fitz.Colorspace(fitz.CS_RGB).

Return type

Colorspace

csGRAY

Predefined GRAY colorspace fitz.Colorspace(fitz.CS_GRAY).

Return type

Colorspace

csCMYK

Predefined CMYK colorspace fitz.Colorspace(fitz.CS_CMYK).

Return type

Colorspace

CS_RGB

1 – Type of Colorspace is RGBA

Return type

int

CS_GRAY

2 – Type of Colorspace is GRAY

Return type

int

CS_CMYK

3 – Type of Colorspace is CMYK

Return type

int

433

PyMuPDF Documentation, Release 1.23.25

VersionBind

‘x.xx.x’ – version of PyMuPDF (these bindings)

Return type

string

VersionFitz

‘x.xxx’ – version of MuPDF

Return type

string

VersionDate

ISO timestamp YYYY-MM-DD HH:MM:SS when these bindings were built.

Return type

string

Note: The docstring of fitz contains information of the above which can be retrieved like so: print(fitz.__doc__), and
should look like: PyMuPDF 1.10.0: Python bindings for the MuPDF 1.10 library, built on 2016-11-30 13:09:13.

version

(VersionBind, VersionFitz, timestamp) – combined version information where timestamp is the generation point
in time formatted as “YYYYMMDDhhmmss”.

Return type

tuple

23.2 Document Permissions

Code
Permitted Action

PDF_PERM_PRINT
Print the document

PDF_PERM_MODIFY
Modify the document’s contents

PDF_PERM_COPY
Copy or otherwise extract text and graphics

PDF_PERM_ANNOTATE
Add or modify text annotations and interactive form fields

PDF_PERM_FORM
Fill in forms and sign the document

PDF_PERM_ACCESSIBILITY
Obsolete, always permitted

PDF_PERM_ASSEMBLE
Insert, rotate, or delete pages, bookmarks, thumbnail images

PDF_PERM_PRINT_HQ
High quality printing

23.3 PDF Optional Content Codes

Code
Meaning

PDF_OC_ON
Set an OCG to ON temporarily

PDF_OC_TOGGLE
Toggle OCG status temporarily

PDF_OC_OFF
Set an OCG to OFF temporarily

434
Chapter 23. Constants and Enumerations

PyMuPDF Documentation, Release 1.23.25

23.4 PDF encryption method codes

Code
Meaning

PDF_ENCRYPT_KEEP
do not change

PDF_ENCRYPT_NONE
remove any encryption

PDF_ENCRYPT_RC4_40
RC4 40 bit

PDF_ENCRYPT_RC4_128
RC4 128 bit

PDF_ENCRYPT_AES_128
Advanced Encryption Standard 128 bit

PDF_ENCRYPT_AES_256
Advanced Encryption Standard 256 bit

PDF_ENCRYPT_UNKNOWN
unknown

23.5 Font File Extensions

The table show file extensions you should use when saving fontfile buffers extracted from a PDF. This string is returned
by Document.get_page_fonts(), Page.get_fonts() and Document.extract_font().

Ext
Description

ttf
TrueType font

pfa
Postscript for ASCII font (various subtypes)

cff
Type1C font (compressed font equivalent to Type1)

cid
character identifier font (postscript format)

otf
OpenType font

n/a
not extractable, e.g. PDF Base 14 Fonts, Type 3 fonts and others

23.6 Text Alignment

TEXT_ALIGN_LEFT

0 – align left.

TEXT_ALIGN_CENTER

1 – align center.

TEXT_ALIGN_RIGHT

2 – align right.

TEXT_ALIGN_JUSTIFY

3 – align justify.

23.7 Text Extraction Flags

Option bits controlling the amount of data, that are parsed into a TextPage – this class is mainly used only internally in
PyMuPDF.

For the PyMuPDF programmer, some combination (using Python’s | operator, or simply use +) of these values are
aggregated in the flags integer, a parameter of all text search and text extraction methods. Depending on the individual
method, different default combinations of the values are used. Please use a value that meets your situation. Especially
make sure to switch off image extraction unless you really need them. The impact on performance and memory is
significant!

23.4. PDF encryption method codes
435

PyMuPDF Documentation, Release 1.23.25

TEXT_PRESERVE_LIGATURES

1 – If set, ligatures are passed through to the application in their original form. Otherwise ligatures are expanded
into their constituent parts, e.g. the ligature “ffi” is expanded into three eparate characters f, f and i. Default is
“on” in PyMuPDF. MuPDF supports the following 7 ligatures: “ff”, “fi”, “fl”, “ffi”, “ffl”, , “ft”, “st”.

TEXT_PRESERVE_WHITESPACE

2 – If set, whitespace is passed through. Otherwise any type of horizontal whitespace (including horizontal tabs)
will be replaced with space characters of variable width. Default is “on” in PyMuPDF.

TEXT_PRESERVE_IMAGES

4 – If set, then images will be stored in the TextPage. This causes the presence of (usually large!) binary image
content in the output of text extractions of types “blocks”, “dict”, “json”, “rawdict”, “rawjson”, “html”, and
“xhtml” and is the default there. If used with “blocks” however, only image metadata will be returned, not the
image itself.

TEXT_INHIBIT_SPACES

8 – If set, Mupdf will not try to add missing space characters where there are large gaps between characters. In
PDF, the creator often does not insert spaces to point to the next character’s position, but will provide the direct
location address. The default in PyMuPDF is “off” – so spaces will be generated.

TEXT_DEHYPHENATE

16 – Ignore hyphens at line ends and join with next line. Used internally with the text search functions. However,
it is generally available: if on, text extractions will return joined text lines (or spans) with the ending hyphen
of the first line eliminated. So two separate spans “first meth-” and “od leads to wrong results” on different
lines will be joined to one span “first method leads to wrong results” and correspondingly updated bboxes:
the characters of the resulting span will no longer have identical y-coordinates.

TEXT_PRESERVE_SPANS

32 – Generate a new line for every span. Not used (“off”) in PyMuPDF, but available for your use. Every line in
“dict”, “json”, “rawdict”, “rawjson” will contain exactly one span.

TEXT_MEDIABOX_CLIP

64 – If set, characters entirely outside a page’s mediabox will be ignored. This is default in PyMuPDF.

The following constants represent the default combinations of the above for text extraction and searching:

TEXTFLAGS_TEXT

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP

TEXTFLAGS_WORDS

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP

TEXTFLAGS_BLOCKS

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP

TEXTFLAGS_DICT

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
TEXT_PRESERVE_IMAGES

TEXTFLAGS_RAWDICT

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
TEXT_PRESERVE_IMAGES

TEXTFLAGS_HTML

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
TEXT_PRESERVE_IMAGES

436
Chapter 23. Constants and Enumerations

PyMuPDF Documentation, Release 1.23.25

TEXTFLAGS_XHTML

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
TEXT_PRESERVE_IMAGES

TEXTFLAGS_XML

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP

TEXTFLAGS_SEARCH

TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
TEXT_DEHYPHENATE

23.8 Link Destination Kinds

Possible values of linkDest.kind (link destination kind).

LINK_NONE

0 – No destination. Indicates a dummy link.

Return type

int

LINK_GOTO

1 – Points to a place in this document.

Return type

int

LINK_URI

2 – Points to a URI – typically a resource specified with internet syntax.

Return type

int

LINK_LAUNCH

3 – Launch (open) another file (of any “executable” type).

Return type

int

LINK_NAMED

4 – points to a named location.

Return type

int

LINK_GOTOR

5 – Points to a place in another PDF document.

Return type

int

23.8. Link Destination Kinds
437

PyMuPDF Documentation, Release 1.23.25

23.9 Link Destination Flags

Note: The rightmost byte of this integer is a bit field, so test the truth of these bits with the & operator.

LINK_FLAG_L_VALID

1 (bit 0) Top left x value is valid

Return type

bool

LINK_FLAG_T_VALID

2 (bit 1) Top left y value is valid

Return type

bool

LINK_FLAG_R_VALID

4 (bit 2) Bottom right x value is valid

Return type

bool

LINK_FLAG_B_VALID

8 (bit 3) Bottom right y value is valid

Return type

bool

LINK_FLAG_FIT_H

16 (bit 4) Horizontal fit

Return type

bool

LINK_FLAG_FIT_V

32 (bit 5) Vertical fit

Return type

bool

LINK_FLAG_R_IS_ZOOM

64 (bit 6) Bottom right x is a zoom figure

Return type

bool

23.10 Annotation Related Constants

See chapter 8.4.5, pp. 615 of the Adobe PDF References for details.

438
Chapter 23. Constants and Enumerations

PyMuPDF Documentation, Release 1.23.25

23.10.1 Annotation Types

These identifiers also cover links and widgets: the PDF specification technically handles them all in the same way,
whereas MuPDF (and PyMuPDF) treats them as three basically different types of objects.

PDF_ANNOT_TEXT 0
PDF_ANNOT_LINK 1
# <=== Link object in PyMuPDF

PDF_ANNOT_FREE_TEXT 2
PDF_ANNOT_LINE 3
PDF_ANNOT_SQUARE 4
PDF_ANNOT_CIRCLE 5
PDF_ANNOT_POLYGON 6
PDF_ANNOT_POLY_LINE 7
PDF_ANNOT_HIGHLIGHT 8
PDF_ANNOT_UNDERLINE 9
PDF_ANNOT_SQUIGGLY 10
PDF_ANNOT_STRIKE_OUT 11
PDF_ANNOT_REDACT 12
PDF_ANNOT_STAMP 13
PDF_ANNOT_CARET 14
PDF_ANNOT_INK 15
PDF_ANNOT_POPUP 16
PDF_ANNOT_FILE_ATTACHMENT 17
PDF_ANNOT_SOUND 18
PDF_ANNOT_MOVIE 19
PDF_ANNOT_RICH_MEDIA 20
PDF_ANNOT_WIDGET 21
# <=== Widget object in PyMuPDF

PDF_ANNOT_SCREEN 22
PDF_ANNOT_PRINTER_MARK 23
PDF_ANNOT_TRAP_NET 24
PDF_ANNOT_WATERMARK 25
PDF_ANNOT_3D 26
PDF_ANNOT_PROJECTION 27
PDF_ANNOT_UNKNOWN -1

23.10.2 Annotation Flag Bits

PDF_ANNOT_IS_INVISIBLE 1 << (1-1)
PDF_ANNOT_IS_HIDDEN 1 << (2-1)
PDF_ANNOT_IS_PRINT 1 << (3-1)
PDF_ANNOT_IS_NO_ZOOM 1 << (4-1)
PDF_ANNOT_IS_NO_ROTATE 1 << (5-1)
PDF_ANNOT_IS_NO_VIEW 1 << (6-1)
PDF_ANNOT_IS_READ_ONLY 1 << (7-1)
PDF_ANNOT_IS_LOCKED 1 << (8-1)
PDF_ANNOT_IS_TOGGLE_NO_VIEW 1 << (9-1)
PDF_ANNOT_IS_LOCKED_CONTENTS 1 << (10-1)

23.10. Annotation Related Constants
439

PyMuPDF Documentation, Release 1.23.25

23.10.3 Annotation Line Ending Styles

PDF_ANNOT_LE_NONE 0
PDF_ANNOT_LE_SQUARE 1
PDF_ANNOT_LE_CIRCLE 2
PDF_ANNOT_LE_DIAMOND 3
PDF_ANNOT_LE_OPEN_ARROW 4
PDF_ANNOT_LE_CLOSED_ARROW 5
PDF_ANNOT_LE_BUTT 6
PDF_ANNOT_LE_R_OPEN_ARROW 7
PDF_ANNOT_LE_R_CLOSED_ARROW 8
PDF_ANNOT_LE_SLASH 9

23.11 Widget Constants

23.11.1 Widget Types (field_type)

PDF_WIDGET_TYPE_UNKNOWN 0
PDF_WIDGET_TYPE_BUTTON 1
PDF_WIDGET_TYPE_CHECKBOX 2
PDF_WIDGET_TYPE_COMBOBOX 3
PDF_WIDGET_TYPE_LISTBOX 4
PDF_WIDGET_TYPE_RADIOBUTTON 5
PDF_WIDGET_TYPE_SIGNATURE 6
PDF_WIDGET_TYPE_TEXT 7

23.11.2 Text Widget Subtypes (text_format)

PDF_WIDGET_TX_FORMAT_NONE 0
PDF_WIDGET_TX_FORMAT_NUMBER 1
PDF_WIDGET_TX_FORMAT_SPECIAL 2
PDF_WIDGET_TX_FORMAT_DATE 3
PDF_WIDGET_TX_FORMAT_TIME 4

23.11.3 Widget flags (field_flags)

Common to all field types:

PDF_FIELD_IS_READ_ONLY 1
PDF_FIELD_IS_REQUIRED 1 << 1
PDF_FIELD_IS_NO_EXPORT 1 << 2

Text widgets:

PDF_TX_FIELD_IS_MULTILINE
1 << 12

PDF_TX_FIELD_IS_PASSWORD
1 << 13

PDF_TX_FIELD_IS_FILE_SELECT
1 << 20

(continues on next page)

440
Chapter 23. Constants and Enumerations

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

PDF_TX_FIELD_IS_DO_NOT_SPELL_CHECK
1 << 22

PDF_TX_FIELD_IS_DO_NOT_SCROLL
1 << 23

PDF_TX_FIELD_IS_COMB
1 << 24

PDF_TX_FIELD_IS_RICH_TEXT
1 << 25

Button widgets:

PDF_BTN_FIELD_IS_NO_TOGGLE_TO_OFF
1 << 14

PDF_BTN_FIELD_IS_RADIO
1 << 15

PDF_BTN_FIELD_IS_PUSHBUTTON
1 << 16

PDF_BTN_FIELD_IS_RADIOS_IN_UNISON
1 << 25

Choice widgets:

PDF_CH_FIELD_IS_COMBO
1 << 17

PDF_CH_FIELD_IS_EDIT
1 << 18

PDF_CH_FIELD_IS_SORT
1 << 19

PDF_CH_FIELD_IS_MULTI_SELECT
1 << 21

PDF_CH_FIELD_IS_DO_NOT_SPELL_CHECK
1 << 22

PDF_CH_FIELD_IS_COMMIT_ON_SEL_CHANGE
1 << 26

23.12 PDF Standard Blend Modes

For an explanation see Adobe PDF References, page 324:

PDF_BM_Color ""Color""
PDF_BM_ColorBurn ""ColorBurn""
PDF_BM_ColorDodge ""ColorDodge""
PDF_BM_Darken ""Darken""
PDF_BM_Difference ""Difference""
PDF_BM_Exclusion ""Exclusion""
PDF_BM_HardLight ""HardLight""
PDF_BM_Hue ""Hue""
PDF_BM_Lighten ""Lighten""
PDF_BM_Luminosity ""Luminosity""
PDF_BM_Multiply ""Multiply""
PDF_BM_Normal ""Normal""
PDF_BM_Overlay ""Overlay""
PDF_BM_Saturation ""Saturation""
PDF_BM_Screen ""Screen""
PDF_BM_SoftLight ""Softlight""

23.12. PDF Standard Blend Modes
441

PyMuPDF Documentation, Release 1.23.25

23.13 Stamp Annotation Icons

MuPDF has defined the following icons for rubber stamp annotations:

STAMP_Approved 0
STAMP_AsIs 1
STAMP_Confidential 2
STAMP_Departmental 3
STAMP_Experimental 4
STAMP_Expired 5
STAMP_Final 6
STAMP_ForComment 7
STAMP_ForPublicRelease 8
STAMP_NotApproved 9
STAMP_NotForPublicRelease 10
STAMP_Sold 11
STAMP_TopSecret 12
STAMP_Draft 13

This documentation covers all versions up to 1.23.25.

442
Chapter 23. Constants and Enumerations

CHAPTER

TWENTYFOUR

COLOR DATABASE

Since the introduction of methods involving colors (like Page.draw_circle()), a requirement may be to have access
to predefined colors.

The fabulous GUI package wxPython has a database of over 540 predefined RGB colors, which are given more or less
memorizable names. Among them are not only standard names like “green” or “blue”, but also “turquoise”, “skyblue”,
and 100 (not only 50 ...) shades of “gray”, etc.

We have taken the liberty to copy this database (a list of tuples) modified into PyMuPDF and make its colors available
as PDF compatible float triples: for wxPython’s (“WHITE”, 255, 255, 255) we return (1, 1, 1), which can be directly
used in color and fill parameters. We also accept any mixed case of “wHiTe” to find a color.

24.1 Function getColor()

As the color database may not be needed very often, one additional import statement seems acceptable to get access to
it:

>>> # ""getColor"" is the only method you really need
>>> from fitz.utils import getColor
>>> getColor(""aliceblue"")
(0.9411764705882353, 0.9725490196078431, 1.0)
>>> #
>>> # to get a list of all existing names
>>> from fitz.utils import getColorList
>>> cl = getColorList()
>>> cl
['ALICEBLUE', 'ANTIQUEWHITE', 'ANTIQUEWHITE1', 'ANTIQUEWHITE2', 'ANTIQUEWHITE3',
'ANTIQUEWHITE4', 'AQUAMARINE', 'AQUAMARINE1'] ...
>>> #
>>> # to see the full integer color coding
>>> from fitz.utils import getColorInfoList
>>> il = getColorInfoList()
>>> il
[('ALICEBLUE', 240, 248, 255), ('ANTIQUEWHITE', 250, 235, 215),
('ANTIQUEWHITE1', 255, 239, 219), ('ANTIQUEWHITE2', 238, 223, 204),
('ANTIQUEWHITE3', 205, 192, 176), ('ANTIQUEWHITE4', 139, 131, 120),
('AQUAMARINE', 127, 255, 212), ('AQUAMARINE1', 127, 255, 212)] ...

443

PyMuPDF Documentation, Release 1.23.25

24.2 Printing the Color Database

If you want to actually see how the many available colors look like, use scripts print by RGB or print by HSV in
the examples directory. They create PDFs (already existing in the same directory) with all these colors. Their only
difference is sorting order: one takes the RGB values, the other one the Hue-Saturation-Values as sort criteria. This is
a screen print of what these files look like.

This documentation covers all versions up to 1.23.25.

444
Chapter 24. Color Database

CHAPTER

TWENTYFIVE

APPENDIX 1: DETAILS ON TEXT EXTRACTION

This chapter provides background on the text extraction methods of PyMuPDF.

Information of interest are

• what do they provide?

• what do they imply (processing time / data sizes)?

25.1 General structure of a TextPage

TextPage is one of (Py-) MuPDF’s classes. It is normally created (and destroyed again) behind the curtain, when Page
text extraction methods are used, but it is also available directly and can be used as a persistent object. Other than its
name suggests, images may optionally also be part of a text page:

<page>

<text block>

<line>

<span>

<char>

<image block>

<img>

A text page consists of blocks (= roughly paragraphs).

A block consists of either lines and their characters, or an image.

A line consists of spans.

A span consists of adjacent characters with identical font properties: name, size, flags and color.

25.2 Plain Text

Function TextPage.extractText() (or Page.get_text(“text”)) extracts a page’s plain text in original order as spec-
ified by the creator of the document.

An example output:

>>> print(page.get_text(""text""))
Some text on first page.

445

PyMuPDF Documentation, Release 1.23.25

Note:
The output may not equal an accustomed “natural” reading order. However, you can request a reordering
following the scheme “top-left to bottom-right” by executing page.get_text(""text"", sort=True).

25.3 BLOCKS

Function TextPage.extractBLOCKS() (or Page.get_text(“blocks”)) extracts a page’s text blocks as a list of items
like:

(x0, y0, x1, y1, ""lines in block"", block_no, block_type)

Where the first 4 items are the float coordinates of the block’s bbox. The lines within each block are concatenated by
a new-line character.

This is a high-speed method, which by default also extracts image meta information: Each image appears as a block
with one text line, which contains meta information. The image itself is not shown.

As with simple text output above, the sort argument can be used as well to obtain a reading order.

Example output:

>>> print(page.get_text(""blocks"", sort=False))
[(50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375,
'Some text on first page.', 0, 0)]

25.4 WORDS

Function TextPage.extractWORDS() (or Page.get_text(“words”)) extracts a page’s text words as a list of items like:

(x0, y0, x1, y1, ""word"", block_no, line_no, word_no)

Where the first 4 items are the float coordinates of the words’s bbox. The last three integers provide some more infor-
mation on the word’s whereabouts.

This is a high-speed method. As with the previous methods, argument sort=True will reorder the words.

Example output:

>>> for word in page.get_text(""words"", sort=False):

print(word)

(50.0, 88.17500305175781, 78.73200225830078, 103.28900146484375,
'Some', 0, 0, 0)
(81.79000091552734, 88.17500305175781, 99.5219955444336, 103.28900146484375,
'text', 0, 0, 1)
(102.57999420166016, 88.17500305175781, 114.8119888305664, 103.28900146484375,
'on', 0, 0, 2)
(117.86998748779297, 88.17500305175781, 135.5909881591797, 103.28900146484375,
'first', 0, 0, 3)
(138.64898681640625, 88.17500305175781, 166.1709747314453, 103.28900146484375,
'page.', 0, 0, 4)

446
Chapter 25. Appendix 1: Details on Text Extraction

PyMuPDF Documentation, Release 1.23.25

25.5 HTML

TextPage.extractHTML() (or Page.get_text(“html”) output fully reflects the structure of the page’s TextPage – much
like DICT / JSON below. This includes images, font information and text positions. If wrapped in HTML header and
trailer code, it can readily be displayed by an internet browser. Our above example:

>>> for line in page.get_text(""html"").splitlines():

print(line)

<div id=""page0"" style=""position:relative;width:300pt;height:350pt;
background-color:white"">
<p style=""position:absolute;white-space:pre;margin:0;padding:0;top:88pt;
left:50pt""><span style=""font-family:Helvetica,sans-serif;
font-size:11pt"">Some text on first page.</span></p>
</div>

25.6 Controlling Quality of HTML Output

While HTML output has improved a lot in MuPDF v1.12.0, it is not yet bug-free: we have found problems in the areas
font support and image positioning.

• HTML text contains references to the fonts used of the original document. If these are not known to the browser
(a fat chance!), it will replace them with others; the results will probably look awkward. This issue varies greatly
by browser – on my Windows machine, MS Edge worked just fine, whereas Firefox looked horrible.

• For PDFs with a complex structure, images may not be positioned and / or sized correctly. This seems to be the
case for rotated pages and pages, where the various possible page bbox variants do not coincide (e.g. MediaBox
!= CropBox). We do not know yet, how to address this – we filed a bug at MuPDF’s site.

To address the font issue, you can use a simple utility script to scan through the HTML file and replace font references.
Here is a little example that replaces all fonts with one of the PDF Base 14 Fonts: serifed fonts will become “Times”,
non-serifed “Helvetica” and monospaced will become “Courier”. Their respective variations for “bold”, “italic”, etc.
are hopefully done correctly by your browser:

import sys
filename = sys.argv[1]
otext = open(filename).read()
# original html text string

pos1 = 0
# search start poition

font_serif = ""font-family:Times""
# enter ...

font_sans
= ""font-family:Helvetica""
# ... your choices ...

font_mono
= ""font-family:Courier""
# ... here

found_one
= False
# true if search successful

while True:
pos0 = otext.find(""font-family:"", pos1)
# start of a font spec

if pos0 < 0:
# none found - we are done

break

pos1 = otext.find("";"", pos0)
# end of font spec

test = otext[pos0 : pos1]
# complete font spec string

testn = """"
# the new font spec string

if test.endswith("",serif""):
# font with serifs?

testn = font_serif
# use Times instead

(continues on next page)

25.5. HTML
447

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

elif test.endswith("",sans-serif""):
# sans serifs font?

testn = font_sans
# use Helvetica

elif test.endswith("",monospace""):
# monospaced font?

testn = font_mono
# becomes Courier

if testn != """":
# any of the above found?

otext = otext.replace(test, testn)
# change the source

found_one = True
pos1 = 0
# start over

if found_one:
ofile = open(filename + "".html"", ""w"")
ofile.write(otext)
ofile.close()

else:

print(""Warning: could not find any font specs!"")

25.7 DICT (or JSON)

TextPage.extractDICT() (or Page.get_text(“dict”, sort=False)) output fully reflects the structure of a TextPage and
provides image content and position detail (bbox – boundary boxes in pixel units) for every block, line and span. Images
are stored as bytes for DICT output and base64 encoded strings for JSON output.

For a visualization of the dictionary structure have a look at Structure of Dictionary Outputs.

Here is how this looks like:

{

""width"": 300.0,
""height"": 350.0,
""blocks"": [{

""type"": 0,
""bbox"": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375),
""lines"": ({

""wmode"": 0,
""dir"": (1.0, 0.0),
""bbox"": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375),
""spans"": ({

""size"": 11.0,
""flags"": 0,
""font"": ""Helvetica"",
""color"": 0,
""origin"": (50.0, 100.0),
""text"": ""Some text on first page."",
""bbox"": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375)
})
}]
}]
}

448
Chapter 25. Appendix 1: Details on Text Extraction

PyMuPDF Documentation, Release 1.23.25

25.8 RAWDICT (or RAWJSON)

TextPage.extractRAWDICT() (or Page.get_text(“rawdict”, sort=False)) is an information superset of DICT and
takes the detail level one step deeper. It looks exactly like the above, except that the “text” items (string) in the spans
are replaced by the list “chars”. Each “chars” entry is a character dict. For example, here is what you would see in
place of item “text”: “Text in black color.” above:

""chars"": [{

""origin"": (50.0, 100.0),
""bbox"": (50.0, 88.17500305175781, 57.336997985839844, 103.28900146484375),
""c"": ""S""

}, {

""origin"": (57.33700180053711, 100.0),
""bbox"": (57.33700180053711, 88.17500305175781, 63.4530029296875, 103.28900146484375),
""c"": ""o""

}, {

""origin"": (63.4530029296875, 100.0),
""bbox"": (63.4530029296875, 88.17500305175781, 72.61600494384766, 103.28900146484375),
""c"": ""m""

}, {

""origin"": (72.61600494384766, 100.0),
""bbox"": (72.61600494384766, 88.17500305175781, 78.73200225830078, 103.

˓→28900146484375),

""c"": ""e""

}, {

""origin"": (78.73200225830078, 100.0),
""bbox"": (78.73200225830078, 88.17500305175781, 81.79000091552734, 103.

˓→28900146484375),

""c"": "" ""

< ... deleted ... >
}, {

""origin"": (163.11297607421875, 100.0),
""bbox"": (163.11297607421875, 88.17500305175781, 166.1709747314453, 103.

˓→28900146484375),

""c"": "".""

}],

25.9 XML

The TextPage.extractXML() (or Page.get_text(“xml”)) version extracts text (no images) with the detail level of
RAWDICT:

>>> for line in page.get_text(""xml"").splitlines():

print(line)

<page id=""page0"" width=""300"" height=""350"">
<block bbox=""50 88.175 166.17098 103.289"">
<line bbox=""50 88.175 166.17098 103.289"" wmode=""0"" dir=""1 0"">
<font name=""Helvetica"" size=""11"">
<char quad=""50 88.175 57.336999 88.175 50 103.289 57.336999 103.289"" x=""50""
y=""100"" color=""#000000"" c=""S""/>

(continues on next page)

25.8. RAWDICT (or RAWJSON)
449

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

<char quad=""57.337 88.175 63.453004 88.175 57.337 103.289 63.453004 103.289"" x=""57.337""
y=""100"" color=""#000000"" c=""o""/>
<char quad=""63.453004 88.175 72.616008 88.175 63.453004 103.289 72.616008 103.289"" x=""63.

˓→453004""
y=""100"" color=""#000000"" c=""m""/>
<char quad=""72.616008 88.175 78.732 88.175 72.616008 103.289 78.732 103.289"" x=""72.616008

˓→""
y=""100"" color=""#000000"" c=""e""/>
<char quad=""78.732 88.175 81.79 88.175 78.732 103.289 81.79 103.289"" x=""78.732""
y=""100"" color=""#000000"" c="" ""/>

... deleted ...

<char quad=""163.11298 88.175 166.17098 88.175 163.11298 103.289 166.17098 103.289"" x=

˓→""163.11298""
y=""100"" color=""#000000"" c="".""/>
</font>
</line>
</block>
</page>

Note: We have successfully tested lxml to interpret this output.

25.10 XHTML

TextPage.extractXHTML() (or Page.get_text(“xhtml”)) is a variation of TEXT but in HTML format, containing the
bare text and images (“semantic” output):

<div id=""page0"">
<p>Some text on first page.</p>
</div>

25.11 Text Extraction Flags Defaults

• New in version 1.16.2: Method Page.get_text() supports a keyword parameter flags (int) to control the
amount and the quality of extracted data. The following table shows the defaults settings (flags parameter omitted
or None) for each extraction variant. If you specify flags with a value other than None, be aware that you must
set all desired options. A description of the respective bit settings can be found in Text Extraction Flags.

• New in v1.19.6: The default combinations in the following table are now available as Python constants:

TEXTFLAGS_TEXT, TEXTFLAGS_WORDS, TEXTFLAGS_BLOCKS, TEXTFLAGS_DICT, TEXTFLAGS_RAWDICT,
TEXTFLAGS_HTML, TEXTFLAGS_XHTML, TEXTFLAGS_XML, and TEXTFLAGS_SEARCH. You can now easily mod-
ify a default flag, e.g.

– include images in a “blocks” output:

flags = TEXTFLAGS_BLOCKS | TEXT_PRESERVE_IMAGES

– exclude images from a “dict” output:

450
Chapter 25. Appendix 1: Details on Text Extraction

PyMuPDF Documentation, Release 1.23.25

flags = TEXTFLAGS_DICT & ~TEXT_PRESERVE_IMAGES

– set dehyphenation off in text searches:

flags = TEXTFLAGS_SEARCH & ~TEXT_DEHYPHENATE

Indicator
text
html
xhtml
xml
dict
rawdict
words
blocks
search

preserve ligatures
1
1
1
1
1
1
1
1
1

preserve whitespace
1
1
1
1
1
1
1
1
1

preserve images
n/a
1
1
n/a
1
1
n/a
0
0

inhibit spaces
0
0
0
0
0
0
0
0
0

dehyphenate
0
0
0
0
0
0
0
0
1

clip to mediabox
1
1
1
1
1
1
1
1
1

• search refers to the text search function.

• “json” is handled exactly like “dict” and is hence left out.

• “rawjson” is handled exactly like “rawdict” and is hence left out.

• An “n/a” specification means a value of 0 and setting this bit never has any effect on the output (but an adverse
effect on performance).

• If you are not interested in images when using an output variant which includes them by default, then by all
means set the respective bit off: You will experience a better performance and much lower space requirements.

To show the effect of TEXT_INHIBIT_SPACES have a look at this example:

>>> print(page.get_text(""text""))
H a l l o !
Mo r e
t e x t

i s
f o l l o w i n g

i n
E n g l i s h

. . .
l e t ' s
s e e

w h a t
h a p p e n s .

>>> print(page.get_text(""text"", flags=fitz.TEXT_INHIBIT_SPACES))
Hallo!
More text
is following
in English
... let's see
what happens.
>>>

25.12 Performance

The text extraction methods differ significantly both: in terms of information they supply, and in terms of resource
requirements and runtimes. Generally, more information of course means, that more processing is required and a
higher data volume is generated.

Note: Especially images have a very significant impact. Make sure to exclude them (via the flags parameter) whenever
you do not need them. To process the below mentioned 2’700 total pages with default flags settings required 160 seconds
across all extraction methods. When all images where excluded, less than 50% of that time (77 seconds) were needed.

25.12. Performance
451

PyMuPDF Documentation, Release 1.23.25

To begin with, all methods are very fast in relation to other products out there in the market. In terms of processing
speed, we are not aware of a faster (free) tool. Even the most detailed method, RAWDICT, processes all 1’310 pages
of the Adobe PDF References in less than 5 seconds (simple text needs less than 2 seconds here).

The following table shows average relative speeds (“RSpeed”, baseline 1.00 is TEXT), taken across ca. 1400 text-heavy
and 1300 image-heavy pages.

Method
RSpeed
Comments
no images

TEXT
1.00
no images, plain text, line breaks
1.00

BLOCKS
1.00
image bboxes (only), block level text with bboxes, line breaks
1.00

WORDS
1.02
no images, word level text with bboxes
1.02

XML
2.72
no images, char level text, layout and font details
2.72

XHTML
3.32
base64 images, span level text, no layout info
1.00

HTML
3.54
base64 images, span level text, layout and font details
1.01

DICT
3.93
binary images, span level text, layout and font details
1.04

RAWDICT
4.50
binary images, char level text, layout and font details
1.68

As mentioned: when excluding image extraction (last column), the relative speeds are changing drastically: except
RAWDICT and XML, the other methods are almost equally fast, and RAWDICT requires 40% less execution time
than the now slowest XML.

Look at chapter Appendix 1 for more performance information.

This documentation covers all versions up to 1.23.25.

452
Chapter 25. Appendix 1: Details on Text Extraction

CHAPTER

TWENTYSIX

APPENDIX 2: CONSIDERATIONS ON EMBEDDED FILES

This chapter provides some background on embedded files support in PyMuPDF.

26.1 General

Starting with version 1.4, PDF supports embedding arbitrary files as part (“Embedded File Streams”) of a PDF docu-
ment file (see chapter “7.11.4 Embedded File Streams”, pp. 103 of the Adobe PDF References).

In many aspects, this is comparable to concepts also found in ZIP files or the OLE technique in MS Windows. PDF
embedded files do, however, not support directory structures as does the ZIP format. An embedded file can in turn
contain embedded files itself.

Advantages of this concept are that embedded files are under the PDF umbrella, benefitting from its permissions /
password protection and integrity aspects: all data, which a PDF may reference or even may be dependent on, can be
bundled into it and so form a single, consistent unit of information.

In addition to embedded files, PDF 1.7 adds collections to its support range. This is an advanced way of storing and
presenting meta information (i.e. arbitrary and extensible properties) of embedded files.

26.2 MuPDF Support

After adding initial support for collections (portfolios) and /EmbeddedFiles in MuPDF version 1.11, this support was
dropped again in version 1.15.

As a consequence, the cli utility mutool no longer offers access to embedded files.

PyMuPDF – having implemented an /EmbeddedFiles API in response in its version 1.11.0 – was therefore forced to
change gears starting with its version 1.16.0 (we never published a MuPDF v1.15.x compatible PyMuPDF).

We are now maintaining our own code basis supporting embedded files. This code makes use of basic MuPDF dictio-
nary and array functions only.

453

PyMuPDF Documentation, Release 1.23.25

26.3 PyMuPDF Support

We continue to support the full old API with respect to embedded files – with only minor, cosmetic changes.

There even also is a new function, which delivers a list of all names under which embedded data are registered in a
PDF, Document.embfile_names().

This documentation covers all versions up to 1.23.25.

454
Chapter 26. Appendix 2: Considerations on Embedded Files

CHAPTER

TWENTYSEVEN

APPENDIX 3: ASSORTED TECHNICAL INFORMATION

This section deals with various technical topics, that are not necessarily related to each other.

27.1 Image Transformation Matrix

Starting with version 1.18.11, the image transformation matrix is returned by some methods for text and image extrac-
tion: Page.get_text() and Page.get_image_bbox().

The transformation matrix contains information about how an image was transformed to fit into the rectangle (its
“boundary box” = “bbox”) on some document page. By inspecting the image’s bbox on the page and this matrix, one
can determine for example, whether and how the image is displayed scaled or rotated on a page.

The relationship between image dimension and its bbox on a page is the following:

1. Using the original image’s width and height,

• define the image rectangle imgrect = fitz.Rect(0, 0, width, height)

• define the “shrink matrix” shrink = fitz.Matrix(1/width, 0, 0, 1/height, 0, 0).

2. Transforming the image rectangle with its shrink matrix, will result in the unit rectangle: imgrect * shrink
= fitz.Rect(0, 0, 1, 1).

3. Using the image transformation matrix “transform”, the following steps will compute the bbox:

imgrect = fitz.Rect(0, 0, width, height)
shrink = fitz.Matrix(1/width, 0, 0, 1/height, 0, 0)
bbox = imgrect * shrink * transform

4. Inspecting the matrix product shrink * transform will reveal all information about what happened to the
image rectangle to make it fit into the bbox on the page: rotation, scaling of its sides and translation of its origin.
Let us look at an example:

>>> imginfo = page.get_images()[0]
# get an image item on a page

>>> imginfo
(5, 0, 439, 501, 8, 'DeviceRGB', '', 'fzImg0', 'DCTDecode')
>>> #------------------------------------------------
>>> # define image shrink matrix and rectangle
>>> #------------------------------------------------
>>> shrink = fitz.Matrix(1 / 439, 0, 0, 1 / 501, 0, 0)
>>> imgrect = fitz.Rect(0, 0, 439, 501)
>>> #------------------------------------------------

(continues on next page)

455

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

>>> # determine image bbox and transformation matrix:
>>> #------------------------------------------------
>>> bbox, transform = page.get_image_bbox(""fzImg0"", transform=True)
>>> #------------------------------------------------
>>> # confirm equality - permitting rounding errors
>>> #------------------------------------------------
>>> bbox
Rect(100.0, 112.37525939941406, 300.0, 287.624755859375)
>>> imgrect * shrink * transform
Rect(100.0, 112.375244140625, 300.0, 287.6247253417969)
>>> #------------------------------------------------
>>> shrink * transform
Matrix(0.0, -0.39920157194137573, 0.3992016017436981, 0.0, 100.0, 287.6247253417969)
>>> #------------------------------------------------
>>> # the above shows:
>>> # image sides are scaled by same factor ~0.4,
>>> # and the image is rotated by 90 degrees clockwise
>>> # compare this with fitz.Matrix(-90) * 0.4
>>> #------------------------------------------------

27.2 PDF Base 14 Fonts

The following 14 builtin font names must be supported by every PDF viewer application. They are available as a
dictionary, which maps their full names amd their abbreviations in lower case to the full font basename. Wherever a
fontname must be provided in PyMuPDF, any key or value from the dictionary may be used:

In [2]: fitz.Base14_fontdict
Out[2]:
{'courier': 'Courier',
'courier-oblique': 'Courier-Oblique',
'courier-bold': 'Courier-Bold',
'courier-boldoblique': 'Courier-BoldOblique',
'helvetica': 'Helvetica',
'helvetica-oblique': 'Helvetica-Oblique',
'helvetica-bold': 'Helvetica-Bold',
'helvetica-boldoblique': 'Helvetica-BoldOblique',
'times-roman': 'Times-Roman',
'times-italic': 'Times-Italic',
'times-bold': 'Times-Bold',
'times-bolditalic': 'Times-BoldItalic',
'symbol': 'Symbol',
'zapfdingbats': 'ZapfDingbats',
'helv': 'Helvetica',
'heit': 'Helvetica-Oblique',
'hebo': 'Helvetica-Bold',
'hebi': 'Helvetica-BoldOblique',
'cour': 'Courier',
'coit': 'Courier-Oblique',
'cobo': 'Courier-Bold',

(continues on next page)

456
Chapter 27. Appendix 3: Assorted Technical Information

PyMuPDF Documentation, Release 1.23.25

(continued from previous page)

'cobi': 'Courier-BoldOblique',
'tiro': 'Times-Roman',
'tibo': 'Times-Bold',
'tiit': 'Times-Italic',
'tibi': 'Times-BoldItalic',
'symb': 'Symbol',
'zadb': 'ZapfDingbats'}

In contrast to their obligation, not all PDF viewers support these fonts correctly and completely – this is especially true
for Symbol and ZapfDingbats. Also, the glyph (visual) images will be specific to every reader.

To see how these fonts can be used – including the CJK built-in fonts – look at the table in Page.insert_font().

27.3 Adobe PDF References

This PDF Reference manual published by Adobe is frequently quoted throughout this documentation. It can be viewed
and downloaded from here.

Note: For a long time, an older version was also available under this link. It seems to be taken off of the web site in
October 2021. Earlier (pre 1.19.*) versions of the PyMuPDF documentation used to refer to this document. We have
undertaken an effort to replace referrals to the current specification above.

27.4 Using Python Sequences as Arguments in PyMuPDF

When PyMuPDF objects and methods require a Python list of numerical values, other Python sequence types are also
allowed. Python classes are said to implement the sequence protocol, if they have a __getitem__() method.

This basically means, you can interchangeably use Python list or tuple or even array.array, numpy.array and bytearray
types in these cases.

For example, specifying a sequence ""s"" in any of the following ways

• s = [1, 2] – a list

• s = (1, 2) – a tuple

• s = array.array(""i"", (1, 2)) – an array.array

• s = numpy.array((1, 2)) – a numpy array

• s = bytearray((1, 2)) – a bytearray

will make it usable in the following example expressions:

• fitz.Point(s)

• fitz.Point(x, y) + s

• doc.select(s)

27.3. Adobe PDF References
457

PyMuPDF Documentation, Release 1.23.25

Similarly with all geometry objects Rect, IRect, Matrix and Point.

Because all PyMuPDF geometry classes themselves are special cases of sequences, they (with the exception of Quad
– see below) can be freely used where numerical sequences can be used, e.g. as arguments for functions like list(),
tuple(), array.array() or numpy.array(). Look at the following snippet to see this work.

>>> import fitz, array, numpy as np
>>> m = fitz.Matrix(1, 2, 3, 4, 5, 6)
>>>
>>> list(m)
[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
>>>
>>> tuple(m)
(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)
>>>
>>> array.array(""f"", m)
array('f', [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])
>>>
>>> np.array(m)
array([1., 2., 3., 4., 5., 6.])

Note:
Quad is a Python sequence object as well and has a length of 4. Its items however are point_like – not
numbers. Therefore, the above remarks do not apply.

27.5 Ensuring Consistency of Important Objects in PyMuPDF

PyMuPDF is a Python binding for the C library MuPDF. While a lot of effort has been invested by MuPDF’s creators
to approximate some sort of an object-oriented behavior, they certainly could not overcome basic shortcomings of the
C language in that respect.

Python on the other hand implements the OO-model in a very clean way. The interface code between PyMuPDF and
MuPDF consists of two basic files: fitz.py and fitz_wrap.c. They are created by the excellent SWIG tool for each new
version.

When you use one of PyMuPDF’s objects or methods, this will result in execution of some code in fitz.py, which in
turn will call some C code compiled with fitz_wrap.c.

Because SWIG goes a long way to keep the Python and the C level in sync, everything works fine, if a certain set of
rules is being strictly followed. For example: never access a Page object, after you have closed (or deleted or set to
None) the owning Document. Or, less obvious: never access a page or any of its children (links or annotations) after
you have executed one of the document methods select(), delete_page(), insert_page() ... and more.

But just no longer accessing invalidated objects is actually not enough: They should rather be actively deleted entirely,
to also free C-level resources (meaning allocated memory).

The reason for these rules lies in the fact that there is a hierarchical 2-level one-to-many relationship between a document
and its pages and also between a page and its links / annotations. To maintain a consistent situation, any of the above
actions must lead to a complete reset – in Python and, synchronously, in C.

SWIG cannot know about this and consequently does not do it.

The required logic has therefore been built into PyMuPDF itself in the following way.

458
Chapter 27. Appendix 3: Assorted Technical Information

PyMuPDF Documentation, Release 1.23.25

1. If a page “loses” its owning document or is being deleted itself, all of its currently existing annotations and links
will be made unusable in Python, and their C-level counterparts will be deleted and deallocated.

2. If a document is closed (or deleted or set to None) or if its structure has changed, then similarly all currently
existing pages and their children will be made unusable, and corresponding C-level deletions will take place.
“Structure changes” include methods like select(), delePage(), insert_page(), insert_pdf() and so on: all of these
will result in a cascade of object deletions.

The programmer will normally not realize any of this. If he, however, tries to access invalidated objects, exceptions
will be raised.

Invalidated objects cannot be directly deleted as with Python statements like del page or page = None, etc. Instead,
their __del__ method must be invoked.

All pages, links and annotations have the property parent, which points to the owning object. This is the property that
can be checked on the application level: if obj.parent == None then the object’s parent is gone, and any reference to
its properties or methods will raise an exception informing about this “orphaned” state.

A sample session:

>>> page = doc[n]
>>> annot = page.first_annot
>>> annot.type
# everything works fine

[5, 'Circle']
>>> page = None
# this turns 'annot' into an orphan

>>> annot.type
<... omitted lines ...>
RuntimeError: orphaned object: parent is None
>>>
>>> # same happens, if you do this:
>>> annot = doc[n].first_annot
# deletes the page again immediately!

>>> annot.type
# so, 'annot' is 'born' orphaned

<... omitted lines ...>
RuntimeError: orphaned object: parent is None

This shows the cascading effect:

>>> doc = fitz.open(""some.pdf"")
>>> page = doc[n]
>>> annot = page.first_annot
>>> page.rect
fitz.Rect(0.0, 0.0, 595.0, 842.0)
>>> annot.type
[5, 'Circle']
>>> del doc
# or doc = None or doc.close()

>>> page.rect
<... omitted lines ...>
RuntimeError: orphaned object: parent is None
>>> annot.type
<... omitted lines ...>
RuntimeError: orphaned object: parent is None

Note: Objects outside the above relationship are not included in this mechanism. If you e.g. created a table of contents
by toc = doc.get_toc(), and later close or change the document, then this cannot and does not change variable toc in
any way. It is your responsibility to refresh such variables as required.

27.5. Ensuring Consistency of Important Objects in PyMuPDF
459

PyMuPDF Documentation, Release 1.23.25

27.6 Design of Method Page.show_pdf_page()

27.6.1 Purpose and Capabilities

The method displays an image of a (“source”) page of another PDF document within a specified rectangle of the current
(“containing”, “target”) page.

• In contrast to Page.insert_image(), this display is vector-based and hence remains accurate across zooming
levels.

• Just like Page.insert_image(), the size of the display is adjusted to the given rectangle.

The following variations of the display are currently supported:

• Bool parameter ""keep_proportion"" controls whether to maintain the aspect ratio (default) or not.

– Rectangle parameter ""clip"" restricts the visible part of the source page rectangle. Default is the
full page.

• float ""rotation"" rotates the display by an arbitrary angle (degrees). If the angle is not an integer multiple of
90, only 2 of the 4 corners may be positioned on the target border if also ""keep_proportion"" is true.

• Bool parameter ""overlay"" controls whether to put the image on top (foreground, default) of current page content
or not (background).

Use cases include (but are not limited to) the following:

1. “Stamp” a series of pages of the current document with the same image, like a company logo or a watermark.

2. Combine arbitrary input pages into one output page to support “booklet” or double-sided printing (known as
“4-up”, “n-up”).

3. Split up (large) input pages into several arbitrary pieces. This is also called “posterization”, because you e.g. can
split an A4 page horizontally and vertically, print the 4 pieces enlarged to separate A4 pages, and end up with an
A2 version of your original page.

27.6.2 Technical Implementation

This is done using PDF “Form XObjects”, see section 8.10 on page 217 of Adobe PDF References. On execution of
a Page.show_pdf_page(), the following things happen:

1. The resources and contents objects of source page in source document are copied over to the target document,
jointly creating a new Form XObject with the following properties. The PDF xref number of this object is
returned by the method.

a. /BBox equals /Mediabox of the source page

b. /Matrix equals the identity matrix.

c. /Resources equals that of the source page. This involves a “deep-copy” of hierarchically
nested other objects (including fonts, images, etc.). The complexity involved here is covered
by MuPDF’s grafting1 technique functions.

1 MuPDF supports “deep-copying” objects between PDF documents. To avoid duplicate data in the target, it uses so-called “graftmaps”, like a
form of scratchpad: for each object to be copied, its xref number is looked up in the graftmap. If found, copying is skipped. Otherwise, the new
xref is recorded and the copy takes place. PyMuPDF makes use of this technique in two places so far: Document.insert_pdf() and Page.
show_pdf_page(). This process is fast and very efficient, because it prevents multiple copies of typically large and frequently referenced data, like

460
Chapter 27. Appendix 3: Assorted Technical Information

PyMuPDF Documentation, Release 1.23.25

d. This is a stream object type, and its stream is an exact copy of the combined data of the source
page’s contents objects.

This Form XObject is only executed once per shown source page. Subsequent displays of the same
source page will skip this step and only create “pointer” Form XObjects (done in next step) to this
object.

2. A second Form XObject is then created which the target page uses to invoke the display. This object has the
following properties:

a. /BBox equals the /CropBox of the source page (or ""clip"").

b. /Matrix represents the mapping of /BBox to the target rectangle.

c. /XObject references the previous Form XObject via the fixed name fullpage.

d. The stream of this object contains exactly one fixed statement: /fullpage Do.

e. If the method’s ""oc"" argument is given, its value is assigned to this Form XObject as /OC.

3. The resources and contents objects of the target page are now modified as follows.

a. Add an entry to the /XObject dictionary of /Resources with the name fzFrm (with n chosen such that
this entry is unique on the page).

b. Depending on ""overlay"", prepend or append a new object to the page’s /Contents array, containing the
statement q /fzFrm<n> Do Q.

This design approach ensures that:

1. The (potentially large) source page is only copied once to the target PDF. Only small “pointer” Form XObjects
objects are created per each target page to show the source page.

2. Each referring target page can have its own ""oc"" parameter to control the source page’s visibility individually.

27.7 Redirecting Error and Warning Messages

Since MuPDF version 1.16 error and warning messages can be redirected via an official plugin.

PyMuPDF will put error messages to sys.stderr prefixed with the string “mupdf:”. Warnings are internally stored
and can be accessed via fitz.TOOLS.mupdf_warnings(). There also is a function to empty this store.

27.8 Coordinates

This is one of the most frequently used terms in this documentation. A coordinate generally means a pair of numbers
(x, y) referring to some location, like a corner of a rectangle (Rect), a Point and so forth. The two values usually are
floats, but there a objects like images which only allow them to be integers.

To actually find a coordinate’s location, we also need to know the reference point for x and y - in other words, we must
know where location (0, 0) is positioned. Once (0, 0) (the “origin”) is known, we speak of a “coordinate system”.

Several coordinate systems exist in document processing. For instance, the coordinate systems of a PDF page and the
image created from it are different. We therefore need ways to transform coordinates from one system to another (and

images and fonts. However, you may still want to consider using garbage collection (option 4) in any of the following cases:

1. The target PDF is not new / empty: grafting does not check for resources that already existed (e.g. images, fonts) in the target document before
opening it.

2. Using Page.show_pdf_page() for more than one source document: each grafting occurs within one source PDF only, not across multiple.
So if e.g. the same image exists in pages from different source PDFs, then this will not be detected until garbage collection.

27.7. Redirecting Error and Warning Messages
461

PyMuPDF Documentation, Release 1.23.25

also back occasionally). This is the task of a Matrix. It is a mathematical function which works much like a factor
that can be “multiplied” with a point or rectangle to give us the corresponding point / rectangle in another coordinate
system. The inverse of a transformation matrix can be used to revert the transformation. Much like multiplying by
some factor, say 3, can be reverted by dividing the result by 3 (or multiplying it with 1/3).

27.8.1 Coordinates and Images

Images have a coordinate system with integer coordinates. Origin (0, 0) is the top-left point. x values must be in
range(width), and y values in range(height). Therefore, y values increase if we go downwards. For every image,
there is only a finite number of coordinates, namely width * height. A location in an image is also called a “pixel”.

• How large an image will be (in centimeters or inches) when e.g. printed, depends on additional information: the
“resolution”. This is measured in DPI (dots per inch, or pixels per inch). To find the printed size of some image,
we therefore must divide its width and its height by the corresponding DPI values (there may separate ones for
width and for height) and will get the respective number of inches.

27.8.2 Origin Point, Point Size and Y-Axis

In PDF, the origin (0, 0) of a page is located at its bottom-left point. In MuPDF, the origin (0, 0) of a page is
located at its top-left point.

Coordinates are float numbers and measured in points, where:

• one point equals 1/72 inches.

Typical document page sizes are ISO A4 and Letter. A Letter page has a size of 8.5 x 11 inches, corresponding to
612 x 792 points. In the PDF coordinate system, the top-left point of a Letter page hence has the coordinate (0,
792) as the y-axis points upwards. Now we know our document size the MuPDF coordinate system for the bottom
right would be coordinate (612, 792) (and for PDF this coordinate would then be (612,0)).

• Theoretically, there are infinitely many coordinate positions on a PDF page. In practice however, at most the
first 5 decimal places are sufficient for a reasonable precision.

462
Chapter 27. Appendix 3: Assorted Technical Information

PyMuPDF Documentation, Release 1.23.25

• In MuPDF, multiple document formats are supported - PDF just being one among over a dozen others. Images
are also supported as documents in MuPDF (therefore having one page usually). This is one of the reasons why
MuPDF uses a coordinate system with the origin (0, 0) being the top-left point of any document page. The
y-axis points downwards, like with images. Coordinates in MuPDF in any case are floats, like in PDF.

• A rectangle Rect(0, 0, 100, 100) for instance in MuPDF (and thus PyMuPDF) therefore is a square with
edges of length 100 points (= 1.39 inches or 3.53 centimeters). Its top-left corner is the origin. To switch between
the two coordinate systems PDF to MuPDF, every Page object has a Page.transformation_matrix. Its
inverse can be used to compute a rectangle’s PDF coordinates. In this way we can conveniently find that Rect(0,
0, 100, 100) in MuPDF is the same as Rect(0, 692, 100, 792) in PDF. See this code snippet:

>>> page = doc.new_page(width=612, height=792)
# make new Letter page

>>> ptm = page.transformation_matrix
>>> # the inverse matrix of ptm is ~ptm
>>> fitz.Rect(0, 0, 100, 100) * ~ptm
Rect(0.0, 692.0, 100.0, 792.0)

This documentation covers all versions up to 1.23.25.

27.8. Coordinates
463

PyMuPDF Documentation, Release 1.23.25

464
Chapter 27. Appendix 3: Assorted Technical Information

CHAPTER

TWENTYEIGHT

APPENDIX 4: PERFORMANCE COMPARISON METHODOLOGY

This article documents the approach to measure PyMuPDF’s performance and the tools and example files used to do
comparisons.

The following three sections deal with different performance aspects:

• Document Copying - This includes opening and parsing PDFs, then writing them to an output file. Because the
same basic activities are also used for joining (merging) PDFs, the results also apply to these use cases.

• Text Extraction - This extracts plain text from PDFs and writes it to an output text file.

• Page Rendering - This converts PDF pages to image files looking identical to the pages. This ability is the basic
prerequisite for using a tool in Python GUI scripts to scroll through documents. We have chosen a medium-
quality (resolution 150 DPI) version.

Please note that in all cases the actual speed in dealing with PDF structures is not directly measured: instead, the
timings also include the durations of writing files to the operating system’s file system. This cannot be avoided because
tools other than PyMuPDF do not offer the option to e.g., separate the image creation step from the following step,
which writes the image into a file.

So all timings documented include a common, OS-oriented base effort. Therefore, performance differences per tool
are actually larger than the numbers suggest.

28.1 Files used

A set of eight files is used for the performance testing. With each file we have the following information:

• Name of the file and download link.

• Size in bytes.

• Total number of pages in file.

• Total number of bookmarks (Table of Contents entries).

• Total number of links.

• KB size per page.

• Textsize per page is the amount text in the whole file in KB, divided by the number of pages.

• Any notes to generally describe the type of file.

465

PyMuPDF Documentation, Release 1.23.25

Name
Size
(bytes)

Pages TOC
size

Links KB/pageText-
size/page

Notes

adobe.pdf
32,472,771 1,310
794
32,096 24
1,942
linearized, many links / book-
marks

artifex-
website.pdf

31,570,732 47
46
2,035
656
3,538
graphics oriented

db-systems.pdf
29,326,355 1,241
0
0
23
2,142

fontforge.pdf
8,222,384
214
31
242
38
1,058
mix of text & graphics

pandas.pdf
10,585,962 3,071
536
16,554 3
1,539
many pages

pymupdf.pdf
6,805,176
478
276
5,277
14
1,937
text oriented

pythonbook.pdf
9,983,856
669
198
1,953
15
1,929

sample-50-MB-
pdf-file.pdf

52,521,850 1
0
0
51,291
23,860
single page, graphics oriented,
large file size

Note:
adobe.pdf and pymupdf.pdf are clearly text oriented, artifex-website.pdf and sample-50-MB-pdf-file.pdf
are graphics oriented. Other files are a mix of both.

28.2 Tools used

In each section, the same fixed set of PDF files is being processed by a set of tools. The set of tools used per performance
aspect however varies, depending on the supported tool features.

All tools are either platform independent, or at least can run on both, Windows and Unix / Linux.

Tool
Description

PyMuPDF
The tool of this manual.

PDFrw
A pure Python tool, being used by rst2pdf, has interface to ReportLab.

PyPDF2
A pure Python tool with a large function set.

PDFMiner
A pure Python to extract text and other data from PDF.

XPDF
A command line utility with multiple functions.

PikePDF
A Python package similar to PDFrw, but based on C++ library QPDF.

PDF2JPG
A Python package specialized on rendering PDF pages to JPG images.

28.3 Copying / Joining / Merging

How fast is a PDF file read and its content parsed for further processing? The sheer parsing performance cannot directly
be compared, because batch utilities always execute a requested task completely, in one go, front to end. PDFrw too,
has a lazy strategy for parsing, meaning it only parses those parts of a document that are required in any moment.

To find an answer to the question, we therefore measure the time to copy a PDF file to an output file with each tool,
and do nothing else.

These are the Python commands for how each tool is used:

PyMuPDF

466
Chapter 28. Appendix 4: Performance Comparison Methodology

PyMuPDF Documentation, Release 1.23.25

import fitz
doc = fitz.open(""input.pdf"")
doc.save(""output.pdf"")

PDFrw

doc = PdfReader(""input.pdf"")
writer = PdfWriter()
writer.trailer = doc
writer.write(""output.pdf"")

PikePDF

from pikepdf import Pdf
doc = Pdf.open(""input.pdf"")
doc.save(""output.pdf"")

PyPDF2

pdfmerge = PyPDF2.PdfMerger()
pdfmerge.append(""input.pdf"")
pdfmerge.write(""output.pdf"")
pdfmerge.close()

Observations

These are our run time findings in seconds along with a base rate summary compared to PyMuPDF:

Name
PyMuPDF
PDFrw
PikePDF
PyPDF2

adobe.pdf
1.75
5.15
22.37
374.05

artifex-website.pdf
0.26
0.38
1.41
2.81

db-systems.pdf
0.15
0.8
1.68
2.46

fontforge.pdf
0.09
0.14
0.28
1.1

pandas.pdf
0.38
2.21
2.73
70.3

pymupdf.pdf
0.11
0.56
0.83
6.05

pythonbook.pdf
0.19
1.2
1.34
37.19

sample-50-MB-pdf-file.pdf
0.12
0.1
2.93
0.08

Total
3.05
10.54
33.57
494.04

Rate compared to PyMuPDF
1.0
3.5
11.0
162

28.4 Text Extraction

The following table shows plain text extraction durations. All tools have been used with their most basic functionality
- i.e. no layout re-arrangements, etc.

Observations

These are our run time findings in seconds along with a base rate summary compared to PyMuPDF:

28.4. Text Extraction
467

PyMuPDF Documentation, Release 1.23.25

Name
PyMuPDF
XPDF
PyPDF2
PDFMiner

adobe.pdf
2.01
6.19
22.2
49.15

artifex-website.pdf
0.18
0.3
1.1
4.06

db-systems.pdf
1.57
4.26
25.75
42.19

fontforge.pdf
0.24
0.47
2.69
4.2

pandas.pdf
2.41
10.54
25.38
76.56

pymupdf.pdf
0.49
2.34
6.44
13.55

pythonbook.pdf
0.84
2.88
9.28
24.27

sample-50-MB-pdf-file.pdf
0.27
0.44
8.8
13.29

Total
8.01
27.42
101.64
227.27

Rate compared to PyMuPDF
1.0
3.42
12.69
28.37

28.5 Page Rendering

We have tested rendering speed of PyMuPDF against pdf2jpg and XPDF at a resolution of 150 DPI,

These are the Python commands for how each tool is used:

PyMuPDF

def ProcessFile(datei):
print ""processing:"", datei
doc=fitz.open(datei)
for p in fitz.Pages(doc):
pix = p.get_pixmap(dpi=150)
pix.save(""t-%s.png"" % p.number)
pix = None

doc.close()
return

XPDF

pdftopng.exe -r 150 file.pdf ./

PDF2JPG

def ProcessFile(datei):

print(""processing:"", datei)
pdf2jpg.convert_pdf2jpg(datei, ""images"", pages=""ALL"", dpi=150)
return

Observations

These are our run time findings in seconds along with a base rate summary compared to PyMuPDF:

468
Chapter 28. Appendix 4: Performance Comparison Methodology

PyMuPDF Documentation, Release 1.23.25

Name
PyMuPDF
XPDF
PDF2JPG

adobe.pdf
51.33
98.16
75.71

artifex-website.pdf
26.35
51.28
54.11

db-systems.pdf
84.59
143.16
405.22

fontforge.pdf
12.23
22.18
20.14

pandas.pdf
138.74
241.67
202.06

pymupdf.pdf
22.35
39.11
33.38

pythonbook.pdf
30.44
49.12
55.68

sample-50-MB-pdf-file.pdf
1.01
1.32
5.22

Total
367.04
646
851.52

Rate compared to PyMuPDF
1.0
1.76
2.32

This documentation covers all versions up to 1.23.25.

28.5. Page Rendering
469

PyMuPDF Documentation, Release 1.23.25

470
Chapter 28. Appendix 4: Performance Comparison Methodology

CHAPTER

TWENTYNINE

CHANGE LOG

Changes in version 1.23.25 (2024-02-20)

• Fixed issues:

– Fixed 3182: Pixmap.invert_irect argument type error

– Fixed 3186: extractText() extracts broken text from pdf

– Fixed 3191: Error on .find_tables()

• Other:

– When
building,
be
able
to
specify
python-config
directly,
with
environment
variable
PIPCL_PYTHON_CONFIG.

Changes in version 1.23.24 (2024-02-19)

• Fixed issues:

– Fixed 3148: Table extraction - vertical text not handled correctly

– Fixed 3179: Table Detection: Incorrect Separation of Vector Graphics Clusters

– Fixed 3180: Cannot show optional content group: AttributeError: module ‘fitz.mupdf’ has no attribute
‘pdf_array_push_drop’

• Other:

– Be able to test system install using sudo pip install instead of a venv.

Changes in version 1.23.23 (2024-02-18)

• Fixed issues:

– Fixed 3126: Initialising Archive with a pathlib.Path fails.

– Fixed 3131: Calling the next attribute of an Annot raises a “No attribute .parent” warning

– Fixed 3134: Using an IRect as clip parameter in Page.get_pixmap no longer works since 1.23.9

– Fixed 3140: PDF document stays in use after closing

– Fixed 3150: doc.select() hangs on this doc.

– Fixed 3163: AssertionError on using fitz.IRect

– Fixed 3177: fitz.Pixmap(None, pix) Unrecognised args for constructing Pixmap

• Other:

– Improved
Document.select() by using new MuPDF function �pdf_rearrange_pages().
This is a more complete (and faster) implementation of what needs to be done here in that not only pages

471

PyMuPDF Documentation, Release 1.23.25

will be rearranged, but also consequential changes will be made to the table of contents, links to removed
pages and affected entries in the Optional Content definitions.

– TextWriter.appendv(): added small_caps arg.

– Fixed some valgrind errors with MuPDF master.

– Fixed Document.insert_image() when build with MuPDF master.

Changes in version 1.23.22 (2024-02-12)

• Fixed issues:

– Fixed 3143: Difference in decoding of OCGs names between doc.get_ocgs() and page.get_drawings()

– Fixed 3139: Pixmap resizing needs positional arg “clip” - even if None.

• Other:

– Removed the use of MuPDF function fz_image_size() from PyMuPDF.

Changes in version 1.23.21 (2024-02-01)

• Fixed issues:

• Other:

– Fixed bug in set_xml_metadata(), PR `3112 https://github.com/pymupdf/PyMuPDF/pull/3112>`_: Fix
pdf_add_stream metadata error

– Fixed lack of .parent member in TextPage from Annot.get_textpage().

– Fixed bug in Page.add_widget().

Changes in version 1.23.20 (2024-01-29)

• Bug fixes:

– Fixed 3100: Wrong internal property accessed in get_xml_metadata

• Other:

– Significantly improved speed of Document.get_toc().

Changes in version 1.23.19 (2024-01-25)

• Bug fixes:

– Fixed 3087: Exception in insert_image with mask specified

– Fixed 3094: TypeError: ‘<’ not supported between instances of ‘FzLocation’ and ‘int’ in doc.delete_pages

• Other:

– When finding tables:

∗ Allow addition of user-defined “virtual” vector graphics when finding tables.

∗ Confirm that the enveloping bboxes of vector graphics are inside the clip rectangle.

∗ Avoid slow finding of rectangle intersections.

– Added Font.bbox property.

Changes in version 1.23.18 (2024-01-23)

• Bug fixes:

– Fixed 3081: doc.close() not closing the document

• Other:

472
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

– Reduced size of sdist to fit on pypi.org (by reducing size of two test files).

– Fix Annot.file_info() if no Desc item.

Changes in version 1.23.17 (2024-01-22)

• Bug fixes:

– Fixed 3062: page_rotation_reset does not return page to original rotation

– Fixed 3070: update_link(): AttributeError: ‘Page’ object has no attribute ‘super’

• Other:

– Fixed bug in Page.links() (PR #3075).

– Fixed bug in Page.get_bboxlog() with layers.

– Add support for timeouts in scripts/ and tests/run_compound.py.

Changes in version 1.23.16 (2024-01-18)

• Bug fixes:

– Fixed 3058: Pixmap created from CMYK JPEG delivers RGB format

• Other:

– In table detection strategy “lines_strict”, exclude fill-only vector graphics.

– Fixed sysinstall test failure.

– In documentation, update feature matrix with item about text writing.

Changes in version 1.23.15 (2024-01-16)

• Bug fixes:

– Fixed 3050: python3.9 pix.set_pixel has something wrong in c.append( ord(i))

• Other:

– Improved docs for Page.find_tables().

Changes in version 1.23.14 (2024-01-15)

• Bug fixes:

– Fixed 3038: JM_pixmap_from_display_list > Assertion Error : Checking for wrong type

– Fixed 3039: Issue with doc.close() not closing the document in PyMuPDF

• Other:

– Ensure valid “re” rectangles in Page.get_drawings() with derotated pages.

Changes in version 1.23.13 (2024-01-15)

• Bug fixes:

– Fixed 2979: list index out of range in to_pandas()

– Fixed 3001: Calling find_tables() on one document alters the bounding boxes of a subsequent document

• Other:

– Fixed Rect.height and Rect.width to never return negative values.

– Fixed TextPage.extractIMGINFO()’s returned dictkey_yres value.

Changes in version 1.23.12 (2024-01-12)

473

PyMuPDF Documentation, Release 1.23.25

•
– Fixed 3027: Page.get_text throws Attribute Error for ‘parent’

Changes in version 1.23.11 (2024-01-12)

• Fixed some Pixmap construction bugs.

• Fixed Pixmap.yres().

Changes in version 1.23.10 (2024-01-12)

• Bug fixes:

– Fixed 3020: Can’t resize a PixMap

• Other:

– Fixed Page.delete_image().

Changes in version 1.23.9 (2024-01-11)

• Default to new “rebased” implementation.

– The old “classic” implementation is available with import fitz_old as fitz.

– For more information about why we are changing to the rebased implementation, see: https://github.com/
pymupdf/PyMuPDF/discussions/2680

• Use MuPDF-1.23.9.

• Bug fixes (rebased implementation only):

– Fixed 2911: Page.derotation_matrix returns a tuple instead of a Matrix with rebased implementation

– Fixed 2919: Rebased version: KeyError in resolve_names when merging pdfs

– Fixed 2922: New feature that allows inserting named-destination links doesn’t work

– Fixed 2943: ZeroDivisionError: float division by zero when use apply_redactions()

– Fixed 2950: Shelling out to pip during tests is problematic

– Fixed 2954: Replacement unicode character in text extraction

– Fixed 2957: apply_redactions() moving text

– Fixed 2961: Passing a string as a page number raises IndexError instead of TypeError.

– Fixed 2969: annot.next throws AttributeError

– Fixed 2978: 1.23.9rc1: module ‘fitz.mupdf’ has no attribute ‘fz_copy_pixmap_rect’

– Fixed 2907: segfault trying to call clean_contents on certain pdfs with python 3.12

– Fixed 2905: SystemError: <built-in function TextPage_extractIMGINFO> returned a result with an ex-
ception set

– Fixed 2742: Segmentation Fault when inserting three (but not two) copies of the same source page into
one destination page

• Other:

– Add optional setting of opacity to Page.insert_htmlbox().

– Fixed issue with add_redact_annot() mentioned in #2934.

– Fixed Page.rotation() to return 0 for non-PDF documents instead of raising an exception.

– Fixed internal quad detection to cope with any Python sequence.

– Fixed rebased fitz.pymupdf_version_tuple - was previously set to mupdf version.

474
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

– Improved support for Linux system installs, including adding regular testing on Github.

– Add missing flake8 to scripts/gh_release.py:test_packages.

– Use newly public functions in MuPDF-1.23.8.

– Improved scripts/test.py to help investigation of MuPDF issues.

Changes in version 1.23.8 (2023-12-19)

• Bug fixes (rebased implementation only):

– Fixed 2634: get_toc and set_toc do not behave consistently for rotated pages

– Fixed 2861: AttributeError in getLinkDict during PDF Merge

– Fixed 2871: KeyError in getLinkDict during PDF merge

– Fixed 2886: Error in Skeleton for Named Link Destinations

• Bug fixes (rebased and classic implementations):

– Fixed 2885: pymupdf find tables too slow

• Other:

– Rebased implementation:

∗ Page.insert_htmlbox(): new, much more powerful alternative to Page.insert_textbox() or

TextWriter.fill_textbox(), using Story.

∗ Story.fit*(): new methods for fitting a Story into an expanded rect.

∗ Story.write_with_links(): add support for external links.

∗ Document.language():
fixed
to
use
MuPDF’s
new
mupdf.
fz_string_from_text_language2().

∗ Document.subset_fonts() - fixed.

∗ Fixed internal Archive._add_treeitem() method.

∗ Fixed fitz_new.__doc__ to contain PyMuPDF and Python version information, and OS name.

∗ Removed use of (*args, **kwargs) in API, we now specify keyword args explicitly.

∗ Work with new MuPDF Python exception classes.

– Fixed bug where button_states() returns None when /AP points to an indirect object.

– Fixed pillow test to not ignore all errors, and install pillow when testing.

– Added test for fitz.css_for_pymupdf_font() (uses package pymupdf-fonts).

– Simplified Github Actions test specifications.

– Updated tests/README.md.

Changes in version 1.23.7 (2023-11-30)

• Bug fixes in rebased implementation, not fixed in classic implementation:

– Fixed 2232: Geometry helper classes should support keyword arguments

– Fixed 2788: Problem with get_toc in pymupdf 1.23.6

– Fixed 2791: Experiencing small memory leak in save()

• Bug fixes (rebased and classic implementations):

– Fixed 2736: Failure when set cropbox with mediabox negative value

475

PyMuPDF Documentation, Release 1.23.25

– Fixed 2749: RuntimeError: cycle in structure tree

– Fixed 2753: Story.write_with_links will ignore everything after the first “page break” in the HTML.

– Fixed 2812: find_tables on landscape page generates reversed text

– Fixed 2829: [cannot create /Annot for kind] is still printed despite #2345 is closed.

– Fixed 2841: Unexpected KeyError when using scrub with fitz_new

• Use MuPDF-1.23.7.

• Other:

– Rebased implementation:

∗ Added flake8 code checking to test suite, and made various fixes.

∗ Disable diagnostics during Document constructor to match classic implementation.

– Additional fix to 2553: Invalid characters in versions >= 1.22

– Fixed MuPDF Bug 707324: Story: HTML table row background color repeated incorrectly

– Added scripts/test.py, for simple build+test of PyMuPDF git checkout.

– Added fitz.pymupdf_version_tuple, e.g. (1, 23, 6).

– Restored mistakenly-reverted fix for 2345: Turn off print statements in utils.py

– Include any trailing ... repeated <N> times... text in warnings returned by mupdf_warnings()

(rebased only).

Changes in version 1.23.6 (2023-11-06)

• Bug fixes:

– Fixed 2553: Invalid characters in versions >= 1.22

– Fixed 2608: Incorrect utf32 text extraction (high & low surrogates are split)

– Fixed 2710: page.rect and text location wrong / differing from older version

– Fixed 2774: wrong encoding for “?” character when sort=True

– Fixed 2775: fitz_new does not work with python3.10 or earlier

– Fixed 2777: With fitz_new, wrong type for Page.mediabox

• Other:

– Use MuPDF-1.23.5.

– Added Document.resolve_names() (rebased implementation only).

Changes in version 1.23.5 (2023-10-11)

• Bug fixes:

– Fixed 2341: Handling negative values in the zoom section for LINK_GOTO in linkDest

– Fixed 2522: Typo in set_layer() - NameError: name ‘f’ is not defined

– Fixed 2548: Fitz freezes on some PDFs when calling the fitz.Page.get_text_blocks method.

– Fixed 2596: save(garbage=3) breaks get_pixmap() with side effect

– Fixed 2635: “clean=True” makes objects invisible in the pdf

– Fixed 2637: Page.insert_textbox incorrectly handles the last word if it starts a new line

476
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

– Fixed 2699: extract paragraph with below table

– Fixed 2703: Wrong fontsize calculation in corner cases (“page.get_texttrace()”)

– Fixed 2710: page.rect and text location wrong / differing from older version

– Fixed 2723: When will a Python 3.12 wheel be available?

– Fixed 2730: persistent get_text() formatting

• Other:

– Use MuPDF-1.23.4.

– Fix optimisation flags with system installs.

– Fixed the problem that the clip parameter does not take effect during table recognition

– Support Pillow mode “RGBa”

– Support extra word delimiters

– Support checking valid PDF name objects

Changes in version 1.23.4 (2023-09-26)

• Improved build instructions.

• Fixed Tesseract in rebased implementation.

• Improvements to build/install with system MuPDF.

• Fixed Pyodide builds.

• Fixed rebased bug in _insert_image().

• Bug fixes:

– Fixed 2556: Segmentation fault at caling get_cdrawings(extended=True)

– Fixed 2637: Page.insert_textbox incorrectly handles the last word if it starts a new line

– Fixed 2683: Windows sdist build failure - non-quoting of path and using UNIX which command

– Fixed 2691: Page.get_textpage_ocr() bug in rebased fitz_new version

– Fixed 2692: Page.get_pixmap(clip=Rect()) bug in rebased fitz_new version

Changes in version 1.23.3 (2023-08-31)

• Fixed use of Tesseract for OCR.

Changes in version 1.23.2 (2023-08-28)

• Fixed #2613: release 1.23.0 not MacOS-arm64 compatible

Changes in version 1.23.1 (2023-08-24)

• Updated README and package summary description.

• Fixed a problem on some Linux installations with Python-3.10 (and possibly earlier versions) where import
fitz failed with ImportError:
libcrypt.so.2:
cannot open shared object file:
No such
file or directory.

• Fixed incompatible architecture error on MacOS arm64.

• Fixed installation warning from Poetry about missing entry in wheels’ RECORD files.

Changes in version 1.23.0 (2023-08-22)

477

PyMuPDF Documentation, Release 1.23.25

• Add method find_tables() to the Page object.

This allows locating tables on any supported document page, and extracting table content by cell.

• New “rebased” implementation of PyMuPDF.

The rebased implementation is available as Python module fitz_new. It can be used as a drop-in replacement
with import fitz_new as fitz.

• Python-independent MuPDF libraries are now in a second wheel called PyMuPDFb that will be automatically
installed by pip.

This is to save space on pypi.org - a full release only needs one PyMuPDFb wheel for each OS.

• Bug fixes:

– Fixed #2542: fitz.utils.scrub AttributeError Annot object has no attribute fileUpd inside

– Fixed #2533: get_texttrace returned a incorrect character bbox

– Fixed #2537: Validation when setting a grouped RadioButton throws a RuntimeError: path to ‘V’ has
indirects

• Other changes:

– Dropped support for Python-3.7.

– Fix for wrong page / annot /Contents cleaning.

We need to set pdf_filter_options::no_update to zero.

– Added new function get_tessdata().

– Cope with problem /Annot arrays.

When copying page annotations in method Document.insert_pdf we previously did not check the validity
of members of the /Annots array. For faulty members (like null or non-dictionary items) this could cause
unnecessary exceptions. This fix implements more checks and skips such array items.

– Additional annotation type checks.

We did not previously check for annotation type when getting / setting annotation border properties. This
is now checked in accordance with MuPDF.

– Increase fault tolerance.

Avoid exceptions in method insert_pdf() when source pages contains invalid items in the /Annots
array.

– Return empty border dict for applicable annots.

We previously were returning a non-empty border dictionary even for non-applicable annotation types.
We now return the empty dictionary {} in these cases. This requires some corresponding changes in the
annotation .update() method, namely for dashes and border width.

– Restrict set_rect to applicable annot types.

We were insufficiently excluding non-applicable annotation types from set_rect() method. We now let
MuPDF catch unsupported annotations and return False in these cases.

– Wrong fontsize computation in page.get_texttrace().

When computing the font size we were using the final text transformation matrix, where we should have
taken span->trm instead. This is corrected here.

– Updates to cope with changes to latest MuPDF.

pdf_lookup_anchor() has been removed.

478
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

– Update fill_textbox to better respect rect.width

The function norm_words in fill_textbox had a bug in its last loop, appending n+1 characters when actually
measuring width of n characters. It led to a bug in fill_texbox when you tried to write a single word mostly
composed of “wide” letters (M,m, W, w...), causing the written text to exceed the given rect.

The fix was just to replace n+1 by n.

– Add script_focus and script_blur options to widget.

Changes in version 1.22.5 (2023-06-21)

• This release uses MuPDF-1.22.2.

• Bug fixes:

– Fixed #2365: Incorrect dictionary values for type “fs” drawings.

– Fixed #2391: Check box automatically uncheck when we update same checkbox more than 1 times.

– Fixed #2400: Gaps within text of same line not filled with spaces.

– Fixed #2404: Blacklining an image in PDF won’t remove underlying content in version 1.22.X.

– Fixed #2430: Incorrectly reducing ref count of Py_None.

– Fixed #2450: Empty fill color and fill opacity for paths with fill and stroke operations with 1.22.*

– Fixed #2462: Error at “get_drawing(extended=True )”

– Fixed #2468: Decode error when trying to get drawings

– Fixed #2710: page.rect and text location wrong / differing from older version

– Fixed #2723: When will a Python 3.12 wheel be available?

• New features:

– Changed Annotations now support “cloudy” borders. The Annot.border property has the new item
clouds, and method Annot.set_border() supports the corresponding clouds argument.

– Changed Radio button widgets in the same RB group are now consistently updated if the group is defined
in the standard way.

– Added Support for the /Locked key in PDF Optional Content. This array inside the catalog entry /
OCProperties can now be extracted and set.

– Added Support for new parameter tessdata in OCR functions. New function get_tessdata() locates
the language support folder if Tesseract is installed.

Changes in version 1.22.3 (2023-05-10)

• This release uses MuPDF-1.22.0.

• Bug fixes:

– Fixed #2333: Unable to set any of button radio group in form

Changes in version 1.22.2 (2023-04-26)

• This release uses MuPDF-1.22.0.

• Bug fixes:

– Fixed #2369: Image extraction bugs with newer versions

Changes in version 1.22.1 (2023-04-18)

• This release uses MuPDF-1.22.0.

479

PyMuPDF Documentation, Release 1.23.25

• Bug fixes:

– Fixed #2345: Turn off print statements in utils.py

– Fixed #2348: extract_image returns an extension “flate” instead of “png”

– Fixed
#2350:
Can
not
make
widget
(checkbox)
to
read-only
by
adding
flags
PDF_FIELD_IS_READ_ONLY

– Fixed #2355: 1.22.0 error when using get_toc (AttributeError: ‘SwigPyObject’ object has no attribute)

Changes in version 1.22.0 (2023-04-14)

• This release uses MuPDF-1.22.0.

• Behavioural changes:

– Text extraction now includes glyphs that overlap with clip rect; previously they were included only if they
were entirely contained within the clip rect.

• Bug fixes:

– Fixed #1763: Interactive(smartform) form PDF calculation not working in pymupdf

– Fixed #1995: RuntimeError: image is too high for a long paged pdf file when trying

– Fixed #2093: Image in pdf changes color after applying redactions

– Fixed #2108: Redaction removing more text than expected

– Fixed #2141: Failed to read JPX header when trying to get blocks

– Fixed #2144: Replace image throws an error

– Fixed #2146: Wrong Handling of Reference Count of “None” Object

– Fixed #2161: Support adding images as pages directly

– Fixed #2168: page.add_highlight_annot(start=pointa, stop=pointb) not working

– Fixed #2173: Double free of Colorspace used in Pixmap

– Fixed #2179: Incorrect documentation for pixmap.tint_with()

– Fixed #2208: Pushbutton widget appears as check box

– Fixed #2210: apply_redactions() move pdf text to right after redaction

– Fixed #2220: Page.delete_image() | object has no attribute is_image

– Fixed #2228: open some pdf cost too much time

– Fixed #2238: Bug - can not extract data from file in the newest version 1.21.1

– Fixed #2242: Python quits silently in Story.element_positions() if callback function prototype is
wrong

– Fixed #2246: TextWriter write text in a wrong position

– Fixed #2248: After redacting the content, the position of the remaining text changes

– Fixed #2250: docs: unclear or broken link in page.rst

– Fixed #2251: mupdf_display_errors does not apply to Pixmap when loading broken image

– Fixed #2270: Annot.get_text(""words"") - doesn’t return the first line of words

– Fixed #2275: insert_image: document that rotations are counterclockwise

480
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

– Fixed
#2278:
Can
not
make
widget
(checkbox)
to
read-only
by
adding
flags
PDF_FIELD_IS_READ_ONLY

– Fixed #2290: Different image format/data from Page.get_text(“dict”) and Fitz.get_page_images()

– Fixed #2293: 68 failed tests when installing from sdist on my box

– Fixed #2300: Too much recursion in tree (parents), makes program terminate

– Fixed #2322: add_highlight_annot using clip generates “A Number is Out of Range” error in PDF

• Other:

– Add key “/AS (Yes)” to the underlying annot object of a selected button form field.

– Remove unused Document methods has_xref_streams() and has_old_style_xrefs() as MuPDF
equivalents have been removed.

– Add new Document methods and properties for getting/setting /PageMode, /PageLayout and /
MarkInfo.

– New Document property version_count, which contains the number of incremental saves plus one.

– New Document property is_fast_webaccess which tells whether the document is linearized.

– DocumentWriter is now a context manager.

– Add support for Pixmap JPEG output.

– Add support for drawing rectangles with rounded corners.

– get_drawings(): added optional extended arg.

– Fixed issue where trace devices’ state was not being initialised correctly; data returned from things like
fitz.Page.get_texttrace() might be slightly altered, e.g. linewidth values.

– Output warning to stderr if it looks like we are being used with current directory containing an invalid
fitz/ directory, because this can break import of fitz module. For example this happens if one attempts
to use fitz when current directory is a PyMuPDF checkout.

• Documentation:

– General rework:

∗ Introduces a new home page and new table of contents.

∗ Structural update to include new About section.

∗ Comparison & performance graphing.

∗ Includes performance methodology in appendix.

∗ Updates conf.py to understand single back-ticks as code.

∗ Converts double back-ticks to single back-ticks.

∗ Removes redundant files.

– Improve insert_file() documentation.

– get_bboxlog(): aded optional layers to get_bboxlog().

– Page.get_texttrace(): add new dictionary key layer, name of Optional Content Group.

– Mention use of Python venv in installation documentation.

– Added missing fix for #2057 to release 1.21.1’s changelog.

– Fixes many links to the PyMuPDF-Utilities repo scripts.

481

PyMuPDF Documentation, Release 1.23.25

– Avoid duplication of changes.txt and docs/changes.rst.

• Build

– Added pyproject.toml file to improve builds using pip etc.

Changes in Version 1.21.1 (2022-12-13)

• This release uses MuPDF-1.21.1.

• Bug fixes:

– Fixed #2110: Fully embedded font is extracted only partially if it occupies more than one object

– Fixed #2094: Rectangle Detection Logic

– Fixed #2088: Destination point not set for named links in toc

– Fixed #2087: Image with Filter “[/FlateDecode/JPXDecode]” not extracted

– Fixed #2086: Document.save() owner_pw & user_pw has buffer overflow bug

– Fixed #2076: Segfault in fitz.py

– Fixed #2057: Document.save garbage parameter not working in PyMuPDF 1.21.0

– Fixed #2051: Missing DPI Parameter

– Fixed #2048: Invalid size of TextPage and bbox with newest version 1.21.0

– Fixed #2045: SystemError: <built-in function Page_get_texttrace> returned a result with an error set

– Fixed #2039: 1.21.0 fails to build against system libmupdf

– Fixed #2036: Archive::Archive defined twice

• Other

– Swallow “&zoom=nan” in link uri strings.

– Add new Page utility methods Page.replace_image() and Page.delete_image().

• Documentation:

– #2040: Added note about test failure with non-default build of MuPDF, to tests/README.md.

– #2037: In docs/installation.rst, mention incompatibility with chocolatey.org on Windows.

– #2061: Fixed description of Annot.file_info.

– #2065: Show how to insert internal PDF link.

– Improved description of building from source without an sdist.

– Added information about running tests.

– #2084: Fixed broken link to PyMuPDF-Utilities.

Changes in Version 1.21.0 (2022-11-8)

• This release uses MuPDF-1.21.0.

• New feature: Stories.

• Added wheels for Python-3.11.

• Bug fixes:

– Fixed #1701: Broken custom image insertion.

– Fixed #1854: Document.delete_pages() declines keyword arguments.

482
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

– Fixed #1868: Access Violation Error at page.apply_redactions().

– Fixed #1909: Adding text with fontname=""Helvetica"" can silently fail.

– Fixed #1913: draw_rect(): does not respect width if color is not specified.

– Fixed #1917: subset_fonts(): make it possible to silence the stdout.

– Fixed #1936: Rectangle detection can be incorrect producing wrong output.

– Fixed #1945: Segmentation fault when saving with clean=True.

– Fixed #1965: pdfocr_save() Hard Crash.

– Fixed #1971: Segmentation fault when using get_drawings().

– Fixed #1946: block_no and block_type switched in get_text() docs.

– Fixed #2013: AttributeError: ‘Widget’ object has no attribute ‘_annot’ in delete widget.

• Misc changes to core code:

– Fixed various compiler warnings and a sequence-point bug.

– Added support for Memento builds.

– Fixed leaks detected by Memento in test suite.

– Fixed handling of exceptions in set_name() and set_rect().

– Allow build with latest MuPDF, for regular testing of PyMuPDF master.

– Cope with new MuPDF exceptions when setting rect for some Annot types.

– Reduced cosmetic differences between MuPDF’s config.h and PyMuPDF’s _config.h.

– Cope with various changes to MuPDF API.

• Other:

– Fixed various broken links and typos in docs.

– Mention install of swig-python on MacOS for #875.

– Added (untested) wheels for macos-arm64.

Changes in Version 1.20.2

• This release uses MuPDF-1.20.3.

• Fixed #1787. Fix linking issues on Unix systems.

• Fixed #1824. SegFault when applying redactions overlapping a transparent image. (Fixed in MuPDF-1.20.3.)

• Improvements to documentation:

– Improved information about building from source in docs/installation.rst.

– Clarified memory allocation setting JM_MEMORY� in ��docs/tools.rst.

– Fixed link to PDF Reference manual in docs/app3.rst.

– Fixed building of html documentation on OpenBSD.

– Moved old docs/faq.rst into separate docs/recipes-* files.

• Removed some unused files and directories:

– installation/

– docs/wheelnames.txt

483

PyMuPDF Documentation, Release 1.23.25

Changes in Version 1.20.1

• Fixed #1724. Fix for building on FreeBSD.

• Fixed #1771. linkDest() had a broken call to re.match(), introduced in 1.20.0.

• Fixed #1751. get_drawings() and get_cdrawings() previously always returned with closePath=False.

• Fixed #1645. Default FreeText annotation text color is now black.

• Improvements to sphinx-generated documentation:

– Use readthedocs theme with enhancements.

– Renamed the .txt files to have .rst suffixes.

Changes in Version 1.20.0

This release uses MuPDF-1.20.0, released 2022-06-15.

• Cope
with
new
MuPDF
link
uri
format,
changed
from
#<int>,<int>,<int>
to
#page=<int>&zoom=<float>,<float>,<float>.

• In tests/test_insertpdf.py, use new reference output joined-1.20.pdf. We also check that new output
values are approximately the same as the old ones.

• Fixed #1738. Leak of pdf_graft_map. Also fixed a SEGV issue that this seemed to expose, caused by incorrect
freeing of underlying fz_document.

• Fixed #1733. Fixed ownership of Annotation.get_pixmap().

Changes to build/release process:

• If pip builds from source because an appropriate wheel is not available, we no longer require MuPDF to be pre-
installed. Instead the required MuPDF source is embedded in the sdist and automatically built into PyMuPDF.

• Various changes to setup.py to download the required MuPDF release as required. See comments at start of
setup.py for details.

• Added .github/workflows/build_wheels.yml to control building of wheels on Github.

Changes in Version 1.19.6

• Fixed #1620. The TextPage created by Page.get_textpage() will now be freed correctly (removed memory
leak).

• Fixed #1601. Document open errors should now be more concise and easier to interpret. In the course of this,
two PyMuPDF-specific Python exceptions have been added:

– EmptyFileError – raised when trying to create a Document (fitz.open()) from an empty file or zero-
length memory.

– FileDataError – raised when MuPDF encounters irrecoverable document structure issues.

• Added Page.load_widget() given a PDF field’s xref.

• Added Dictionary pdfcolor which provide the about 500 colors defined as PDF color values with the lower
case color name as key.

• Added algebra functionality to the Quad class. These objects can now also be added and subtracted among
themselves, and be multiplied by numbers and matrices.

• Added new constants defining the default text extraction flags for more comfortable handling. Their naming
convention is like TEXTFLAGS_WORDS for page.get_text(""words""). See Text Extraction Flags Defaults.

484
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Changed Page.annots() and Page.widgets() to detect and prevent reloading the page (illegally) inside the
iterator loops via Document.reload_page(). Doing this brings down the interpretor. Documented clean ways
to do annotation and widget mass updates within properly designed loops.

• Changed several internal utility functions to become standalone (“SWIG inline”) as opposed to be part of the

Tools class. This, among other things, increases the performance of geometry object creation.

• Changed Document.update_stream() to always accept stream updates - whether or not the dictionary object
behind the xref already is a stream. Thus the former new parameter is now ignored and will be removed in
v1.20.0.

Changes in Version 1.19.5

• Fixed #1518. A limited “fix”: in some cases, rectangles and quadrupels were not correctly encoded to support
re-drawing by Shape.

• Fixed #1521. This had the same ultimate reason behind issue #1510.

• Fixed #1513. Some Optional Content functions did not support non-ASCII characters.

• Fixed #1510. Support more soft-mask image subtypes.

• Fixed #1507. Immunize against items in the outlines chain, that are ""null"" objects.

• Fixed re-opened #1417.
(“too many open files”).
This was due to insufficient calls to MuPDF’s
fz_drop_document(). This also fixes #1550.

• Fixed several undocumented issues in relation to incorrectly setting the text span origin point_like.

• Fixed undocumented error computing the character bbox in method Page.get_texttrace() when text is
flipped (as opposed to just rotated).

• Added items to the dictionary returned by image_properties(): orientation and transform report the
natural image orientation (EXIF data).

• Added method Document.xref_copy(). It will make a given target PDF object an exact copy of a source
object.

Changes in Version 1.19.4

• Fixed #1505. Immunize against circular outline items.

• Fixed #1484. Correct CropBox coordinates are now returned in all situations.

• Fixed #1479.

• Fixed #1474. TextPage objects are now properly deleted again.

• Added Page methods and attributes for PDF /ArtBox, /BleedBox, /TrimBox.

• Added global attribute TESSDATA_PREFIX for easy checking of OCR support.

• Changed Document.xref_set_key() such that dictionary keys will physically be removed if set to value
""null"".

• Changed Document.extract_font() to optionally return a dictionary (instead of a tuple).

Changes in Version 1.19.3

This patch version implements minor improvements for Pixmap and also some important fixes.

• Fixed #1351. Reverted code that introduced the memory growth in v1.18.15.

485

PyMuPDF Documentation, Release 1.23.25

• Fixed #1417. Developped circumvention for growth of open file handles using Document.insert_pdf().

• Fixed #1418. Developped circumvention for memory growth using Document.insert_pdf().

• Fixed #1430. Developped circumvention for mass pixmap generations of document pages.

• Fixed #1433. Solves a bbox error for some Type 3 font in PyMuPDF text processing.

• Added Pixmap.color_topusage() to determine the share of the most frequently used color. Solves #1397.

• Added Pixmap.warp() which makes a new pixmap from a given arbitrary convex quad inside the pixmap.

• Added Annot.irt_xref and Annot.set_irt_xref() to inquire or set the /IRT (“In Responde To”) property
of an annotation. Implements #1450.

• Added Rect.torect() and IRect.torect() which compute a matrix that transforms to a given other rect-
angle.

• Changed Pixmap.color_count() to also return the count of each color.

• Changed Page.get_texttrace() to also return correct span and character bboxes if span[""dir""] != (1,
0).

Changes in Version 1.19.2

This patch version implements minor improvements for Page.get_drawings() and also some important fixes.

• Fixed #1388. Fixed intermittent memory corruption when insert or updating annotations.

• Fixed #1375. Inconsistencies between line numbers as returned by the “words” and the “dict” options of Page.
get_text() have been corrected.

• Fixed #1364. The check for being a ""rawdict"" span in recover_span_quad() now works correctly.

• Fixed #1342. Corrected the check for rectangle infiniteness in Page.show_pdf_page().

• Changed Page.get_drawings(), Page.get_cdrawings() to return an indicator on the area orientation cov-
ered by a rectangle. This implements #1355. Also, the recognition rate for rectangles and quads has been sig-
nificantly improved.

• Changed all text search and extraction methods to set the new flags option TEXT_MEDIABOX_CLIP to ON by
default. That bit causes the automatic suppression of all characters that are completely outside a page’s mediabox
(in as far as that notion is supported for a document type). This eliminates the need for using clip=page.rect
or similar for omitting text outside the visible area.

• Added parameter ""dpi"" to Page.get_pixmap() and Annot.get_pixmap().
When given, parameter
""matrix"" is ignored, and a Pixmap with the desired dots per inch is created.

• Added attributes Pixmap.is_monochrome and Pixmap.is_unicolor allowing fast checks of pixmap prop-
erties. Addresses #1397.

• Added method Pixmap.color_count() to determine the unique colors in the pixmap.

• Added boolean parameter ""compress"" to PDF document method Document.update_stream(). Addresses /
enables solution for #1408.

Changes in Version 1.19.1

This is the first patch version to support MuPDF v1.19.0. Apart from one bug fix, it includes important improvements
for OCR support and the option to sort extracted text to the standard reading order “from top-left to bottom-right”.

• Fixed #1328. “words” text extraction again returns correct (x0, y0) coordinates.

486
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Changed Page.get_textpage_ocr(): it now supports parameter dpi to control OCR quality. It is also pos-
sible to choose whether the full page should be OCRed or only the images displayed by the page.

• Changed Page.get_drawings() and Page.get_cdrawings() to automatically convert colors to RGB color
tuples. Implements #1332. Similar change was applied to Page.get_texttrace().

• Changed Page.get_text() to support a parameter sort. If set to True the output is conveniently sorted.

Changes in Version 1.19.0

This is the first version supporting MuPDF 1.19.*, published 2021-10-05. It introduces many new features compared
to the previous version 1.18.*.

PyMuPDF has now picked up integrated Tesseract OCR support, which was already present in MuPDF v1.18.0.

• Supported images can be OCRed via their Pixmap which results in a 1-page PDF with a text layer.

• All supported document pages (i.e. not only PDFs), can be OCRed using specialized text extraction methods.
The result is a mixture of standard and OCR text (depending on which part of the page was deemed to require
OCRing) that can be searched and extracted without restrictions.

• All this requires an independent installation of Tesseract. MuPDF actually (only) needs the location of Tesseract’s
""tessdata"" folder, where its language support data are stored. This location must be available as environment
variable TESSDATA_PREFIX.

A new MuPDF feature is journalling PDF updates, which is also supported by this PyMuPDF version. Changes may
be logged, rolled back or replayed, allowing to implement a whole new level of control over PDF document integrity –
similar to functions present in modern database systems.

A third feature (unrelated to the new MuPDF version) includes the ability to detect when page objects cover or hide
each other. It is now e.g. possible to see that text is covered by a drawing or an image.

• Changed terminology and meaning of important geometry concepts: Rectangles are now characterized as finite,
valid or empty, while the definitions of these terms have also changed. Rectangles specifically are now thought
of being “open”: not all corners and sides are considered part of the retangle. Please do read the Rect section for
details.

• Added new parameter ""no_new_id"" to Document.save() / Document.tobytes() methods. Use it to sup-
press updating the second item of the document /ID which in PDF indicates that the original file has been
updated. If the PDF has no /ID at all yet, then no new one will be created either.

• Added a journalling facility for PDF updates. This allows logging changes, undoing or redoing them, or saving
the journal for later use. Refer to Document.journal_enable() and friends.

• Added new Pixmap methods Pixmap.pdfocr_save() and Pixmap.pdfocr_tobytes(), which generate a
1-page PDF containing the pixmap as PNG image with OCR text layer.

• Added Page.get_textpage_ocr() which executes optical character recognition for the page, then extracts the
results and stores them together with “normal” page content in a TextPage. Use or reuse this object in subsequent
text extractions and text searches to avoid multiple efforts. The existing text search and text extraction methods
have been extended to support a separately created textpage – see next item.

• Added a new parameter textpage to text extraction and text search methods. This allows reuse of a previously
created TextPage and thus achieves significant runtime benefits – which is especially important for the new OCR
features. But “normal” text extractions can definitely also benefit.

• Added Page.get_texttrace(), a technical method delivering low-level text character properties. It was
present before as a private method, but the author felt it now is mature enough to be officially available. It
specifically includes a “sequence number” which indicates the page appearance build operation that painted the
text.

487

PyMuPDF Documentation, Release 1.23.25

• Added Page.get_bboxlog() which delivers the list of rectangles of page objects like text, images or drawings.
Its significance lies in its sequence: rectangles intersecting areas with a lower index are covering or hiding them.

• Changed methods Page.get_drawings() and Page.get_cdrawings() to include a “sequence number” in-
dicating the page appearance build operation that created the drawing.

• Fixed #1311. Field values in comboboxes should now be handled correctly.

• Fixed #1290. Error was caused by incorrect rectangle emptiness check, which is fixed due to new geometry logic
of this version.

• Fixed #1286. Text alignment for redact annotations is working again.

• Fixed #1287. Infinite loop issue for non-Windows systems when applying some redactions has been resolved.

• Fixed #1284. Text layout destruction after applying redactions in some cases has been resolved.

Changes in Version 1.18.18 / 1.18.19

• Fixed issue #1266. Failure to set Pixmap.samples in important cases, was hotfixed in a new version 1.18.19.

• Fixed issue #1257. Removing the read-only flag from PDF fields is now possible.

• Fixed issue #1252. Now correctly specifying the zoom value for PDF link annotations.

• Fixed issue #1244. Now correctly computing the transform matrix in Page.get_image__bbox().

• Fixed issue #1241. Prevent returning artifact characters in Page.get_textbox(), which happened in certain
constellations.

• Fixed issue #1234.
Avoid creating infinite rectangles in corner cases – Page.get_drawings(), Page.
get_cdrawings().

• Added test data and test scripts to the source PyPI source distribution.

Changes in Version 1.18.17

Focus of this version are major performance improvements of selected functions.

• Fixed issue #1199. Using a non-existing page number in Document.get_page_images() and friends will no
longer lead to segfaults.

• Changed Page.get_drawings() to now differentiate between “stroke”, “fill” and combined paths. Paths con-
taining more than one rectangle (i.e. “re” items) are now supported. Extracting “clipped” paths is now available
as an option.

• Added Page.get_cdrawings(), performance-optimized version of Page.get_drawings().

• Added Pixmap.samples_mv, memoryview of a pixmap’s pixel area. Does not copy and thus always accesses
the current state of that area.

• Added Pixmap.samples_ptr, Python “pointer” to a pixmap’s pixel area. Allows much faster creation (factor
800+) of Qt images.

Changes in Version 1.18.16

• Fixed issue #1184. Existing PDF widget fonts in a PDF are now accepted (i.e. not forcedly changed to a Base-14
font).

• Fixed issue #1154. Text search hits should now be correct when clip is specified.

488
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Fixed issue #1152.

• Fixed issue #1146.

• Added Link.flags and Link.set_flags() to the Link class. Implements enhancement requests #1187.

• Added option to simulate TextWriter.fill_textbox() output for predicting the number of lines, that a given
text would occupy in the textbox.

• Added text output support as subcommand gettext to the fitz CLI module. Most importantly, original phys-
ical text layout reproduction is now supported.

Changes in Version 1.18.15

• Fixed issue #1088.
Removing an annotation’s fill color should now work again both ways, using the
fill_color=[] argument in Annot.update() as well as fill=[] in Annot.set_colors().

• Fixed issue #1081. Document.subset_fonts(): fixed an error which created wrong character widths for some
fonts.

• Fixed issue #1078. Page.get_text() and other methods related to text extraction: changed the default value
of the TextPage flags parameter. All whitespace and ligatures are now preserved.

• Fixed issue #1085. The old snake_cased alias of fitz.detTextlength is now defined correctly.

• Changed Document.subset_fonts() will now correctly prefix font subsets with an appropriate six letter
uppercase tag, complying with the PDF specification.

• Added new method Widget.button_states() which returns the possible values that a button-type field can
have when being set to “on” or “off”.

• Added support of text with Small Capital letters to the Font and TextWriter classes. This is reflected by an
additional bool parameter small_caps in various of their methods.

Changes in Version 1.18.14

• Finished implementing new, “snake_cased” names for methods and properties, that were “camelCased” and
awkward in many aspects. At the end of this documentation, there is section Deprecated Names with more
background and a mapping of old to new names.

• Fixed issue #1053. Page.insert_image(): when given, include image mask in the hash computation.

• Fixed issue #1043. Added Pixmap.getPNGdata to the aliases of Pixmap.tobytes().

• Fixed an internal error when computing the enveloping rectangle of drawn paths as returned by Page.
get_drawings().

• Fixed an internal error occasionally causing loops when outputting text via TextWriter.fill_textbox().

• Added Font.char_lengths(), which returns a tuple of character widths of a string.

• Added more ways to specify pages in Document.delete_pages(). Now a sequence (list, tuple or range) can
be specified, and the Python del statement can be used. In the latter case, Python slices are also accepted.

• Changed Document.del_toc_item(), which disables a single item of the TOC: previously, the title text was
removed. Instead, now the complete item will be shown grayed-out by supporting viewers.

Changes in Version 1.18.13

• Fixed issue #1014.

489

PyMuPDF Documentation, Release 1.23.25

• Fixed an internal memory leak when computing image bboxes – Page.get_image_bbox().

• Added support for low-level access and modification of the PDF trailer.
Applies to Document.
xref_get_keys(), Document.xref_get_key(), and Document.xref_set_key().

• Added documentation for maintaining private entries in PDF metadata.

• Added documentation for handling transparent image insertions, Page.insert_image().

• Added Page.get_image_rects(), an improved version of Page.get_image_bbox().

• Changed Document.delete_pages() to support various ways of specifying pages to delete. Implements

#1042.

• Changed Page.insert_image() to also accept the xref of an existing image in the file. This allows “copying”
images between pages, and extremely fast mutiple insertions.

• Changed Page.insert_image() to also accept the integer parameter alpha. To be used for performance
improvements.

• Changed Pixmap.set_alpha() to support new parameters for pre-multiplying colors with their alpha values
and setting a specific color to fully transparent (e.g. white).

• Changed Document.embfile_add() to automatically set creation and modification date-time. Correspond-
ingly, Document.embfile_upd() automatically maintains modification date-time (/ModDate PDF key), and
Document.embfile_info() correspondingly reports these data. In addition, the embedded file’s associated
“collection item” is included via its xref. This supports the development of PDF portfolio applications.

Changes in Version 1.18.11 / 1.18.12

• Fixed issue #972. Improved layout of source distribution material.

• Fixed issue #962. Stabilized Linux distribution detection for generating PyMuPDF from sources.

• Added: Page.get_xobjects() delivers the result of Document.get_page_xobjects().

• Added: Page.get_image_info() delivers meta information for all images shown on the page.

• Added: Tools.mupdf_display_warnings() allows setting on / off the display of MuPDF-generated warn-
ings. The default is off.

• Added: Document.ez_save() convenience alias of Document.save() with some different defaults.

• Changed: Image extractions of document pages now also contain the image’s transformation matrix. This
concerns Page.get_image_bbox() and the DICT, JSON, RAWDICT, and RAWJSON variants of Page.
get_text().

Changes in Version 1.18.10

• Fixed issue #941. Added old aliases for DisplayList.get_pixmap() and DisplayList.get_textpage().

• Fixed issue #929. Stabilized removal of JavaScript objects with Document.scrub().

• Fixed issue #927. Removed a loop in the reworked TextWriter.fill_textbox().

• Changed Document.xref_get_keys() and Document.xref_get_key() to also allow accessing the PDF
trailer dictionary. This can be done by using -1 as the xref number argument.

• Added a number of functions for reconstructing the quads for text lines, spans and characters extracted by Page.
get_text() options “dict” and “rawdict”. See recover_quad() and friends.

• Added Tools.unset_quad_corrections() to suppress character quad corrections (occasionally required for
erroneous fonts).

490
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

Changes in Version 1.18.9

• Fixed issue #888. Removed ambiguous statements concerning PyMuPDF’s license, which is now clearly stated
to be GNU AGPL V3.

• Fixed issue #895.

• Fixed issue #896. Since v1.17.6 PyMuPDF suppresses the font subset tags and only reports the base fontname
in text extraction outputs “dict” / “json” / “rawdict” / “rawjson”. Now a new global parameter can request the
old behaviour, Tools.set_subset_fontnames().

• Fixed issue #885. Pixmap creation now also works with filenames given as pathlib.Paths.

• Changed Document.subset_fonts(): Text is not rewritten any more and should therefore retain all its
origial properties – like being hidden or being controlled by Optional Content mechanisms.

• Changed TextWriter output to also accept text in right to left mode (Arabian, Hebrew): TextWriter.
fill_textbox(),
TextWriter.append().
These methods now accept a new boolean parameter
right_to_left, which is False by default. Implements #897.

• Changed TextWriter.fill_textbox() to return all lines of text, that did not fit in the given rectangle. Also
changed the default of the warn parameter to no longer print a warning message in overflow situations.

• Added a utility function recover_quad(), which computes the quadrilateral of a span. This function can be
used for correctly marking text extracted with the “dict” or “rawdict” options of Page.get_text().

Changes in Version 1.18.8

This is a bug fix version only. We are publishing early because of the potentially widely used functions.

• Fixed issue #881. Fixed a memory leak in Page.insert_image() when inserting images from files or memory.

• Fixed issue #878. pathlib.Path objects should now correctly handle file path hierarchies.

Changes in Version 1.18.7

• Added an experimental Document.subset_fonts() which reduces the size of eligible fonts based on their use
by text in the PDF. Implements #855.

• Implemented request #870: Document.convert_to_pdf() now also supports PDF documents.

• Renamed Document.write to Document.tobytes() for greater clarity. But the deprecated name remains
available for some time.

• Implemented request #843: Document.tobytes() now supports linearized PDF output. Document.save()

now also supports writing to Python file objects. In addition, the open function now also supports Python file
objects.

• Fixed issue #844.

• Fixed issue #838.

• Fixed issue #823. More logic for better support of OCRed text output (Tesseract, ABBYY).

• Fixed issue #818.

• Fixed issue #814.

• Added Document.get_page_labels() which returns a list of page label definitions of a PDF.

491

PyMuPDF Documentation, Release 1.23.25

• Added Document.has_annots() and Document.has_links() to check whether these object types are
present anywhere in a PDF.

• Added expert low-level functions to simplify inquiry and modification of PDF object sources: Document.
xref_get_keys() lists the keys of object xref, Document.xref_get_key() returns type and content of
a key, and Document.xref_set_key() modifies the key’s value.

• Added parameter thumbnails to Document.scrub() to also allow removing page thumbnail images.

• Improved documentation for how to add valid text marker annotations for non-horizontal text.

We continued the process of renaming methods and properties from “mixedCase” to “snake_case”. Documentation
usually mentions the new names only, but old, deprecated names remain available for some time.

Changes in Version 1.18.6

• Fixed issue #812.

• Fixed issue #793. Invalid document metadata previously prevented opening some documents at all. This error
has been removed.

• Fixed issue #792. Text search and text extraction will make no rectangle containment checks at all if the default
clip=None is used.

• Fixed issue #785.

• Fixed issue #780. Corrected a parameter check error.

• Fixed issue #779. Fixed typo

• Added an option to set the desired line height for text boxes. Implements #804.

• Changed text position retrieval to better cope with Tesseract’s glyphless font. Implements #803.

• Added an option to choose the prefix of new annotations, fields and links for providing unique annotation ids.
Implements request #807.

• Added getting and setting color and text properties for Table of Contents items for PDFs. Implements #779.

• Added
PDF
page
label
handling:
Page.get_label()
returns
the
page
label,
Document.
get_page_numbers() return all page numbers having a specified label, and Document.set_page_labels()
adds or updates a PDF’s page label definition.

Note:
This version introduces Python type hinting. The goal is to provide each parameter and the return value of
all functions and methods with type information. This still is work in progress although the majority of functions has
already been handled.

Changes in Version 1.18.5

Apart from several fixes, this version also focusses on several minor, but important feature improvements. Among the
latter is a more precise computation of proper line heights and insertion points for writing / inserting text. As opposed
to using font-agnostic constants, these values are now taken from the font’s properties.

Also note that this is the first version which does no longer provide pregenerated wheels for Python versions older than
3.6. PIP also discontinues support for these by end of this year 2020.

• Fixed issue #771. By using “small glyph heights” option, the full page text can be extracted.

• Fixed issue #768.

492
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Fixed issue #750.

• Fixed issue #739. The “dict”, “rawdict” and corresponding JSON output variants now have two new span keys:
""ascender"" and ""descender"". These floats represent special font properties which can be used to compute
bboxes of spans or characters of exactly fontsize height (as opposed to the default line height). An example
algorithm is shown in section “Span Dictionary” here. Also improved the detection and correction of ill-specified
ascender / descender values encountered in some fonts.

• Added a new, experimental Tools.set_small_glyph_heights() – also in response to issue #739. This
method sets or unsets a global parameter to always compute bboxes with fontsize height. If “on”, text searching
and all text extractions will returned rectangles, bboxes and quads with a smaller height.

• Fixed issue #728.

• Changed fill color logic of ‘Polyline’ annotations: this parameter now only pertains to line end symbols – the
annotation itself can no longer have a fill color. Also addresses issue #727.

• Changed Page.getImageBbox() to also compute the bbox if the image is contained in an XObject.

• Changed Shape.insertTextbox(), resp. Page.insertTextbox(), resp. TextWriter.fillTextbox() to
respect font’s properties “ascender” / “descender” when computing line height and insertion point. This should
no longer lead to line overlaps for multi-line output. These methods used to ignore font specifics and used constant
values instead.

Changes in Version 1.18.4

This version adds several features to support PDF Optional Content. Among other things, this includes OCMDs (Op-
tional Content Membership Dictionaries) with the full scope of “visibility expressions” (PDF key /VE), text insertions
(including the TextWriter class) and drawings.

• Fixed issue #727. Freetext annotations now support an uncolored rectangle when fill_color=None.

• Fixed issue #726. UTF-8 encoding errors are now handled for HTML / XML Page.getText() output.

• Fixed issue #724. Empty values are no longer stored in the PDF /Info metadata dictionary.

• Added new methods Document.set_oc() and Document.get_oc() to set or get optional content references
for existing image and form XObjects. These methods are similar to the same-named methods of Annot.

• Added Document.set_ocmd(), Document.get_ocmd() for handling OCMDs.

• Added Optional Content support for text insertion and drawing.

• Added new method Page.deleteWidget(), which deletes a form field from a page. This is analogous to
deleting annotations.

• Added support for Popup annotations. This includes defining the Popup rectangle and setting the Popup to
open or closed. Methods / attributes Annot.set_popup(), Annot.set_open(), Annot.has_popup, Annot.
is_open, Annot.popup_rect, Annot.popup_xref.

Other changes:

• The naming of methods and attributes in PyMuPDF is far from being satisfactory: we have CamelCases,
mixedCases and lower_case_with_underscores all over the place. With the Annot as the first candidate, we
have started an activity to clean this up step by step, converting to lower case with underscores for methods and
attributes while keeping UPPERCASE for the constants.

– Old names will remain available to prevent code breaks, but they will no longer be mentioned in the
documentation.

– New methods and attributes of all classes will be named according to the new standard.

493

PyMuPDF Documentation, Release 1.23.25

Changes in Version 1.18.3

As a major new feature, this version introduces support for PDF’s Optional Content concept.

• Fixed issue #714.

• Fixed issue #711.

• Fixed issue #707: if a PDF user password, but no owner password is supplied nor present, then the user password
is also used as the owner password.

• Fixed expand and deflate parameters of methods Document.save() and Document.write(). Individual
image and font compression should now finally work. Addresses issue #713.

• Added a support of PDF optional content. This includes several new Document methods for inquiring and
setting optional content status and adding optional content configurations and groups. In addition, images, form
XObjects and annotations now can be bound to optional content specifications. Resolved issue #709.

Changes in Version 1.18.2

This version contains some interesting improvements for text searching: any number of search hits is now returned and
the hit_max parameter was removed. The new clip parameter in addition allows to restrict the search area. Searching
now detects hyphenations at line breaks and accordingly finds hyphenated words.

• Fixed issue #575: if using quads=False in text searching, then overlapping rectangles on the same line are
joined. Previously, parts of the search string, which belonged to different “marked content” items, each generated
their own rectangle – just as if occurring on separate lines.

• Added Document.isRepaired, which is true if the PDF was repaired on open.

• Added Document.setXmlMetadata() which either updates or creates PDF XML metadata. Implements issue

#691.

• Added Document.getXmlMetadata() returns PDF XML metadata.

• Changed creation of PDF documents: they will now always carry a PDF identification (/ID field) in the docu-
ment trailer. Implements issue #691.

• Changed Page.searchFor(): a new parameter clip is accepted to restrict the search to this rectangle. Cor-
respondingly, the attribute TextPage.rect is now respected by TextPage.search().

• Changed parameter hit_max in Page.searchFor() and TextPage.search() is now obsolete: methods will
return all hits.

• Changed character selection criteria in Page.getText(): a character is now considered to be part of a clip
if its bbox is fully contained. Before this, a non-empty intersection was sufficient.

• Changed Document.scrub() to support a new option redact_images. This addresses issue #697.

Changes in Version 1.18.1

• Fixed issue #692. PyMuPDF now detects and recovers from more cyclic resource dependencies in PDF pages
and for the first time reports them in the MuPDF warnings store.

• Fixed issue #686.

• Added opacity options for the Shape class: Stroke and fill colors can now be set to some transparency
value. This means that all Page draw methods, methods Page.insertText(), Page.insertTextbox(),
Shape.finish(), Shape.insertText(), and Shape.insertTextbox() support two new parameters:
stroke_opacity and fill_opacity.

494
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Added new parameter mask to Page.insertImage() for optionally providing an external image mask. Re-
solves issue #685.

• Added Annot.soundGet() for extracting the sound of an audio annotation.

Changes in Version 1.18.0

This is the first PyMuPDF version supporting MuPDF v1.18. The focus here is on extending PyMuPDF’s own func-
tionality – apart from bug fixing. Subsequent PyMuPDF patches may address features new in MuPDF.

• Fixed issue #519. This upstream bug occurred occasionally for some pages only and seems to be fixed now:
page layout should no longer be ruined in these cases.

• Fixed issue #675.

– Unsuccessful storage allocations should now always lead to exceptions (circumvention of an upstream bug
intermittently crashing the interpreter).

– Pixmap size is now based on size_t instead of int in C and should be correct even for extremely large
pixmaps.

• Fixed issue #668. Specification of dashes for PDF drawing insertion should now correctly reflect the PDF spec.

• Fixed issue #669. A major source of memory leakage in Page.insert_pdf() has been removed.

• Added keyword “images” to Page.apply_redactions() for fine-controlling the handling of images.

• Added Annot.getText() and Annot.getTextbox(), which offer the same functionality as the Page versions.

• Added key “number” to the block dictionaries of Page.getText() / Annot.getText() for options “dict” and
“rawdict”.

• Added glyph_name_to_unicode() and unicode_to_glyph_name(). Both functions do not really connect
to a specific font and are now independently available, too. The data are now based on the Adobe Glyph List.

• Added convenience functions adobe_glyph_names() and adobe_glyph_unicodes() which return the re-
spective available data.

• Added Page.getDrawings() which returns details of drawing operations on a document page. Works for all
document types.

• Improved performance of Document.insert_pdf(). Multiple object copies are now also suppressed across
multiple separate insertions from the same source. This saves time, memory and target file size. Previously this
mechanism was only active within each single method execution. The feature can also be suppressed with the
new method bool parameter final=1, which is the default.

• For PNG images created from pixmaps, the resolution (dpi) is now automatically set from the respective Pixmap.
xres and Pixmap.yres values.

Changes in Version 1.17.7

• Fixed issue #651. An upstream bug causing interpreter crashes in corner case redaction processings was fixed
by backporting MuPDF changes from their development repo.

• Fixed issue #645. Pixmap top-left coordinates can be set (again) by their own method, Pixmap.set_origin().

• Fixed issue #622. Page.insertImage() again accepts a rect_like parameter.

• Added severeal new methods to improve and speed-up table of contents (TOC) handling. Among other things,
TOC items can now changed or deleted individually – without always replacing the complete TOC. Furthermore,
access to some PDF page attributes is now possible without first loading the page. This has a very significant
impact on the performance of TOC manipulation.

495

PyMuPDF Documentation, Release 1.23.25

• Added an option to Document.insert_pdf() which allows displaying progress messages. Adresses #640.

• Added Page.getTextbox() which extracts text contained in a rectangle. In many cases, this should obsolete
writing your own script for this type of thing.

• Added new clip parameter to Page.getText() to simplify and speed up text extraction of page sub areas.

• Added TextWriter.appendv() to add text in vertical write mode. Addresses issue #653

Changes in Version 1.17.6

• Fixed issue #605

• Fixed issue #600 – text should now be correctly positioned also for pages with a CropBox smaller than MediaBox.

• Added text span dictionary key origin which contains the lower left coordinate of the first character in that
span.

• Added attribute Font.buffer, a bytes copy of the font file.

• Added parameter sanitize to Page.cleanContents(). Allows switching of sanitization, so only syntax clean-
ing will be done.

Changes in Version 1.17.5

• Fixed issue #561 – second go: certain TextWriter usages with many alternating fonts did not work correctly.

• Fixed issue #566.

• Fixed issue #568.

• Fixed – opacity is now correctly taken from the TextWriter object, if not given in TextWriter.writeText().

• Added a new global attribute fitz_fontdescriptors. Contains information about usable fonts from reposi-
tory pymupdf-fonts.

• Added Font.valid_codepoints() which returns an array of unicode codepoints for which the font has a
glyph.

• Added option text_as_path to Page.getSVGimage(). this implements #580. Generates much smaller SVG
files with parseable text if set to False.

Changes in Version 1.17.4

• Fixed issue #561. Handling of more than 10 Font objects on one page should now work correctly.

• Fixed issue #562. Annotation pixmaps are no longer derived from the page pixmap, thus avoiding unintended
inclusion of page content.

• Fixed issue #559. This MuPDF bug is being temporarily fixed with a pre-version of MuPDF’s next release.

• Added utility function repair_mono_font() for correcting displayed character spacing for some mono-spaced
fonts.

• Added utility method Document.need_appearances() for fine-controlling Form PDF behavior. Addresses
issue #563.

• Added utility function sRGB_to_pdf() to recover the PDF color triple for a given color integer in sRGB format.

• Added utility function sRGB_to_rgb() to recover the (R, G, B) color triple for a given color integer in sRGB
format.

496
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Added utility function make_table() which delivers table cells for a given rectangle and desired numbers of
columns and rows.

• Added support for optional fonts in repository pymupdf-fonts.

Changes in Version 1.17.3

• Fixed an undocumented issue, which prevented fully cleaning a PDF page when using Page.cleanContents().

• Fixed issue #540. Text extraction for EPUB should again work correctly.

• Fixed issue #548. Documentation now includes LINK_NAMED.

• Added new parameter to control start of text in TextWriter.fillTextbox(). Implements #549.

• Changed documentation of Page.add_redact_annot() to explain the usage of non-builtin fonts.

Changes in Version 1.17.2

• Fixed issue #533.

• Added options to modify ‘Redact’ annotation appearance. Implements #535.

Changes in Version 1.17.1

• Fixed issue #520.

• Fixed issue #525. Vertices for ‘Ink’ annots should now be correct.

• Fixed issue #524. It is now possible to query and set rotation for applicable annotation types.

Also significantly improved inline documentation for better support of interactive help.

Changes in Version 1.17.0

This version is based on MuPDF v1.17. Following are highlights of new and changed features:

• Added extended language support for annotations and widgets: a mixture of Latin, Greece, Russian, Chinese,
Japanese and Korean characters can now be used in ‘FreeText’ annotations and text widgets. No special arrange-
ment is required to use it.

• Faster page access is implemented for documents supporting a “chapter” structure. This applies to EPUB docu-
ments currently. This comes with several new Document methods and changes for Document.loadPage() and
the “indexed” page access doc[n]: In addition to specifying a page number as before, a tuple (chaper, pno) can
be specified to identify the desired page.

• Changed: Improved support of redaction annotations: images overlapped by redactions are permanantly mod-
ified by erasing the overlap areas. Also links are removed if overlapped by redactions. This is now fully in sync
with PDF specifications.

Other changes:

• Changed TextWriter.writeText() to support the “morph” parameter.

• Added methods Rect.morph(), IRect.morph(), and Quad.morph(), which return a new Quad.

• Changed Page.add_freetext_annot() to support text alignment via a new “align” parameter.

• Fixed issue #508. Improved image rectangle calculation to hopefully deliver correct values in most if not all
cases.

497

PyMuPDF Documentation, Release 1.23.25

• Fixed issue #502.

• Fixed issue #500. Document.convertToPDF() should no longer cause memory leaks.

• Fixed issue #496. Annotations and widgets / fields are now added or modified using the coordinates of the
unrotated page. This behavior is now in sync with other methods modifying PDF pages.

• Added Page.rotationMatrix and Page.derotationMatrix to support coordinate transformations between
the rotated and the original versions of a PDF page.

Potential code breaking changes:

• The
private
method
Page._getTransformation()
has
been
removed.
Use
the
public
Page.
transformationMattrix instead.

Changes in Version 1.16.18

This version introduces several new features around PDF text output. The motivation is to simplify this task, while at
the same time offering extending features.

One major achievement is using MuPDF’s capabilities to dynamically choosing fallback fonts whenever a character can-
not be found in the current one. This seemlessly works for Base-14 fonts in combination with CJK fonts (China, Japan,
Korea). So a text may contain any combination of characters from the Latin, Greek, Russian, Chinese, Japanese and
Korean languages.

• Fixed issue #493. Pixmap(doc, xref) should now again correctly resemble the loaded image object.

• Fixed issue #488. Widget names are now modifiable.

• Added new class Font which represents a font.

• Added new class TextWriter which serves as a container for text to be written on a page.

• Added Page.writeText() to write one or more TextWriter objects to the page.

Changes in Version 1.16.17

• Fixed issue #479. PyMuPDF should now more correctly report image resolutions. This applies to both, images
(either from images files or extracted from PDF documents) and pixmaps created from images.

• Added Pixmap.set_dpi() which sets the image resolution in x and y directions.

Changes in Version 1.16.16

• Fixed issue #477.

• Fixed issue #476.

• Changed annotation line end symbol coloring and fixed an error coloring the interior of ‘Polyline’ /’Polygon’
annotations.

Changes in Version 1.16.14

• Changed text marker annotations to accept parameters beyond just quadrilaterals such that now text lines be-
tween two given points can be marked.

• Added Document.scrub() which removes potentially sensitive data from a PDF. Implements #453.

• Added Annot.blendMode() which returns the blend mode of annotations.

498
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Added Annot.setBlendMode() to set the annotation’s blend mode. This resolves issue #416.

• Changed Annot.update() to accept additional parameters for setting blend mode and opacity.

• Added advanced graphics features to control the anti-aliasing values, Tools.set_aa_level(). Resolves

#467

• Fixed issue #474.

• Fixed issue #466.

Changes in Version 1.16.13

• Added Document.getPageXObjectList() which returns a list of Form XObjects of the page.

• Added Page.setMediaBox() for changing the physical PDF page size.

• Added
Page
methods
which
have
been
internal
before:
Page.cleanContents()
(=
Page.
_cleanContents()), Page.getContents() (= Page._getContents()), Page.getTransformation()
(= Page._getTransformation()).

Changes in Version 1.16.12

• Fixed issue #447

• Fixed issue #461.

• Fixed issue #397.

• Fixed issue #463.

• Added JavaScript support to PDF form fields, thereby fixing #454.

• Added a new annotation method Annot.delete_responses(), which removes ‘Popup’ and response annota-
tions referring to the current one. Mainly serves data protection purposes.

• Added a new form field method Widget.reset(), which resets the field value to its default.

• Changed and extended handling of redactions: images and XObjects are removed if contained in a redaction
rectangle. Any partial only overlaps will just be covered by the redaction background color. Now an overlay text
can be specified to be inserted in the rectangle area to take the place the deleted original text. This resolves
#434.

Changes in Version 1.16.11

• Added
Support
for
redaction
annotations
via
method
Page.add_redact_annot()
and
Page.
apply_redactions().

• Fixed issue #426 (“PolygonAnnotation in 1.16.10 version”).

• Fixed documentation only issues #443 and #444.

Changes in Version 1.16.10

• Fixed issue #421 (“annot.set_rect(rect) has no effect on text Annotation”)

• Fixed issue #417 (“Strange behavior for page.deleteAnnot on 1.16.9 compare to 1.13.20”)

• Fixed issue #415 (“Annot.setOpacity throws mupdf warnings”)

• Changed all “add annotation / widget” methods to store a unique name in the /NM PDF key.

499

PyMuPDF Documentation, Release 1.23.25

• Changed Annot.setInfo() to also accept direct parameters in addition to a dictionary.

• Changed Annot.info to now also show the annotation’s unique id (/NM PDF key) if present.

• Added Page.annot_names() which returns a list of all annotation names (/NM keys).

• Added Page.load_annot() which loads an annotation given its unique id (/NM key).

• Added Document.reload_page() which provides a new copy of a page after finishing any pending updates to
it.

Changes in Version 1.16.9

• Fixed #412 (“Feature Request: Allow controlling whether TOC entries should be collapsed”)

• Fixed #411 (“Seg Fault with page.firstWidget”)

• Fixed #407 (“Annot.setOpacity trouble”)

• Changed
methods
Annot.setBorder(),
Annot.setColors(),
Link.setBorder(),
and
Link.
setColors() to also accept direct parameters, and not just cumbersome dictionaries.

Changes in Version 1.16.8

• Added several new methods to the Document class, which make dealing with PDF low-level struc-
tures easier.
I also decided to provide them as “normal” methods (as opposed to private ones starting
with an underscore “_”).
These are Document.xrefObject(), Document.xrefStream(), Document.
xrefStreamRaw(), Document.PDFTrailer(), Document.PDFCatalog(), Document.metadataXML(),
Document.updateObject(), Document.updateStream().

• Added Tools.mupdf_disply_errors() which sets the display of mupdf errors on sys.stderr.

• Added a commandline facility. This a major new feature: you can now invoke several utility functions via
“python -m fitz ...”. It should obsolete the need for many of the most trivial scripts. Please refer to Module fitz.

Changes in Version 1.16.7

Minor changes to better synchronize the binary image streams of TextPage image blocks and Document.
extractImage() images.

• Fixed issue #394 (“PyMuPDF Segfaults when using TOOLS.mupdf_warnings()”).

• Changed redirection of MuPDF error messages: apart from writing them to Python sys.stderr, they are now also
stored with the MuPDF warnings.

• Changed Tools.mupdf_warnings() to automatically empty the store (if not deactivated via a parameter).

• Changed Page.getImageBbox() to return an infinite rectangle if the image could not be located on the page
– instead of raising an exception.

Changes in Version 1.16.6

• Fixed issue #390 (“Incomplete deletion of annotations”).

• Changed Page.searchFor() / Document.searchPageFor() to also support the flags parameter, which con-
trols the data included in a TextPage.

500
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Changed Document.getPageImageList(), Document.getPageFontList() and their Page counterparts to
support a new parameter full. If true, the returned items will contain the xref of the Form XObject where the
font or image is referenced.

Changes in Version 1.16.5

More performance improvements for text extraction.

• Fixed second part of issue #381 (see item in v1.16.4).

• Added Page.getTextPage(), so it is no longer required to create an intermediate display list for text extrac-
tions. Page level wrappers for text extraction and text searching are now based on this, which should improve
performance by ca. 5%.

Changes in Version 1.16.4

• Fixed issue #381 (“TextPage.extractDICT ... failed ... after upgrading ... to 1.16.3”)

• Added method Document.pages() which delivers a generator iterator over a page range.

• Added method Page.links() which delivers a generator iterator over the links of a page.

• Added method Page.annots() which delivers a generator iterator over the annotations of a page.

• Added method Page.widgets() which delivers a generator iterator over the form fields of a page.

• Changed Document.is_form_pdf to now contain the number of widgets, and False if not a PDF or this number
is zero.

Changes in Version 1.16.3

Minor changes compared to version 1.16.2. The code of the “dict” and “rawdict” variants of Page.getText() has been
ported to C which has greatly improved their performance. This improvement is mostly noticeable with text-oriented
documents, where they now should execute almost two times faster.

• Fixed issue #369 (“mupdf: cmsCreateTransform failed”) by removing ICC colorspace support.

• Changed Page.getText() to accept additional keywords “blocks” and “words”. These will deliver the results
of Page.getTextBlocks() and Page.getTextWords(), respectively. So all text extraction methods are now
available via a uniform API. Correspondingly, there are now new methods TextPage.extractBLOCKS() and
TextPage.extractWords().

• Changed Page.getText() to default bit indicator TEXT_INHIBIT_SPACES to off. Insertion of additional
spaces is not suppressed by default.

Changes in Version 1.16.2

• Changed text extraction methods of Page to allow detail control of the amount of extracted data.

• Added planish_line() which maps a given line (defined as a pair of points) to the x-axis.

• Fixed an issue (w/o Github number) which brought down the interpreter when encountering certain non-UTF-8
encodable characters while using Page.getText() with te “dict” option.

• Fixed issue #362 (“Memory Leak with getText(‘rawDICT’)”).

Changes in Version 1.16.1

501

PyMuPDF Documentation, Release 1.23.25

• Added property Quad.is_convex which checks whether a line is contained in the quad if it connects two points
of it.

• Changed Document.insert_pdf() to now allow dropping or including links and annotations independently
during the copy. Fixes issue #352 (“Corrupt PDF data and ...”), which seemed to intermittently occur when
using the method for some problematic PDF files.

• Fixed a bug which, in matrix division using the syntax “m1/m2”, caused matrix “m1” to be replaced by the
result instead of delivering a new matrix.

• Fixed issue #354 (“SyntaxWarning with Python 3.8”). We now always use “==” for literals (instead of the “is”
Python keyword).

• Fixed issue #353 (“mupdf version check”), to no longer refuse the import when there are only patch level devi-
ations from MuPDF.

Changes in Version 1.16.0

This major new version of MuPDF comes with several nice new or changed features. Some of them imply programming
API changes, however. This is a synopsis of what has changed:

• PDF document encryption and decryption is now fully supported. This includes setting permissions, pass-
words (user and owner passwords) and the desired encryption method.

• In response to the new encryption features, PyMuPDF returns an integer (ie. a combination of bits) for document
permissions, and no longer a dictionary.

• Redirection of MuPDF errors and warnings is now natively supported. PyMuPDF redirects error messages from
MuPDF to sys.stderr and no longer buffers them. Warnings continue to be buffered and will not be displayed.
Functions exist to access and reset the warnings buffer.

• Annotations are now only supported for PDF.

• Annotations and widgets (form fields) are now separate object chains on a page (although widgets technically
still are PDF annotations). This means, that you will never encounter widgets when using Page.firstAnnot
or Annot.next(). You must use Page.firstWidget and Widget.next() to access form fields.

• As part of MuPDF’s changes regarding widgets, only the following four fonts are supported, when adding or
changing form fields: Courier, Helvetica, Times-Roman and ZapfDingBats.

List of change details:

• Added Document.can_save_incrementally() which checks conditions that are preventing use of option
incremental=True of Document.save().

• Added Page.firstWidget which points to the first field on a page.

• Added Page.getImageBbox() which returns the rectangle occupied by an image shown on the page.

• Added Annot.setName() which lets you change the (icon) name field.

• Added outputting the text color in Page.getText(): the “dict”, “rawdict” and “xml” options now also show
the color in sRGB format.

• Changed Document.permissions to now contain an integer of bool indicators – was a dictionary before.

• Changed Document.save(), Document.write(), which now fully support password-based decryption and
encryption of PDF files.

• Changed the names of all Python constants related to annotations and widgets. Please make sure to consult the
Constants and Enumerations chapter if your script is dealing with these two classes. This decision goes back
to the dropped support for non-PDF annotations. The old names (starting with “ANNOT_*” or “WIDGET_*”)
will be available as deprecated synonyms.

502
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Changed font support for widgets: only Cour (Courier), Helv (Helvetica, default), TiRo (Times-Roman) and
ZaDb (ZapfDingBats) are accepted when adding or changing form fields. Only the plain versions are possible
– not their italic or bold variations. Reading widgets, however will show its original font.

• Changed the name of the warnings buffer to Tools.mupdf_warnings() and the function to empty this buffer
is now called Tools.reset_mupdf_warnings().

• Changed Page.getPixmap(), Document.get_page_pixmap(): a new bool argument annots can now be
used to suppress the rendering of annotations on the page.

• Changed Page.add_file_annot() and Page.add_text_annot() to enable setting an icon.

• Removed widget-related methods and attributes from the Annot object.

• Removed Document attributes openErrCode, openErrMsg, and Tools attributes / methods stderr, reset_stderr,
stdout, and reset_stdout.

• Removed thirdparty zlib dependency in PyMuPDF: there are now compression functions available in MuPDF.
Source installers of PyMuPDF may now omit this extra installation step.

No version published for MuPDF v1.15.0

Changes in Version 1.14.20 / 1.14.21

• Changed text marker annotations to support multiple rectangles / quadrilaterals. This fixes issue #341 (“Question
: How to addhighlight so that a string spread across more than a line is covered by one highlight?”) and similar
(#285).

• Fixed issue #331 (“Importing PyMuPDF changes warning filtering behaviour globally”).

Changes in Version 1.14.19

• Fixed issue #319 (“InsertText function error when use custom font”).

• Added new method Document.get_sigflags() which returns information on whether a PDF is signed. Re-
solves issue #326 (“How to detect signature in a form pdf?”).

Changes in Version 1.14.17

• Added Document.fullcopyPage() to make full page copies within a PDF (not just copied references as
Document.copyPage() does).

• Changed Page.getPixmap(), Document.get_page_pixmap() now use alpha=False as default.

• Changed text extraction: the span dictionary now (again) contains its rectangle under the bbox key.

• Changed Document.movePage() and Document.copyPage() to use direct functions instead of wrapping

Document.select() – similar to Document.delete_page() in v1.14.16.

Changes in Version 1.14.16

• Changed Document methods around PDF /EmbeddedFiles to no longer use MuPDF’s “portfolio” functions.
That support will be dropped in MuPDF v1.15 – therefore another solution was required.

• Changed Document.embfile_Count() to be a function (was an attribute).

• Added new method Document.embfile_Names() which returns a list of names of embedded files.

503

PyMuPDF Documentation, Release 1.23.25

• Changed Document.delete_page() and Document.delete_pages() to internally no longer use

Document.select(), but instead use functions to perform the deletion directly. As it has turned out, the
Document.select() method yields invalid outline trees (tables of content) for very complex PDFs and so-
phisticated use of annotations.

Changes in Version 1.14.15

• Fixed issues #301 (“Line cap and Line join”), #300 (“How to draw a shape without outlines”) and #298
(“utils.updateRect exception”). These bugs pertain to drawing shapes with PyMuPDF. Drawing shapes with-
out any border is fully supported. Line cap styles and line line join style are now differentiated and support all
possible PDF values (0, 1, 2) instead of just being a bool. The previous parameter roundCap is deprecated in
favor of lineCap and lineJoin and will be deleted in the next release.

• Fixed issue #290 (“Memory Leak with getText(‘rawDICT’)”). This bug caused memory not being (completely)
freed after invoking the “dict”, “rawdict” and “json” versions of Page.getText().

Changes in Version 1.14.14

• Added new low-level function ImageProperties() to determine a number of characteristics for an image.

• Added new low-level function Document.is_stream(), which checks whether an object is of stream type.

• Changed low-level functions Document._getXrefString() and Document._getTrailerString() now by
default return object definitions in a formatted form which makes parsing easy.

Changes in Version 1.14.13

• Changed methods working with binary input: while ever supporting bytes and bytearray objects, they now also
accept io.BytesIO input, using their getvalue() method. This pertains to document creation, embedded files,
FileAttachment annotations, pixmap creation and others. Fixes issue #274 (“Segfault when using BytesIO as a
stream for insertImage”).

• Fixed issue #278 (“Is insertImage(keep_proportion=True) broken?”). Images are now correctly presented when
keeping aspect ratio.

Changes in Version 1.14.12

• Changed the draw methods of Page and Shape to support not only RGB, but also GRAY and CMYK colorspaces.
This solves issue #270 (“Is there a way to use CMYK color to draw shapes?”). This change also applies to text
insertion methods of Shape, resp. Page.

• Fixed issue #269 (“AttributeError in Document.insert_page()”), which occurred when using Document.
insert_page() with text insertion.

Changes in Version 1.14.11

• Changed Page.show_pdf_page() to always position the source rectangle centered in the target. This method
now also supports rotation by arbitrary angles. The argument reuse_xref has been deprecated: prevention of
duplicates is now handled internally.

• Changed Page.insertImage() to support rotated display of the image and keeping the aspect ratio. Only
rotations by multiples of 90 degrees are supported here.

504
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Fixed issue #265 (“TypeError: insertText() got an unexpected keyword argument ‘idx’”). This issue only oc-
curred when using Document.insert_page() with also inserting text.

Changes in Version 1.14.10

• Changed Page.show_pdf_page() to support rotation of the source rectangle. Fixes #261 (“Cannot rotate
insterted pages”).

• Fixed a bug in Page.insertImage() which prevented insertion of multiple images provided as streams.

Changes in Version 1.14.9

• Added new low-level method Document._getTrailerString(), which returns the trailer object of a PDF.
This is much like Document._getXrefString() except that the PDF trailer has no / needs no xref to identify
it.

• Added new parameters for text insertion methods. You can now set stroke and fill colors of glyphs (text charac-
ters) independently, as well as the thickness of the glyph border. A new parameter render_mode controls the use
of these colors, and whether the text should be visible at all.

• Fixed issue #258 (“Copying image streams to new PDF without size increase”): For JPX images embedded in a
PDF, Document.extractImage() will now return them in their original format. Previously, the MuPDF base
library was used, which returns them in PNG format (entailing a massive size increase).

• Fixed issue #259 (“Morphing text to fit inside rect”). Clarified use of get_text_length() and removed extra
line breaks for long words.

Changes in Version 1.14.8

• Added Pixmap.set_rect() to change the pixel values in a rectangle. This is also an alternative to setting the
color of a complete pixmap (Pixmap.clear_with()).

• Fixed an image extraction issue with JBIG2 (monochrome) encoded PDF images. The issue occurred in Page.
getText() (parameters “dict” and “rawdict”) and in Document.extractImage() methods.

• Fixed an issue with not correctly clearing a non-alpha Pixmap (Pixmap.clear_with()).

• Fixed an issue with not correctly inverting colors of a non-alpha Pixmap (Pixmap.invert_irect()).

Changes in Version 1.14.7

• Added Pixmap.set_pixel() to change one pixel value.

• Added documentation for image conversion in the FAQ.

• Added new function get_text_length() to determine the string length for a given font.

• Added Postscript image output (changed Pixmap.save() and Pixmap.tobytes()).

• Changed Pixmap.save() and Pixmap.tobytes() to ensure valid combinations of colorspace, alpha and out-
put format.

• Changed Pixmap.save(): the desired format is now inferred from the filename.

• Changed FreeText annotations can now have a transparent background - see Annot.update().

Changes in Version 1.14.5

505

PyMuPDF Documentation, Release 1.23.25

• Changed: Shape methods now strictly use the transformation matrix of the Page – instead of “manually” calcu-
lating locations.

• Added method Pixmap.pixel() which returns the pixel value (a list) for given pixel coordinates.

• Added method Pixmap.tobytes() which returns a bytes object representing the pixmap in a variety of formats.
Previously, this could be done for PNG outputs only (Pixmap.tobytes()).

• Changed: output of methods Pixmap.save() and (the new) Pixmap.tobytes() may now also be PSD (Adobe
Photoshop Document).

• Added method Shape.drawQuad() which draws a Quad.
This actually is a shorthand for a Shape.
drawPolyline() with the edges of the quad.

• Changed method Shape.drawOval(): the argument can now be either a rectangle (rect_like) or a quadri-
lateral (quad_like).

Changes in Version 1.14.4

• Fixes issue #239 “Annotation coordinate consistency”.

Changes in Version 1.14.3

This patch version contains minor bug fixes and CJK font output support.

• Added support for the four CJK fonts as PyMuPDF generated text output. This pertains to methods Page.
insertFont(), Shape.insertText(), Shape.insertTextbox(), and corresponding Page methods. The
new fonts are available under “reserved” fontnames “china-t” (traditional Chinese), “china-s” (simplified Chi-
nese), “japan” (Japanese), and “korea” (Korean).

• Added full support for the built-in fonts ‘Symbol’ and ‘Zapfdingbats’.

• Changed: The 14 standard fonts can now each be referenced by a 4-letter abbreviation.

Changes in Version 1.14.1

This patch version contains minor performance improvements.

• Added support for Document filenames given as pathlib object by using the Python str() function.

Changes in Version 1.14.0

To support MuPDF v1.14.0, massive changes were required in PyMuPDF – most of them purely technical, with little
visibility to developers. But there are also quite a lot of interesting new and improved features. Following are the
details:

• Added “ink” annotation.

• Added “rubber stamp” annotation.

• Added “squiggly” text marker annotation.

• Added new class Quad (quadrilateral or tetragon) – which represents a general four-sided shape in the plane. The
special subtype of rectangular, non-empty tetragons is used in text marker annotations and as returned objects in
text search methods.

• Added a new option “decrypt” to Document.save() and Document.write(). Now you can keep encryption
when saving a password protected PDF.

506
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Added suppression and redirection of unsolicited messages issued by the underlying C-library MuPDF. Consult

Redirecting Error and Warning Messages for details.

• Changed: Changes to annotations now always require Annot.update() to become effective.

• Changed free text annotations to support the full Latin character set and range of appearance options.

• Changed text searching, Page.searchFor(), to optionally return Quad instead Rect objects surrounding each
search hit.

• Changed plain text output: we now add a n to each line if it does not itself end with this character.

• Fixed issue 211 (“Something wrong in the doc”).

• Fixed issue 213 (“Rewritten outline is displayed only by mupdf-based applications”).

• Fixed issue 214 (“PDF decryption GONE!”).

• Fixed issue 215 (“Formatting of links added with pyMuPDF”).

• Fixed issue 217 (“extraction through json is failing for my pdf”).

Behind the curtain, we have changed the implementation of geometry objects: they now purely exist in Python and no
longer have “shadow” twins on the C-level (in MuPDF). This has improved processing speed in that area by more than
a factor of two.

Because of the same reason, most methods involving geometry parameters now also accept the corresponding Python
sequence. For example, in method “page.show_pdf_page(rect, ...)” parameter rect may now be any rect_like
sequence.

We also invested considerable effort to further extend and improve the FAQ chapter.

Changes in Version 1.13.19

This version contains some technical / performance improvements and bug fixes.

• Changed memory management: for Python 3 builds, Python memory management is exclusively used across
all C-level code (i.e. no more native malloc() in MuPDF code or PyMuPDF interface code). This leads to
improved memory usage profiles and also some runtime improvements: we have seen > 2% shorter runtimes for
text extractions and pixmap creations (on Windows machines only to date).

• Fixed an error occurring in Python 2.7,
which crashed the interpreter when using TextPage.
extractRAWDICT() (= Page.getText(“rawdict”)).

• Fixed an error occurring in Python 2.7, when creating link destinations.

• Extended the FAQ chapter with more examples.

Changes in Version 1.13.18

• Added method TextPage.extractRAWDICT(), and a corresponding new string parameter “rawdict” to method
Page.getText(). It extracts text and images from a page in Python dict form like TextPage.extractDICT(),
but with the detail level of TextPage.extractXML(), which is position information down to each single char-
acter.

Changes in Version 1.13.17

• Fixed an error that intermittently caused an exception in Page.show_pdf_page(), when pages from many
different source PDFs were shown.

507

PyMuPDF Documentation, Release 1.23.25

• Changed method Document.extractImage() to now return more meta information about the extracted im-
gage. Also, its performance has been greatly improved. Several demo scripts have been changed to make use of
this method.

• Changed method Document._getXrefStream() to now return None if the object is no stream and no longer
raise an exception if otherwise.

• Added method Document._deleteObject() which deletes a PDF object identified by its xref. Only to be
used by the experienced PDF expert.

• Added a method paper_rect() which returns a Rect for a supplied paper format string.
Example:
fitz.paper_rect(“letter”) = fitz.Rect(0.0, 0.0, 612.0, 792.0).

• Added a FAQ chapter to this document.

Changes in Version 1.13.16

• Added support for correctly setting transparency (opacity) for certain annotation types.

• Added a tool property (Tools.fitz_config) showing the configuration of this PyMuPDF version.

• Fixed issue #193 (‘insertText(overlay=False) gives “cannot resize a buffer with shared storage” error’) by avoid-
ing read-only buffers.

Changes in Version 1.13.15

• Fixed issue #189 (“cannot find builtin CJK font”), so we are supporting builtin CJK fonts now (CJK = China,
Japan, Korea). This should lead to correctly generated pixmaps for documents using these languages. This
change has consequences for our binary file size: it will now range between 8 and 10 MB, depending on the OS.

• Fixed issue #191 (“Jupyter notebook kernel dies after ca. 40 pages”), which occurred when modifying the
contents of an annotation.

Changes in Version 1.13.14

This patch version contains several improvements, mainly for annotations.

• Changed Annot.lineEnds is now a list of two integers representing the line end symbols. Previously was a
dict of strings.

• Added support of line end symbols for applicable annotations. PyMuPDF now can generate these annotations
including the line end symbols.

• Added Annot.setLineEnds() adds line end symbols to applicable annotation types (‘Line’, ‘PolyLine’, ‘Poly-
gon’).

• Changed technical implementation of Page.insertImage() and Page.show_pdf_page(): they now create
there own contents objects, thereby avoiding changes of potentially large streams with consequential compression
/ decompression efforts and high change volumes with incremental updates.

Changes in Version 1.13.13

This patch version contains several improvements for embedded files and file attachment annotations.

• Added Document.embfile_Upd() which allows changing file content and metadata of an embedded file. It
supersedes the old method Document.embfile_SetInfo() (which will be deleted in a future version). Content
is automatically compressed and metadata may be unicode.

508
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• Changed Document.embfile_Add() to now automatically compress file content. Accompanying metadata
can now be unicode (had to be ASCII in the past).

• Changed Document.embfile_Del() to now automatically delete all entries having the supplied identifying
name. The return code is now an integer count of the removed entries (was None previously).

• Changed embedded file methods to now also accept or show the PDF unicode filename as additional parameter
ufilename.

• Added Page.add_file_annot() which adds a new file attachment annotation.

• Changed Annot.fileUpd() (file attachment annot) to now also accept the PDF unicode ufilename parameter.
The description parameter desc correctly works with unicode. Furthermore, all parameters are optional, so
metadata may be changed without also replacing the file content.

• Changed Annot.fileInfo() (file attachment annot) to now also show the PDF unicode filename as parameter
ufilename.

• Fixed issue #180 (“page.getText(output=’dict’) return invalid bbox”) to now also work for vertical text.

• Fixed issue #185 (“Can’t render the annotations created by PyMuPDF”). The issue’s cause was the minimalistic
MuPDF approach when creating annotations. Several annotation types have no /AP (“appearance”) object when
created by MuPDF functions. MuPDF, SumatraPDF and hence also PyMuPDF cannot render annotations with-
out such an object. This fix now ensures, that an appearance object is always created together with the annotation
itself. We still do not support line end styles.

Changes in Version 1.13.12

• Fixed issue #180 (“page.getText(output=’dict’) return invalid bbox”). Note that this is a circumvention of an
MuPDF error, which generates zero-height character rectangles in some cases. When this happens, this fix
ensures a bbox height of at least fontsize.

• Changed for ListBox and ComboBox widgets, the attribute list of selectable values has been renamed to Widget.
choice_values.

• Changed when adding widgets, any missing of the PDF Base 14 Fonts is automatically added to the PDF. Widget
text fonts can now also be chosen from existing widget fonts. Any specified field values are now honored and
lead to a field with a preset value.

• Added Annot.updateWidget() which allows changing existing form fields – including the field value.

Changes in Version 1.13.11

While the preceeding patch subversions only contained various fixes, this version again introduces major new features:

• Added basic support for PDF widget annotations. You can now add PDF form fields of types Text, CheckBox,
ListBox and ComboBox. Where necessary, the PDF is tranformed to a Form PDF with the first added widget.

• Fixed issues #176 (“wrong file embedding”), #177 (“segment fault when invoking page.getText()”)and #179
(“Segmentation fault using page.getLinks() on encrypted PDF”).

Changes in Version 1.13.7

• Added support of variable page sizes for reflowable documents (e-books, HTML, etc.): new parameters rect and
fontsize in Document creation (open), and as a separate method Document.layout().

• Added Annot creation of many annotations types: sticky notes, free text, circle, rectangle, line, polygon, polyline
and text markers.

509

PyMuPDF Documentation, Release 1.23.25

• Added support of annotation transparency (Annot.opacity, Annot.setOpacity()).

• Changed Annot.vertices: point coordinates are now grouped as pairs of floats (no longer as separate floats).

• Changed annotation colors dictionary: the two keys are now named “stroke” (formerly “common”) and “fill”.

• Added Document.isDirty which is True if a PDF has been changed in this session. Reset to False on each

Document.save() or Document.write().

Changes in Version 1.13.6

• Fix #173: for memory-resident documents, ensure the stream object will not be garbage-collected by Python
before document is closed.

Changes in Version 1.13.5

• New low-level method Page._setContents() defines an object given by its xref to serve as the contents

object.

• Changed and extended PDF form field support:
the attribute widget_text has been renamed to Annot.
widget_value. Values of all form field types (except signatures) are now supported. A new attribute Annot.
widget_choices contains the selectable values of listboxes and comboboxes. All these attributes now contain
None if no value is present.

Changes in Version 1.13.4

• Document.convertToPDF() now supports page ranges, reverted page sequences and page rotation. If the doc-
ument already is a PDF, an exception is raised.

• Fixed a bug (introduced with v1.13.0) that prevented Page.insertImage() for transparent images.

Changes in Version 1.13.3

Introduces a way to convert any MuPDF supported document to a PDF. If you ever wanted PDF versions of your
XPS, EPUB, CBZ or FB2 files – here is a way to do this.

• Document.convertToPDF() returns a Python bytes object in PDF format. Can be opened like normal in
PyMuPDF, or be written to disk with the “.pdf” extension.

Changes in Version 1.13.2

The major enhancement is PDF form field support. Form fields are annotations of type (19, ‘Widget’). There is a new
document method to check whether a PDF is a form. The Annot class has new properties describing field details.

• Document.is_form_pdf is true if object type /AcroForm and at least one form field exists.

• Annot.widget_type, Annot.widget_text and Annot.widget_name contain the details of a form field (i.e.
a “Widget” annotation).

Changes in Version 1.13.1

510
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• TextPage.extractDICT() is a new method to extract the contents of a document page (text and images). All
document types are supported as with the other TextPage extract*() methods. The returned object is a dictio-
nary of nested lists and other dictionaries, and exactly equal to the JSON-deserialization of the old TextPage.
extractJSON(). The difference is that the result is created directly – no JSON module is used. Because the user
needs no JSON module to interpet the information, it should be easier to use, and also have a better performance,
because it contains images in their original binary format – they need not be base64-decoded.

• Page.getText() correspondingly supports the new parameter value “dict” to invoke the above method.

• TextPage.extractJSON() (resp. Page.getText(“json”)) is still supported for convenience, but its use is ex-
pected to decline.

Changes in Version 1.13.0

This version is based on MuPDF v1.13.0. This release is “primarily a bug fix release”.

In PyMuPDF, we are also doing some bug fixes while introducing minor enhancements. There only very minimal
changes to the user’s API.

• Document construction is more flexible: the new filetype parameter allows setting the document type. If specified,
any extension in the filename will be ignored. More completely addresses issue #156. As part of this, the
documentation has been reworked.

• Changes to Pixmap constructors:

– Colorspace conversion no longer allows dropping the alpha channel: source and target alpha will
now always be the same. We have seen exceptions and even interpreter crashes when using alpha
= 0.

– As a replacement, the simple pixmap copy lets you choose the target alpha.

• Document.save() again offers the full garbage collection range 0 thru 4. Because of a bug in xref maintenance,
we had to temporarily enforce garbage > 1. Finally resolves issue #148.

• Document.save() now offers to “prettify” PDF source via an additional argument.

• Page.insertImage() has the additional stream -parameter, specifying a memory area holding an image.

• Issue with garbled PNGs on Linux systems has been resolved (“Problem writing PNG” #133).

Changes in Version 1.12.4

This is an extension of 1.12.3.

• Fix of issue #147: methods Document.getPageFontlist() and Document.getPageImagelist() now also
show fonts and images contained in resources nested via “Form XObjects”.

• Temporary fix of issue #148: Saving to new PDF files will now automatically use garbage = 2 if a lower value is
given. Final fix is to be expected with MuPDF’s next version. At that point we will remove this circumvention.

• Preventive fix of illegally using stencil / image mask pixmaps in some methods.

• Method Document.getPageFontlist() now includes the encoding name for each font in the list.

• Method Document.getPageImagelist() now includes the decode method name for each image in the list.

Changes in Version 1.12.3

This is an extension of 1.12.2.

511

PyMuPDF Documentation, Release 1.23.25

• Many functions now return None instead of 0, if the result has no other meaning than just indicating successful
execution (Document.close(), Document.save(), Document.select(), Pixmap.save() and many oth-
ers).

Changes in Version 1.12.2

This is an extension of 1.12.1.

• Method Page.show_pdf_page() now accepts the new clip argument. This specifies an area of the source page
to which the display should be restricted.

• New Page.CropBox and Page.MediaBox have been included for convenience.

Changes in Version 1.12.1

This is an extension of version 1.12.0.

• New method Page.show_pdf_page() displays another’s PDF page. This is a vector image and therefore re-
mains precise across zooming. Both involved documents must be PDF.

• New method Page.getSVGimage() creates an SVG image from the page. In contrast to the raster image of a
pixmap, this is a vector image format. The return is a unicode text string, which can be saved in a .svg file.

• Method Page.getTextBlocks() now accepts an additional bool parameter “images”. If set to true (default
is false), image blocks (metadata only) are included in the produced list and thus allow detecting areas with
rendered images.

• Minor bug fixes.

• “text” result of Page.getText() concatenates all lines within a block using a single space character. MuPDF’s
original uses “\\n” instead, producing a rather ragged output.

• New properties of Page objects Page.MediaBoxSize and Page.CropBoxPosition provide more information
about a page’s dimensions. For non-PDF files (and for most PDF files, too) these will be equal to Page.rect.
bottom_right, resp. Page.rect.top_left. For example, class Shape makes use of them to correctly position
its items.

Changes in Version 1.12.0

This version is based on and requires MuPDF v1.12.0. The new MuPDF version contains quite a number of changes –
most of them around text extraction. Some of the changes impact the programmer’s API.

• Outline.saveText() and Outline.saveXML() have been deleted without replacement. You probably haven’t
used them much anyway. But if you are looking for a replacement: the output of Document.get_toc() can
easily be used to produce something equivalent.

• Class TextSheet does no longer exist.

• Text “spans” (one of the hierarchy levels of TextPage) no longer contain positioning information (i.e. no “bbox”
key). Instead, spans now provide the font information for its text. This impacts our JSON output variant.

• HTML output has improved very much: it now creates valid documents which can be displayed by browsers to
produce a similar view as the original document.

• There is a new output format XHTML, which provides text and images in a browser-readable format. The
difference to HTML output is, that no effort is made to reproduce the original layout.

• All output formats of Page.getText() now support creating complete, valid documents, by wrapping them
with appropriate header and trailer information. If you are interested in using the HTML output, please make
sure to read Controlling Quality of HTML Output.

512
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• To support finding text positions,
we have added special methods that don’t need detours like

TextPage.extractJSON() or TextPage.extractXML(): use Page.getTextBlocks() or resp.
Page.
getTextWords() to create lists of text blocks or resp. words, which are accompanied by their rectangles. This
should be much faster than the standard text extraction methods and also avoids using additional packages for
interpreting their output.

Changes in Version 1.11.2

This is an extension of v1.11.1.

• New Page.insertFont() creates a PDF /Font object and returns its object number.

• New Document.extractFont() extracts the content of an embedded font given its object number.

• Methods FontList(...) items no longer contain the PDF generation number. This value never had any signifi-
cance. Instead, the font file extension is included (e.g. “pfa” for a “PostScript Font for ASCII”), which is more
valuable information.

• Fonts other than “simple fonts” (Type1) are now also supported.

• New options to change Pixmap size:

– Method Pixmap.shrink() reduces the pixmap proportionally in place.

– A new Pixmap copy constructor allows scaling via setting target width and height.

Changes in Version 1.11.1

This is an extension of v1.11.0.

• New class Shape. It facilitates and extends the creation of image shapes on PDF pages. It contains multiple
methods for creating elementary shapes like lines, rectangles or circles, which can be combined into more com-
plex ones and be given common properties like line width or colors. Combined shapes are handled as a unit and
e.g. be “morphed” together. The class can accumulate multiple complex shapes and put them all in the page’s
foreground or background – thus also reducing the number of updates to the page’s contents object.

• All Page draw methods now use the new Shape class.

• Text insertion methods insertText() and insertTextBox() now support morphing in addition to text rotation. They
have become part of the Shape class and thus allow text to be freely combined with graphics.

• A new Pixmap constructor allows creating pixmap copies with an added alpha channel. A new method also
allows directly manipulating alpha values.

• Binary algebraic operations with geometry objects (matrices, rectangles and points) now generally also support
lists or tuples as the second operand. You can add a tuple (x, y) of numbers to a Point. In this context, such
sequences are called “point_like” (resp. matrix_like, rect_like).

• Geometry objects now fully support in-place operators. For example, p /= m replaces point p with p * 1/m for a
number, or p * ~m for a matrix_like object m. Similarly, if r is a rectangle, then r |= (3, 4) is the new rectangle
that also includes fitz.Point(3, 4), and r &= (1, 2, 3, 4) is its intersection with fitz.Rect(1, 2, 3, 4).

Changes in Version 1.11.0

This version is based on and requires MuPDF v1.11.

Though MuPDF has declared it as being mostly a bug fix version, one major new feature is indeed contained: support
of embedded files – also called portfolios or collections. We have extended PyMuPDF functionality to embrace this up
to an extent just a little beyond the mutool utility as follows.

513

PyMuPDF Documentation, Release 1.23.25

• The Document class now support embedded files with several new methods and one new property:

– embfile_Info() returns metadata information about an entry in the list of embedded files. This is more than
mutool currently provides: it shows all the information that was used to embed the file (not just the entry’s
name).

– embfile_Get() retrieves the (decompressed) content of an entry into a bytes buffer.

– embfile_Add(...) inserts new content into the PDF portfolio. We (in contrast to mutool) restrict this to
entries with a new name (no duplicate names allowed).

– embfile_Del(...) deletes an entry from the portfolio (function not offered in MuPDF).

– embfile_SetInfo() – changes filename or description of an embedded file.

– embfile_Count – contains the number of embedded files.

• Several enhancements deal with streamlining geometry objects. These are not connected to the new MuPDF
version and most of them are also reflected in PyMuPDF v1.10.0. Among them are new properties to identify
the corners of rectangles by name (e.g. Rect.bottom_right) and new methods to deal with set-theoretic questions
like Rect.contains(x) or IRect.intersects(x). Special effort focussed on supporting more “Pythonic” language
constructs: if x in rect ... is equivalent to rect.contains(x).

• The Rect chapter now has more background on empty amd infinite rectangles and how we handle them. The
handling itself was also updated for more consistency in this area.

• We have started basic support for generation of PDF content:

– Document.insert_page() adds a new page into a PDF, optionally containing some text.

– Page.insertImage() places a new image on a PDF page.

– Page.insertText() puts new text on an existing page

• For FileAttachment annotations, content and name of the attached file can extracted and changed.

Changes in Version 1.10.0

MuPDF v1.10 Impact

MuPDF version 1.10 has a significant impact on our bindings. Some of the changes also affect the API – in other words,
you as a PyMuPDF user.

• Link destination information has been reduced. Several properties of the linkDest class no longer contain valuable
information. In fact, this class as a whole has been deleted from MuPDF’s library and we in PyMuPDF only
maintain it to provide compatibilty to existing code.

• In an effort to minimize memory requirements, several improvements have been built into MuPDF v1.10:

– A new config.h file can be used to de-select unwanted features in the C base code. Using this feature we
have been able to reduce the size of our binary _fitz.o / _fitz.pyd by about 50% (from 9 MB to 4.5 MB).
When UPX-ing this, the size goes even further down to a very handy 2.3 MB.

– The alpha (transparency) channel for pixmaps is now optional. Letting alpha default to False significantly
reduces pixmap sizes (by 20% – CMYK, 25% – RGB, 50% – GRAY). Many Pixmap constructors therefore
now accept an alpha boolean to control inclusion of this channel. Other pixmap constructors (e.g. those for
file and image input) create pixmaps with no alpha alltogether. On the downside, save methods for pixmaps
no longer accept a savealpha option: this channel will always be saved when present. To minimize code
breaks, we have left this parameter in the call patterns – it will just be ignored.

• DisplayList and TextPage class constructors now require the mediabox of the page they are referring to (i.e. the
page.bound() rectangle). There is no way to construct this information from other sources, therefore a source

514
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

code change cannot be avoided in these cases. We assume however, that not many users are actually employing
these rather low level classes explixitely. So the impact of that change should be minor.

Other Changes compared to Version 1.9.3

• The new Document method write() writes an opened PDF to memory (as opposed to a file, like save() does).

• An annotation can now be scaled and moved around on its page. This is done by modifying its rectangle.

• Annotations can now be deleted. Page contains the new method deleteAnnot().

• Various annotation attributes can now be modified, e.g. content, dates, title (= author), border, colors.

• Method Document.insert_pdf() now also copies annotations of source pages.

• The Pages class has been deleted. As documents can now be accessed with page numbers as indices (like doc[n]
= doc.loadPage(n)), and document object can be used as iterators, the benefit of this class was too low to maintain
it. See the following comments.

• loadPage(n) / doc[n] now accept arbitrary integers to specify a page number, as long as n < pageCount. So, e.g.
doc[-500] is always valid and will load page (-500) % pageCount.

• A document can now also be used as an iterator like this: for page in doc: ...<do something with “page”> ....
This will yield all pages of doc as page.

• The Pixmap method getSize() has been replaced with property size. As before Pixmap.size == len(Pixmap) is
true.

• In response to transparency (alpha) being optional, several new parameters and properties have been added to

Pixmap and Colorspace classes to support determining their characteristics.

• The Page class now contains new properties firstAnnot and firstLink to provide starting points to the respec-
tive class chains, where firstLink is just a mnemonic synonym to method loadLinks() which continues to exist.
Similarly, the new property rect is a synonym for method bound(), which also continues to exist.

• Pixmap methods samplesRGB() and samplesAlpha() have been deleted because pixmaps can now be created
without transparency.

• Rect now has a property irect which is a synonym of method round(). Likewise, IRect now has property rect to
deliver a Rect which has the same coordinates as floats values.

• Document has the new method searchPageFor() to search for a text string. It works exactly like the corresponding
Page.searchFor() with page number as additional parameter.

Changes in Version 1.9.3

This version is also based on MuPDF v1.9a. Changes compared to version 1.9.2:

• As a major enhancement, annotations are now supported in a similar way as links. Annotations can be displayed
(as pixmaps) and their properties can be accessed.

• In addition to the document select() method, some simpler methods can now be used to manipulate a PDF:

– copyPage() copies a page within a document.

– movePage() is similar, but deletes the original.

– delete_page() deletes a page

– delete_pages() deletes a page range

• rotation or setRotation() access or change a PDF page’s rotation, respectively.

• Available but undocumented before, IRect, Rect, Point and Matrix support the len() method and their coordinate
properties can be accessed via indices, e.g. IRect.x1 == IRect[2].

515

PyMuPDF Documentation, Release 1.23.25

• For convenience, documents now support simple indexing: doc.loadPage(n) == doc[n]. The index may however
be in range -pageCount < n < pageCount, such that doc[-1] is the last page of the document.

Changes in Version 1.9.2

This version is also based on MuPDF v1.9a. Changes compared to version 1.9.1:

• fitz.open() (no parameters) creates a new empty PDF document, i.e. if saved afterwards, it must be given a .pdf
extension.

• Document now accepts all of the following formats (Document and open are synonyms):

– open(),

– open(filename) (equivalent to open(filename, None)),

– open(filetype, area) (equivalent to open(filetype, stream = area)).

Type of memory area stream may be bytes or bytearray. Thus, e.g. area = open(“file.pdf”, “rb”).read() may be
used directly (without first converting it to bytearray).

• New method Document.insert_pdf() (PDFs only) inserts a range of pages from another PDF.

• Document objects doc now support the len() function: len(doc) == doc.pageCount.

• New method Document.getPageImageList() creates a list of images used on a page.

• New method Document.getPageFontList() creates a list of fonts referenced by a page.

• New pixmap constructor fitz.Pixmap(doc, xref) creates a pixmap based on an opened PDF document and an xref

number of the image.

• New pixmap constructor fitz.Pixmap(cspace, spix) creates a pixmap as a copy of another one spix with the col-
orspace converted to cspace. This works for all colorspace combinations.

• Pixmap constructor fitz.Pixmap(colorspace, width, height, samples) now allows samples to also be bytes, not
only bytearray.

Changes in Version 1.9.1

This version of PyMuPDF is based on MuPDF library source code version 1.9a published on April 21, 2016.

Please have a look at MuPDF’s website to see which changes and enhancements are contained herein.

Changes in version 1.9.1 compared to version 1.8.0 are the following:

• New methods get_area() for both fitz.Rect and fitz.IRect

• Pixmaps can now be created directly from files using the new constructor fitz.Pixmap(filename).

• The Pixmap constructor fitz.Pixmap(image) has been extended accordingly.

• fitz.Rect can now be created with all possible combinations of points and coordinates.

• PyMuPDF classes and methods now all contain __doc__ strings, most of them created by SWIG automatically.
While the PyMuPDF documentation certainly is more detailed, this feature should help a lot when programming
in Python-aware IDEs.

• A new document method of getPermits() returns the permissions associated with the current access to the docu-
ment (print, edit, annotate, copy), as a Python dictionary.

• The identity matrix fitz.Identity is now immutable.

516
Chapter 29. Change Log

PyMuPDF Documentation, Release 1.23.25

• The new document method select(list) removes all pages from a document that are not contained in the list. Pages
can also be duplicated and re-arranged.

• Various improvements and new members in our demo and examples collections. Perhaps most prominently:
PDF_display now supports scrolling with the mouse wheel, and there is a new example program wxTableExtract
which allows to graphically identify and extract table data in documents.

• fitz.open() is now an alias of fitz.Document().

• New pixmap method tobytes() which will return a bytearray formatted as a PNG image of the pixmap.

• New pixmap method samplesRGB() providing a samples version with alpha bytes stripped off (RGB colorspaces
only).

• New pixmap method samplesAlpha() providing the alpha bytes only of the samples area.

• New iterator fitz.Pages(doc) over a document’s set of pages.

• New matrix methods invert() (calculate inverted matrix), concat() (calculate matrix product), pretranslate() (per-
form a shift operation).

• New IRect methods intersect() (intersection with another rectangle), translate() (perform a shift operation).

• New Rect methods intersect() (intersection with another rectangle), transform() (transformation with a matrix),
include_point() (enlarge rectangle to also contain a point), include_rect() (enlarge rectangle to also contain an-
other one).

• Documented Point.transform() (transform a point with a matrix).

• Matrix, IRect, Rect and Point classes now support compact, algebraic formulations for manipulating such objects.

• Incremental saves for changes are possible now using the call pattern doc.save(doc.name, incremental=True).

• A PDF’s metadata can now be deleted, set or changed by document method set_metadata(). Supports incremental
saves.

• A PDF’s bookmarks (or table of contents) can now be deleted, set or changed with the entries of a list using
document method set_toc(list). Supports incremental saves.

This documentation covers all versions up to 1.23.25.

517

PyMuPDF Documentation, Release 1.23.25

518
Chapter 29. Change Log

CHAPTER

THIRTY

DEPRECATED NAMES

The original naming convention for methods and properties has been “camelCase”. Since its creation around 2013,
a tremendous increase of functionality has happened in PyMuPDF – and with it a corresponding increase in classes,
methods and properties. In too many cases, this has led to non-intuitive, illogical and ugly names, difficult to memorize
or guess.

A few versions ago, I therefore decided to shift gears and switch to a “snake_cased” naming standard. This was a major
effort, which needed a step-wise approach. I think am done with it now (version 1.18.14).

The following list maps deprecated names to their new versions.
For example, property pageCount became

page_count in the Document class. There also are less obvious name changes, e.g. method getPNGdata was re-
named to tobytes in the Pixmap class.

Names of classes (camel case) and package-wide constants (the majority is upper case) remain untouched.

Old names will remain available as deprecated aliases through MuPDF version 1.19.0 and be removed in the version
that follows it - probably version 1.20.0, but this depends on upstream decisions (MuPDF).

Starting with version 1.19.0, we will issue deprecation warnings on sys.stderr like Deprecation:
'newPage'
removed from class 'Document' after v1.19.0 - use 'new_page'. when aliased methods are being used.
Using a deprecated property will not cause this type of warning.

Starting immediately, all deprecated objects (methods and properties) will show a copy of the original’s docstring,
prefixed with the deprecation message, for example:

>>> print(fitz.Document.pageCount.__doc__)
*** Deprecated and removed in version following 1.19.0 - use 'page_count'. ***
Number of pages.
>>> print(fitz.Document.newPage.__doc__)
*** Deprecated and removed in version following 1.19.0 - use 'new_page'. ***
Create and return a new page object.

Args:

pno: (int) insert before this page. Default: after last page.
width: (float) page width in points. Default: 595 (ISO A4 width).
height: (float) page height in points. Default 842 (ISO A4 height).

Returns:

A Page object.

There is a utility script alias-changer.py which can be used to do mass-renames in your scripts. It accepts either a
single file or a folder as argument. If a folder is supplied, all its Python files and those of its subfolders are changed.
Optionally, backups of the scripts can be taken.

Deprecated names are not separately documented. The following list will help you find the documentation of the
original.

519

PyMuPDF Documentation, Release 1.23.25

Note: This is automatically generated. One or two items refer to yet undocumented methods - please simply ignore
them.

• _isWrapped – Page.is_wrapped

• addCaretAnnot – Page.add_caret_annot()

• addCircleAnnot – Page.add_circle_annot()

• addFileAnnot – Page.add_file_annot()

• addFreetextAnnot – Page.add_freetext_annot()

• addHighlightAnnot – Page.add_highlight_annot()

• addInkAnnot – Page.add_ink_annot()

• addLineAnnot – Page.add_line_annot()

• addPolygonAnnot – Page.add_polygon_annot()

• addPolylineAnnot – Page.add_polyline_annot()

• addRectAnnot – Page.add_rect_annot()

• addRedactAnnot – Page.add_redact_annot()

• addSquigglyAnnot – Page.add_squiggly_annot()

• addStampAnnot – Page.add_stamp_annot()

• addStrikeoutAnnot – Page.add_strikeout_annot()

• addTextAnnot – Page.add_text_annot()

• addUnderlineAnnot – Page.add_underline_annot()

• addWidget – Page.add_widget()

• chapterCount – Document.chapter_count

• chapterPageCount – Document.chapter_page_count()

• cleanContents – Page.clean_contents()

• clearWith – Pixmap.clear_with()

• convertToPDF – Document.convert_to_pdf()

• copyPage – Document.copy_page()

• copyPixmap – Pixmap.copy()

• CropBox – Page.cropbox

• CropBoxPosition – Page.cropbox_position

• deleteAnnot – Page.delete_annot()

• deleteLink – Page.delete_link()

• deletePage – Document.delete_page()

• deletePageRange – Document.delete_pages()

• deleteWidget – Page.delete_widget()

• derotationMatrix – Page.derotation_matrix

520
Chapter 30. Deprecated Names

PyMuPDF Documentation, Release 1.23.25

• drawBezier – Page.draw_bezier()

• drawBezier – Shape.draw_bezier()

• drawCircle – Page.draw_circle()

• drawCircle – Shape.draw_circle()

• drawCurve – Page.draw_curve()

• drawCurve – Shape.draw_curve()

• drawLine – Page.draw_line()

• drawLine – Shape.draw_line()

• drawOval – Page.draw_oval()

• drawOval – Shape.draw_oval()

• drawPolyline – Page.draw_polyline()

• drawPolyline – Shape.draw_polyline()

• drawQuad – Page.draw_quad()

• drawQuad – Shape.draw_quad()

• drawRect – Page.draw_rect()

• drawRect – Shape.draw_rect()

• drawSector – Page.draw_sector()

• drawSector – Shape.draw_sector()

• drawSquiggle – Page.draw_squiggle()

• drawSquiggle – Shape.draw_squiggle()

• drawZigzag – Page.draw_zigzag()

• drawZigzag – Shape.draw_zigzag()

• embeddedFileAdd – Document.embfile_add()

• embeddedFileCount – Document.embfile_count()

• embeddedFileDel – Document.embfile_del()

• embeddedFileGet – Document.embfile_get()

• embeddedFileInfo – Document.embfile_info()

• embeddedFileNames – Document.embfile_names()

• embeddedFileUpd – Document.embfile_upd()

• extractFont – Document.extract_font()

• extractImage – Document.extract_image()

• fileGet – Annot.get_file()

• fileUpd – Annot.update_file()

• fillTextbox – TextWriter.fill_textbox()

• findBookmark – Document.find_bookmark()

• firstAnnot – Page.first_annot

521

PyMuPDF Documentation, Release 1.23.25

• firstLink – Page.first_link

• firstWidget – Page.first_widget

• fullcopyPage – Document.fullcopy_page()

• gammaWith – Pixmap.gamma_with()

• getArea – Rect.get_area()

• getArea – IRect.get_area()

• getCharWidths – Document.get_char_widths()

• getContents – Page.get_contents()

• getDisplayList – Page.get_displaylist()

• getDrawings – Page.get_drawings()

• getFontList – Page.get_fonts()

• getImageBbox – Page.get_image_bbox()

• getImageData – Pixmap.tobytes()

• getImageList – Page.get_images()

• getLinks – Page.get_links()

• getOCGs – Document.get_ocgs()

• getPageFontList – Document.get_page_fonts()

• getPageImageList – Document.get_page_images()

• getPagePixmap – Document.get_page_pixmap()

• getPageText – Document.get_page_text()

• getPageXObjectList – Document.get_page_xobjects()

• getPDFnow – get_pdf_now()

• getPDFstr – get_pdf_str()

• getPixmap – Page.get_pixmap()

• getPixmap – Annot.get_pixmap()

• getPixmap – DisplayList.get_pixmap()

• getPNGData – Pixmap.tobytes()

• getPNGdata – Pixmap.tobytes()

• getRectArea – Rect.get_area()

• getRectArea – IRect.get_area()

• getSigFlags – Document.get_sigflags()

• getSVGimage – Page.get_svg_image()

• getText – Page.get_text()

• getText – Annot.get_text()

• getTextBlocks – Page.get_text_blocks()

• getTextbox – Page.get_textbox()

522
Chapter 30. Deprecated Names

PyMuPDF Documentation, Release 1.23.25

• getTextbox – Annot.get_textbox()

• getTextLength – get_text_length()

• getTextPage – Page.get_textpage()

• getTextPage – Annot.get_textpage()

• getTextPage – DisplayList.get_textpage()

• getTextWords – Page.get_text_words()

• getToC – Document.get_toc()

• getXmlMetadata – Document.get_xml_metadata()

• ImageProperties – image_properties()

• includePoint – Rect.include_point()

• includePoint – IRect.include_point()

• includeRect – Rect.include_rect()

• includeRect – IRect.include_rect()

• insertFont – Page.insert_font()

• insertImage – Page.insert_image()

• insertLink – Page.insert_link()

• insertPage – Document.insert_page()

• insertPDF – Document.insert_pdf()

• insertText – Page.insert_text()

• insertText – Shape.insert_text()

• insertTextbox – Page.insert_textbox()

• insertTextbox – Shape.insert_textbox()

• invertIRect – Pixmap.invert_irect()

• isConvex – Quad.is_convex

• isDirty – Document.is_dirty

• isEmpty – Rect.is_empty

• isEmpty – IRect.is_empty

• isEmpty – Quad.is_empty

• isFormPDF – Document.is_form_pdf

• isInfinite – Rect.is_infinite

• isInfinite – IRect.is_infinite

• isPDF – Document.is_pdf

• isRectangular – Quad.is_rectangular

• isRectilinear – Matrix.is_rectilinear

• isReflowable – Document.is_reflowable

• isRepaired – Document.is_repaired

523

PyMuPDF Documentation, Release 1.23.25

• isStream – Document.is_stream()

• lastLocation – Document.last_location

• lineEnds – Annot.line_ends

• loadAnnot – Page.load_annot()

• loadLinks – Page.load_links()

• loadPage – Document.load_page()

• makeBookmark – Document.make_bookmark()

• MediaBox – Page.mediabox

• MediaBoxSize – Page.mediabox_size

• metadataXML – Document.xref_xml_metadata()

• movePage – Document.move_page()

• needsPass – Document.needs_pass

• newPage – Document.new_page()

• newShape – Page.new_shape()

• nextLocation – Document.next_location()

• pageCount – Document.page_count

• pageCropBox – Document.page_cropbox()

• pageXref – Document.page_xref()

• PaperRect – paper_rect()

• PaperSize – paper_size()

• paperSizes – paper_sizes

• PDFCatalog – Document.pdf_catalog()

• PDFTrailer – Document.pdf_trailer()

• pillowData – Pixmap.pil_tobytes()

• pillowWrite – Pixmap.pil_save()

• planishLine – planish_line()

• preRotate – Matrix.prerotate()

• preScale – Matrix.prescale()

• preShear – Matrix.preshear()

• preTranslate – Matrix.pretranslate()

• previousLocation – Document.prev_location()

• readContents – Page.read_contents()

• resolveLink – Document.resolve_link()

• rotationMatrix – Page.rotation_matrix

• searchFor – Page.search_for()

• searchPageFor – Document.search_page_for()

524
Chapter 30. Deprecated Names

PyMuPDF Documentation, Release 1.23.25

• setAlpha – Pixmap.set_alpha()

• setBlendMode – Annot.set_blendmode()

• setBorder – Annot.set_border()

• setColors – Annot.set_colors()

• setCropBox – Page.set_cropbox()

• setFlags – Annot.set_flags()

• setInfo – Annot.set_info()

• setLanguage – Document.set_language()

• setLineEnds – Annot.set_line_ends()

• setMediaBox – Page.set_mediabox()

• setMetadata – Document.set_metadata()

• setName – Annot.set_name()

• setOC – Annot.set_oc()

• setOpacity – Annot.set_opacity()

• setOrigin – Pixmap.set_origin()

• setPixel – Pixmap.set_pixel()

• setRect – Annot.set_rect()

• setRect – Pixmap.set_rect()

• setResolution – Pixmap.set_dpi()

• setRotation – Page.set_rotation()

• setToC – Document.set_toc()

• setXmlMetadata – Document.set_xml_metadata()

• showPDFpage – Page.show_pdf_page()

• soundGet – Annot.get_sound()

• tintWith – Pixmap.tint_with()

• transformationMatrix – Page.transformation_matrix

• updateLink – Page.update_link()

• updateObject – Document.update_object()

• updateStream – Document.update_stream()

• wrapContents – Page.wrap_contents()

• writeImage – Pixmap.save()

• writePNG – Pixmap.save()

• writeText – Page.write_text()

• writeText – TextWriter.write_text()

• xrefLength – Document.xref_length()

• xrefObject – Document.xref_object()

525

PyMuPDF Documentation, Release 1.23.25

• xrefStream – Document.xref_stream()

• xrefStreamRaw – Document.xref_stream_raw()

This documentation covers all versions up to 1.23.25.

526
Chapter 30. Deprecated Names

CHAPTER

THIRTYONE

FIND OUT ABOUT PYMUPDF UTILITIES

The GitHub repository PyMuPDF-Utilities contains a full range of examples, demonstrations and use cases.

527

PyMuPDF Documentation, Release 1.23.25

528
Chapter 31. Find out about PyMuPDF Utilities

CHAPTER

THIRTYTWO

DO YOU NEED PDF TO DOCX CONVERSION?

We recommend the pdf2docx library which uses PyMuPDF and the python-docx library to provide simple document
conversion from PDF to DOCX format.

This documentation covers all versions up to 1.23.25.

529

PyMuPDF Documentation, Release 1.23.25

530
Chapter 32. Do you need PDF to DOCX conversion?

INDEX

Symbols
__init__() (Archive method), 186
__init__() (Colorspace method), 188
__init__() (Device method), 422
__init__() (DisplayList method), 189
__init__() (Document method), 193
__init__() (DocumentWriter method), 239
__init__() (IRect method), 248
__init__() (Matrix method), 257
__init__() (Pixmap method), 312–314
__init__() (Point method), 326
__init__() (Quad method), 329
__init__() (Rect method), 333, 334
__init__() (Shape method), 339
__init__() (Story method), 356
__init__() (TextWriter method), 374
_isWrapped, 520

A
a (Matrix attribute), 259
abs_unit (Point attribute), 327
add() (Archive method), 187
add_bullet_list() (Xml method), 390
add_caret_annot() (Page method), 267
add_circle_annot() (Page method), 269
add_class() (Xml method), 393
add_code() (Xml method), 391
add_codeblock() (Xml method), 390
add_description_list() (Xml method), 390
add_division() (Xml method), 390
add_file_annot
examples, 60

add_file_annot() (Page method), 268
add_freetext_annot
align, 267
border_color, 267
color, 267
fill_color, 267
fontname, 267
fontsize, 267
rect, 267
rotate, 267

text_color, 267

add_freetext_annot() (Page method), 267
add_header() (Xml method), 390
add_highlight_annot() (Page method), 271
add_horizontal_line() (Xml method), 390
add_image() (Xml method), 390
add_ink_annot() (Page method), 269
add_kbd() (Xml method), 391
add_layer() (Document method), 196
add_line_annot() (Page method), 269
add_link() (Xml method), 390
add_number_list() (Xml method), 391
add_ocg() (Document method), 196
add_paragraph() (Xml method), 391
add_polygon_annot() (Page method), 271
add_polyline_annot() (Page method), 271
add_rect_annot() (Page method), 269
add_redact_annot() (Page method), 270
add_samp() (Xml method), 391
add_span() (Xml method), 391
add_squiggly_annot() (Page method), 271
add_stamp_annot() (Page method), 275
add_strikeout_annot() (Page method), 271
add_style() (Xml method), 393
add_subscript() (Xml method), 391
add_superscript() (Xml method), 391
add_text() (Xml method), 391
add_text_annot() (Page method), 267
add_underline_annot() (Page method), 271
add_var() (Xml method), 391
add_widget() (Page method), 276
addCaretAnnot, 520
addCircleAnnot, 520
addFileAnnot, 520
addFreetextAnnot, 520
addHighlightAnnot, 520
addInkAnnot, 520
addLineAnnot, 520
addPolygonAnnot, 520
addPolylineAnnot, 520
addRectAnnot, 520
addRedactAnnot, 520

531

PyMuPDF Documentation, Release 1.23.25

addSquigglyAnnot, 520
addStampAnnot, 520
addStrikeoutAnnot, 520
addTextAnnot, 520
addUnderlineAnnot, 520
addWidget, 520
adjust
insert_htmlbox, 281

adobe_glyph_names(), 406
adobe_glyph_unicodes(), 406
align
add_freetext_annot, 267
insert_textbox, 281, 347

alpha
Annot.get_pixmap, 174
DisplayList.get_pixmap, 190
get_pixmap, 298

alpha (Pixmap attribute), 322
Annot (built-in class), 174
Annot.get_pixmap
alpha, 174
colorspace, 174
dpi, 174
matrix, 174

Annot.get_text
blocks, 174
clip, 174
dict, 174
flags, 174
html, 174
json, 174
rawdict, 174
text, 174
words, 174
xhtml, 174
xml, 174

Annot.update
blend_mode, 179
border_color, 179
cross_out, 179
fill_color, 179
fontsize, 179
rotate, 179
text_color, 179

Annot.update_file
buffer, 181
desc, 181
filename, 181
ufilename, 181

annot_names() (Page method), 300
annot_xrefs() (Page method), 300
annots
Document.insert_file, 220
Document.insert_pdf, 220

get_pixmap, 298

annots() (Page method), 279
append
Document.insert_file, 220
Document.insert_pdf, 220

append() (TextWriter method), 374
append_child() (Xml method), 394
appendv() (TextWriter method), 375
apply_redactions() (Page method), 277
archive
insert_htmlbox, 281

Archive (built-in class), 186
artbox (Page attribute), 307
ascender (Font attribute), 246
attach
embed file, 18, 19

authenticate() (Document method), 200

B
b (Matrix attribute), 259
Base14_Fonts (built-in variable), 433
bbox (Font attribute), 246
begin_page() (DocumentWriter method), 239
bl (IRect attribute), 250
bl (Rect attribute), 336
bleedbox (Page attribute), 307
blend_mode
Annot.update, 179

blendmode (Annot attribute), 177
blocks
Annot.get_text, 174
Page.get_text, 289

body (Story attribute), 358
border (Annot attribute), 184
border (Link attribute), 253
border_color
add_freetext_annot, 267
Annot.update, 179

border_color (Widget attribute), 385
border_dashes (Widget attribute), 385
border_style (Widget attribute), 385
border_width
insert_text, 280, 346
insert_textbox, 281, 347

border_width (Widget attribute), 385
bottom_left (IRect attribute), 250
bottom_left (Rect attribute), 336
bottom_right (IRect attribute), 250
bottom_right (Rect attribute), 337
bound() (Page method), 266
br (IRect attribute), 250
br (Rect attribute), 337
breadth
draw_squiggle, 283, 339

532
Index

PyMuPDF Documentation, Release 1.23.25

draw_zigzag, 283, 341

buffer
Annot.update_file, 181

buffer (Font attribute), 246
button_caption (Widget attribute), 386
button_states() (Widget method), 384

C
c (Matrix attribute), 259
can_save_incrementally() (Document method), 217
catalog (built-in variable), 427
chapter_count (Document attribute), 236
chapter_page_count() (Document method), 202
chapterCount, 520
chapterPageCount, 520
char_lengths() (Font method), 245
choice_values (Widget attribute), 385
clean_contents() (Annot method), 419
clean_contents() (Page method), 418
cleanContents, 520
clear_with() (Pixmap method), 314
clearWith, 520
clip
Annot.get_text, 174
DisplayList.get_pixmap, 190
get_pixmap, 298
get_textpage, 291
Page.get_text, 289
search_for, 304
show_pdf_page, 302

clone() (Xml method), 394
close() (Document method), 226
close() (DocumentWriter method), 240
closePath
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345

color
add_freetext_annot, 267
Document.insert_page, 221
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283

draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345
insert_text, 280, 346
insert_textbox, 281, 347

color (TextWriter attribute), 377
color_count() (Pixmap method), 321
color_topusage() (Pixmap method), 321
colors (Annot attribute), 183
colors (Link attribute), 253
colorspace
Annot.get_pixmap, 174
DisplayList.get_pixmap, 190
get_pixmap, 298

Colorspace (built-in class), 188
colorspace (Pixmap attribute), 322
commit
overlay, 349

commit() (Shape method), 349
concat() (Matrix method), 258
contains() (IRect method), 249
contains() (Rect method), 335
contents (built-in variable), 428
ConversionHeader(), 413
ConversionTrailer(), 413
convert_to_pdf
examples, 57

convert_to_pdf() (Document method), 205
convertToPDF, 520
coordinate (built-in variable), 427
copy
examples, 65, 66

copy() (Pixmap method), 317
copy_page() (Document method), 222
copyPage, 520
copyPixmap, 520
create_element() (Xml method), 394
create_text_node() (Xml method), 394
CropBox, 520
CropBox (built-in variable), 427
cropbox (Page attribute), 307
cropbox_position (Page attribute), 307
CropBoxPosition, 520
cross_out
Annot.update, 179

CS_CMYK (built-in variable), 433
CS_GRAY (built-in variable), 433
CS_RGB (built-in variable), 433
csCMYK (built-in variable), 433
csGRAY (built-in variable), 433

Index
533

PyMuPDF Documentation, Release 1.23.25

csRGB (built-in variable), 433
css
insert_htmlbox, 281

css_for_pymupdf_font(), 407

D
d (Matrix attribute), 259
dashes
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345

debug() (Xml method), 394
del_toc_item() (Document method), 215
del_xml_metadata() (Document method), 413
delete_annot() (Page method), 276
delete_image
xref, 289

delete_image() (Page method), 289
delete_link() (Page method), 278
delete_page() (Document method), 221
delete_pages() (Document method), 222
delete_responses() (Annot method), 179
delete_widget() (Page method), 276
deleteAnnot, 520
deleteLink, 520
deletePage, 520
deletePageRange, 520
deleteWidget, 520
delimiters
Page.get_text, 289

derotation_matrix (Page attribute), 308
derotationMatrix, 520
desc
Annot.update_file, 181
Document.embfile_add, 224
Document.embfile_upd, 226

descender (Font attribute), 247
dest (Link attribute), 254
dest (linkDest attribute), 255
dest (Outline attribute), 263
Device (built-in class), 422
dict
Annot.get_text, 174
Page.get_text, 289

dictionary (built-in variable), 428

digest (Pixmap attribute), 322
DisplayList (built-in class), 189
DisplayList.get_pixmap
alpha, 190
clip, 190
colorspace, 190
matrix, 190

distance_to() (Point method), 326
doc (Shape attribute), 349
Document
filename, 193
filetype, 193
fontsize, 193
open, 193
rect, 193
stream, 193

Document (built-in class), 193
Document.convert_to_pdf
from_page, 205
rotate, 205
to_page, 205

Document.embfile_add
desc, 224
filename, 224
ufilename, 224

Document.embfile_upd
desc, 226
filename, 226
ufilename, 226

Document.insert_file
annots, 220
append, 220
from_page, 220
join, 220
links, 220
merge, 220
rotate, 220
show_progress, 220
start_at, 220
to_page, 220

Document.insert_page
color, 221
fontfile, 221
fontname, 221
fontsize, 221
height, 221
width, 221

Document.insert_pdf
annots, 220
append, 220
from_page, 220
join, 220
links, 220
merge, 220

534
Index

PyMuPDF Documentation, Release 1.23.25

rotate, 220
show_progress, 220
start_at, 220
to_page, 220

Document.layout
fontsize, 213
height, 213
rect, 213
width, 213

Document.new_page
height, 221
width, 221

DocumentWriter (built-in class), 239
down (Outline attribute), 262
dpi
Annot.get_pixmap, 174
get_pixmap, 298
get_textpage_ocr, 291

draw() (Story method), 358
draw_bezier
closePath, 284
color, 284
dashes, 284
fill, 284
fill_opacity, 284
lineCap, 284
lineJoin, 284
morph, 284
oc, 284
overlay, 284
stroke_opacity, 284
width, 284

draw_bezier() (Page method), 284
draw_bezier() (Shape method), 341
draw_circle
closePath, 283
color, 283
dashes, 283
fill, 283
fill_opacity, 283
lineCap, 283
lineJoin, 283
morph, 283
oc, 283
overlay, 283
stroke_opacity, 283
width, 283

draw_circle() (Page method), 283
draw_circle() (Shape method), 342
draw_cont (Shape attribute), 350
draw_curve
closePath, 284
color, 284
dashes, 284

fill, 284
fill_opacity, 284
lineCap, 284
lineJoin, 284
morph, 284
oc, 284
overlay, 284
stroke_opacity, 284
width, 284

draw_curve() (Page method), 284
draw_curve() (Shape method), 343
draw_line
closePath, 283
color, 283
dashes, 283
fill, 283
fill_opacity, 283
lineCap, 283
lineJoin, 283
morph, 283
oc, 283
overlay, 283
stroke_opacity, 283
width, 283

draw_line() (Page method), 283
draw_line() (Shape method), 339
draw_oval
closePath, 283
color, 283
dashes, 283
fill, 283
fill_opacity, 283
lineCap, 283
lineJoin, 283
morph, 283
oc, 283
overlay, 283
stroke_opacity, 283
width, 283

draw_oval() (Page method), 283
draw_oval() (Shape method), 342
draw_polyline
closePath, 284
color, 284
dashes, 284
fill, 284
fill_opacity, 284
lineCap, 284
lineJoin, 284
morph, 284
oc, 284
overlay, 284
stroke_opacity, 284
width, 284

Index
535

PyMuPDF Documentation, Release 1.23.25

draw_polyline() (Page method), 284
draw_polyline() (Shape method), 341
draw_quad
closePath, 284
color, 284
dashes, 284
fill, 284
fill_opacity, 284
lineCap, 284
lineJoin, 284
morph, 284
oc, 284
overlay, 284
stroke_opacity, 284
width, 284

draw_quad() (Page method), 284
draw_quad() (Shape method), 344
draw_rect
closePath, 284
color, 284
dashes, 284
fill, 284
fill_opacity, 284
lineCap, 284
lineJoin, 284
morph, 284
oc, 284
overlay, 284
radius, 284
stroke_opacity, 284
width, 284

draw_rect() (Page method), 284
draw_rect() (Shape method), 344
draw_sector
closePath, 283
color, 283
dashes, 283
fill, 283
fill_opacity, 283
fullSector, 283, 343
lineCap, 283
lineJoin, 283
morph, 283
oc, 283
overlay, 283
stroke_opacity, 283
width, 283

draw_sector() (Page method), 283
draw_sector() (Shape method), 343
draw_squiggle
breadth, 283, 339
closePath, 283
color, 283
dashes, 283

fill, 283
fill_opacity, 283
lineCap, 283
lineJoin, 283
morph, 283
oc, 283
overlay, 283
stroke_opacity, 283
width, 283

draw_squiggle() (Page method), 283
draw_squiggle() (Shape method), 339
draw_zigzag
breadth, 283, 341
closePath, 283
color, 283
dashes, 283
fill, 283
fill_opacity, 283
lineCap, 283
lineJoin, 283
morph, 283
oc, 283
overlay, 283
stroke_opacity, 283
width, 283

draw_zigzag() (Page method), 283
draw_zigzag() (Shape method), 341
drawBezier, 521
drawCircle, 521
drawCurve, 521
drawLine, 521
drawOval, 521
drawPolyline, 521
drawQuad, 521
drawRect, 521
drawSector, 521
drawSquiggle, 521
drawZigzag, 521

E
e (Matrix attribute), 259
element_positions() (Story method), 358
embed
file, attach, 18, 19
PDF, picture, 60

embeddedFileAdd, 521
embeddedFileCount, 521
embeddedFileDel, 521
embeddedFileGet, 521
embeddedFileInfo, 521
embeddedFileNames, 521
embeddedFileUpd, 521
embfile_add
examples, 60, 63

536
Index

PyMuPDF Documentation, Release 1.23.25

embfile_add() (Document method), 224
embfile_count() (Document method), 224
embfile_del() (Document method), 225
embfile_get() (Document method), 224
embfile_info() (Document method), 225
embfile_names() (Document method), 225
embfile_upd() (Document method), 226
EMPTY_IRECT(), 422
EMPTY_QUAD(), 422
EMPTY_RECT(), 422
encoding
insert_font, 285
insert_text, 280, 346
insert_textbox, 281, 347

end_page() (DocumentWriter method), 239
entry_list (Archive attribute), 188
even_odd
finish, 345

examples
add_file_annot, 60
convert_to_pdf, 57
copy, 65, 66
embfile_add, 60, 63
extract_image, 58
insert_image, 60, 63
invert_irect, 66
JPEG, 63
PhotoImage, 63
Photoshop, 63
Postscript, 63
save, 63, 66
set_rect, 66
show_pdf_page, 60, 63
tobytes, 63

expandtabs
insert_textbox, 281, 347

extract
image non-PDF, 57
image PDF, 58
table, 39
text rectangle, 38

extract_font() (Document method), 230
extract_image
examples, 58

extract_image() (Document method), 229
extractBLOCKS() (TextPage method), 363
extractDICT() (TextPage method), 364
extractFont, 521
extractHTML() (TextPage method), 364
extractImage, 521
extractJSON() (TextPage method), 364
extractRAWDICT() (TextPage method), 365
extractRAWJSON() (TextPage method), 365
extractTEXT() (TextPage method), 363

extractText() (TextPage method), 363
extractWORDS() (TextPage method), 363
extractXHTML() (TextPage method), 364
extractXML() (TextPage method), 365
ez_save() (Document method), 219

F
f (Matrix attribute), 259
field_flags (Widget attribute), 386
field_label (Widget attribute), 385
field_name (Widget attribute), 385
field_type (Widget attribute), 386
field_type_string (Widget attribute), 386
field_value (Widget attribute), 385
file
attach embed, 18, 19

file extension
wrong, 35

file_info (Annot attribute), 180
fileGet, 521
filename
Annot.update_file, 181
Document, 193
Document.embfile_add, 224
Document.embfile_upd, 226
insert_image, 286
open, 193
replace_image, 288

fileSpec (linkDest attribute), 255
filetype
Document, 193
open, 193

fileUpd, 521
fill
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345
insert_text, 280, 346
insert_textbox, 281, 347

fill_color
add_freetext_annot, 267
Annot.update, 179

fill_color (Widget attribute), 386
fill_opacity
draw_bezier, 284

Index
537

PyMuPDF Documentation, Release 1.23.25

draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345
insert_text, 280, 346
insert_textbox, 281

fill_textbox() (TextWriter method), 375
fillTextbox, 521
find() (Xml method), 394
find_bookmark() (Document method), 201
find_next() (Xml method), 395
find_tables() (Page method), 273
findBookmark, 521
finish
closePath, 345
color, 345
dashes, 345
even_odd, 345
fill, 345
fill_opacity, 345
lineCap, 345
lineJoin, 345
morph, 345
oc, 345
stroke_opacity, 345
width, 345

finish() (Shape method), 345
first_annot (Page attribute), 308
first_child (Xml attribute), 395
first_link (Page attribute), 308
first_widget (Page attribute), 308
firstAnnot, 521
firstLink, 522
firstWidget, 522
fit() (Story method), 360
fit_height() (Story method), 361
fit_scale() (Story method), 360
fit_width() (Story method), 361
fitz_config (Tools attribute), 381
fitz_fontdescriptors, 409
flags
Annot.get_text, 174
get_textpage, 291
get_textpage_ocr, 291
Page.get_text, 289
search_for, 304

flags (Annot attribute), 182

flags (Font attribute), 246
flags (Link attribute), 253
flags (linkDest attribute), 255
Font (built-in class), 240
fontbuffer
insert_font, 285

fontfile
Document.insert_page, 221
insert_font, 285
insert_text, 280, 346
insert_textbox, 281, 347

fontname
add_freetext_annot, 267
Document.insert_page, 221
insert_font, 285
insert_text, 280, 346
insert_textbox, 281, 347

fontsize
add_freetext_annot, 267
Annot.update, 179
Document, 193
Document.insert_page, 221
Document.layout, 213
insert_text, 280, 346
insert_textbox, 281, 347
open, 193

fontsize (built-in variable), 430
FormFonts (Document attribute), 236
from_page
Document.convert_to_pdf, 205
Document.insert_file, 220
Document.insert_pdf, 220

full
get_textpage_ocr, 291

fullcopy_page() (Document method), 223
fullcopyPage, 522
fullSector
draw_sector, 283, 343

G
gamma_with() (Pixmap method), 315
gammaWith, 522
gen_id() (Tools method), 378
get_area() (IRect method), 248
get_area() (Rect method), 335
get_attribute_value() (Xml method), 391
get_attributes() (Xml method), 391
get_bboxlog() (Page method), 414
get_cdrawings() (Page method), 295
get_char_widths() (Document method), 419
get_contents() (Page method), 418
get_displaylist() (Page method), 418
get_drawings() (Page method), 292
get_file() (Annot method), 181

538
Index

PyMuPDF Documentation, Release 1.23.25

get_fonts() (Page method), 295
get_image_bbox
transform, 297

get_image_bbox() (Page method), 297
get_image_info
hashes, 295
xrefs, 295

get_image_info() (Page method), 295
get_image_rects
transform, 296

get_image_rects() (Page method), 296
get_images() (Page method), 295
get_label() (Page method), 278
get_layer() (Document method), 198
get_layers() (Document method), 196
get_links() (Page method), 278
get_new_xref() (Document method), 420
get_oc() (Annot method), 176
get_oc() (Document method), 195
get_ocgs() (Document method), 199
get_ocmd() (Document method), 198
get_page_fonts() (Document method), 211
get_page_images() (Document method), 211
get_page_labels() (Document method), 200
get_page_numbers() (Document method), 200
get_page_pixmap() (Document method), 210
get_page_text() (Document method), 212
get_page_xobjects() (Document method), 210
get_pdf_now(), 410
get_pdf_str(), 411
get_pixmap
alpha, 298
annots, 298
clip, 298
colorspace, 298
dpi, 298
matrix, 298

get_pixmap() (Annot method), 174
get_pixmap() (DisplayList method), 190
get_pixmap() (Page method), 298
get_sigflags() (Document method), 224
get_sound() (Annot method), 181
get_svg_image
matrix, 298

get_svg_image() (Page method), 298
get_tessdata(), 421
get_text() (Annot method), 174
get_text() (Page method), 289
get_text_blocks() (Page method), 417
get_text_length(), 410
get_text_words() (Page method), 418
get_textbox
rect, 290
textpage, 290

get_textbox() (Annot method), 175
get_textbox() (Page method), 290
get_textpage
clip, 291
flags, 291

get_textpage() (DisplayList method), 190
get_textpage() (Page method), 291
get_textpage_ocr
dpi, 291
flags, 291
full, 291
language, 291
tessdata, 291

get_textpage_ocr() (Page method), 291
get_texttrace() (Page method), 414
get_toc() (Document method), 206
get_xml_metadata() (Document method), 213
get_xobjects() (Page method), 296
getArea, 522
getCharWidths, 522
getContents, 522
getDisplayList, 522
getDrawings, 522
getFontList, 522
getImageBbox, 522
getImageData, 522
getImageList, 522
getLinks, 522
getOCGs, 522
getPageFontList, 522
getPageImageList, 522
getPagePixmap, 522
getPageText, 522
getPageXObjectList, 522
getPDFnow, 522
getPDFstr, 522
getPixmap, 522
getPNGData, 522
getPNGdata, 522
getRectArea, 522
getSigFlags, 522
getSVGimage, 522
getText, 522
getTextBlocks, 522
getTextbox, 522, 523
getTextLength, 523
getTextPage, 523
getTextWords, 523
getToC, 523
getXmlMetadata, 523
glyph_advance() (Font method), 243
glyph_bbox() (Font method), 244
glyph_count (Font attribute), 246
glyph_name_to_unicode(), 405

Index
539

PyMuPDF Documentation, Release 1.23.25

glyph_name_to_unicode() (Font method), 244

H
h (Pixmap attribute), 324
has_annots() (Document method), 231
has_entry() (Archive method), 187
has_glyph() (Font method), 242
has_links() (Document method), 231
has_popup (Annot attribute), 183
hashes
get_image_info, 295

height
Document.insert_page, 221
Document.layout, 213
Document.new_page, 221
open, 193

height (IRect attribute), 251
height (Pixmap attribute), 324
height (Quad attribute), 331
height (Rect attribute), 337
height (Shape attribute), 349
html
Annot.get_text, 174
Page.get_text, 289

I
image
non-PDF, extract, 57
PDF, extract, 58
resolution, 55
SVG, vector, 63

image_profile(), 411
ImageProperties, 523
include_point() (Rect method), 335
include_rect() (Rect method), 335
includePoint, 523
includeRect, 523
INFINITE_IRECT(), 422
INFINITE_QUAD(), 422
INFINITE_RECT(), 422
info (Annot attribute), 182
inheritable (built-in variable), 427
insert_after() (Xml method), 394
insert_before() (Xml method), 394
insert_file() (Document method), 220
insert_font
encoding, 285
fontbuffer, 285
fontfile, 285
fontname, 285
set_simple, 285

insert_font() (Page method), 285
insert_htmlbox
adjust, 281

archive, 281
css, 281
morph, 281
oc, 281
opacity, 281
overlay, 281
rect, 281
rotate, 281
text, 281

insert_htmlbox() (Page method), 281
insert_image
examples, 60, 63
filename, 286
keep_proportion, 286
mask, 286
oc, 286
overlay, 286
pixmap, 286
rotate, 286
stream, 286
xref, 286

insert_image() (Page method), 286
insert_link() (Page method), 278
insert_page() (Document method), 221
insert_pdf() (Document method), 220
insert_text
border_width, 280, 346
color, 280, 346
encoding, 280, 346
fill, 280, 346
fill_opacity, 280, 346
fontfile, 280, 346
fontname, 280, 346
fontsize, 280, 346
lineheight, 346
morph, 280, 346
oc, 280, 346
overlay, 280
render_mode, 280, 346
rotate, 280, 346
stroke_opacity, 280, 346

insert_text() (Page method), 280
insert_text() (Shape method), 346
insert_textbox
align, 281, 347
border_width, 281, 347
color, 281, 347
encoding, 281, 347
expandtabs, 281, 347
fill, 281, 347
fill_opacity, 281
fontfile, 281, 347
fontname, 281, 347
fontsize, 281, 347

540
Index

PyMuPDF Documentation, Release 1.23.25

lineheight, 347
morph, 281, 347
oc, 281, 347
overlay, 281
render_mode, 281, 347
rotate, 281, 347
stroke_opacity, 281

insert_textbox() (Page method), 281
insert_textbox() (Shape method), 347
insertFont, 523
insertImage, 523
insertLink, 523
insertPage, 523
insertPDF, 523
insertText, 523
insertTextbox, 523
interpolate (Pixmap attribute), 325
intersect() (IRect method), 249
intersect() (Rect method), 334
intersects() (IRect method), 249
intersects() (Rect method), 335
invert() (Matrix method), 258
invert_irect
examples, 66

invert_irect() (Pixmap method), 317
invertIRect, 523
IRect (built-in class), 248
irect (Pixmap attribute), 322
irect (Rect attribute), 336
irect_like (built-in variable), 427
irt_xref (Annot attribute), 183
is_closed (Document attribute), 233
is_convex (Quad attribute), 330
is_dirty (Document attribute), 234
is_empty (IRect attribute), 251
is_empty (Quad attribute), 331
is_empty (Rect attribute), 337
is_encrypted (Document attribute), 235
is_external (Link attribute), 253
is_external (Outline attribute), 263
is_fast_webaccess (Document attribute), 234
is_form_pdf (Document attribute), 234
is_infinite (IRect attribute), 251
is_infinite (Rect attribute), 337
is_monochrome (Pixmap attribute), 322
is_open (Annot attribute), 184
is_open (Outline attribute), 263
is_pdf (Document attribute), 234
is_rectangular (Quad attribute), 331
is_rectilinear (Matrix attribute), 259
is_reflowable (Document attribute), 234
is_repaired (Document attribute), 234
is_signed (Widget attribute), 386
is_stream() (Document method), 420

is_text (Xml attribute), 395
is_unicolor (Pixmap attribute), 322
is_valid (Rect attribute), 338
is_wrapped (Page attribute), 417
is_writable (Font attribute), 247
isConvex, 523
isDirty, 523
isEmpty, 523
isFormPDF, 523
isInfinite, 523
isMap (linkDest attribute), 255
isPDF, 523
isRectangular, 523
isRectilinear, 523
isReflowable, 523
isRepaired, 523
isStream, 524
isUri (linkDest attribute), 255

J
join
Document.insert_file, 220
Document.insert_pdf, 220

journal_can_do() (Document method), 232
journal_enable() (Document method), 232
journal_load() (Document method), 233
journal_op_name() (Document method), 232
journal_position() (Document method), 232
journal_redo() (Document method), 233
journal_save() (Document method), 233
journal_start_op() (Document method), 232
journal_stop_op() (Document method), 232
journal_undo() (Document method), 233
JPEG
examples, 63

json
Annot.get_text, 174
Page.get_text, 289

K
keep_proportion
insert_image, 286
show_pdf_page, 302

key-value
lookup text, 37

kind (linkDest attribute), 255

L
language
get_textpage_ocr, 291

last_child (Xml attribute), 395
last_location (Document attribute), 236
last_point (TextWriter attribute), 377
lastLocation, 524

Index
541

PyMuPDF Documentation, Release 1.23.25

lastPoint (Shape attribute), 350
layer_ui_configs() (Document method), 199
layout() (Document method), 213
ligature (built-in variable), 430
line_ends (Annot attribute), 182
lineCap
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345

lineEnds, 524
lineheight
insert_text, 346
insert_textbox, 347

lineJoin
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345

Link (built-in class), 252
LINK_FLAG_B_VALID (built-in variable), 438
LINK_FLAG_FIT_H (built-in variable), 438
LINK_FLAG_FIT_V (built-in variable), 438
LINK_FLAG_L_VALID (built-in variable), 438
LINK_FLAG_R_IS_ZOOM (built-in variable), 438
LINK_FLAG_R_VALID (built-in variable), 438
LINK_FLAG_T_VALID (built-in variable), 438
LINK_GOTO (built-in variable), 437
LINK_GOTOR (built-in variable), 437
LINK_LAUNCH (built-in variable), 437
LINK_NAMED (built-in variable), 437
LINK_NONE (built-in variable), 437
LINK_URI (built-in variable), 437
linkDest (built-in class), 255
links
Document.insert_file, 220
Document.insert_pdf, 220

links() (Page method), 279

ll (Quad attribute), 330
load_annot() (Page method), 301
load_links() (Page method), 301
load_page() (Document method), 202
load_widget() (Page method), 301
loadAnnot, 524
loadLinks, 524
loadPage, 524
lookup
text key-value, 37

lr (Quad attribute), 330
lt (linkDest attribute), 255

M
make_bookmark() (Document method), 201
make_table(), 408
makeBookmark, 524
markinfo (Document attribute), 234
mask
insert_image, 286

matrix
Annot.get_pixmap, 174
DisplayList.get_pixmap, 190
get_pixmap, 298
get_svg_image, 298

Matrix (built-in class), 257
matrix_like (built-in variable), 427
MediaBox, 524
MediaBox (built-in variable), 427
mediabox (Page attribute), 307
mediabox_size (Page attribute), 307
MediaBoxSize, 524
merge
Document.insert_file, 220
Document.insert_pdf, 220

metadata (Document attribute), 235
metadataXML, 524
morph
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345
insert_htmlbox, 281
insert_text, 280, 346
insert_textbox, 281, 347

morph() (IRect method), 249

542
Index

PyMuPDF Documentation, Release 1.23.25

morph() (Quad method), 329
morph() (Rect method), 336
move_page() (Document method), 223
movePage, 524
mupdf_display_errors() (Tools method), 381
mupdf_warnings() (Tools method), 381

N
n (Colorspace attribute), 189
n (Pixmap attribute), 324
name (Colorspace attribute), 188
name (Document attribute), 236
name (Font attribute), 246
named (linkDest attribute), 256
need_appearances() (Document method), 223
needs_pass (Document attribute), 235
needsPass, 524
new_page() (Document method), 221
new_shape() (Page method), 304
newPage, 524
newShape, 524
newWindow (linkDest attribute), 256
next (Annot attribute), 182
next (Link attribute), 254
next (Outline attribute), 263
next (Widget attribute), 385
next (Xml attribute), 395
next_location() (Document method), 202
nextLocation, 524
non-PDF
extract image, 57

norm() (IRect method), 250
norm() (Matrix method), 258
norm() (Point method), 327
norm() (Rect method), 336
normalize() (IRect method), 250
normalize() (Rect method), 336
number (Page attribute), 308

O
object (built-in variable), 429
oc
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345

insert_htmlbox, 281
insert_image, 286
insert_text, 280, 346
insert_textbox, 281, 347

OCCD (built-in variable), 430
OCG (built-in variable), 430
OCMD (built-in variable), 430
OCPD (built-in variable), 430
on_state() (Widget method), 384
opacity
insert_htmlbox, 281

opacity (Annot attribute), 181
opacity (TextWriter attribute), 377
open
Document, 193
filename, 193
filetype, 193
fontsize, 193
height, 193
rect, 193
stream, 193
width, 193

Outline (built-in class), 262
outline (Document attribute), 233
outline_xref() (Document method), 215
overlay
commit, 349
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
insert_htmlbox, 281
insert_image, 286
insert_text, 280
insert_textbox, 281
show_pdf_page, 302

P
Page (built-in class), 266
page (built-in variable), 429
page (linkDest attribute), 256
page (Outline attribute), 263
page (Shape attribute), 349
Page.get_text
blocks, 289
clip, 289
delimiters, 289

Index
543

PyMuPDF Documentation, Release 1.23.25

dict, 289
flags, 289
html, 289
json, 289
rawdict, 289
sort, 289
text, 289
textpage, 289
words, 289
xhtml, 289
xml, 289

page_count (Document attribute), 236
page_cropbox() (Document method), 204
page_xref() (Document method), 204
pageCount, 524
pageCropBox, 524
pagelayout (Document attribute), 235
pagemode (Document attribute), 235
pages() (Document method), 204
pagetree (built-in variable), 429
pageXref, 524
paper_rect(), 405
paper_size(), 404
paper_sizes(), 409
PaperRect, 524
PaperSize, 524
paperSizes, 524
parent (Annot attribute), 181
parent (Page attribute), 308
Partial Pixmaps, 56
PDF
extract image, 58
picture embed, 60

pdf_catalog() (Document method), 227
pdf_trailer() (Document method), 227
PDFCatalog, 524
pdfcolor, 410
pdfocr_save() (Pixmap method), 318
pdfocr_tobytes() (Pixmap method), 319
PDFTrailer, 524
permissions (Document attribute), 235
PhotoImage
examples, 63

Photoshop
examples, 63

picture
embed PDF, 60

pil_save() (Pixmap method), 319
pil_tobytes() (Pixmap method), 320
pillowData, 524
pillowWrite, 524
pixel() (Pixmap method), 315
pixmap
insert_image, 286

replace_image, 288

Pixmap (built-in class), 312
place() (Story method), 357
planish_line(), 408
planishLine, 524
Point (built-in class), 326
point_like (built-in variable), 427
popup_rect (Annot attribute), 184
popup_xref (Annot attribute), 183
Postscript
examples, 63

preRotate, 524
prerotate() (Matrix method), 258
preScale, 524
prescale() (Matrix method), 258
preShear, 524
preshear() (Matrix method), 258
preTranslate, 524
pretranslate() (Matrix method), 258
prev_location() (Document method), 202
previous (Xml attribute), 395
previousLocation, 524

Q
Quad (built-in class), 329
quad (IRect attribute), 250
quad (Rect attribute), 337
quad_like (built-in variable), 427
quads
search_for, 304

R
radius
draw_rect, 284

rawdict
Annot.get_text, 174
Page.get_text, 289

rb (linkDest attribute), 256
read_contents() (Page method), 419
read_entry() (Archive method), 187
readContents, 524
reading order
text, 38

recover_char_quad(), 420
recover_line_quad(), 421
recover_quad(), 420
recover_span_quad(), 421
rect
add_freetext_annot, 267
Document, 193
Document.layout, 213
get_textbox, 290
insert_htmlbox, 281
open, 193

544
Index

PyMuPDF Documentation, Release 1.23.25

rect (Annot attribute), 182
Rect (built-in class), 333
rect (DisplayList attribute), 190
rect (IRect attribute), 250
rect (Link attribute), 253
rect (Page attribute), 308
rect (Quad attribute), 329
rect (Shape attribute), 350
rect (TextPage attribute), 366
rect (TextWriter attribute), 377
rect (Widget attribute), 386
rect_delta (Annot attribute), 184
rect_like (built-in variable), 427
rectangle
extract text, 38

reload_page() (Document method), 203
remove() (Xml method), 394
remove_attribute() (Xml method), 392
render_mode
insert_text, 280, 346
insert_textbox, 281, 347

replace_image
filename, 288
pixmap, 288
stream, 288
xref, 288

replace_image() (Page method), 288
reset() (Story method), 358
reset() (Widget method), 385
reset_mupdf_warnings() (Tools method), 381
resolution
image, 55
zoom, 55

resolution (built-in variable), 430
resolve_names() (Document method), 203
resolveLink, 524
resources (built-in variable), 428
root (Xml attribute), 395
rotate
add_freetext_annot, 267
Annot.update, 179
Document.convert_to_pdf, 205
Document.insert_file, 220
Document.insert_pdf, 220
insert_htmlbox, 281
insert_image, 286
insert_text, 280, 346
insert_textbox, 281, 347
set_rotation, 302
show_pdf_page, 302

rotation (Annot attribute), 181
rotation (Page attribute), 306
rotation_matrix (Page attribute), 308
rotationMatrix, 524

round() (Rect method), 334
run() (DisplayList method), 189
run() (Page method), 414

S
samples (Pixmap attribute), 322
samples_mv (Pixmap attribute), 323
samples_ptr (Pixmap attribute), 323
save
examples, 63, 66

save() (Document method), 217
save() (Pixmap method), 318
save_snapshot() (Document method), 233
saveIncr() (Document method), 219
script (Widget attribute), 386
script_blur (Widget attribute), 387
script_calc (Widget attribute), 387
script_change (Widget attribute), 387
script_focus (Widget attribute), 387
script_format (Widget attribute), 387
script_stroke (Widget attribute), 386
scrub() (Document method), 217
search() (TextPage method), 365
search_for
clip, 304
flags, 304
quads, 304
textpage, 304

search_for() (Page method), 304
search_page_for() (Document method), 220
searchFor, 524
searchPageFor, 524
select() (Document method), 213
set_aa_level() (Tools method), 381
set_align() (Xml method), 391
set_alpha() (Pixmap method), 316
set_annot_stem() (Tools method), 379
set_artbox() (Page method), 306
set_attribute() (Xml method), 391
set_bgcolor() (Xml method), 392
set_bleedbox() (Page method), 306
set_blendmode() (Annot method), 177
set_bold() (Xml method), 392
set_border() (Annot method), 178
set_border() (Link method), 252
set_color() (Xml method), 392
set_colors() (Annot method), 179
set_colors() (Link method), 252
set_columns() (Xml method), 392
set_contents() (Page method), 418
set_cropbox() (Page method), 306
set_dpi() (Pixmap method), 316
set_flags() (Annot method), 179
set_flags() (Link method), 253

Index
545

PyMuPDF Documentation, Release 1.23.25

set_font() (Xml method), 392
set_fontsize() (Xml method), 392
set_id() (Xml method), 392
set_info() (Annot method), 175
set_irt_xref() (Annot method), 176
set_italic() (Xml method), 393
set_layer() (Document method), 198
set_layer_ui_config() (Document method), 199
set_leading() (Xml method), 393
set_line_ends() (Annot method), 175
set_lineheight() (Xml method), 393
set_margins() (Xml method), 393
set_markinfo() (Document method), 214
set_mediabox() (Page method), 305
set_metadata() (Document method), 213
set_name() (Annot method), 177
set_oc() (Annot method), 176
set_oc() (Document method), 196
set_ocmd() (Document method), 197
set_opacity() (Annot method), 177
set_open() (Annot method), 176
set_origin() (Pixmap method), 316
set_page_labels() (Document method), 201
set_pagebreak_after() (Xml method), 393
set_pagebreak_before() (Xml method), 393
set_pagelayout() (Document method), 214
set_pagemode() (Document method), 214
set_pixel() (Pixmap method), 315
set_popup() (Annot method), 176
set_properties() (Xml method), 393
set_rect
examples, 66

set_rect() (Annot method), 178
set_rect() (Pixmap method), 316
set_rotation
rotate, 302

set_rotation() (Annot method), 178
set_rotation() (Page method), 302
set_simple
insert_font, 285

set_small_glyph_heights() (Tools method), 379
set_subset_fontnames() (Tools method), 379
set_text_indent() (Xml method), 393
set_toc() (Document method), 214
set_toc_item() (Document method), 215
set_trimbox() (Page method), 306
set_xml_metadata() (Document method), 214
setAlpha, 525
setBlendMode, 525
setBorder, 525
setColors, 525
setCropBox, 525
setFlags, 525
setInfo, 525

setLanguage, 525
setLineEnds, 525
setMediaBox, 525
setMetadata, 525
setName, 525
setOC, 525
setOpacity, 525
setOrigin, 525
setPixel, 525
setRect, 525
setResolution, 525
setRotation, 525
setToC, 525
setXmlMetadata, 525
Shape (built-in class), 339
show_aa_level() (Tools method), 380
show_pdf_page
clip, 302
examples, 60, 63
keep_proportion, 302
overlay, 302
rotate, 302

show_pdf_page() (Page method), 302
show_progress
Document.insert_file, 220
Document.insert_pdf, 220

showPDFpage, 525
shrink() (Pixmap method), 315
size (Pixmap attribute), 324
sort
Page.get_text, 289

soundGet, 525
sRGB_to_pdf(), 405
sRGB_to_rgb(), 405
start_at
Document.insert_file, 220
Document.insert_pdf, 220

store_maxsize (Tools attribute), 383
store_shrink() (Tools method), 380
store_size (Tools attribute), 383
Story (built-in class), 356
Story.FitResult (built-in class), 360
stream
Document, 193
insert_image, 286
open, 193
replace_image, 288

stream (built-in variable), 429
stride (Pixmap attribute), 322
stroke_opacity
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283

546
Index

PyMuPDF Documentation, Release 1.23.25

draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345
insert_text, 280, 346
insert_textbox, 281

subset_fonts() (Document method), 231
SVG
vector image, 63

switch_layer() (Document method), 196

T
table
extract, 39

tagname (Xml attribute), 395
tessdata
get_textpage_ocr, 291

TESSDATA_PREFIX, 410
text
Annot.get_text, 174
insert_htmlbox, 281
key-value, lookup, 37
Page.get_text, 289
reading order, 38
rectangle, extract, 38

text (Xml attribute), 395
TEXT_ALIGN_CENTER (built-in variable), 435
TEXT_ALIGN_JUSTIFY (built-in variable), 435
TEXT_ALIGN_LEFT (built-in variable), 435
TEXT_ALIGN_RIGHT (built-in variable), 435
text_color
add_freetext_annot, 267
Annot.update, 179

text_color (Widget attribute), 386
text_cont (Shape attribute), 350
TEXT_DEHYPHENATE (built-in variable), 436
text_font (Widget attribute), 386
text_fontsize (Widget attribute), 386
TEXT_INHIBIT_SPACES (built-in variable), 436
text_length() (Font method), 244
text_maxlen (Widget attribute), 386
TEXT_MEDIABOX_CLIP (built-in variable), 436
TEXT_PRESERVE_IMAGES (built-in variable), 436
TEXT_PRESERVE_LIGATURES (built-in variable), 435
TEXT_PRESERVE_SPANS (built-in variable), 436
TEXT_PRESERVE_WHITESPACE (built-in variable), 436
text_rect (TextWriter attribute), 377
text_type (Widget attribute), 386
TEXTFLAGS_BLOCKS (built-in variable), 436
TEXTFLAGS_DICT (built-in variable), 436

TEXTFLAGS_HTML (built-in variable), 436
TEXTFLAGS_RAWDICT (built-in variable), 436
TEXTFLAGS_SEARCH (built-in variable), 437
TEXTFLAGS_TEXT (built-in variable), 436
TEXTFLAGS_WORDS (built-in variable), 436
TEXTFLAGS_XHTML (built-in variable), 436
TEXTFLAGS_XML (built-in variable), 437
textpage
get_textbox, 290
Page.get_text, 289
search_for, 304

TextPage (built-in class), 363
TextWriter (built-in class), 374
tint_with() (Pixmap method), 314
tintWith, 525
title (Outline attribute), 263
tl (IRect attribute), 250
tl (Rect attribute), 336
to_page
Document.convert_to_pdf, 205
Document.insert_file, 220
Document.insert_pdf, 220

tobytes
examples, 63

tobytes() (Document method), 219
tobytes() (Pixmap method), 318
Tools (built-in class), 378
top_left (IRect attribute), 250
top_left (Rect attribute), 336
top_right (IRect attribute), 250
top_right (Rect attribute), 336
torect() (IRect method), 249
torect() (Rect method), 335
totalcont (Shape attribute), 350
tr (IRect attribute), 250
tr (Rect attribute), 336
trailer (built-in variable), 428
transform
get_image_bbox, 297
get_image_rects, 296

transform() (Point method), 327
transform() (Quad method), 329
transform() (Rect method), 334
transformation_matrix (Page attribute), 307
transformationMatrix, 525
trimbox (Page attribute), 307
type (Annot attribute), 182

U
ufilename
Annot.update_file, 181
Document.embfile_add, 224
Document.embfile_upd, 226

ul (Quad attribute), 330

Index
547

PyMuPDF Documentation, Release 1.23.25

unicode_to_glyph_name(), 406
unicode_to_glyph_name() (Font method), 244
unit (Point attribute), 327
unitvector (built-in variable), 430
unset_quad_corrections() (Tools method), 380
update() (Annot method), 179
update() (Widget method), 385
update_file() (Annot method), 181
update_link() (Page method), 278
update_object() (Document method), 227
update_stream() (Document method), 227
updateLink, 525
updateObject, 525
updateStream, 525
ur (Quad attribute), 330
uri (Link attribute), 253
uri (linkDest attribute), 256
uri (Outline attribute), 263

V
valid_codepoints() (Font method), 243
vector
image SVG, 63

version (built-in variable), 434
version_count (Document attribute), 235
VersionBind (built-in variable), 433
VersionDate (built-in variable), 434
VersionFitz (built-in variable), 434
vertices (Annot attribute), 183

W
w (Pixmap attribute), 324
warp() (Pixmap method), 320
Widget (built-in class), 384
widgets() (Page method), 280
width
Document.insert_page, 221
Document.layout, 213
Document.new_page, 221
draw_bezier, 284
draw_circle, 283
draw_curve, 284
draw_line, 283
draw_oval, 283
draw_polyline, 284
draw_quad, 284
draw_rect, 284
draw_sector, 283
draw_squiggle, 283
draw_zigzag, 283
finish, 345
open, 193

width (IRect attribute), 250
width (Pixmap attribute), 324

width (Quad attribute), 331
width (Rect attribute), 337
width (Shape attribute), 350
words
Annot.get_text, 174
Page.get_text, 289

wrap_contents() (Page method), 417
wrapContents, 525
write() (Story method), 358
write_stabilized() (Story static method), 359
write_stabilized_with_links()
(Story
static
method), 359

write_text() (Page method), 280
write_text() (TextWriter method), 376
write_with_links() (Story method), 359
writeImage, 525
writePNG, 525
writeText, 525
wrong
file extension, 35

X
x (Pixmap attribute), 324
x (Point attribute), 328
x0 (IRect attribute), 251
x0 (Rect attribute), 337
x1 (IRect attribute), 251
x1 (Rect attribute), 337
xhtml
Annot.get_text, 174
Page.get_text, 289

xml
Annot.get_text, 174
Page.get_text, 289

Xml (built-in class), 390
xml_metadata_xref() (Document method), 413
xref
delete_image, 289
insert_image, 286
replace_image, 288

xref (Annot attribute), 183
xref (built-in variable), 430
xref (Link attribute), 254
xref (Page attribute), 309
xref (Widget attribute), 386
xref_copy() (Document method), 228
xref_get_key() (Document method), 207
xref_get_keys() (Document method), 207
xref_length() (Document method), 420
xref_object() (Document method), 226
xref_set_key() (Document method), 208
xref_stream() (Document method), 227
xref_stream_raw() (Document method), 227
xref_xml_metadata() (Document method), 231

548
Index

PyMuPDF Documentation, Release 1.23.25

xrefLength, 525
xrefObject, 525
xrefs
get_image_info, 295

xrefStream, 526
xrefStreamRaw, 526
xres (Pixmap attribute), 324

Y
y (Pixmap attribute), 324
y (Point attribute), 328
y0 (IRect attribute), 251
y0 (Rect attribute), 337
y1 (IRect attribute), 251
y1 (Rect attribute), 337
yres (Pixmap attribute), 324

Z
zoom, 55

resolution, 55

Index
549

"
23,source/Elena Gale.pdf,"['Elena \\nGale \\n', 'U I / U X D E S I G N E R  \\n', ' \\n \\n', 'Paphos, Cyprus \\n+357 97 788000 \\nhi@juliaggggcom \\n', '  \\n', ' \\n', '  \\n', ' \\n \\n \\n', 'PROFILE  \\n', 'I pursue design because of its vast potential to help people in day-to-day life, and for its \\n', 'integration of beauty and utility. I’m keen on exploring human-centred, interactive, engaging \\n', 'design, also, prototyping which helps think through interaction models and new possibilities. \\n', 'After all, I want to apply my skills to create a positive impact. \\n \\n', 'EXPERIENCE  \\n', 'Simila Cyprus Ltd, Paphos, Cyprus \\n', 'UI/UX Designer & Advertising Manager \\nJul 2017 – Present \\n', 'Collaborated closely with stakeholders to design a responsive, intuitive and engaging website \\n', 'across the property and car rental products on multiple devices. \\n', 'Accomplishments: Revised and improved the information architecture to make users easy to \\n', 'navigation on the website which leads to an increase of the conversion rate by 30% over an \\n', 'older design. Updated brand logo and assets, created and implemented streamlined templates, \\n', ""created more reliable and cohesive brand perception which is confirmed by Traveler's Choice \\n"", '2020 from TripAdvisor. \\n', ""Product Marketing: managing an organisation's online presence including public relations, \\n"", 'communications and social media management and created and optimise content for the Web \\n', 'site using a variety of graphics and information from different courses. \\n', 'UX / UI Design: conducted user research, user journey maps, identifying problems and user \\n', 'needs, prototyping, competitive analysis, and visual design. \\n \\n', 'Freelancer (contracts) \\n', 'UI/UX Designer \\nJan 2015 – Present \\n', 'As a freelance designer, have worked on wide variety of clients from Canada, the UK, the USA, \\n', 'Ukraine and more to deliver multiple design projects, including UI design, UX flows, storyboards, \\n', 'layout design, landing pages, illustration, typography, and motion graphics. Built UI mockups \\n', 'and prototypes. Collaborated with engineers ensure high- quality implementation. \\n \\n', 'Kharkov For Rent, Kharkiv, Ukraine \\n', 'Web Designer & Marketing Manager \\nMay 2010 – Dec 2014 \\n', 'Worked closely with the owner to develop a corporate design system, including logo, \\n', 'typography, image style, colours and design principle defining visual parameters for the local \\n', 'property rental service. Created user experience and user interface across mobile and web \\n', 'platforms. Worked with the marketing team and engineers to conduct user research, create \\n', 'personas, UX flows, wireframes, and low to high fidelity prototype. \\n \\n', 'Dream Way, Kharkiv, Ukraine \\n', 'Photographer & Social Media Coordinator \\nMar 2011 – May 2013 \\n', ' \\n', 'VOLUNTEERING  \\n', 'International Children’s Heart Foundation, Memphis, TN, USA \\n', 'Photographer Sep 2011 – Feb 2013 \\n', 'Worked with an international team of doctors and nurses visiting the Kharkiv Children’s Hospital. \\n', 'Prepared photo-based visual storylines of the children through their treatment and recovery \\n', 'journey, and prepared presentations \\n', 'for social media reporting and \\n', 'fundraising programs. \\n', ' \\n', 'SKILLS  \\n', 'UI/UX Design Interaction Design Branding + Identity Wireframing Prototyping \\n', 'Information Architecture \\n \\n \\n', 'TOOLS  \\n', 'Figma App Sketch App \\n', 'Adobe Creative Suite Principle \\n', 'Webflow Invision \\n', 'Pen & Paper \\n', ' \\n', 'Basic HTML/CSS Basic After Effects \\n \\n \\n', 'EDUCATI ON  \\n', 'Sochnik Design School \\n', 'Web & UI Design \\n', 'Jan 2017 – May 2017 \\n', 'STEP Academy \\n', 'Computer Graphics & Design Sep 2008 – May 2009 \\n', 'Kharkiv National University of Economics \\n', 'Master’s in Business Economics Sep 2005 - May 2010 \\n \\n', 'LANG  UA G ES  \\n', 'English \\nIELTS - Overall 7,5 Fluent \\n', 'Ukrainian \\n', 'Native \\n', 'Russian \\n', 'Fluent \\n']","Elena 
Gale 

U I / U X D E S I G N E R  

 
 

Paphos, Cyprus 
+357 97 788000 
hi@juliaggggcom 

  

 

  

 
 
 

PROFILE  

I pursue design because of its vast potential to help people in day-to-day life, and for its 

integration of beauty and utility. I’m keen on exploring human-centred, interactive, engaging 

design, also, prototyping which helps think through interaction models and new possibilities. 

After all, I want to apply my skills to create a positive impact. 
 

EXPERIENCE  

Simila Cyprus Ltd, Paphos, Cyprus 

UI/UX Designer & Advertising Manager 
Jul 2017 – Present 

Collaborated closely with stakeholders to design a responsive, intuitive and engaging website 

across the property and car rental products on multiple devices. 

Accomplishments: Revised and improved the information architecture to make users easy to 

navigation on the website which leads to an increase of the conversion rate by 30% over an 

older design. Updated brand logo and assets, created and implemented streamlined templates, 

created more reliable and cohesive brand perception which is confirmed by Traveler's Choice 

2020 from TripAdvisor. 

Product Marketing: managing an organisation's online presence including public relations, 

communications and social media management and created and optimise content for the Web 

site using a variety of graphics and information from different courses. 

UX / UI Design: conducted user research, user journey maps, identifying problems and user 

needs, prototyping, competitive analysis, and visual design. 
 

Freelancer (contracts) 

UI/UX Designer 
Jan 2015 – Present 

As a freelance designer, have worked on wide variety of clients from Canada, the UK, the USA, 

Ukraine and more to deliver multiple design projects, including UI design, UX flows, storyboards, 

layout design, landing pages, illustration, typography, and motion graphics. Built UI mockups 

and prototypes. Collaborated with engineers ensure high- quality implementation. 
 

Kharkov For Rent, Kharkiv, Ukraine 

Web Designer & Marketing Manager 
May 2010 – Dec 2014 

Worked closely with the owner to develop a corporate design system, including logo, 

typography, image style, colours and design principle defining visual parameters for the local 

property rental service. Created user experience and user interface across mobile and web 

platforms. Worked with the marketing team and engineers to conduct user research, create 

personas, UX flows, wireframes, and low to high fidelity prototype. 
 

Dream Way, Kharkiv, Ukraine 

Photographer & Social Media Coordinator 
Mar 2011 – May 2013 

 

VOLUNTEERING  

International Children’s Heart Foundation, Memphis, TN, USA 

Photographer Sep 2011 – Feb 2013 

Worked with an international team of doctors and nurses visiting the Kharkiv Children’s Hospital. 

Prepared photo-based visual storylines of the children through their treatment and recovery 

journey, and prepared presentations 

for social media reporting and 

fundraising programs. 

 

SKILLS  

UI/UX Design Interaction Design Branding + Identity Wireframing Prototyping 

Information Architecture 
 
 

TOOLS  

Figma App Sketch App 

Adobe Creative Suite Principle 

Webflow Invision 

Pen & Paper 

 

Basic HTML/CSS Basic After Effects 
 
 

EDUCATI ON  

Sochnik Design School 

Web & UI Design 

Jan 2017 – May 2017 

STEP Academy 

Computer Graphics & Design Sep 2008 – May 2009 

Kharkiv National University of Economics 

Master’s in Business Economics Sep 2005 - May 2010 
 

LANG  UA G ES  

English 
IELTS - Overall 7,5 Fluent 

Ukrainian 

Native 

Russian 

Fluent 

"
24,source/DENIS GRIGOREV.pdf,"['DENIS GRIGOREV \\n', 'Experience \\n', '▷ +60 113 776 11 11  ▷ observerrrrrr@gmail.com  \\n', ' \\n', 'Business Engineering Group \\nSeptember 2020 – May 2023 \\n', 'Senior Project Manager \\n', '• Engaged in business transformation projects, implementing architectural solutions, and integrating various innovations \\n', 'into a unified business system at the level of management & governance. Executed by building its DTO model and \\nutilizing company’s own proprietary EAMT-class software, customized to address client challenges. \\n', '• Collaborated with a port company undergoing a significant cargo nature shift from coal handling to grain handling. Over \\n', 'a 10-month period, the project transformed the company’s process system and partially its organizational structure. The \\ncompany currently operates successfully in the port market. \\n', '• Led a project involving a construction site fire safety services provider’s substantial business expansion - from servicing \\n', 'fire alarms to comprehensive fire safety solutions. Formed a business ecosystem by partnering with complementary \\ncompanies, with our client’s company driving this ecosystem and boosting revenue by 270%. \\n', '• Developed a successful digital transformation strategy for a confidential correspondence and hazardous cargo delivery \\n', 'company. Current execution of the strategy has led to a 20% reduction in hazardous cargo delivery time, improved \\nsecurity for confidential correspondence through advanced tracking, and a 15% increase in customer satisfaction. \\n', 'RE Solutions (Contract) \\nFebruary 2022 – September 2022 \\n', 'Requirements Engineer \\n', '• Led a project for a Mercedes IoT contractor, overseeing the integration of software aimed at automating the fleet \\n', 'management ecosystem. Resulted in a significant decrease in the average vehicle repair processing time from 40 minutes \\nto 12 minutes. \\n', 'Tesla Coil \\nApril 2017 – July 2020 \\n', 'CEO & Co-Founder \\nThe company focused on manufacturing and developing exhibits for science museums. \\n', '• Organized a full production cycle, ranging from printed circuit board manufacturing to software development for exhibit \\n', 'control and functionality. \\n', '• Increased production speed from a few units per month to hundreds, transitioning from garage-style manufacturing to \\n', 'industrial-scale production line, becoming a market leader for science-intensive exhibits in the CIS and Eastern Europe. \\n', '• Grew company profits from $2000 to $200,000 within 2 years. \\n', '• Conducted lectures at scientific exhibitions, including the Russian Academy of Sciences. \\n', 'HighLoad Workshop \\nSeptember 2015 – November 2017 \\n', 'Portfolio Manager \\n', '• Prepared the company for launch by identifying and onboarding external contractors and outsourcing partners for diverse \\n', 'projects, focusing on aligning their skills and expertise with project requirements. Compiled and maintained a \\ncomprehensive database of more than 200 contractors, enabling swift project staffing and resource allocation. \\n', '• Developed an internal system for managing outsourcing partners’ resources to monitor work progress, assess quality, and \\n', 'meet deadlines. This optimization resulted in a reduction of project delays by 20% compared to industry averages. \\n', '• Conducted thorough risk assessments to identify potential bottlenecks and roadblocks in project execution. Formulated \\n', 'and executed mitigation strategies, resulting in a 15% reduction in project risks and a smoother project flow. \\n', '• Led the end-to-end management of a CRM system’s development. Collaborated closely with design, engineering, and QA \\n', 'teams to define product specifications, facilitate seamless communication, and ensure consistent progress tracking. This \\ncooperative approach resulted in a 30% faster development cycle and a highly polished final product. \\n', '• Implemented the successful integration of SAFe (Scaled Agile Framework) software into the company’s internal \\n', 'workflows. This transformation streamlined collaboration, enhanced transparency, and improved overall project \\nmanagement efficiency, leading to a 25% reduction in time-to-market for new products. \\n', 'Yes Coffee Thailand – Coffee Frax \\nJune 2014 - August 2015 \\n', 'Process Optimization Specialist \\n', '• Conducted a thorough examination of operational processes within the coffee shop network and coffee factory. Detected \\n', 'critical bottlenecks, pinpointed areas of inefficiency, and preemptively identified potential challenges. \\n', '• Successfully implemented software solutions to overhaul production procedures. This initiative led to a notable reduction \\n', 'in manufacturing time, streamlined logistics operations, and strategic resource utilization, culminating in a substantial \\n12% decrease in operational costs. \\n', '• Devised a set of performance metrics aimed at closely monitoring and analyzing outcomes. \\n', 'Gardenberg - Architectural Bureau \\nSeptember 2012 - July 2014 \\n', 'Director of Marketing and Advertising \\n', '• Established processes: market analysis, designed and implemented advertising strategies, budgeting, execution, and \\n', 'effectiveness assessment. \\n', '• Enhanced online orders’ share from 7% to 72% by conceptualizing and overseeing the development and launch of 2 \\n', 'websites. This included managing hired contractors, monitoring progress, and approving outcomes. \\n', '• Led brand restructuring efforts, dividing it into two branches, significantly improving advertising efficiency and resulting \\n', 'in a 26% increase in company profits. \\n', 'Education \\nFar Eastern Federal University \\n2007 – 2012 \\n', '.Specialist degree in Japanese and English \\n', 'Languages \\n', 'English: C1 \\nJapanese: N3 \\nRussian: native \\nLatin \\n']","DENIS GRIGOREV 

Experience 

▷ +60 113 776 11 11  ▷ observerrrrrr@gmail.com  

 

Business Engineering Group 
September 2020 – May 2023 

Senior Project Manager 

• Engaged in business transformation projects, implementing architectural solutions, and integrating various innovations 

into a unified business system at the level of management & governance. Executed by building its DTO model and 
utilizing company’s own proprietary EAMT-class software, customized to address client challenges. 

• Collaborated with a port company undergoing a significant cargo nature shift from coal handling to grain handling. Over 

a 10-month period, the project transformed the company’s process system and partially its organizational structure. The 
company currently operates successfully in the port market. 

• Led a project involving a construction site fire safety services provider’s substantial business expansion - from servicing 

fire alarms to comprehensive fire safety solutions. Formed a business ecosystem by partnering with complementary 
companies, with our client’s company driving this ecosystem and boosting revenue by 270%. 

• Developed a successful digital transformation strategy for a confidential correspondence and hazardous cargo delivery 

company. Current execution of the strategy has led to a 20% reduction in hazardous cargo delivery time, improved 
security for confidential correspondence through advanced tracking, and a 15% increase in customer satisfaction. 

RE Solutions (Contract) 
February 2022 – September 2022 

Requirements Engineer 

• Led a project for a Mercedes IoT contractor, overseeing the integration of software aimed at automating the fleet 

management ecosystem. Resulted in a significant decrease in the average vehicle repair processing time from 40 minutes 
to 12 minutes. 

Tesla Coil 
April 2017 – July 2020 

CEO & Co-Founder 
The company focused on manufacturing and developing exhibits for science museums. 

• Organized a full production cycle, ranging from printed circuit board manufacturing to software development for exhibit 

control and functionality. 

• Increased production speed from a few units per month to hundreds, transitioning from garage-style manufacturing to 

industrial-scale production line, becoming a market leader for science-intensive exhibits in the CIS and Eastern Europe. 

• Grew company profits from $2000 to $200,000 within 2 years. 

• Conducted lectures at scientific exhibitions, including the Russian Academy of Sciences. 

HighLoad Workshop 
September 2015 – November 2017 

Portfolio Manager 

• Prepared the company for launch by identifying and onboarding external contractors and outsourcing partners for diverse 

projects, focusing on aligning their skills and expertise with project requirements. Compiled and maintained a 
comprehensive database of more than 200 contractors, enabling swift project staffing and resource allocation. 

• Developed an internal system for managing outsourcing partners’ resources to monitor work progress, assess quality, and 

meet deadlines. This optimization resulted in a reduction of project delays by 20% compared to industry averages. 

• Conducted thorough risk assessments to identify potential bottlenecks and roadblocks in project execution. Formulated 

and executed mitigation strategies, resulting in a 15% reduction in project risks and a smoother project flow. 

• Led the end-to-end management of a CRM system’s development. Collaborated closely with design, engineering, and QA 

teams to define product specifications, facilitate seamless communication, and ensure consistent progress tracking. This 
cooperative approach resulted in a 30% faster development cycle and a highly polished final product. 

• Implemented the successful integration of SAFe (Scaled Agile Framework) software into the company’s internal 

workflows. This transformation streamlined collaboration, enhanced transparency, and improved overall project 
management efficiency, leading to a 25% reduction in time-to-market for new products. 

Yes Coffee Thailand – Coffee Frax 
June 2014 - August 2015 

Process Optimization Specialist 

• Conducted a thorough examination of operational processes within the coffee shop network and coffee factory. Detected 

critical bottlenecks, pinpointed areas of inefficiency, and preemptively identified potential challenges. 

• Successfully implemented software solutions to overhaul production procedures. This initiative led to a notable reduction 

in manufacturing time, streamlined logistics operations, and strategic resource utilization, culminating in a substantial 
12% decrease in operational costs. 

• Devised a set of performance metrics aimed at closely monitoring and analyzing outcomes. 

Gardenberg - Architectural Bureau 
September 2012 - July 2014 

Director of Marketing and Advertising 

• Established processes: market analysis, designed and implemented advertising strategies, budgeting, execution, and 

effectiveness assessment. 

• Enhanced online orders’ share from 7% to 72% by conceptualizing and overseeing the development and launch of 2 

websites. This included managing hired contractors, monitoring progress, and approving outcomes. 

• Led brand restructuring efforts, dividing it into two branches, significantly improving advertising efficiency and resulting 

in a 26% increase in company profits. 

Education 
Far Eastern Federal University 
2007 – 2012 

.Specialist degree in Japanese and English 

Languages 

English: C1 
Japanese: N3 
Russian: native 
Latin 

"
25,source/Artyom Orlov.pdf,"['Artyom Orlov\\niart2.o@outlook.com\\n', 'Senior Frontend Developer & Team Lead\\n+7 91 9320-1005\\n', 'Visa sponsorship required\\nLinkedIn\\n', 'T-shaped, responsible, and collaborative Software Engineer and Team Lead. 8+ years of experience of development in startups,\\nconsultancies, and product companies. Advanced skills in frontend development, an expert in JavaScript, various frontend\\nframeworks, and libraries. Comprehensive knowledge of Java and backend utilities. Passionate about user experience and clear\\nsoftware architecture. Fond of teamwork and productive meetings.\\n', 'Technical Skills\\n', 'Languages\\nTypeScript, JavaScript, Java, Golang\\n', 'Frameworks & libs\\nReactJS, Svelte, Effector, Recoil, Redux, Apollo GraphQL, TreeJS, OSM, ExpressJS, Spring\\n', 'Professional Experience\\n', 'Remedy Inc\\nSenior Frontend Engineer & Team Lead\\nDec 2019 ‑ present\\n', 'Developed a ﬂexible platform to allow customers to choose a clinic and get or order some medical services online\\n', '●\\nMigrated a complex legacy project from JavaScript/AngularJS to TypeScript/React with unit and integrating testing\\n', '●\\nSigniﬁcantly increased accessibility for users with mobile devices\\n', '●\\nDeveloped and implemented UI-library with Unit tests and documentation based on Storybook\\n', '●\\nDesigned frontend architecture\\n', '●\\nLeading and inﬂuencing software engineering best practices within teams for the full software development life cycle,\\nincluding documentation, design, coding standards, code reviews, building, testing, deployment, and other operations.\\n', '●\\nLed a team of 5 members\\n', 'Vinavis\\n', 'Senior Software Engineer\\nNov 2018 ‑ Dec 2019\\n', 'Developed a high-loaded management system for unmanned vehicles\\n', '●\\nArchitected and developed a scalable real-time ReactJS application\\n', '●\\nImproved performance from 10 to 60 FPS for the most loaded parts of the app\\n', '●\\nImplemented CI/CD for the frontend part of the application\\n', '●\\nDeveloped and Implemented multi-domain OAuth-based authentication\\n', '●\\nDeveloped and Implemented JS library for on-map data visualization\\n', '●\\nCoordinated teamwork of 3 developers\\n', 'ITeco\\n', 'Software Engineer & Senior Software Engineer\\nApr 2016 ‑ Nov 2018\\n', 'Developed and successfully delivered SPA (part of a complex enterprise solution) for letting clients book deposit boxes online for\\none of the biggest banks in Russia\\n', '●\\nDeveloped and implemented a module for remote printing\\n', '●\\nCreated about 20 new components for internal UI library\\n', '●\\nAchieved 90+% test coverage on the Backend side\\n', '●\\nImplemented integration with other banking modules and ﬂows\\n', '●\\nMade several major CI/CD improvements which allowed to reduce deployment time from 17 to 3 minutes\\n', '●\\nInterviewed 30 candidates, mentored 4 junior engineers\\n', 'Freelance & Web Studios (SEMark, Consulting plus)\\n', 'Web developer & Lead Web Developer\\nSep 2012 ‑ Feb 2016\\n', '●\\nDeveloped various company projects as a full‑stack JavaScript/PHP & Python developer\\n', '●\\nLed development of Web and Mobile application\\n', '●\\nDeveloped and delivered a solution for municipalities to allow local governments to handle incoming citizen’s application\\n', '●\\nProcessed incoming business requirement\\n', '●\\nDelivering innovative technical solutions to improve business outcomes\\n', '●\\nImplemented integration with third-party APIs\\n', 'Education\\n', 'Master of Computer Science\\nState Technical University, 2016\\n']","Artyom Orlov
iart2.o@outlook.com

Senior Frontend Developer & Team Lead
+7 91 9320-1005

Visa sponsorship required
LinkedIn

T-shaped, responsible, and collaborative Software Engineer and Team Lead. 8+ years of experience of development in startups,
consultancies, and product companies. Advanced skills in frontend development, an expert in JavaScript, various frontend
frameworks, and libraries. Comprehensive knowledge of Java and backend utilities. Passionate about user experience and clear
software architecture. Fond of teamwork and productive meetings.

Technical Skills

Languages
TypeScript, JavaScript, Java, Golang

Frameworks & libs
ReactJS, Svelte, Effector, Recoil, Redux, Apollo GraphQL, TreeJS, OSM, ExpressJS, Spring

Professional Experience

Remedy Inc
Senior Frontend Engineer & Team Lead
Dec 2019 ‑ present

Developed a ﬂexible platform to allow customers to choose a clinic and get or order some medical services online

●
Migrated a complex legacy project from JavaScript/AngularJS to TypeScript/React with unit and integrating testing

●
Signiﬁcantly increased accessibility for users with mobile devices

●
Developed and implemented UI-library with Unit tests and documentation based on Storybook

●
Designed frontend architecture

●
Leading and inﬂuencing software engineering best practices within teams for the full software development life cycle,
including documentation, design, coding standards, code reviews, building, testing, deployment, and other operations.

●
Led a team of 5 members

Vinavis

Senior Software Engineer
Nov 2018 ‑ Dec 2019

Developed a high-loaded management system for unmanned vehicles

●
Architected and developed a scalable real-time ReactJS application

●
Improved performance from 10 to 60 FPS for the most loaded parts of the app

●
Implemented CI/CD for the frontend part of the application

●
Developed and Implemented multi-domain OAuth-based authentication

●
Developed and Implemented JS library for on-map data visualization

●
Coordinated teamwork of 3 developers

ITeco

Software Engineer & Senior Software Engineer
Apr 2016 ‑ Nov 2018

Developed and successfully delivered SPA (part of a complex enterprise solution) for letting clients book deposit boxes online for
one of the biggest banks in Russia

●
Developed and implemented a module for remote printing

●
Created about 20 new components for internal UI library

●
Achieved 90+% test coverage on the Backend side

●
Implemented integration with other banking modules and ﬂows

●
Made several major CI/CD improvements which allowed to reduce deployment time from 17 to 3 minutes

●
Interviewed 30 candidates, mentored 4 junior engineers

Freelance & Web Studios (SEMark, Consulting plus)

Web developer & Lead Web Developer
Sep 2012 ‑ Feb 2016

●
Developed various company projects as a full‑stack JavaScript/PHP & Python developer

●
Led development of Web and Mobile application

●
Developed and delivered a solution for municipalities to allow local governments to handle incoming citizen’s application

●
Processed incoming business requirement

●
Delivering innovative technical solutions to improve business outcomes

●
Implemented integration with third-party APIs

Education

Master of Computer Science
State Technical University, 2016

"
26,source/Iliya Stepanov.pdf,"[' \\n', '5+ years of Software \\nDevelopment in \\nJavaScript, React, \\nGraphQL, Distributed \\nSystems. \\n', ' \\n', 'Iliya Stepanov \\n', ' \\n', '+38 093 111 11 11 \\nemail@gmail.com  \\n', 'Current employment | Software Engineer, Front-end | @COMP1, the UK | 03/2019 – Present \\nEnterprise solution for Maritime industry. The platform with 80+ products. \\n60+ devs, in squads of 3-7 people. \\nFront-end is built on Micro-Front-End architecture. I am a member of an Infrastructure Team. \\n \\n', 'Front-end Infrastructure \\n', '- \\nResolved 250+ circular dependencies all over the project with webpack \\n', '- \\nOptimized SVG consumption that in result solved chain of arised bugs \\n', '- \\nLeading knowledge sharing sessions for 20+ members of Front-end team \\n', '- \\nOptimised building and check phases of Monorepo (> x2 times) \\n', 'Version control app(Back-office) \\n', '- \\nDeveloped web app from scratch (React, TypeScript, GraphQL, Apollo) \\n', 'Other experience \\n', 'Front-end Engineer @COMP2 - the USA (2018-2019) \\n· 2019: Web app. Squad of 7 people. I built the Front-end side of the Healthcare Insurance \\n', 'module(web page) with JS, React, MobX, Web-sockets. \\n', '· 2018: Mobile app. Squad of 8 people. I developed 80+ screens with React-native, Redux with \\n', 'support of iOS & Android + designed the API layer. Being part of the Focus team. Conducted 20+ \\ninterviews. As a team member won internal award “Best performance team” \\n', 'Front-end Developer @COMP3 - Belgium (2015-2018) \\n· B2B data flow project with blockchain. Close work with the customer / client side. Taught myself \\n', 'MobX in 1 week, developed 10+ web pages, implemented i18n using React, amCharts etc. \\n', 'Business Analyst/Configuration Engineer @Luxoft(Citibank) - the USA (2014-2015) \\n· Configuring Onboarding system with 1900+ questions using DSL, created/updated 20+ workflows \\n', 'that optimised Business processes in FinTech. Eliciting requirements, communication with \\nstakeholders (NAM/EMEA/LATAM). \\n', 'Other activities \\n', '· Mentor on offline intensive course React/Redux @Courses - consulting, supporting students, \\n', 'homework review, code review \\n', 'Education \\n', 'Kyiv, Ukraine \\nNational University of Life and Environmental \\n', 'Sciences of Ukraine \\n2008-2013 \\n', '· Master in Mechanical Engineering, 2013(High Honors). \\n· Bachelor in Mechanical Engineering, 2012(High Honors). \\nLanguages and Technologies: JavaScript(ES6+); TypeScript; ImmutableJS; HTML; CSS; React; \\nRedux/MobX/Apollo; redux-thunk/redux-saga;REST/GraphQL/Websockets;ant-design; materialUI; \\nwebpack; React-native; \\n', ' \\n']"," 

5+ years of Software 
Development in 
JavaScript, React, 
GraphQL, Distributed 
Systems. 

 

Iliya Stepanov 

 

+38 093 111 11 11 
email@gmail.com  

Current employment | Software Engineer, Front-end | @COMP1, the UK | 03/2019 – Present 
Enterprise solution for Maritime industry. The platform with 80+ products. 
60+ devs, in squads of 3-7 people. 
Front-end is built on Micro-Front-End architecture. I am a member of an Infrastructure Team. 
 

Front-end Infrastructure 

- 
Resolved 250+ circular dependencies all over the project with webpack 

- 
Optimized SVG consumption that in result solved chain of arised bugs 

- 
Leading knowledge sharing sessions for 20+ members of Front-end team 

- 
Optimised building and check phases of Monorepo (> x2 times) 

Version control app(Back-office) 

- 
Developed web app from scratch (React, TypeScript, GraphQL, Apollo) 

Other experience 

Front-end Engineer @COMP2 - the USA (2018-2019) 
· 2019: Web app. Squad of 7 people. I built the Front-end side of the Healthcare Insurance 

module(web page) with JS, React, MobX, Web-sockets. 

· 2018: Mobile app. Squad of 8 people. I developed 80+ screens with React-native, Redux with 

support of iOS & Android + designed the API layer. Being part of the Focus team. Conducted 20+ 
interviews. As a team member won internal award “Best performance team” 

Front-end Developer @COMP3 - Belgium (2015-2018) 
· B2B data flow project with blockchain. Close work with the customer / client side. Taught myself 

MobX in 1 week, developed 10+ web pages, implemented i18n using React, amCharts etc. 

Business Analyst/Configuration Engineer @Luxoft(Citibank) - the USA (2014-2015) 
· Configuring Onboarding system with 1900+ questions using DSL, created/updated 20+ workflows 

that optimised Business processes in FinTech. Eliciting requirements, communication with 
stakeholders (NAM/EMEA/LATAM). 

Other activities 

· Mentor on offline intensive course React/Redux @Courses - consulting, supporting students, 

homework review, code review 

Education 

Kyiv, Ukraine 
National University of Life and Environmental 

Sciences of Ukraine 
2008-2013 

· Master in Mechanical Engineering, 2013(High Honors). 
· Bachelor in Mechanical Engineering, 2012(High Honors). 
Languages and Technologies: JavaScript(ES6+); TypeScript; ImmutableJS; HTML; CSS; React; 
Redux/MobX/Apollo; redux-thunk/redux-saga;REST/GraphQL/Websockets;ant-design; materialUI; 
webpack; React-native; 

 

"
27,source/Vladyslav Tyshchenko Data Analyst v2.pdf,"['Vladyslav Tyshchenko\\n', 'Calgary, AB | Tyvla0009@gmail.com | +1 (587) 000-7226 | http://www.linkedin.com/in/aaadtysh\\n', 'Education\\n', 'Taras Shevchenko National University\\n', 'Bachelor’s degree, Data Analytics (Sep 2019 - Jun 2023)\\n', 'Skills\\n', 'Programming Languages: Python, C++, SQL, HTML, CSS\\n', 'Libraries: Flask, Pandas, Matplotlib, Seaborn, Plotly, Scikit-learn, TensorFlow\\n', 'Tools: Tableau, Excel, Word, PowerPoint, Outlook, Google Sheets, VMware Workstation\\n', 'Languages: English (Upper Intermediate), Ukrainian (Native), Russian (Fluent)\\n', 'Experience\\n', 'Blockchain Analyst (Jan 2022 – Sep 2022)\\n', 'Hedge fund, moscow\\n', '●\\nConducted in-depth research on blockchain technology, cryptocurrencies, and decentralized\\nprotocols across various blockchains.\\n', '●\\nCompiled comprehensive reports summarizing the findings and presented them to the team.\\n', '●\\nExplored trading technologies and analyzed a range of indicators to identify correlations\\nbetween the global economy and the cryptocurrency market.\\n', '●\\nDeveloped new databases and optimized the process of automatically populating a\\ncryptocurrency price database directly from blockchain during my last role.\\n', 'Junior Data Analyst (Aug 2021 - Dec 2021)\\n', 'Coral Travel, moscow\\n', '●\\nCollaborated closely with the analytics and sales teams, providing them with up-to-date and\\nprocessed data.\\n', '●\\nProcessed, formatted, and automated data to adjust service prices.\\n', '●\\nCompiled reports to identify areas for improvement and suggested proposals based on the\\nfindings.\\n', 'Courses\\n', 'Intermediate SQL - Calgary Public Library (Issued Oct 2023)\\n', 'Introduction to SQL - Calgary Public Library (Issued Sep 2023)\\n', 'Introduction to Python 3 Programming - Calgary Public Library (Issued Aug 2023)\\n']","Vladyslav Tyshchenko

Calgary, AB | Tyvla0009@gmail.com | +1 (587) 000-7226 | http://www.linkedin.com/in/aaadtysh

Education

Taras Shevchenko National University

Bachelor’s degree, Data Analytics (Sep 2019 - Jun 2023)

Skills

Programming Languages: Python, C++, SQL, HTML, CSS

Libraries: Flask, Pandas, Matplotlib, Seaborn, Plotly, Scikit-learn, TensorFlow

Tools: Tableau, Excel, Word, PowerPoint, Outlook, Google Sheets, VMware Workstation

Languages: English (Upper Intermediate), Ukrainian (Native), Russian (Fluent)

Experience

Blockchain Analyst (Jan 2022 – Sep 2022)

Hedge fund, moscow

●
Conducted in-depth research on blockchain technology, cryptocurrencies, and decentralized
protocols across various blockchains.

●
Compiled comprehensive reports summarizing the findings and presented them to the team.

●
Explored trading technologies and analyzed a range of indicators to identify correlations
between the global economy and the cryptocurrency market.

●
Developed new databases and optimized the process of automatically populating a
cryptocurrency price database directly from blockchain during my last role.

Junior Data Analyst (Aug 2021 - Dec 2021)

Coral Travel, moscow

●
Collaborated closely with the analytics and sales teams, providing them with up-to-date and
processed data.

●
Processed, formatted, and automated data to adjust service prices.

●
Compiled reports to identify areas for improvement and suggested proposals based on the
findings.

Courses

Intermediate SQL - Calgary Public Library (Issued Oct 2023)

Introduction to SQL - Calgary Public Library (Issued Sep 2023)

Introduction to Python 3 Programming - Calgary Public Library (Issued Aug 2023)

"
28,source/Dima SIDORENKO.pdf,"['Dima SIDORENKO\\nFull Stack Web Developer\\n', 'Phone No: +7 902 000 9090\\nEmail: dsidorenko@gmail.com\\n', 'LinkedIn:https://www.linkedin.com/in/dm-e-sido\\n', 'renko/\\n', 'GitHub: https://github.com/DmSidorenko\\n', 'A passionate web developer with 3 years of experience in production development, interested in system\\ndesign, software architecture, OOP design patterns and algorithms. Adore to build reliable and effective\\nsoftware, love latest PHP features, adore Symfony, like the beauty and freshness of Golang and ﬂexibility\\nof JavaScript.\\n', 'PROFESSIONAL EXPERIENCE\\n', 'Senior Developer at Luxoft\\nSt. Petersburg, Russia Feb 2021 - Present\\n', '●\\nCreate and maintain mobile services, e.g. push notiﬁcations campaign management service\\n', '●\\nBuild high-load and time-consuming services, e.g. providing paid services ordering from mobile\\napp\\n', '●\\nDesign software architecture, analyze system improvements, e.g. improve overloaded legacy\\nservice by transfer it on an asynchronous mode of query processing\\n', '●\\nReview code and provide tech consultations for colleagues, especially junior developers\\n', 'Middle Web Developer at CDNow!\\nSt. Petersburg, Russia Jan 2020 - Feb 2021\\n', '●\\nBuilt new features for client’s and admin’s dashboard of CDN service website, including\\ntime-consuming ones, e.g. conﬁgurations update, automate SSL certiﬁcates obtaining from user\\ndashboard\\n', '●\\nCreated real-time features for an online entertainment project like chats and live event messaging,\\ninternal payments, regular automatic payments etc.\\n', '●\\nWrote API methods, both with public and private access\\n', '●\\nPropagated and advanced following code style, patterns using, implementing static analysis tools\\n', 'Junior Web Developer at CDNow!\\nSt. Petersburg, Russia Nov 2018 - Jan 2020\\n', '●\\nCreated simple and mid-complex scripts and layouts like CRUDs, web interfaces, e.g. for using as a\\npart of CDN service website\\n', '●\\nImplemented secured ﬁle storing on AWS S3 cloud\\n', '●\\nCreated dynamic 2-d and 3d-graphical widgets e.g. an interactive ﬂoor plans for room booking\\nservice, a stair modelling tool with 3-d previews and 2-d pdf drawings for a stairs manufacturer\\nwebsite\\n', '●\\nUsed Wordpress, created plugins for LMS Moodle\\n', 'EDUCATION\\n', '●\\nPh.D. in radiophysics, 2016 at Lobachevsky State University, N. Novgorod, Russia\\n', '●\\nThe postgraduate program in radiophysics, 2002-2005, Polar Geophysical Institute, Murmansk\\n', '●\\nMEd in teaching physics & computer technology (diploma with honour), 1997-2002 Murmansk\\nTeachers Institute\\n', 'TOOLS AND TECHNOLOGIES\\n', '●\\nPHP (Symfony), Go, JS/TS\\n', '●\\nReact, React Native, Redux, Vue\\n', '●\\nMySQL, Postgre, Redis\\n', '●\\nRabbitMQ, Docker, Jenkins\\n']","Dima SIDORENKO
Full Stack Web Developer

Phone No: +7 902 000 9090
Email: dsidorenko@gmail.com

LinkedIn:https://www.linkedin.com/in/dm-e-sido

renko/

GitHub: https://github.com/DmSidorenko

A passionate web developer with 3 years of experience in production development, interested in system
design, software architecture, OOP design patterns and algorithms. Adore to build reliable and effective
software, love latest PHP features, adore Symfony, like the beauty and freshness of Golang and ﬂexibility
of JavaScript.

PROFESSIONAL EXPERIENCE

Senior Developer at Luxoft
St. Petersburg, Russia Feb 2021 - Present

●
Create and maintain mobile services, e.g. push notiﬁcations campaign management service

●
Build high-load and time-consuming services, e.g. providing paid services ordering from mobile
app

●
Design software architecture, analyze system improvements, e.g. improve overloaded legacy
service by transfer it on an asynchronous mode of query processing

●
Review code and provide tech consultations for colleagues, especially junior developers

Middle Web Developer at CDNow!
St. Petersburg, Russia Jan 2020 - Feb 2021

●
Built new features for client’s and admin’s dashboard of CDN service website, including
time-consuming ones, e.g. conﬁgurations update, automate SSL certiﬁcates obtaining from user
dashboard

●
Created real-time features for an online entertainment project like chats and live event messaging,
internal payments, regular automatic payments etc.

●
Wrote API methods, both with public and private access

●
Propagated and advanced following code style, patterns using, implementing static analysis tools

Junior Web Developer at CDNow!
St. Petersburg, Russia Nov 2018 - Jan 2020

●
Created simple and mid-complex scripts and layouts like CRUDs, web interfaces, e.g. for using as a
part of CDN service website

●
Implemented secured ﬁle storing on AWS S3 cloud

●
Created dynamic 2-d and 3d-graphical widgets e.g. an interactive ﬂoor plans for room booking
service, a stair modelling tool with 3-d previews and 2-d pdf drawings for a stairs manufacturer
website

●
Used Wordpress, created plugins for LMS Moodle

EDUCATION

●
Ph.D. in radiophysics, 2016 at Lobachevsky State University, N. Novgorod, Russia

●
The postgraduate program in radiophysics, 2002-2005, Polar Geophysical Institute, Murmansk

●
MEd in teaching physics & computer technology (diploma with honour), 1997-2002 Murmansk
Teachers Institute

TOOLS AND TECHNOLOGIES

●
PHP (Symfony), Go, JS/TS

●
React, React Native, Redux, Vue

●
MySQL, Postgre, Redis

●
RabbitMQ, Docker, Jenkins

"
29,source/Ivan CHUDINOV.pdf,"['Ivan CHUDINOV \\n', 'Moscow, Russia · imonoooo@yandex.ru · +7 925-906-00-00 ·  \\n', 'WORK EXPERIENCE \\n', 'Yandex \\nMoscow, Russia \\n', 'Software Engineer, Internal analytical tools team \\nJanuary 2020 – Present \\n', '• Maintained a virtual machine cluster with a pre-conﬁgured Jupyter environment \\n', 'with a one-click deployment for any analyst within the company. \\n', '• Integrated Jupyter installation with internal tools, such as secret storage, \\n', 'task tracking, and code-review systems. \\n', 'Software Engineer, Ad-hoc statistics team \\nApril 2019 – December 2019 \\n', '• Provided technical expertise and consultations about Map-Reduce computations \\n', 'to analysts on diﬀerent teams. \\n', '• Re-wrote and optimized most expensive regular Map-Reduce jobs, improving their \\n', 'performance up to 10x, resulting in more than 10% total savings of CPU time on \\nanalytical clusters. \\n', '• Developed and still maintaining a system collecting of all JavaScript front-end \\n', 'project dependencies in internal repositories in Yandex, used for tracking old, \\ndeprecated and vulnerable dependencies. \\n', 'Junior Software Engineer, Ad-hoc statistics team \\nApril 2018 – March 2019 \\n', '• Implemented recurring analytical jobs on the in-house Map-Reduce clusters for \\n', 'consumers throughout the company. \\n', ' \\n', 'SKILLS \\n', 'Languages: \\nRussian — native, English — proﬁcient (C2) \\n', 'Programming languages: Python — primary, Go — secondary \\nTools: \\nMapReduce, Jupyter, Linux (daily usage), Bash \\n', 'EDUCATION \\n', 'Higher School of Economics \\nMoscow, Russia \\n', 'Bachelor of Science \\nApplied Mathematics and Informatics \\nSeptember 2014 – June 2019 \\n', 'PROJECTS \\n', 'Investigation of Parsing Expression Grammars formal languages \\nBachelor thesis — theoretical work, in which I propose a new computation method and \\nprove its equivalence to PEG. Scientiﬁc advisor — Rubtsov A.A., \\nassociate professor at MIPT. \\n', 'Building a Fast RegExp Engine formal languages, Rust \\nCoursework — research and implementation of diﬀerent techniques used for optimizing \\nregular expressions. Scientiﬁc advisor — Guilhem Gamard, PhD ENS Lyon. \\n']","Ivan CHUDINOV 

Moscow, Russia · imonoooo@yandex.ru · +7 925-906-00-00 ·  

WORK EXPERIENCE 

Yandex 
Moscow, Russia 

Software Engineer, Internal analytical tools team 
January 2020 – Present 

• Maintained a virtual machine cluster with a pre-conﬁgured Jupyter environment 

with a one-click deployment for any analyst within the company. 

• Integrated Jupyter installation with internal tools, such as secret storage, 

task tracking, and code-review systems. 

Software Engineer, Ad-hoc statistics team 
April 2019 – December 2019 

• Provided technical expertise and consultations about Map-Reduce computations 

to analysts on diﬀerent teams. 

• Re-wrote and optimized most expensive regular Map-Reduce jobs, improving their 

performance up to 10x, resulting in more than 10% total savings of CPU time on 
analytical clusters. 

• Developed and still maintaining a system collecting of all JavaScript front-end 

project dependencies in internal repositories in Yandex, used for tracking old, 
deprecated and vulnerable dependencies. 

Junior Software Engineer, Ad-hoc statistics team 
April 2018 – March 2019 

• Implemented recurring analytical jobs on the in-house Map-Reduce clusters for 

consumers throughout the company. 

 

SKILLS 

Languages: 
Russian — native, English — proﬁcient (C2) 

Programming languages: Python — primary, Go — secondary 
Tools: 
MapReduce, Jupyter, Linux (daily usage), Bash 

EDUCATION 

Higher School of Economics 
Moscow, Russia 

Bachelor of Science 
Applied Mathematics and Informatics 
September 2014 – June 2019 

PROJECTS 

Investigation of Parsing Expression Grammars formal languages 
Bachelor thesis — theoretical work, in which I propose a new computation method and 
prove its equivalence to PEG. Scientiﬁc advisor — Rubtsov A.A., 
associate professor at MIPT. 

Building a Fast RegExp Engine formal languages, Rust 
Coursework — research and implementation of diﬀerent techniques used for optimizing 
regular expressions. Scientiﬁc advisor — Guilhem Gamard, PhD ENS Lyon. 

"
30,source/Nickita Valchkou.pdf,"[' \\n', 'Pedro Vucenovic \\n', ' \\n \\n', 'Date of birth: 29/11/1978 \\n \\n', 'Gender: Male \\n(+356) 9976211 \\nzvbrdaaaa@gmail.com \\n', 'Marsaskala, Malta \\n', ' \\n \\n \\n \\n \\n', 'WORK EXPERIENCE \\n', ' \\n', '15/10/2018 – CURRENT – Fgura, Malta \\nFLOOR COVERING INSTALLER – Betacentre \\n', 'Installing \\n', '◦ hardwood flooring \\n◦ laminate \\n◦ decks \\n◦ vinyl \\n◦ parquet \\n◦ turf \\n◦ auwing and coving \\n◦ aquafloor \\n◦ Measuring materials \\n◦ preparing floors, removing imperfections \\n◦ apply finishes and refinishes \\n', ' \\n \\n', '01/03/2003 – 16/09/2018 – Prijedor, Bosnia and Herzegovina \\nSHOP GENERAL MANAGER – Delta TR \\n', '◦ Responsible for the daily managing of store and staff \\n◦ Analysing store sales figures \\n◦ Developing marketing strategies \\n◦ Maintaining accurate records of pricing and sales \\n◦ Managing budgets \\n', ' \\n \\n', '01/06/2015 – 01/06/2017 – Kozarska Dubica, Bosnia and Herzegovina \\nORCHARD ASSISTANT VOLUNTEER - FRUIT GROWER – Nipas DOO \\n', '◦ Worked as an orchard assistant working different types of jobs at the plum, apple and \\n', 'pear orchard \\n', '◦ Pruning trees per instruction of apple production manager. \\n◦ Harvesting of fruit trees, assisting fruit production crew with various tasks as needed \\n◦ Care and protection of trees and fruits \\n', 'EDUCATION AND TRAINING \\n', ' \\n', '01/09/1993 – 01/06/1997 – Prijedor, Bosnia and Herzegovina \\nAgriculture technician \\n', ' \\n', '2002 – Italy \\nCourses in Agriculture, Vegetable, Floriculture, Plant Protection – AGEF \\n', ' \\n \\n \\n', 'LANGUAGE SKILLS \\n', ' \\n', 'Mother tongue(s): SERBIAN \\n', ' \\n \\n', 'UNDERSTANDING \\nSPEAKING \\nWRITING \\n', 'Listening \\nReading \\nSpoken production \\nSpoken interaction  \\n', 'ENGLISH B1 \\nB1 \\nB1 \\nB2 \\nB1 \\n', 'Levels: A1 and A2: Basic user; B1 and B2: Independent user; C1 and C2: Proficient user \\n', ' \\n \\n \\n', 'DIGITAL SKILLS \\n', ' \\n', 'Microsoft Office \\n', ' \\n \\n \\n \\n', 'COMMUNICATION AND INTERPERSONAL SKILLS \\n', ' \\n', 'Detail oriented, Physical fitness, Organisational skills \\n', ' \\n']"," 

Pedro Vucenovic 

 
 

Date of birth: 29/11/1978 
 

Gender: Male 
(+356) 9976211 
zvbrdaaaa@gmail.com 

Marsaskala, Malta 

 
 
 
 
 

WORK EXPERIENCE 

 

15/10/2018 – CURRENT – Fgura, Malta 
FLOOR COVERING INSTALLER – Betacentre 

Installing 

◦ hardwood flooring 
◦ laminate 
◦ decks 
◦ vinyl 
◦ parquet 
◦ turf 
◦ auwing and coving 
◦ aquafloor 
◦ Measuring materials 
◦ preparing floors, removing imperfections 
◦ apply finishes and refinishes 

 
 

01/03/2003 – 16/09/2018 – Prijedor, Bosnia and Herzegovina 
SHOP GENERAL MANAGER – Delta TR 

◦ Responsible for the daily managing of store and staff 
◦ Analysing store sales figures 
◦ Developing marketing strategies 
◦ Maintaining accurate records of pricing and sales 
◦ Managing budgets 

 
 

01/06/2015 – 01/06/2017 – Kozarska Dubica, Bosnia and Herzegovina 
ORCHARD ASSISTANT VOLUNTEER - FRUIT GROWER – Nipas DOO 

◦ Worked as an orchard assistant working different types of jobs at the plum, apple and 

pear orchard 

◦ Pruning trees per instruction of apple production manager. 
◦ Harvesting of fruit trees, assisting fruit production crew with various tasks as needed 
◦ Care and protection of trees and fruits 

EDUCATION AND TRAINING 

 

01/09/1993 – 01/06/1997 – Prijedor, Bosnia and Herzegovina 
Agriculture technician 

 

2002 – Italy 
Courses in Agriculture, Vegetable, Floriculture, Plant Protection – AGEF 

 
 
 

LANGUAGE SKILLS 

 

Mother tongue(s): SERBIAN 

 
 

UNDERSTANDING 
SPEAKING 
WRITING 

Listening 
Reading 
Spoken production 
Spoken interaction  

ENGLISH B1 
B1 
B1 
B2 
B1 

Levels: A1 and A2: Basic user; B1 and B2: Independent user; C1 and C2: Proficient user 

 
 
 

DIGITAL SKILLS 

 

Microsoft Office 

 
 
 
 

COMMUNICATION AND INTERPERSONAL SKILLS 

 

Detail oriented, Physical fitness, Organisational skills 

 

"
31,source/АЛЕКСЕЙ КУРБАНОВ.pdf,"['KHALIMBETOV ASLAN \\n', 'khalimbetovvvvvvvv@gmail.com    \\n', 'OBJECTIVE \\n', 'Dedicated 3rd-year computer science student with strong skills in Python, C, SQL, and Java. Experienced in teaching \\n”Advanced C” and well-versed in algorithms and data structures. Looking for software development roles to apply \\nmy knowledge and grow professionally. \\n', ' \\n', 'EDUCATION \\n', 'Bachelor of Computer Science, Sejong University (Seoul/South Korea) \\n2020 - 2024 \\n', 'SKILLS \\n', 'Technical Languages: \\nPython, C, Java, SQL \\n', 'Frameworks: \\nDjango \\n', 'Data  Analysis  Libraries: \\nMatplotlib, Pandas \\n', 'Soft Skills: \\nProblem-solving, Critical Thinking, Communication, Teamwork \\n', ' \\n', 'EXPERIENCE \\n', 'Video  Codec  Engineer \\nAugust 2023 - Current \\n', 'Sejong University \\nSeoul, South Korea \\n', '• Collaborated with a multidisciplinary team to identify, troubleshoot, and resolve codec-related issues \\n', '• Documented standardization processes and findings, contributing to the lab’s knowledge base and best practices. \\n', 'Teacher  Assistant  Advanced  C Programming \\nMarch 2022 - July 2022 \\n', 'Sejong University \\n \\nSeoul, South Korea \\n', '• Boosted students’ understanding of Advanced C by 40% through tailored assignment assistance,  leveraging \\n', 'expertise in C language and debugging. \\n', '• Pioneered a teaching approach that elevated code efficiency by 50%, combining technical prowess with innovative \\n', 'curriculum strategies. \\n', ' \\n', 'PROJECTS \\n', 'Korea Income and Welfare Gender Predictor. \\n', '• Utilized Python, Pandas, Matplotlib, Seaborn, and Scikit-learn. \\n', '• Built a logistic regression model from scratch to predict gender based on income, region, and education. \\n', '• Achieved high accuracy, showcasing the model’s predictive capabilities. \\n', 'Django E-Commerce Clothing Platform. \\n', '• Developed using Django, focusing on clothing retail. \\n', '• Features include user-friendly navigation, secure authentication, advanced search, and efficient transaction sys- \\n', 'tems. \\n', '• Set a benchmark for online clothing platforms with its blend of design and functionality. \\n', 'EXTRA-CURRICULAR ACTIVITIES \\n', '• Core member of the university’s Computer Security Club, actively participating in discussions, workshops, and \\n', 'events focused on the latest cybersecurity trends and threats. \\n']","KHALIMBETOV ASLAN 

khalimbetovvvvvvvv@gmail.com    

OBJECTIVE 

Dedicated 3rd-year computer science student with strong skills in Python, C, SQL, and Java. Experienced in teaching 
”Advanced C” and well-versed in algorithms and data structures. Looking for software development roles to apply 
my knowledge and grow professionally. 

 

EDUCATION 

Bachelor of Computer Science, Sejong University (Seoul/South Korea) 
2020 - 2024 

SKILLS 

Technical Languages: 
Python, C, Java, SQL 

Frameworks: 
Django 

Data  Analysis  Libraries: 
Matplotlib, Pandas 

Soft Skills: 
Problem-solving, Critical Thinking, Communication, Teamwork 

 

EXPERIENCE 

Video  Codec  Engineer 
August 2023 - Current 

Sejong University 
Seoul, South Korea 

• Collaborated with a multidisciplinary team to identify, troubleshoot, and resolve codec-related issues 

• Documented standardization processes and findings, contributing to the lab’s knowledge base and best practices. 

Teacher  Assistant  Advanced  C Programming 
March 2022 - July 2022 

Sejong University 
 
Seoul, South Korea 

• Boosted students’ understanding of Advanced C by 40% through tailored assignment assistance,  leveraging 

expertise in C language and debugging. 

• Pioneered a teaching approach that elevated code efficiency by 50%, combining technical prowess with innovative 

curriculum strategies. 

 

PROJECTS 

Korea Income and Welfare Gender Predictor. 

• Utilized Python, Pandas, Matplotlib, Seaborn, and Scikit-learn. 

• Built a logistic regression model from scratch to predict gender based on income, region, and education. 

• Achieved high accuracy, showcasing the model’s predictive capabilities. 

Django E-Commerce Clothing Platform. 

• Developed using Django, focusing on clothing retail. 

• Features include user-friendly navigation, secure authentication, advanced search, and efficient transaction sys- 

tems. 

• Set a benchmark for online clothing platforms with its blend of design and functionality. 

EXTRA-CURRICULAR ACTIVITIES 

• Core member of the university’s Computer Security Club, actively participating in discussions, workshops, and 

events focused on the latest cybersecurity trends and threats. 

"
32,source/Aman Yersultan.pdf,"['Aman Yersultan \\n', ' Almaty, Kazakhstan \\n \\n', ' +7 747 5652000 \\n', ' \\nEDUCATION \\n', 'International IT University, Almaty, Kazakhstan \\nBachelor of Computer Science, September 2016 - June 2020; GPA: 3.56/4.00 \\n', '▪ Won a scholarship and grant to study abroad in Schmalkalden, Germany, April-August 2019. \\n▪ Dean’s list 3rd ,4th, 7th semester. \\n', ' \\nPROFESSIONAL EXPERIENCE \\n', 'Crystal Spring, Almaty, Kazakhstan \\nAndroid Developer, October 2019-Present \\nDeveloped app used by 100K+ users for store Miniso. \\n', '▪ Built Android app in Kotlin by using MVVM with android architecture components. \\n▪ Implemented backend driven UI architecture. \\n▪ Help to increase company revenue through online purchases. \\n▪ Collaborated with designer and backend developer to create QR bonus system, search by barcode. \\n▪ Integrated payment system to save card and pay by card. \\n▪ Deep link handling to open link in the appropriate application page or share product link via social \\n', 'networks. \\n', 'Investment app to track stocks and to trade stocks. \\n', '▪ Implemented real-time bidirectional communication with server side through Socket. \\n▪ Developing an application to manage portfolio with functional features like: \\n', '- \\nadd ticker to watch list to easily track stock price of ticker \\n', '- \\nbuy or sell tickers \\n', '- \\ninvestment ideas for buying or selling a ticker via forecasts \\n', '- \\nget exchange rate \\n', ' \\nPERSONAL PROJECT \\nDeveloped platform for organizing hiking event to the natural places: multiplatform application to provide \\nservices to find companions and gather them in groups to hike together and inform about routes, weather and \\ntips. \\n', '§ \\nBuilt RESTful API backend service and created endpoints in Golang using Clean Architecture intended for \\nan iterating with logistic processes for mobile and web app. Wrote a specification for API. \\n', '§ \\nImplemented the integration of backend service with third-party APIs to store image in cloud storage, get \\nweather. \\n', '§ \\nDesigned architecture and constructed database part with MongoDB Atlas. \\n', '§ \\nDeveloping android part with teammate. Integrated with 3D map service with real time GPS navigation. \\n', ' \\nLANGUAGES AND TECHNOLOGIES \\nKotlin, Java, Golang, SQL \\nCoroutines, RxJava, Dagger 2, Koin, MVVM, Google Jetpack \\n']","Aman Yersultan 

 Almaty, Kazakhstan 
 

 +7 747 5652000 

 
EDUCATION 

International IT University, Almaty, Kazakhstan 
Bachelor of Computer Science, September 2016 - June 2020; GPA: 3.56/4.00 

▪ Won a scholarship and grant to study abroad in Schmalkalden, Germany, April-August 2019. 
▪ Dean’s list 3rd ,4th, 7th semester. 

 
PROFESSIONAL EXPERIENCE 

Crystal Spring, Almaty, Kazakhstan 
Android Developer, October 2019-Present 
Developed app used by 100K+ users for store Miniso. 

▪ Built Android app in Kotlin by using MVVM with android architecture components. 
▪ Implemented backend driven UI architecture. 
▪ Help to increase company revenue through online purchases. 
▪ Collaborated with designer and backend developer to create QR bonus system, search by barcode. 
▪ Integrated payment system to save card and pay by card. 
▪ Deep link handling to open link in the appropriate application page or share product link via social 

networks. 

Investment app to track stocks and to trade stocks. 

▪ Implemented real-time bidirectional communication with server side through Socket. 
▪ Developing an application to manage portfolio with functional features like: 

- 
add ticker to watch list to easily track stock price of ticker 

- 
buy or sell tickers 

- 
investment ideas for buying or selling a ticker via forecasts 

- 
get exchange rate 

 
PERSONAL PROJECT 
Developed platform for organizing hiking event to the natural places: multiplatform application to provide 
services to find companions and gather them in groups to hike together and inform about routes, weather and 
tips. 

§ 
Built RESTful API backend service and created endpoints in Golang using Clean Architecture intended for 
an iterating with logistic processes for mobile and web app. Wrote a specification for API. 

§ 
Implemented the integration of backend service with third-party APIs to store image in cloud storage, get 
weather. 

§ 
Designed architecture and constructed database part with MongoDB Atlas. 

§ 
Developing android part with teammate. Integrated with 3D map service with real time GPS navigation. 

 
LANGUAGES AND TECHNOLOGIES 
Kotlin, Java, Golang, SQL 
Coroutines, RxJava, Dagger 2, Koin, MVVM, Google Jetpack 

"
33,source/Anton Nesterenko.pdf,"['Dublin, Ireland \\nStanislav IG NA T E V \\nsttt.ign@gmail.com \\n', 'Employment \\n', 'Software Engineer \\nFacebook \\nAugust 2019 — Present \\n', '• Sped up the customer complaints processing workflow by reducing the amount of time spent on \\n', 'malformed request, saving couple hours/week for 2,000 people. \\n', '• Separated customer complaints in two streams: one for contractors working from home and another one \\n', 'for full-time employees. The processing delay decreased from 10 days to 1 day. \\n', '• Implemented and supported the deployment of work status revamp for 20,000 of FB contractors. \\n', 'Software Engineer \\nYandex \\nSeptember 2017 — August 2019 \\n', '• Fixed more than 50 bugs over the 2-year timeframe while analyzing the Yandex ad engine, which consists \\n', 'of over 10 subsystems, has 1M RPS and 100ms latency SLA. \\n', '• Worked on an ad management system. Improved geotargeting, added Yandex phone device targeting. \\n', 'Software Engineer \\nBCS Global Markets \\nMay 2016 — September 2017 \\n', '• Implemented a low latency / high throughput financial data monitoring pipeline with Apache Kafka. \\n', '• It calculates and shows various data features and latencies (hardware/software delay, time to trade, current \\n', 'position, profit/loss, fees, etc.) processing data with strict no-delay requirements. \\n', 'Software Engineer \\nOpera Software ASA \\nAugust 2014 — June 2015 \\n', '• Developed a distributed testing system for browsers. \\n', '• It prevents bug regressions in the Opera Desktop browser and Chromium project. \\n', 'Software Engineer \\nLLC Tensor Company \\nAugust 2013 — August 2014 \\n', '• Developed a service for rendering web pages in pdf and other formats using C++, Python, and JavaScript. \\n', '• Since January 2014 was mentoring an intern. She ramped up from beginner level to full-time Engineer. \\n', ' \\n', 'Education \\n', 'Tallinn, Estonia \\nBaltic Summer School \\nJuly 2015 \\n', '• Finished courses on Software Reliability and Information Security. \\n', 'Yaroslavl, Russia \\nYaroslavl State University \\nAugust 2009 — July 2015 \\n', '• Specialist (Master of Science equivalent) in Applied Mathematics and Computer Science. \\n', 'Selinsgrove, PA, USA \\nSusquehanna University \\nAugust 2012 — May 2013 \\n', '• Study abroad exchange program. Cumulative GPA: 3.763/4.0. TOEFL score: 103. \\n', ' \\n', 'Languages and Technologies \\n', '• Several years’ experience in developing large distributed systems. \\n', '• Experience with scalable Big Data processing, including both batch and streaming variants. \\n', '• Proficient in Python, JavaScript, HTML/CSS. Prior experience: SQL, MongoDB, C++, Node.js, Java, C#. \\n', ' \\n', 'Honors and Awards \\n', '1st place: Science Drive IV: Mathematics, IT, Physics \\n \\nMay 2014 \\n', '1st place: Tizen Hackathon Yaroslavl \\nOctober 2013 \\n', '1st place: Bucknell Programming Contest, Combo Division \\nApril 2013 \\n']","Dublin, Ireland 
Stanislav IG NA T E V 
sttt.ign@gmail.com 

Employment 

Software Engineer 
Facebook 
August 2019 — Present 

• Sped up the customer complaints processing workflow by reducing the amount of time spent on 

malformed request, saving couple hours/week for 2,000 people. 

• Separated customer complaints in two streams: one for contractors working from home and another one 

for full-time employees. The processing delay decreased from 10 days to 1 day. 

• Implemented and supported the deployment of work status revamp for 20,000 of FB contractors. 

Software Engineer 
Yandex 
September 2017 — August 2019 

• Fixed more than 50 bugs over the 2-year timeframe while analyzing the Yandex ad engine, which consists 

of over 10 subsystems, has 1M RPS and 100ms latency SLA. 

• Worked on an ad management system. Improved geotargeting, added Yandex phone device targeting. 

Software Engineer 
BCS Global Markets 
May 2016 — September 2017 

• Implemented a low latency / high throughput financial data monitoring pipeline with Apache Kafka. 

• It calculates and shows various data features and latencies (hardware/software delay, time to trade, current 

position, profit/loss, fees, etc.) processing data with strict no-delay requirements. 

Software Engineer 
Opera Software ASA 
August 2014 — June 2015 

• Developed a distributed testing system for browsers. 

• It prevents bug regressions in the Opera Desktop browser and Chromium project. 

Software Engineer 
LLC Tensor Company 
August 2013 — August 2014 

• Developed a service for rendering web pages in pdf and other formats using C++, Python, and JavaScript. 

• Since January 2014 was mentoring an intern. She ramped up from beginner level to full-time Engineer. 

 

Education 

Tallinn, Estonia 
Baltic Summer School 
July 2015 

• Finished courses on Software Reliability and Information Security. 

Yaroslavl, Russia 
Yaroslavl State University 
August 2009 — July 2015 

• Specialist (Master of Science equivalent) in Applied Mathematics and Computer Science. 

Selinsgrove, PA, USA 
Susquehanna University 
August 2012 — May 2013 

• Study abroad exchange program. Cumulative GPA: 3.763/4.0. TOEFL score: 103. 

 

Languages and Technologies 

• Several years’ experience in developing large distributed systems. 

• Experience with scalable Big Data processing, including both batch and streaming variants. 

• Proficient in Python, JavaScript, HTML/CSS. Prior experience: SQL, MongoDB, C++, Node.js, Java, C#. 

 

Honors and Awards 

1st place: Science Drive IV: Mathematics, IT, Physics 
 
May 2014 

1st place: Tizen Hackathon Yaroslavl 
October 2013 

1st place: Bucknell Programming Contest, Combo Division 
April 2013 

"
34,source/Pavel Korniltsev.pdf,"['Pavel Korniltsev \\n', 'Data Scientist Team Leader \\n', 'Saint Petersburg, Russian Federation \\n', '+79226039000 \\nkornilcpppp@yandex.ru \\n', ' \\n  \\n \\n', 'WORK EXPERIENCE \\nSberBank \\n', 'Data Scientist Team Leader \\n', '/ Leading teams and large portfolios of data science projects \\n/ Representing the company at conferences through public speaking \\n/ Delivering innovative technical solutions to improve business outcomes \\n/ Creating scalable data pipelines and tools to reduce the time-to-market \\n/ Working with diverse ML-technologies: NLP, NN, Recommender Systems \\n/ Ensuring good communication between the parties to optimize strategies \\n', 'July 2017 - Present Russian Federation \\n', ' \\n \\n', 'Mobile Telesystem \\n', 'Data Scientist \\n', '/ Detecting anomalies in time series via sARIMA model \\n/ Fraud-detecting through regression models \\n/ Automating ETL process with SAS EG \\n/ Developing BI reports for anomaly explanation \\n/ Delivering insights to business supervisors \\n/ Working with huge data sets via Teradata \\n', 'July 2015 - July 2017 Russian Federation \\n', ' \\n \\n \\n \\n', 'EDUCATION \\nUral Federal University \\n', 'Bachelor of Program engineering \\n', 'October 2017 - Present Russian Federation \\n', ' \\n \\n', 'Ural Federal University \\n', 'Master of Financial markets and investments \\n', 'September 2012 - June 2014 Russian Federation \\n', ' \\n \\n', 'Ural State Mining University \\n', 'Master of Underground construction \\n', 'September 2007 - June 2012 \\n', ' \\n \\n \\n', ' \\n', 'SKILLS \\nHADOOP, Machine Learning, NLP, Oracle, PL/SQL, Power BI, Python, Recommendation \\nSystems, Spark, SQL, Tableau, Teradata, Time Series \\n']","Pavel Korniltsev 

Data Scientist Team Leader 

Saint Petersburg, Russian Federation 

+79226039000 
kornilcpppp@yandex.ru 

 
  
 

WORK EXPERIENCE 
SberBank 

Data Scientist Team Leader 

/ Leading teams and large portfolios of data science projects 
/ Representing the company at conferences through public speaking 
/ Delivering innovative technical solutions to improve business outcomes 
/ Creating scalable data pipelines and tools to reduce the time-to-market 
/ Working with diverse ML-technologies: NLP, NN, Recommender Systems 
/ Ensuring good communication between the parties to optimize strategies 

July 2017 - Present Russian Federation 

 
 

Mobile Telesystem 

Data Scientist 

/ Detecting anomalies in time series via sARIMA model 
/ Fraud-detecting through regression models 
/ Automating ETL process with SAS EG 
/ Developing BI reports for anomaly explanation 
/ Delivering insights to business supervisors 
/ Working with huge data sets via Teradata 

July 2015 - July 2017 Russian Federation 

 
 
 
 

EDUCATION 
Ural Federal University 

Bachelor of Program engineering 

October 2017 - Present Russian Federation 

 
 

Ural Federal University 

Master of Financial markets and investments 

September 2012 - June 2014 Russian Federation 

 
 

Ural State Mining University 

Master of Underground construction 

September 2007 - June 2012 

 
 
 

 

SKILLS 
HADOOP, Machine Learning, NLP, Oracle, PL/SQL, Power BI, Python, Recommendation 
Systems, Spark, SQL, Tableau, Teradata, Time Series 

"
35,source/Ivan Petrov.pdf,"['1 \\n', ' \\n', ' \\n', 'Ivan Petrov \\n', '@TechLead (Ex-Google Tech Lead) \\n', "" \\nI've reviewed hundreds of engineering resumes. Here's a recap on some of my best tips \\nbelow. More interview training with ex-Google and ex-Facebook engineers at \\nhttp://techinterviewpro.com/ \\n \\nThe 10-second rule \\n"", ""Take 10 seconds to scan your resume from the beginning, reading through it quickly (as if you \\nhad a dozen other resumes to get through). This may involve reading only the first half-page, \\nscanning the first 5 words of each sentence/bullet point. \\n \\nWhat do you see? If it's all over the place with fluff words, weak verbs, and shows weakness, \\nchances are your resume will get thrown out because 10 seconds is probably about as much \\ntime as a recruiter/hiring manager is going to give you. \\n \\nHere's what you need to ensure: \\n"", '● The first words at the top of your resume should be very software-developer oriented, \\n', 'around developing, implementing, creating, and building: \\n', '○ ""Developed a REST API in X using Python and Java..."" \\n○ ""Built a full-stack web app and launched to 1000 users..."" \\n○ ""Taught myself GoLang and implemented a framework for a webserver..."" \\n', ""That's starting to sound like a candidate we might be interested in. \\n"", ' \\n', '● The resume should flow in sentence structure, explaining one after another in active \\n', 'verbs what you have personally done. There\\'s a rhythm here: ""Built X, Created Y, \\nDeveloped Z, Implemented A, Built ..."" If you are breaking up the resume with statements \\nrather than actions like ""GeoPickV3: A project to terraform the geoclusters,"" that halts the \\nreadability of the resume with fluff words that explain absolutely nothing, and switching \\nthe subject between you, your project, your team, and your company causes mental \\nbreaks. The subject should be you. \\n', '● It should be clear that you are a strong developer for the targeted role within the first few \\n', 'moments of reading your resume. If it is not strong, you need to rephrase your resume. \\n', 'Pitfalls: \\n', '● Don\\'t use non-engineering words like ""Documented,"" ""Supported,"" ""Troubleshooted, \\n', '""Automated unit-testing,"" etc., You are not applying to be tech-support here or a \\ndocumentation writer, so there\\'s no need to highlight those points. Just like how you \\nwouldn\\'t highlight that you can cook, even though the company may need a few good \\ncooks -- that\\'s not what you\\'re expecting to do here. \\n', '2 \\n', ' \\n', ' \\n', ""● At the top, don't list low-priority information like hobbies, extracurriculars, or irrelevant \\n"", 'skills like Photoshop, Premiere, Excel. Move these towards the bottom of the resume, or \\njust leave out skills that may dilute your resume. \\n', ""● Don't spend too much time explaining what the company does or what the team does. \\n"", 'Explain what you personally did. \\n', ' \\nTell a Story \\n', 'Descriptions should tell a story. \\n \\nIt is absolutely useless to list a bunch of technical jargon that no one knows. Imagine reading a \\nlaundry list of: \\n', '● Implemented X (version 238200) \\n● Implemented Y in SprintSpark 3 \\n● Implemented Z using GeoLoaderXX1 \\n', 'It just doesn\\'t matter what someone implemented if there is no story behind it. \\n \\nEven worse, many people don\\'t explain the languages used, and these technologies are often all \\nproprietary so there is no way to reuse the skillset. \\n \\nSaying that you ""Implemented Carraform v2.0 and launched to Prexo SpringSuite"" is like saying \\nnothing, and yet most resumes are absolutely littered with phrases like this. \\n \\nI would recommend you explain your descriptions in a format of \\n[ACCOMPLISHMENT, IMPACT, CHALLENGE] \\n \\nThis 3 components tell a complete story. For instance, you might say ""Developed a server-side \\nlayout engine in iOS by teaching myself GoLang to automate 1000+ antiquated manual layouts. \\nWorking with a coworker, this began as an ambiguous project that I drove to completion and \\nlaunched company-wide."" This is far more impactful and relatable, since it explains what you did, \\nwhy it was hard, and what the validation of that work was. \\n \\nLess is more. \\n \\nFocus on a few very strong points and develop those, instead of a long list of bullet point \\nfeatures, none of which seem very interesting for anyone to care about. If you have a big \\naccomplishment, spend more time on your resume to talk about that. The fact is that any bullet \\npoint could have an amazing story behind it, but you need to reveal that story. \\n \\nI once saw a resume with a ""Co-founder"" role and yet there was a single 5-word bullet point. \\n""Co-founded a company and launched X."" That looks... disgenuine. Was this real? What were \\n', '3 \\n', ' \\n', ' \\n', ""the challenges and impact? Is this worth talking about? Obviously not if the candidate didn't have \\nmuch to say about it. \\n \\nIt's about you. Not about your accomplishment \\n"", 'What many candidates fail to realize is that I want to know what you, as an individual, did. \\nNot what your company did. \\nNot what your team did. \\nNot what your project did. \\nWhat you did. \\n \\nBecause the fact is, the only thing you\\'re able to bring to my team is you. \\n \\nSo I want to know about your personal contributions to a project. That\\'s it -- what type of \\ncharacter are you, what skills do you have, how did you apply those skills, what motivates you. It \\ndoesn\\'t matter if your company is ""the worldclass leader in B2B enterprise solutions with 50,000 \\nclients,"" if the only task you did was write tooling documentation. \\n \\nSo, don\\'t worry so much about listing every little accomplishment like how you ""Implemented \\nTerraform in CarbOS using Carabide."" Nothing in that sentence is usable or translatable. But if \\nyou were to say ""Taught myself Carabide in 2 months and collaborated with 3 teams to lead \\ndevelopment of Terraform, launching with CarbOS..."" That tells me a lot more about your ability to \\nlearn, your collaboration skills, and your passion for creating. \\n \\nShow. Don\\'t tell. \\n', 'Every bad resume seems to have a portion where the candidate will say: \\n \\n""I am hardworking, enthusiastic, and passionate. I am a great communicator, have excellent teamwork \\nskills, and am perfect!"" \\n', 'You\\'re telling me, but you\\'re not showing me. What reason do I have to believe you? \\n \\nIf you\\'re such a great communicator, you should have the stories to back that up -- instead of telling \\nme that you can communicate, show me that through a story about how you ""Mentored your team \\n', 'through weekly presentations, leading to the adoption of the ViewModel pattern in the codebase."" \\n', ""If you're passionate, tell me about a pet project you started. \\n \\nIf you're hardworking, tell me about how you taught yourself a new language and shipped it \\nunder a tight deadline. \\n"", '4 \\n', ' \\n', ' \\n', ' \\n', 'The resume is where these stories paint a picture of you. It \\n', 'is your personal marketing brochure, not a fact-sheet. \\n', ""What in here isn't BS? \\n"", 'A trained resume reviewer will be scanning for fake, BS stories. For a resume to standout, it \\nneeds to contain validation. You validate your skills by explaining the results -- the impacts of your \\nwork. Some tips here: \\n', '● For each story, list the impact. Instead of saying ""Implemented X,"" say ""Implemented X, \\n', 'and was featured in the TechCrunch."" Or ""... this work was adopted to the wider team."" Or ""... \\nsaving $XX thousands of dollars,"" or ""... and sped up developer velocity."" \\n', ""● I've seen resumes with 10 pet projects, and yet not a single link to the project website or \\n"", ""github or anything. Where's the evidence of any of this? Were these worthless projects \\nthat were trashed? \\n"", '● Put in concrete technical details where they count to substantiate your claims. If you \\n', 'have a one-liner ""Developed the iPhone,"" that\\'s just not believable. But if you can expand on \\nthat with all the relevant technologies & challenges, that makes your claim believable. \\nGrounding the claim in reality makes it impressive. \\n', ' \\n', ""People won't click on your links. \\n"", 'A lot of candidates put links in their resume, which is great. But just know that 90% of people \\nwill not be going through the hassle of opening each and every link. \\n', 'I\\'ve seen a number of resumes where people say ""Built Project Maven (github.com/myproject)."" The \\ndescription here isn\\'t sufficient and it needs to stand on its own - you can\\'t assume anyone will \\ngo to these links. \\n', '● If you have links, it may help to have a single personal page (yourname.com), rather than a \\n', ""dozen links to your github, linkedin, facebook, twitter, personal page, project page1, \\nproject page2, etc., Who's going to open all of that? \\n"", '● Make the links easy to type, using a shortener or custom domain. \\n', '● If someone takes the time to open any of these, make sure the projects look good. If I \\n', ""waste 5 minutes of my time to check out your personal GitHub, and it's just scrap waste \\nprojects... guess where your resume's going too? \\n"", '5 \\n', ' \\n', ' \\n', '  \\nTarget your resume to the role. \\n', 'A lot of candidates get confused about ""facts"" vs ""story"". Your resume is not a fact sheet. It is a \\ntargeted story, subjectively told in an effort to persuade a biased decision. \\n', 'If you worked in a ""Hardware Engineer"" role and now you want to do Software Engineering... do you \\ntalk about your hardware work? If you can cook, do you talk about that? If you worked as an Uber \\ndriver, do you list that? The answer to all of these is ""no."" \\n', 'Depending on the role at hand, you want to highlight just the relevant skills. Even if at your last \\njob 10% of the work was Python, if you\\'re applying for a Python role you want to be gushing \\nabout all the Python development that you did. ""Implemented X in Python. Used Python to do Y. \\nTaught myself Python frameworks Django and Flask to do Z."" \\n', ""If the role is for Machine Learning, focus in on those keywords. \\nIf it's for a web frontend engineer, focus in on your web javascript skills. If \\n"", ""you aim for everything, you'll hit nothing. \\n"", 'You must code. \\n', ""The hilarious thing is sometimes people apply for SWE roles and yet they don't seem to want to \\nactually code. They'll go into the interviews and say: \\n"", ""● I don't code anymore. I'm more into strategy. \\n● I lead projects. \\n● I managed my team and coordinated them. \\n"", ""● I'm a co-founder and CEO. \\n● I'm an entrepreneur. \\n"", ""● I have leadership skills. \\n● I'm a great communicator and team player. \\n"", ' \\nI once saw a resume where the top 3 experiences were ""Co-Founder"", ""Co-Founder, ""CTO."" OK, maybe \\nyou should go apply to be a cofounder then? Because this role is for coder. \\n', 'Too many people don\\'t want to code, or think they\\'re ""above the code."" Many resumes I\\'ve read \\nseem reluctant to mention code or languages. People might say ""Created X, Y, and Z and \\n', 'shipped this project, leading and coordinating development on X."" Well, where in this sentence did \\nyou actually do coding? \\n', '6 \\n', ' \\n', ' \\n', ' \\n', ""Let's put it this way: If you've applied for a SWE role, you're expected to code. Not to waltz \\naround the office in a suit going to meetings with the VP of Sales. \\n"", 'So show the languages, frameworks, and technologies that you\\'re using. \\n \\nA lot of people will bucket all of that into the bottom of their resume under ""Skills: C, Python, \\nJavascript"" and never mention any of these again in the rest of their resume. That is simply not \\nvery convincing evidence that you can actually code. It doesn\\'t explain how well you can code. \\n \\nFormatting \\n', ""Let's talk about formatting. It matters. \\n"", '● Single page. If you are using more than a single page, you are rambling. Trim it down \\n', 'because no one has time to read all of this stuff. Highlight just your best, most recent \\nwork like a brochure. \\n', '● Single Column. Double-column layouts and fancy fonts/graphics generally just distract \\n', ""and people can accidentally skip portions of your resume. It doesn't flow. \\n"", '● Fully spell the names of companies. Which looks better? ""VMWare"" or ""VMWare, Inc.""? \\n', 'The mental weight of the fully-spelled name makes it look more official and \\nprofessional. \\n', ""● Fully spell the names of your degree & education. Similarly, don't short-change your \\n"", '4-year degree (if you have one) by saying ""Majored in cs at Ohio state."" Make it look \\ngood. ""Bachelor\\'s of Science in Computer Science. Ohio State, 2004. 3.80 GPA."" That\\'s \\nbetter. It may even be appropriate here to list additonal activities, honor societies, \\nrelevant coursework & projects to bulk up the education a little more so that it\\'s not just a \\none-liner. \\n', '● Grammar check. \\n● Spelling check. \\n● Capitalization check. \\n● No photos. In the US, it is illegal to discriminate based on age, gender, race, or \\n', ""appearance. Don't put photos on your resume for that purpose. \\n"", ""● Your name. I've been toying with this idea recently, but it's something to think about. \\n"", 'Let\\'s pretend you have a name like ""Xheycho Yining Sundarabai Xylophone."" I\\'m sure it\\'s a \\nbeautiful name in your language, but it doesn\\'t look familiar for many people. I\\'ve seen \\nsome colleagues with unpronounceable names and they say ""Just call me Bobby,"" or \\n""Just call me Shay"" and that instantly seems to make them more relatable. Think about it \\n-- your name is your personal brand and is to be memorable. It paints a picture about the \\nperson behind the resume. It may help to put something like: ""Shay"" (Xheycho Yining \\nSundarabai Xylophone). (Up to you though, this is just a theory). \\n', '● Age. Age discrimination is absolutely illegal. If age is a concern for you, consider \\n', 'removing your graduation dates. No one will ask you to list those, because it is illegal. \\n', '7 \\n', ' \\n', ' \\n', ' \\nThe objective. \\n', ""Not everyone needs an objective. \\n \\nBut, if you have a broad background, an objective may help focus your resume and clarify your \\nintentions -- especially if you're switching fields, people may get thrown off. An objective is a quick \\nway to briefly explain what's going on here, instead of allowing a person to read the resume once, \\nbecome confused at your history, then read it again, then think about the open roles, then try to \\nfigure out if there's any mistake here, etc., \\n"", 'Oftentimes, I\\'ll see a candidate\\'s resume and it\\'s all over the place. There\\'s a little of everything. So \\nI ask myself, ""First of all, what type of role is this person going for? iOS? Android? Backend? \\n', 'Frontend? Machine Learning? Graphics? Are they even interested in graphics?"" \\n \\nThis is one reason you need to focus your resume, as mentioned above. An objective is a tool \\nfor helping you do that if you feel your background is wandering all over the place. \\n \\nLast Impressions count. \\n', ""Every resume has a first impression. \\nAnd every resume leaves a last impression. This \\nis the last thing on there. \\nMake it look good and make it count. \\n \\nI've seen some resumes that just end with something forgettable like: \\n \\n"", 'Education \\nbs in biology at Canvers Institute, 2008 \\n', ' \\nDoes that look good to you? bleh. \\nI think even if you were to list a few fun facts about you as a person like a cool hobby, a cool \\nproject, or next to your education list some neat clubs/activities/coursework you did that can \\nmake your resume more memorable. \\n \\nMake yourself seem like someone people want to bring in to personally meet. \\n \\n', ' \\n']","1 

 

 

Ivan Petrov 

@TechLead (Ex-Google Tech Lead) 

 
I've reviewed hundreds of engineering resumes. Here's a recap on some of my best tips 
below. More interview training with ex-Google and ex-Facebook engineers at 
http://techinterviewpro.com/ 
 
The 10-second rule 

Take 10 seconds to scan your resume from the beginning, reading through it quickly (as if you 
had a dozen other resumes to get through). This may involve reading only the first half-page, 
scanning the first 5 words of each sentence/bullet point. 
 
What do you see? If it's all over the place with fluff words, weak verbs, and shows weakness, 
chances are your resume will get thrown out because 10 seconds is probably about as much 
time as a recruiter/hiring manager is going to give you. 
 
Here's what you need to ensure: 

● The first words at the top of your resume should be very software-developer oriented, 

around developing, implementing, creating, and building: 

○ ""Developed a REST API in X using Python and Java..."" 
○ ""Built a full-stack web app and launched to 1000 users..."" 
○ ""Taught myself GoLang and implemented a framework for a webserver..."" 

That's starting to sound like a candidate we might be interested in. 

 

● The resume should flow in sentence structure, explaining one after another in active 

verbs what you have personally done. There's a rhythm here: ""Built X, Created Y, 
Developed Z, Implemented A, Built ..."" If you are breaking up the resume with statements 
rather than actions like ""GeoPickV3: A project to terraform the geoclusters,"" that halts the 
readability of the resume with fluff words that explain absolutely nothing, and switching 
the subject between you, your project, your team, and your company causes mental 
breaks. The subject should be you. 

● It should be clear that you are a strong developer for the targeted role within the first few 

moments of reading your resume. If it is not strong, you need to rephrase your resume. 

Pitfalls: 

● Don't use non-engineering words like ""Documented,"" ""Supported,"" ""Troubleshooted, 

""Automated unit-testing,"" etc., You are not applying to be tech-support here or a 
documentation writer, so there's no need to highlight those points. Just like how you 
wouldn't highlight that you can cook, even though the company may need a few good 
cooks -- that's not what you're expecting to do here. 

2 

 

 

● At the top, don't list low-priority information like hobbies, extracurriculars, or irrelevant 

skills like Photoshop, Premiere, Excel. Move these towards the bottom of the resume, or 
just leave out skills that may dilute your resume. 

● Don't spend too much time explaining what the company does or what the team does. 

Explain what you personally did. 

 
Tell a Story 

Descriptions should tell a story. 
 
It is absolutely useless to list a bunch of technical jargon that no one knows. Imagine reading a 
laundry list of: 

● Implemented X (version 238200) 
● Implemented Y in SprintSpark 3 
● Implemented Z using GeoLoaderXX1 

It just doesn't matter what someone implemented if there is no story behind it. 
 
Even worse, many people don't explain the languages used, and these technologies are often all 
proprietary so there is no way to reuse the skillset. 
 
Saying that you ""Implemented Carraform v2.0 and launched to Prexo SpringSuite"" is like saying 
nothing, and yet most resumes are absolutely littered with phrases like this. 
 
I would recommend you explain your descriptions in a format of 
[ACCOMPLISHMENT, IMPACT, CHALLENGE] 
 
This 3 components tell a complete story. For instance, you might say ""Developed a server-side 
layout engine in iOS by teaching myself GoLang to automate 1000+ antiquated manual layouts. 
Working with a coworker, this began as an ambiguous project that I drove to completion and 
launched company-wide."" This is far more impactful and relatable, since it explains what you did, 
why it was hard, and what the validation of that work was. 
 
Less is more. 
 
Focus on a few very strong points and develop those, instead of a long list of bullet point 
features, none of which seem very interesting for anyone to care about. If you have a big 
accomplishment, spend more time on your resume to talk about that. The fact is that any bullet 
point could have an amazing story behind it, but you need to reveal that story. 
 
I once saw a resume with a ""Co-founder"" role and yet there was a single 5-word bullet point. 
""Co-founded a company and launched X."" That looks... disgenuine. Was this real? What were 

3 

 

 

the challenges and impact? Is this worth talking about? Obviously not if the candidate didn't have 
much to say about it. 
 
It's about you. Not about your accomplishment 

What many candidates fail to realize is that I want to know what you, as an individual, did. 
Not what your company did. 
Not what your team did. 
Not what your project did. 
What you did. 
 
Because the fact is, the only thing you're able to bring to my team is you. 
 
So I want to know about your personal contributions to a project. That's it -- what type of 
character are you, what skills do you have, how did you apply those skills, what motivates you. It 
doesn't matter if your company is ""the worldclass leader in B2B enterprise solutions with 50,000 
clients,"" if the only task you did was write tooling documentation. 
 
So, don't worry so much about listing every little accomplishment like how you ""Implemented 
Terraform in CarbOS using Carabide."" Nothing in that sentence is usable or translatable. But if 
you were to say ""Taught myself Carabide in 2 months and collaborated with 3 teams to lead 
development of Terraform, launching with CarbOS..."" That tells me a lot more about your ability to 
learn, your collaboration skills, and your passion for creating. 
 
Show. Don't tell. 

Every bad resume seems to have a portion where the candidate will say: 
 
""I am hardworking, enthusiastic, and passionate. I am a great communicator, have excellent teamwork 
skills, and am perfect!"" 

You're telling me, but you're not showing me. What reason do I have to believe you? 
 
If you're such a great communicator, you should have the stories to back that up -- instead of telling 
me that you can communicate, show me that through a story about how you ""Mentored your team 

through weekly presentations, leading to the adoption of the ViewModel pattern in the codebase."" 

If you're passionate, tell me about a pet project you started. 
 
If you're hardworking, tell me about how you taught yourself a new language and shipped it 
under a tight deadline. 

4 

 

 

 

The resume is where these stories paint a picture of you. It 

is your personal marketing brochure, not a fact-sheet. 

What in here isn't BS? 

A trained resume reviewer will be scanning for fake, BS stories. For a resume to standout, it 
needs to contain validation. You validate your skills by explaining the results -- the impacts of your 
work. Some tips here: 

● For each story, list the impact. Instead of saying ""Implemented X,"" say ""Implemented X, 

and was featured in the TechCrunch."" Or ""... this work was adopted to the wider team."" Or ""... 
saving $XX thousands of dollars,"" or ""... and sped up developer velocity."" 

● I've seen resumes with 10 pet projects, and yet not a single link to the project website or 

github or anything. Where's the evidence of any of this? Were these worthless projects 
that were trashed? 

● Put in concrete technical details where they count to substantiate your claims. If you 

have a one-liner ""Developed the iPhone,"" that's just not believable. But if you can expand on 
that with all the relevant technologies & challenges, that makes your claim believable. 
Grounding the claim in reality makes it impressive. 

 

People won't click on your links. 

A lot of candidates put links in their resume, which is great. But just know that 90% of people 
will not be going through the hassle of opening each and every link. 

I've seen a number of resumes where people say ""Built Project Maven (github.com/myproject)."" The 
description here isn't sufficient and it needs to stand on its own - you can't assume anyone will 
go to these links. 

● If you have links, it may help to have a single personal page (yourname.com), rather than a 

dozen links to your github, linkedin, facebook, twitter, personal page, project page1, 
project page2, etc., Who's going to open all of that? 

● Make the links easy to type, using a shortener or custom domain. 

● If someone takes the time to open any of these, make sure the projects look good. If I 

waste 5 minutes of my time to check out your personal GitHub, and it's just scrap waste 
projects... guess where your resume's going too? 

5 

 

 

  
Target your resume to the role. 

A lot of candidates get confused about ""facts"" vs ""story"". Your resume is not a fact sheet. It is a 
targeted story, subjectively told in an effort to persuade a biased decision. 

If you worked in a ""Hardware Engineer"" role and now you want to do Software Engineering... do you 
talk about your hardware work? If you can cook, do you talk about that? If you worked as an Uber 
driver, do you list that? The answer to all of these is ""no."" 

Depending on the role at hand, you want to highlight just the relevant skills. Even if at your last 
job 10% of the work was Python, if you're applying for a Python role you want to be gushing 
about all the Python development that you did. ""Implemented X in Python. Used Python to do Y. 
Taught myself Python frameworks Django and Flask to do Z."" 

If the role is for Machine Learning, focus in on those keywords. 
If it's for a web frontend engineer, focus in on your web javascript skills. If 

you aim for everything, you'll hit nothing. 

You must code. 

The hilarious thing is sometimes people apply for SWE roles and yet they don't seem to want to 
actually code. They'll go into the interviews and say: 

● I don't code anymore. I'm more into strategy. 
● I lead projects. 
● I managed my team and coordinated them. 

● I'm a co-founder and CEO. 
● I'm an entrepreneur. 

● I have leadership skills. 
● I'm a great communicator and team player. 

 
I once saw a resume where the top 3 experiences were ""Co-Founder"", ""Co-Founder, ""CTO."" OK, maybe 
you should go apply to be a cofounder then? Because this role is for coder. 

Too many people don't want to code, or think they're ""above the code."" Many resumes I've read 
seem reluctant to mention code or languages. People might say ""Created X, Y, and Z and 

shipped this project, leading and coordinating development on X."" Well, where in this sentence did 
you actually do coding? 

6 

 

 

 

Let's put it this way: If you've applied for a SWE role, you're expected to code. Not to waltz 
around the office in a suit going to meetings with the VP of Sales. 

So show the languages, frameworks, and technologies that you're using. 
 
A lot of people will bucket all of that into the bottom of their resume under ""Skills: C, Python, 
Javascript"" and never mention any of these again in the rest of their resume. That is simply not 
very convincing evidence that you can actually code. It doesn't explain how well you can code. 
 
Formatting 

Let's talk about formatting. It matters. 

● Single page. If you are using more than a single page, you are rambling. Trim it down 

because no one has time to read all of this stuff. Highlight just your best, most recent 
work like a brochure. 

● Single Column. Double-column layouts and fancy fonts/graphics generally just distract 

and people can accidentally skip portions of your resume. It doesn't flow. 

● Fully spell the names of companies. Which looks better? ""VMWare"" or ""VMWare, Inc.""? 

The mental weight of the fully-spelled name makes it look more official and 
professional. 

● Fully spell the names of your degree & education. Similarly, don't short-change your 

4-year degree (if you have one) by saying ""Majored in cs at Ohio state."" Make it look 
good. ""Bachelor's of Science in Computer Science. Ohio State, 2004. 3.80 GPA."" That's 
better. It may even be appropriate here to list additonal activities, honor societies, 
relevant coursework & projects to bulk up the education a little more so that it's not just a 
one-liner. 

● Grammar check. 
● Spelling check. 
● Capitalization check. 
● No photos. In the US, it is illegal to discriminate based on age, gender, race, or 

appearance. Don't put photos on your resume for that purpose. 

● Your name. I've been toying with this idea recently, but it's something to think about. 

Let's pretend you have a name like ""Xheycho Yining Sundarabai Xylophone."" I'm sure it's a 
beautiful name in your language, but it doesn't look familiar for many people. I've seen 
some colleagues with unpronounceable names and they say ""Just call me Bobby,"" or 
""Just call me Shay"" and that instantly seems to make them more relatable. Think about it 
-- your name is your personal brand and is to be memorable. It paints a picture about the 
person behind the resume. It may help to put something like: ""Shay"" (Xheycho Yining 
Sundarabai Xylophone). (Up to you though, this is just a theory). 

● Age. Age discrimination is absolutely illegal. If age is a concern for you, consider 

removing your graduation dates. No one will ask you to list those, because it is illegal. 

7 

 

 

 
The objective. 

Not everyone needs an objective. 
 
But, if you have a broad background, an objective may help focus your resume and clarify your 
intentions -- especially if you're switching fields, people may get thrown off. An objective is a quick 
way to briefly explain what's going on here, instead of allowing a person to read the resume once, 
become confused at your history, then read it again, then think about the open roles, then try to 
figure out if there's any mistake here, etc., 

Oftentimes, I'll see a candidate's resume and it's all over the place. There's a little of everything. So 
I ask myself, ""First of all, what type of role is this person going for? iOS? Android? Backend? 

Frontend? Machine Learning? Graphics? Are they even interested in graphics?"" 
 
This is one reason you need to focus your resume, as mentioned above. An objective is a tool 
for helping you do that if you feel your background is wandering all over the place. 
 
Last Impressions count. 

Every resume has a first impression. 
And every resume leaves a last impression. This 
is the last thing on there. 
Make it look good and make it count. 
 
I've seen some resumes that just end with something forgettable like: 
 

Education 
bs in biology at Canvers Institute, 2008 

 
Does that look good to you? bleh. 
I think even if you were to list a few fun facts about you as a person like a cool hobby, a cool 
project, or next to your education list some neat clubs/activities/coursework you did that can 
make your resume more memorable. 
 
Make yourself seem like someone people want to bring in to personally meet. 
 

 

"
36,source/Alina   MANAFLI.pdf,"[' Alina \\n MANAFLI \\n', ' \\n', '+46 764 595 000 \\n', 'aaaaaamanafli@gmail.com \\n', '  \\n', ' \\n \\n', ' EDUCATION  \\n', '9/2019 – 6/2021 \\nExpected \\n', ' \\n \\n \\n', '1/2020 - 1/2021 \\nExpected \\n', ' \\n \\n', 'Tallinn University of Technology \\nMSc Computer and Systems Engineering, GPA 4.4/5.O \\nComputer Systems Engineering, Object Oriented Programming \\n', ' \\n', 'Uppsala University \\nNORDTEK Exchange Studies, Computer Science, GPA 5.O/5.O \\nSoftware Engineering and Project Management, Advanced Computer Architecture, Computer \\nGraphics, Low-Level Parallel Programming, Parallel Programming for EPciency, Computer Networks, \\nAgile and Extreme Project Management \\n', ' \\n', '9/2015 - 6/2019 \\nLomonosov Moscow State University \\nBSc Applied Mathematics, GPA 5.O/5.O \\nProgramming in C/C++, Discrete Mathematics, Parallel Programming, Linear Algebra, Calculus, Math- \\nematical Statistics, Methods of Optimisation, Numerical Methods \\n', ' \\n', '7/2017 - 8/2017 \\nPeter the Great St.Petersburg Polytechnic University \\nSummer School in Microelectronic Devices Programming \\n', ' \\n', ' EXPERIENCE  \\n', '8/2020 - 11/2020 \\nOngoing \\n', ' \\n \\n \\n \\n \\n', '8/2020 - 11/2020 \\nOngoing \\n', ' \\n \\n', 'Kuehne + Nagel \\nTallinn, Estonia (remote) \\n', 'IT Trainee \\nDesigning and developing an open source fullstack application for Supply Chain Management of a \\nfictional business. \\nReact /  Spring /   HTML /   CSS /   Jira \\n', 'Uppsala University \\nUppsala, Sweden \\n', 'Teaching Assistant \\nAssisting in teaching of the Software Engineering and Project Management course by leading the \\nproject work of four groups of students in the role of a Scrum coach and the project’s client. \\nAgile / Scrum /  Kanban \\n', ' \\n', '7/2018 – 9/2018 \\nCERN \\nGeneva, Switzerland \\n', 'Openlab Summer Intern \\nTested and optimized a set of common Question Answering NLP models on The Stanford Question \\nAnswering Dataset using Tensorflow . \\nPython / NLP /  Tensorflow /  CUDA \\n', '5/2017 - 7/2017 \\nR.I.S.K. Company \\nBaku, Azerbaijan \\n', 'Software Engineer Intern \\nProgrammed a voice recorder with Arduino by applying Digital Signal Processing methods. \\nArduino /  C /   DSP \\n', ' \\n', ' PROJECTS  \\n', ' \\n', 'August 2020 \\nConway’s Game of Life Visualizer |   Github  \\nBuilt a fullstack application in React and Spring to visualize the evolution of alive and dead cells on \\na grid by the rules described by John Conway. \\nJava /  Spring /   React /   HTML /   CSS \\n', ' \\n', 'July 2020 \\nMusic Advisor |   Github  \\nCreated a personal music advisor that makes preference-based suggestions and provides links to \\nnew releases and featured playlists through Spotify API. \\nJava / Spotify API /  OAuth \\n', ' \\n', 'May 2020 \\nSpace Simulator |    Youtube  \\nDesigned and built a C++ application with OpenGL able to procedurally generate and render a large \\nnumber of solar systems, allowing the user to move in the created space. Parallelized with OpenMP. \\nC++ / OpenGL / GLSL / OpenMP \\n', ' SKILLS  \\n', 'Programming Languages: \\nJava, JavaScript, C, C++ \\n', 'Parallel Programming / GPU: \\nOpenCL, CUDA, OpenMP, OpenGL \\n', 'Web: \\nReact, Spring \\n', 'Version Control: \\nGit \\n', 'Languages: \\nEnglish (fluent), Russian (native), Azerbaijani (native) \\n', ' \\n \\n', ' CERTIFICATES AND AWARDS  \\n', 'Aug 2020 \\nGoogle Get Ahead Program \\n- Participated in a 8 week virtual program for selected CS students from all over EMEA \\n- The program involved technical challenges, YouTube live training and interview workshops \\n', ' \\n', 'Jan 2020 \\nNordplus grant for NORDTEK exchange studies recipient \\n', 'Jan 2020 \\nKristjan Jaak Study Periods Abroad Scholarship recipient \\n', 'Sep 2019 \\nDora Pluss Scholarship recipient \\n', 'Dec 2018 \\nRepresentative of Applied Mathematics Faculty at the Second National Student Conference \\n', 'Nov 2017 \\nParticipant of ACM ICPC Subregional Programming contest \\n', 'Jul 2017 \\nIntel FPGA Technical Training, Peter the Great St. Petersburg \\n', 'Oct 2016 \\nParticipant of ACM ICPC Subregional Programming contest \\n', 'Sep 2016 \\nMedia Team Volunteer at 42nd Chess Olympiad \\n', 'Apr 2016 \\nParticipant of the All-Republican Olympiad in Information Science \\n']"," Alina 
 MANAFLI 

 

+46 764 595 000 

aaaaaamanafli@gmail.com 

  

 
 

 EDUCATION  

9/2019 – 6/2021 
Expected 

 
 
 

1/2020 - 1/2021 
Expected 

 
 

Tallinn University of Technology 
MSc Computer and Systems Engineering, GPA 4.4/5.O 
Computer Systems Engineering, Object Oriented Programming 

 

Uppsala University 
NORDTEK Exchange Studies, Computer Science, GPA 5.O/5.O 
Software Engineering and Project Management, Advanced Computer Architecture, Computer 
Graphics, Low-Level Parallel Programming, Parallel Programming for EPciency, Computer Networks, 
Agile and Extreme Project Management 

 

9/2015 - 6/2019 
Lomonosov Moscow State University 
BSc Applied Mathematics, GPA 5.O/5.O 
Programming in C/C++, Discrete Mathematics, Parallel Programming, Linear Algebra, Calculus, Math- 
ematical Statistics, Methods of Optimisation, Numerical Methods 

 

7/2017 - 8/2017 
Peter the Great St.Petersburg Polytechnic University 
Summer School in Microelectronic Devices Programming 

 

 EXPERIENCE  

8/2020 - 11/2020 
Ongoing 

 
 
 
 
 

8/2020 - 11/2020 
Ongoing 

 
 

Kuehne + Nagel 
Tallinn, Estonia (remote) 

IT Trainee 
Designing and developing an open source fullstack application for Supply Chain Management of a 
fictional business. 
React /  Spring /   HTML /   CSS /   Jira 

Uppsala University 
Uppsala, Sweden 

Teaching Assistant 
Assisting in teaching of the Software Engineering and Project Management course by leading the 
project work of four groups of students in the role of a Scrum coach and the project’s client. 
Agile / Scrum /  Kanban 

 

7/2018 – 9/2018 
CERN 
Geneva, Switzerland 

Openlab Summer Intern 
Tested and optimized a set of common Question Answering NLP models on The Stanford Question 
Answering Dataset using Tensorflow . 
Python / NLP /  Tensorflow /  CUDA 

5/2017 - 7/2017 
R.I.S.K. Company 
Baku, Azerbaijan 

Software Engineer Intern 
Programmed a voice recorder with Arduino by applying Digital Signal Processing methods. 
Arduino /  C /   DSP 

 

 PROJECTS  

 

August 2020 
Conway’s Game of Life Visualizer |   Github  
Built a fullstack application in React and Spring to visualize the evolution of alive and dead cells on 
a grid by the rules described by John Conway. 
Java /  Spring /   React /   HTML /   CSS 

 

July 2020 
Music Advisor |   Github  
Created a personal music advisor that makes preference-based suggestions and provides links to 
new releases and featured playlists through Spotify API. 
Java / Spotify API /  OAuth 

 

May 2020 
Space Simulator |    Youtube  
Designed and built a C++ application with OpenGL able to procedurally generate and render a large 
number of solar systems, allowing the user to move in the created space. Parallelized with OpenMP. 
C++ / OpenGL / GLSL / OpenMP 

 SKILLS  

Programming Languages: 
Java, JavaScript, C, C++ 

Parallel Programming / GPU: 
OpenCL, CUDA, OpenMP, OpenGL 

Web: 
React, Spring 

Version Control: 
Git 

Languages: 
English (fluent), Russian (native), Azerbaijani (native) 

 
 

 CERTIFICATES AND AWARDS  

Aug 2020 
Google Get Ahead Program 
- Participated in a 8 week virtual program for selected CS students from all over EMEA 
- The program involved technical challenges, YouTube live training and interview workshops 

 

Jan 2020 
Nordplus grant for NORDTEK exchange studies recipient 

Jan 2020 
Kristjan Jaak Study Periods Abroad Scholarship recipient 

Sep 2019 
Dora Pluss Scholarship recipient 

Dec 2018 
Representative of Applied Mathematics Faculty at the Second National Student Conference 

Nov 2017 
Participant of ACM ICPC Subregional Programming contest 

Jul 2017 
Intel FPGA Technical Training, Peter the Great St. Petersburg 

Oct 2016 
Participant of ACM ICPC Subregional Programming contest 

Sep 2016 
Media Team Volunteer at 42nd Chess Olympiad 

Apr 2016 
Participant of the All-Republican Olympiad in Information Science 

"
37,source/Alena Guseinova.pdf,"['Alena Guseinova\\n', '9020006132, guseinova.ale@gmail.com\\n', 'https://www.linkedin.com/in/alena-guseinova/\\n', 'Summary\\n', 'Software developer with three years of hands-on experience in software development.\\nProficient in pillars of OOP. Has an experience in finance positions in bank, trust worthy\\nand can deal with confidentially data. In-depth knowledge of mathematical concepts,\\ncalculation and formulas from a Master of Mechanics, Mathematics related discipline.\\nFlexible, adaptable and comfortable dealing with changing priorities.\\n', 'Technical Skills\\n', 'Programming: Lotus Domino, Formula, Visual Basic, C#\\n', 'Professional Experience\\n', 'IBM Lotus Notes Developer\\nApril 2018 to July 2021\\n', 'Russian Standard Bank, Russia\\nIs in the top Russian banks by bank assets. https://www.rsb.ru/\\n', ""•\\nDeveloped new applications in Lotus Notes, which results in improvement of bank\\nclerks' workflow\\n"", '•\\nRevised and optimized existing applications, such as passes to bank cash\\ndesk, meetings of bank collegial bodies, trainings\\n', '•\\nIntegrated IBM Lotus Notes/Domino applications with other systems\\n', '•\\nCollected customer requirements. Maintained and supported applications\\n', 'Financial Analyst\\nOctober 2012 - December 2014\\n', 'Financial Accountant\\nDecember 2010 – October 2012\\n', 'Probusiness Bank, Russia\\n', '•\\nDeveloped Excel macro to increase productivity\\n', '•\\nProvided analysis of financial data using data query tools such as SQL\\n', ""•\\nAnalyzed various divisions' performance and maintained process automation\\n"", 'Education\\n', 'Saratov State University, Saratov, Russia\\n2004-2009\\n', 'Masters in Mechanics, Mathematics related discipline\\nWES badge: https://www.youracclaim.com/badges/c6a75c01-1e81-4f29-83d3-\\n848e9318129e/public_url\\n']","Alena Guseinova

9020006132, guseinova.ale@gmail.com

https://www.linkedin.com/in/alena-guseinova/

Summary

Software developer with three years of hands-on experience in software development.
Proficient in pillars of OOP. Has an experience in finance positions in bank, trust worthy
and can deal with confidentially data. In-depth knowledge of mathematical concepts,
calculation and formulas from a Master of Mechanics, Mathematics related discipline.
Flexible, adaptable and comfortable dealing with changing priorities.

Technical Skills

Programming: Lotus Domino, Formula, Visual Basic, C#

Professional Experience

IBM Lotus Notes Developer
April 2018 to July 2021

Russian Standard Bank, Russia
Is in the top Russian banks by bank assets. https://www.rsb.ru/

•
Developed new applications in Lotus Notes, which results in improvement of bank
clerks' workflow

•
Revised and optimized existing applications, such as passes to bank cash
desk, meetings of bank collegial bodies, trainings

•
Integrated IBM Lotus Notes/Domino applications with other systems

•
Collected customer requirements. Maintained and supported applications

Financial Analyst
October 2012 - December 2014

Financial Accountant
December 2010 – October 2012

Probusiness Bank, Russia

•
Developed Excel macro to increase productivity

•
Provided analysis of financial data using data query tools such as SQL

•
Analyzed various divisions' performance and maintained process automation

Education

Saratov State University, Saratov, Russia
2004-2009

Masters in Mechanics, Mathematics related discipline
WES badge: https://www.youracclaim.com/badges/c6a75c01-1e81-4f29-83d3-
848e9318129e/public_url

"
38,source/Liza MOKHAN.pdf,"['Sunny Isles Beach, 33160, FL\\nlinkedin.com/in/liza-mokhan-1a8\\n348136\\n', 'Liza MOKHAN\\n(+1) 682-000-9183\\n', 'liza.mokhan@gmail.com\\n', 'A QA AUTOMATION ENGINEER WITH 4+ YEARS OF EXPERIENCE WITH GREAT ATTENTION TO DETAILS, AN EXCELLENT ACADEMIC RECORD, WITH\\n', 'GOOD UNDERSTANDING OF SOFTWARE DEVELOPMENT LIFECYCLE, GOOD KNOWLEDGE OF SOFTWARE TESTING CONCEPTS AND METHODOLOGIES.\\n', 'LOOKING FOR A CHALLENGING ROLE IN A HIGH-LEVEL PROFESSIONAL ENVIRONMENT TO UTILIZE\\n', 'MY TECHNICAL, MATH AND COMMUNICATION SKILLS.\\n', 'EXPERIENCE\\nQuality Assurance Automation Engineer\\nMarTech Stack LLC\\nOct 2019 – Dec 2020\\n', '● Developed, modified, and executed software test plans, automated scripts, and programs for testing.\\n● Increased the productivity of forms by analyzing test results, providing feedback, and consulting with development\\n', 'engineers in the resolution of various problems.\\n', '● Tracked software problems and verified their correction. Coordinated necessary testing resources to\\n', 'meet deadlines.\\n', 'QA Engineer\\nIT Royalty\\nFeb 2014 – Dec 2014\\n', '● Investigated and analyzed requirements, specifications and technical documents for creating and maintaining well\\n', 'designed test documentation (test plans and test cases).\\n', '● Designed and executed complex SQL scripts to maintain data. Performed black-box testing, integration, regression,\\n', 'smoke, positive/negative testing.\\n', 'QA Automation Software Testing Engineer\\nSmartSoft\\nJan 2013 – Jan 2014\\n', 'GMSP Risk Feed Quality Monitor: tool for checking big amounts of financial data via diﬀerent business rules. Start-up\\ncompany specialized in development and support of custom web and back-end solutions.\\n● Participated in daily/weekly meetings in accordance with Agile principles.\\n● Performed functional manual testing of UI (Web application).\\n● Implemented and maintained QA Automation tests using Selenium Webdriver and C#\\n', 'Junior Software Testing Engineer\\nHealthCorp\\nJun 2011 – Jul 2012\\n', '● Analyzed specification, added details, wireframes and screenshots to it.\\n● Performed functional manual testing on diﬀerent phases of testing cycle.\\n● Performed usability testing. Reported issues into an owned bug-tracking system.\\n', 'SKILLS\\n', '●\\nExperience in Selenium (Webdriver), C#.\\n', '●\\nExperience in SQL (MS SQL).\\n', '●\\nExperience in Waterfall and Agile (Scrum, Kanban) methodologies.\\n', '●\\nExperience in preparing and maintaining testing/technical documentation.\\n', '●\\nStrong communication and self-organizing skills, troubleshooting and problem-solving skills.\\n', '●\\nStrong work ethics, passionate and detail oriented, focused on result and quality, creative thinking, initiative\\nand committed to project goals. Team player.\\n', 'EDUCATION\\nMinsk, Belarus\\nBelarusian State University\\n2008 - 2009\\n', ""Master's degree, Mathematics\\n"", 'Minsk, Belarus\\nBelarusian State University\\n2005 - 2008\\n', ""Bachelor's degree (diploma cum laude) in Mathematics and computer science\\n""]","Sunny Isles Beach, 33160, FL
linkedin.com/in/liza-mokhan-1a8
348136

Liza MOKHAN
(+1) 682-000-9183

liza.mokhan@gmail.com

A QA AUTOMATION ENGINEER WITH 4+ YEARS OF EXPERIENCE WITH GREAT ATTENTION TO DETAILS, AN EXCELLENT ACADEMIC RECORD, WITH

GOOD UNDERSTANDING OF SOFTWARE DEVELOPMENT LIFECYCLE, GOOD KNOWLEDGE OF SOFTWARE TESTING CONCEPTS AND METHODOLOGIES.

LOOKING FOR A CHALLENGING ROLE IN A HIGH-LEVEL PROFESSIONAL ENVIRONMENT TO UTILIZE

MY TECHNICAL, MATH AND COMMUNICATION SKILLS.

EXPERIENCE
Quality Assurance Automation Engineer
MarTech Stack LLC
Oct 2019 – Dec 2020

● Developed, modified, and executed software test plans, automated scripts, and programs for testing.
● Increased the productivity of forms by analyzing test results, providing feedback, and consulting with development

engineers in the resolution of various problems.

● Tracked software problems and verified their correction. Coordinated necessary testing resources to

meet deadlines.

QA Engineer
IT Royalty
Feb 2014 – Dec 2014

● Investigated and analyzed requirements, specifications and technical documents for creating and maintaining well

designed test documentation (test plans and test cases).

● Designed and executed complex SQL scripts to maintain data. Performed black-box testing, integration, regression,

smoke, positive/negative testing.

QA Automation Software Testing Engineer
SmartSoft
Jan 2013 – Jan 2014

GMSP Risk Feed Quality Monitor: tool for checking big amounts of financial data via diﬀerent business rules. Start-up
company specialized in development and support of custom web and back-end solutions.
● Participated in daily/weekly meetings in accordance with Agile principles.
● Performed functional manual testing of UI (Web application).
● Implemented and maintained QA Automation tests using Selenium Webdriver and C#

Junior Software Testing Engineer
HealthCorp
Jun 2011 – Jul 2012

● Analyzed specification, added details, wireframes and screenshots to it.
● Performed functional manual testing on diﬀerent phases of testing cycle.
● Performed usability testing. Reported issues into an owned bug-tracking system.

SKILLS

●
Experience in Selenium (Webdriver), C#.

●
Experience in SQL (MS SQL).

●
Experience in Waterfall and Agile (Scrum, Kanban) methodologies.

●
Experience in preparing and maintaining testing/technical documentation.

●
Strong communication and self-organizing skills, troubleshooting and problem-solving skills.

●
Strong work ethics, passionate and detail oriented, focused on result and quality, creative thinking, initiative
and committed to project goals. Team player.

EDUCATION
Minsk, Belarus
Belarusian State University
2008 - 2009

Master's degree, Mathematics

Minsk, Belarus
Belarusian State University
2005 - 2008

Bachelor's degree (diploma cum laude) in Mathematics and computer science

"
39,source/ALLA VERNIGOR.pdf,"['ALLA VERNIGOR \\n', 'CONTACTS AND REFERENCES \\n', 'Gmail: vernigor.aaaaa@gmail.com |  \\n', ' \\n', 'EDUCATION \\nHigher School of Economics, \\nMoscow \\n', ' \\n', '01.09.2019 – excepted 30.06.2023 \\n', 'Excepted degree: Bachelor in Applied Mathematics and Information Science \\nCurrent GPA: 8.97 out of 10 (5.0 out of 5) \\n', ' \\n', 'TECHNICAL EXPERIENCE \\nProjects \\n• Educational projects: (2019, C++17) Hashtable (separate chaining with linked lists) realization,  \\n• Other projects: \\n', '– (2020, Python3) Browser version of the board game Dixit (Imanginarium). In the project, I was responsible \\n', 'for back-end and testing,  \\n', '– (2020, Python3) RuzoomBot. A telegram bot that sends information about a group lesson or a specific \\n', 'student’s lesson (including the auditorium for offline lessons and a link for online lessons) to the subscribed \\nchats and channels before the start of the lesson,  \\n', '– (2020, Python3) VKlinkParser. When you send a link from the VK social network to a chat or a channel in \\n', 'a telegram, the bot parses the post, the link to which was received, and sends it to the chat or channel, but \\nin the correct format,  \\n', 'Technical skills \\n• Algorithms and Data structures \\n', ' \\n', 'CONTESTS AND COMPETITIONS \\n', '• Hackathons:(2020, C++17, Python3) won the GSOM-hack (group competition). The goal was to solve the \\n', 'modification of pickup and delivery problem with time windows to optimize the routs for service buses. Our \\nsolution was Grouping Genetic Algorithm written on C++17 (The work with the data was carried out in python). \\n', '• Contests. School:(C/C++) Participated in mathematics and programming individual and team olimpiads. \\n', 'Participated in regional stages of the All-Russian Olympiad(10th-11th grade). Prize-winner of group regional \\nprogramming olimpiad (2017-2018, C). \\n', '• Contests. University:(2019-2020, C++) Participated in Google Code Jam for Women, Google Code Jam and \\n', 'Hash Code. \\n', ' \\n', 'WORK EXPERIENCE \\n', '• (12th July 2020 – 25th December 2020) Continue to work on the project from the hackathon for release to \\n', 'production and help with tasks for other projects related to ours (such as conducting experiments with gRPC). \\n', ' \\n', 'PROGRAMMING LANGUAGES \\n', 'Main language: С++17 (20) | Also know: Python3 | Competitive programming only: C \\n', ' \\n', 'ASSOCIATED EXPERIENCE \\n', '• Helped in organizing school programming contests (testing, organization) \\n• Teaching Assistant in Linear Algebra and Geometry (I help students in mastering the material, and the teacher \\n', 'with checking oral and written works) \\n']","ALLA VERNIGOR 

CONTACTS AND REFERENCES 

Gmail: vernigor.aaaaa@gmail.com |  

 

EDUCATION 
Higher School of Economics, 
Moscow 

 

01.09.2019 – excepted 30.06.2023 

Excepted degree: Bachelor in Applied Mathematics and Information Science 
Current GPA: 8.97 out of 10 (5.0 out of 5) 

 

TECHNICAL EXPERIENCE 
Projects 
• Educational projects: (2019, C++17) Hashtable (separate chaining with linked lists) realization,  
• Other projects: 

– (2020, Python3) Browser version of the board game Dixit (Imanginarium). In the project, I was responsible 

for back-end and testing,  

– (2020, Python3) RuzoomBot. A telegram bot that sends information about a group lesson or a specific 

student’s lesson (including the auditorium for offline lessons and a link for online lessons) to the subscribed 
chats and channels before the start of the lesson,  

– (2020, Python3) VKlinkParser. When you send a link from the VK social network to a chat or a channel in 

a telegram, the bot parses the post, the link to which was received, and sends it to the chat or channel, but 
in the correct format,  

Technical skills 
• Algorithms and Data structures 

 

CONTESTS AND COMPETITIONS 

• Hackathons:(2020, C++17, Python3) won the GSOM-hack (group competition). The goal was to solve the 

modification of pickup and delivery problem with time windows to optimize the routs for service buses. Our 
solution was Grouping Genetic Algorithm written on C++17 (The work with the data was carried out in python). 

• Contests. School:(C/C++) Participated in mathematics and programming individual and team olimpiads. 

Participated in regional stages of the All-Russian Olympiad(10th-11th grade). Prize-winner of group regional 
programming olimpiad (2017-2018, C). 

• Contests. University:(2019-2020, C++) Participated in Google Code Jam for Women, Google Code Jam and 

Hash Code. 

 

WORK EXPERIENCE 

• (12th July 2020 – 25th December 2020) Continue to work on the project from the hackathon for release to 

production and help with tasks for other projects related to ours (such as conducting experiments with gRPC). 

 

PROGRAMMING LANGUAGES 

Main language: С++17 (20) | Also know: Python3 | Competitive programming only: C 

 

ASSOCIATED EXPERIENCE 

• Helped in organizing school programming contests (testing, organization) 
• Teaching Assistant in Linear Algebra and Geometry (I help students in mastering the material, and the teacher 

with checking oral and written works) 

"
40,source/Petr  Sudakov.pdf,"['Petr  Sudakov \\n \\n \\n', 'EDUCATION \\n', 'Novosibirsk State University \\nNovosibirsk, Russia \\n', 'Master in Mathematics \\nSep. 1999 – Jun. 2006 \\n', 'EXPERIENCE \\n', 'LocalLabs \\nRemote work \\n', 'Senior Software Engineer \\nMar 2012 - Present \\n', '◦ Voters project: Data processing from raw into fully prepared standardized form for growing number of states. \\n', 'Follow up tasks to match people to different datasets and provide analytics per different areas. Improved previous \\nmatching rate by 12% and made it about 10x times faster on large datasets. \\n', '◦ Geocoder solution: I implemented server checking number of open data sources and already prepared data with \\n', 'fallback to paid services. The server uses state of the art address parsing and expanding libraries and provides \\ncaching for results. It sped up development and geocoding times significantly in number of other in-house projects. \\n', '◦ Customer churn project (Machine Learning): Predicting churn customers and suggesting steps how to \\n', 'prevent it plus corresponding metrics. It reduced customer churn by 10% in 2 months. \\n', 'BlockShopper \\nRemote work \\n', 'Senior Software Engineer \\nJun 2009 - Aug 2011 \\n', '◦ Team lead of data processing team: the project is about real estate information. Data processing from raw \\n', 'state into fully prepared ready to sell and to use in another projects. It was done for both assessor and recorder \\ndata for growning number of counties. Also, it supported updates and tests to keep information accurate and up to \\ndate. It’s still a live project covering major part of US and earning money. \\n', 'Parallels \\nNovosibirsk, Russia \\n', 'Senior Software Engineer \\nJun 2009 - Aug 2011 \\n', '◦ Team lead of support systems development/maintenance team: The company is one of the world leaders \\n', 'in hosting automation with number of products such as: Parallels Desktop, Virtuozzo, Plesk and etc. It has a big \\nsupport team working 24/7. During over 2 years my team had kept the system up, made it faster and more \\nfeaturefull. Thus, support team had kept their duty around o’clock. \\n', 'DataEast \\nNovosibirsk, Russia \\n', 'Software Engineer \\nNov 2006 - Apr 2007 \\n', '◦ GEO server: I developed new plugin with number of GEO functions. It widened functionality of the server. \\n', 'SWSoft \\nNovosibirsk, Russia \\n', 'Customer Relationship Manager, Software Engineer \\nAug 2005 - Sep 2006 \\n', '◦ CRM for HSPComplete product: I led number of customers since purchase date until going live with their \\n', 'fully configured and customized product. I got specifications for any custom feature requests from clients and if it \\nwasn’t achivable via custom scripting processed it with development team in timely manner. \\n', '◦ Feature for HSPComplete product for Chinese market: I fully implemented special plugin to support \\n', 'Chinese government regulation rules related to web sites. It was a real blocker for China market after which \\nproduct became available for a new country and many potential customers. \\n', 'NTONYX \\nNovosibirsk, Russia \\n', 'Junior Software Engineer \\nSep 2004 - Dec 2004 \\n', '◦ Musical Software for Desktop (C++): I developed custom algorithm for music chords processing which \\n', 'satisfied and made happy number of customers requested this feature. \\n', 'PROJECTS \\n', ' \\n WWW FDW: Open source PostgreSQL extension, so-called Foreign Data Wrapper (FDW). It is a handler for \\n', 'PostgreSQL server which provides easy way to repesent different web services as a table data. \\n', 'PROGRAMMING SKILLS \\n', ' \\n Languages: Perl, Python, SQL, C++ \\n']","Petr  Sudakov 
 
 

EDUCATION 

Novosibirsk State University 
Novosibirsk, Russia 

Master in Mathematics 
Sep. 1999 – Jun. 2006 

EXPERIENCE 

LocalLabs 
Remote work 

Senior Software Engineer 
Mar 2012 - Present 

◦ Voters project: Data processing from raw into fully prepared standardized form for growing number of states. 

Follow up tasks to match people to different datasets and provide analytics per different areas. Improved previous 
matching rate by 12% and made it about 10x times faster on large datasets. 

◦ Geocoder solution: I implemented server checking number of open data sources and already prepared data with 

fallback to paid services. The server uses state of the art address parsing and expanding libraries and provides 
caching for results. It sped up development and geocoding times significantly in number of other in-house projects. 

◦ Customer churn project (Machine Learning): Predicting churn customers and suggesting steps how to 

prevent it plus corresponding metrics. It reduced customer churn by 10% in 2 months. 

BlockShopper 
Remote work 

Senior Software Engineer 
Jun 2009 - Aug 2011 

◦ Team lead of data processing team: the project is about real estate information. Data processing from raw 

state into fully prepared ready to sell and to use in another projects. It was done for both assessor and recorder 
data for growning number of counties. Also, it supported updates and tests to keep information accurate and up to 
date. It’s still a live project covering major part of US and earning money. 

Parallels 
Novosibirsk, Russia 

Senior Software Engineer 
Jun 2009 - Aug 2011 

◦ Team lead of support systems development/maintenance team: The company is one of the world leaders 

in hosting automation with number of products such as: Parallels Desktop, Virtuozzo, Plesk and etc. It has a big 
support team working 24/7. During over 2 years my team had kept the system up, made it faster and more 
featurefull. Thus, support team had kept their duty around o’clock. 

DataEast 
Novosibirsk, Russia 

Software Engineer 
Nov 2006 - Apr 2007 

◦ GEO server: I developed new plugin with number of GEO functions. It widened functionality of the server. 

SWSoft 
Novosibirsk, Russia 

Customer Relationship Manager, Software Engineer 
Aug 2005 - Sep 2006 

◦ CRM for HSPComplete product: I led number of customers since purchase date until going live with their 

fully configured and customized product. I got specifications for any custom feature requests from clients and if it 
wasn’t achivable via custom scripting processed it with development team in timely manner. 

◦ Feature for HSPComplete product for Chinese market: I fully implemented special plugin to support 

Chinese government regulation rules related to web sites. It was a real blocker for China market after which 
product became available for a new country and many potential customers. 

NTONYX 
Novosibirsk, Russia 

Junior Software Engineer 
Sep 2004 - Dec 2004 

◦ Musical Software for Desktop (C++): I developed custom algorithm for music chords processing which 

satisfied and made happy number of customers requested this feature. 

PROJECTS 

 
 WWW FDW: Open source PostgreSQL extension, so-called Foreign Data Wrapper (FDW). It is a handler for 

PostgreSQL server which provides easy way to repesent different web services as a table data. 

PROGRAMMING SKILLS 

 
 Languages: Perl, Python, SQL, C++ 

"
41,source/Albina Batmanova.pdf,"['Albina Batmanova\\n', 'Software Engineer, Moscow\\n', 'lb.batmanova@gmail.com\\nIrinaBatmanova\\n+7 (985) 000 47-62\\n', 'SKILLS\\n', 'Python, Bash, JavaScript, C++, SQL, Flask, Django, Asyncio, Pytest, React, Qt, Pandas, Matplotlib, Linux,\\nDocker, Swarm, Git, Jira, Gitlab CI, PostgreSQL, Redis, ArangoDB, Neo4j, Keycloak, Postman\\n', 'EDUCATION\\n', 'Moscow Institute of Physics and Technology\\nMoscow, Russia\\n', 'Bachelor of Applied Mathematics and Informatics\\nJuly 2019\\n', 'EXPERIENCE\\n', 'MyOﬃce\\n', 'Lead Software Engineer, Software Engineer\\nMarch 2019 - Present\\n', 'Develop, enhance and support several microservices for storing metadata and files of Private Cloud prod- ucts\\nParticipate in code reviews\\nImprove Gitlab CI pipelines for services\\nUse Python, Flask, Falcon, Postman, ArangoDB (graph database), Keycloak (OIDC service), Gitlab, JIRA in my work\\n', 'Moscow Institute of Physics and Technologies\\n', 'Lecturer of workshops\\nOctober 2019 - December 2019\\n', 'Gave practical classes for a group of third year students about web development\\n', 'Used Django framework\\n', 'Cadence Design Systems\\n', 'Software Engineer Intern\\nJune 2018 - March 2019\\n', 'Took part in developing a new 3d viewer of microschemes architecture\\n', 'Used C++, Qt, Perforce, Reviewboard in my work\\n', 'PROJECTS\\n', 'MLDev - version control for ml-experiments\\n', 'Developed yaml parser with parameters substitution (environment variables)\\nSet up gitlab-ci for pre-release testing of the system (deploy on different operation systems, run unit-tests)\\n', 'Snakify - interactive python lessons for kids\\n', 'Developed new frontend features on React\\n', 'Hackathons\\n', 'Personalized a landing page for brokerage service based on demographical information about anonymous\\nuser gained from Yandex Direct (used React for landing page and YandexDirect for analytics)\\nCreated a tool for analyzing system security logs, helping to see and prevent potential attacks (Used React for web\\ninterface)\\nDeveloped a network for connecting potential startupers with mentors, investors and other useful and in- terested\\npeople (used data analysis models from sklearn)\\n']","Albina Batmanova

Software Engineer, Moscow

lb.batmanova@gmail.com
IrinaBatmanova
+7 (985) 000 47-62

SKILLS

Python, Bash, JavaScript, C++, SQL, Flask, Django, Asyncio, Pytest, React, Qt, Pandas, Matplotlib, Linux,
Docker, Swarm, Git, Jira, Gitlab CI, PostgreSQL, Redis, ArangoDB, Neo4j, Keycloak, Postman

EDUCATION

Moscow Institute of Physics and Technology
Moscow, Russia

Bachelor of Applied Mathematics and Informatics
July 2019

EXPERIENCE

MyOﬃce

Lead Software Engineer, Software Engineer
March 2019 - Present

Develop, enhance and support several microservices for storing metadata and files of Private Cloud prod- ucts
Participate in code reviews
Improve Gitlab CI pipelines for services
Use Python, Flask, Falcon, Postman, ArangoDB (graph database), Keycloak (OIDC service), Gitlab, JIRA in my work

Moscow Institute of Physics and Technologies

Lecturer of workshops
October 2019 - December 2019

Gave practical classes for a group of third year students about web development

Used Django framework

Cadence Design Systems

Software Engineer Intern
June 2018 - March 2019

Took part in developing a new 3d viewer of microschemes architecture

Used C++, Qt, Perforce, Reviewboard in my work

PROJECTS

MLDev - version control for ml-experiments

Developed yaml parser with parameters substitution (environment variables)
Set up gitlab-ci for pre-release testing of the system (deploy on different operation systems, run unit-tests)

Snakify - interactive python lessons for kids

Developed new frontend features on React

Hackathons

Personalized a landing page for brokerage service based on demographical information about anonymous
user gained from Yandex Direct (used React for landing page and YandexDirect for analytics)
Created a tool for analyzing system security logs, helping to see and prevent potential attacks (Used React for web
interface)
Developed a network for connecting potential startupers with mentors, investors and other useful and in- terested
people (used data analysis models from sklearn)

"
42,source/Andrey Pichugin.pdf,"['Andrey Pichugin\\n', 'Georgia, Tbilisi | +995 500067215 | kiraaapichugin.work@gmail.com | LinkedIn\\n', 'Java Software Engineer\\n', 'Summary\\nSoftware engineer, specializing in enterprise Java projects. I have over 4 years of production ready development in Java\\nand its frameworks, such as Spring and Hibernate. My expertise includes developing new features, participating in\\ncode reviews, maintaining and updating existing projects, sustaining development environments and delivery\\npipelines.\\n', 'Technical Skills\\n', '•\\nJava, JavaScript.\\n', '•\\nSpring Framework (Core, Boot, Web, Security, Data, AOP), Hibernate, PostgreSQL, MongoDB.\\n', '•\\nJUnit, Mockito, PowerMock.\\n', '•\\nGit, Jira, Jenkins, Maven, Gradle, Docker, Kubernetes, Kibana, Logstash, Elasticsearch, Openshift.\\n', 'Experience\\n', 'Software Engineer | Five9 Inc. | Feb 2021– Jun 2022\\n', 'Development and maintenance of Java API server, responsible for managing calls, and respective VoIP software\\nsolution based on FreeSWITCH.\\n', '•\\nInvestigated and fixed memory leaks by tracking stuck call channels and dropped events using Elasticsearch,\\nLogstash, and Kibana stack to track execution flow failures, therefore increasing server nodes uptime by 30%.\\n', '•\\nEnsured consistency and stability of server nodes in case of system failures by performing Java and C code analysis\\nand testing in more than 60 failover scenarios.\\n', '•\\nIncreased project’s unit test coverage by 20% by covering most of the controller and database connection classes.\\n', '•\\nEnhanced database cleanup Bash scripts by implementing multithreaded execution, improving their run time by\\n50%, which accelerated server node’s restart time.\\n', '•\\nAs the owner of the developer testing environment, decreased its downtime more than twice by improving\\nmaintenance procedures and creating corresponding documentation.\\n', 'Full-Stack Developer/Customer Support Engineer | Netcracker Technology | Mar 2018 – Jan 2021\\n', 'Website development based on Liferay Portal platform built in Java and JavaScript.\\n', '•\\nSupported major website release with more than 500 thousand visitors per month during 4 months business trip\\nonsite.\\n', '•\\nImplemented OpenID authentication and Identity Provider integration with Liferay Portal.\\n', '•\\nProvided mapping for new category of product objects in catalog model by introducing new APIs and SQL queries.\\n', '•\\nImproved performance for bulk multithreaded objects loading by optimizing object batches and removing\\nunnecessary procedures, which improved product catalog mapping duration from 30 to 15 minutes.\\n', '•\\nCoached a new support team of 7 people on the project in two weeks.\\n', '•\\nFixed cache versioning issue, removing necessity to restart server to apply changes to catalog, saving 20 minutes\\nspent on maintenance during backend updates and installations.\\n', 'Education\\n', '•\\nVolga State University of Water Transport | 2018: Technical Maintenance and Exploitation of RadioElectronic\\nEquipment – Specialist.\\n']","Andrey Pichugin

Georgia, Tbilisi | +995 500067215 | kiraaapichugin.work@gmail.com | LinkedIn

Java Software Engineer

Summary
Software engineer, specializing in enterprise Java projects. I have over 4 years of production ready development in Java
and its frameworks, such as Spring and Hibernate. My expertise includes developing new features, participating in
code reviews, maintaining and updating existing projects, sustaining development environments and delivery
pipelines.

Technical Skills

•
Java, JavaScript.

•
Spring Framework (Core, Boot, Web, Security, Data, AOP), Hibernate, PostgreSQL, MongoDB.

•
JUnit, Mockito, PowerMock.

•
Git, Jira, Jenkins, Maven, Gradle, Docker, Kubernetes, Kibana, Logstash, Elasticsearch, Openshift.

Experience

Software Engineer | Five9 Inc. | Feb 2021– Jun 2022

Development and maintenance of Java API server, responsible for managing calls, and respective VoIP software
solution based on FreeSWITCH.

•
Investigated and fixed memory leaks by tracking stuck call channels and dropped events using Elasticsearch,
Logstash, and Kibana stack to track execution flow failures, therefore increasing server nodes uptime by 30%.

•
Ensured consistency and stability of server nodes in case of system failures by performing Java and C code analysis
and testing in more than 60 failover scenarios.

•
Increased project’s unit test coverage by 20% by covering most of the controller and database connection classes.

•
Enhanced database cleanup Bash scripts by implementing multithreaded execution, improving their run time by
50%, which accelerated server node’s restart time.

•
As the owner of the developer testing environment, decreased its downtime more than twice by improving
maintenance procedures and creating corresponding documentation.

Full-Stack Developer/Customer Support Engineer | Netcracker Technology | Mar 2018 – Jan 2021

Website development based on Liferay Portal platform built in Java and JavaScript.

•
Supported major website release with more than 500 thousand visitors per month during 4 months business trip
onsite.

•
Implemented OpenID authentication and Identity Provider integration with Liferay Portal.

•
Provided mapping for new category of product objects in catalog model by introducing new APIs and SQL queries.

•
Improved performance for bulk multithreaded objects loading by optimizing object batches and removing
unnecessary procedures, which improved product catalog mapping duration from 30 to 15 minutes.

•
Coached a new support team of 7 people on the project in two weeks.

•
Fixed cache versioning issue, removing necessity to restart server to apply changes to catalog, saving 20 minutes
spent on maintenance during backend updates and installations.

Education

•
Volga State University of Water Transport | 2018: Technical Maintenance and Exploitation of RadioElectronic
Equipment – Specialist.

"
43,source/Marat Tereshkov.pdf,"['Marat Tereshkov\\n', '+79778000825\\naltaaase.job@gmail.com\\nMoscow, Russia\\n', 'Alteaaae\\nAltaaase\\nAlaaaise\\n', 'Education\\n', 'National Research University MAI, Moscow, Russia (Sep. 2019 – May 2023)\\n', 'B.Sc. in Computer Science (Fundamental Informatics & Information Technologies)\\n', 'Relevant courses: Fundamental Algorithms, Application Software, Operating systems & Computer\\narchitecture, Linear Algebra, Discrete Math, Calculus, Differential equations, Probability theory\\n', 'GPA: 4.75 / 5\\n', 'Internships & Projects & Achievements\\n', '● AVSoft (Information Security) | Internship (Jul. 2021 - Present)\\n', 'Partly refactored an application core (visualized an outdated file processing system, removed unused\\nparts of it, rewrote some C-style code to a modern C++ code, and formatted it accordingly to a team\\ncode style guide)\\n', 'Improved a command-line arguments parser using Boost.ProgramOptions library\\n', 'Implemented a trivial logger using Boost.Log library\\n', 'Found an issue with the application GUI on the KDE Plasma desktop environment and reported it\\n', '● Tax reports database with statistics | Coursework\\n', 'Created a fully functional console application for storing tax reports, statistics of it and a generator of the\\nreports\\nTechnologies used: C++, STL, self-implemented Red-Black tree\\n', '● Client-server «Sea Battle» Game | Coursework\\n', 'Created a fully functional 2 player console game\\nTechnologies used: C++, STL, UNIX Sockets\\n', '● Competitive Programming | Achievements\\n', 'Participation in ICPC, 7 OpenCups, Codeforces contests\\n', 'Completion of a competitive programming course in MAI (2 semesters)\\n', 'Skills\\n', 'Programming: C, C++, STL, Object-Oriented Programming, System Programming, Multithreaded\\n', 'Programming, Algorithms & Data Structures, C#, Python, SQL\\n', 'Languages: English (Upper-Intermediate), Russian (Native)\\n', 'Other: Linux, Git, TeX\\n']","Marat Tereshkov

+79778000825
altaaase.job@gmail.com
Moscow, Russia

Alteaaae
Altaaase
Alaaaise

Education

National Research University MAI, Moscow, Russia (Sep. 2019 – May 2023)

B.Sc. in Computer Science (Fundamental Informatics & Information Technologies)

Relevant courses: Fundamental Algorithms, Application Software, Operating systems & Computer
architecture, Linear Algebra, Discrete Math, Calculus, Differential equations, Probability theory

GPA: 4.75 / 5

Internships & Projects & Achievements

● AVSoft (Information Security) | Internship (Jul. 2021 - Present)

Partly refactored an application core (visualized an outdated file processing system, removed unused
parts of it, rewrote some C-style code to a modern C++ code, and formatted it accordingly to a team
code style guide)

Improved a command-line arguments parser using Boost.ProgramOptions library

Implemented a trivial logger using Boost.Log library

Found an issue with the application GUI on the KDE Plasma desktop environment and reported it

● Tax reports database with statistics | Coursework

Created a fully functional console application for storing tax reports, statistics of it and a generator of the
reports
Technologies used: C++, STL, self-implemented Red-Black tree

● Client-server «Sea Battle» Game | Coursework

Created a fully functional 2 player console game
Technologies used: C++, STL, UNIX Sockets

● Competitive Programming | Achievements

Participation in ICPC, 7 OpenCups, Codeforces contests

Completion of a competitive programming course in MAI (2 semesters)

Skills

Programming: C, C++, STL, Object-Oriented Programming, System Programming, Multithreaded

Programming, Algorithms & Data Structures, C#, Python, SQL

Languages: English (Upper-Intermediate), Russian (Native)

Other: Linux, Git, TeX

"
44,source/STEPAN GOLDOBIN.pdf,"['STEPAN\\n', 'GOLDOBIN \\n', '27 years old \\n', 'E X P E R I E N C E \\n', ' \\n', 'UI/UX DESIGNER / FRONTEND   | \\nClearscale (AWS Partner), USA \\n', ' \\n', ' \\n', ' \\n', '09.2019 - now \\n', 'Rare unicorn. Working with: React, Angular, Ember, GraphQL, Node.js, Express. Also \\nmaking UX/UI design and graphic design. \\n', ' \\n', 'UI/UX DESIGNER / FRONTEND   | \\nQIWI, Moscow \\n', '05.2019 - 09-2019 \\n', 'Developed a service for companies, as a “Kickstarter”, but for banks/startups. Created \\nUX/UI design and a frontend part (React). \\n', ' \\n \\n', 'UI/ UX Designer \\n', 'UI/UX DESIGNER / FRONTEND   | \\nEvercity, Moscow \\n', '09.2018 - 05.2019 \\n', 'Frontend Developer \\n', 'Motion Designer \\n', 'I have developed UI/UX and prototypes for the web service. \\nCreating front end visualisation in React.js \\n', 'Made a more iterative development process with ﬂexible course change. \\n', ' \\n', 'UI/UX DESIGNER / FRONTEND   | \\nMSTlab24, St.Petersburg \\n', '03.2017 - 09.2019 \\n', 'My name is Anton and I am a \\n', 'cross-functional specialist with UI / \\n', 'UX and Frontend skills. \\n', 'With a lot of experience in SCRUM methodology, I develop in several spheres: \\nDevelopment of UI/UX of mobile and web applications for internal BTB products. \\nExperience using Haml/Sass/Vuejs for developing web applications and landing pages \\nManual and Automated Testing. \\nI also created a library with a UI-web-kit - http://mandragora.mstdev.ru/ \\n', ' \\n', 'UI/UX DESIGNER / FRONTEND   | \\nMyPocketGirls, Moscow \\n', '06.2017 - 01.2018 \\n', 'Development of user interfaces for the mobile game ""MyPocketGirls"", game design of \\nmini-games. \\n', ' \\n \\n', 'C O N T A C T \\n', 'UI/UX DESIGNER / FRONTEND   | \\n', 'Dbrain, Moscow \\n', '09.2017 - 02.2018 \\n', 'I developed designs for an AI service, implemented mock-ups for a landing page in \\nHTML/CSS. \\n', ' \\n', 'UI/UX DESIGNER  |  04.2016 - 04.2017 \\n', 'dribbble.com/Goldobinnnnn \\n', 'https://github.com/Goldobinnnnn \\n', 'App-labs, St.Petersburg \\n', 'Development of layouts for android and IOS applications and web services, prototypes, \\nanimations. Quality control development. Web development department management. \\n', ' \\n', 'UI/UX DESIGNER |  06.2015 - 04.2016 \\n', '+ 7 952 224 61 11  \\n7224511111@mail.ru \\n', 'Startup, St.Petersburg \\n', 'Development of design and application logic for reading product information on the \\nbarcode and selection of instructions to it. \\n', ' \\n', 'GRAPHIC   DESIGNER \\n| 06.2012 - 06.2015 \\n', ' \\n', 'St. Petersburg \\n', 'Russia \\n', 'Truck Studio, Naberezhnye Chelny \\n', 'Responsible for handling all printable media: from leaﬂets up to 10m banners, laser \\ncutting and engraving, plotter cutting, mock-up development and layout. \\n', ' \\n \\n', 'S K I L L S \\n', ' \\n', 'SOFTWARE  PACKAGES \\n', 'Sketch \\n', 'Figma \\n', 'Adobe Photoshop \\n', 'Adobe Illustrator \\n', 'Adobe After Effects \\n', 'Art skill \\n', 'LANGUAGE & FRAMEWORKS \\n', 'HTML/CSS \\n', 'Javascript \\n', 'Vue.js \\n', 'React.js \\n', 'Angular.js \\n', 'Node.js \\n', ' \\n \\n', 'E D U C A T I O N \\n', ' \\n', 'NAB. CHELNY ART SCHOOL #2 \\n', 'Artist \\n', '2004 - 2009 \\n', 'At art school I learned drawing skills, \\nthat still help me \\n', 'STATE INSTITUTION “KAMI” \\n', 'Lawyer \\n', '2011 - 2012 \\n', 'At the law school I studied the \\nnecessary knowledge in terms of the \\nlaw \\n', ' \\n', 'MUNICIPAL EDUCATIONAL \\nINSTITUTION ""INTERSCHOOL \\nTRAINING COMPLEX"" \\n', 'Computer operator \\n', '2007 - 2009 \\n', 'I learned different programs such as \\nAdobe Photoshop, Adobe After Effects, \\nFlash \\n', ' \\n', 'L A N G U A G E \\n', 'EDUCATIONAL INSTITUTION \\n""TECHNICAL COLLEGE \\n""V.D.POTASHOVA"" \\n', 'Industrial system programmer \\nHonor degree \\n', '2009 - 2011 \\n', 'I gained programming skills for \\n', 'metalworking machines. Also worked \\n', 'with Zeiss precision measuring machines. \\n', ' \\n', 'RUSSIAN \\n', 'Native speaker \\n', 'ENGLISH \\n', 'Upper Intermediate \\n', 'Hello again! \\n', 'Glad to see you on the second page \\n', ' \\n', 'A B O U T \\n', ' \\n \\n', 'HACKATONS \\n', ' \\n', 'I have an overall design experience of over 7 years. I have experience working under various conditions in different \\nenvironments. \\n', ' \\n', 'I have been a web developer for the past 2 years. At my current job, I developed a library with a design system using \\nVue.js  \\nI work on projects using technology stacks like Rails+VueJs and Rails+ReactJs. \\n', ' \\n', 'TECHNOLOGY  STACKS \\n', ' \\n', 'Design \\nAdobe Photoshop CC, Sketch, Figma, CorelDraw, Illustrator, Invision, After Effects \\n', ' \\n', 'UI development and front-end \\nJS, VueJS, ReactJs, AngularJs, EmberJs, GraphQL, HTML / CSS, SCSS and similar preprocessors, Webpack \\n', ' \\n', 'Backend development \\nNodeJs, GraphQL, Express, Mongoose \\n', ' \\n', 'Testing \\nCucumber, Capibara, Jira, Kaiten \\n', ' \\n', 'STRENGTHS \\n', ' \\n', ""• Cross-functional - I'm Ideal for scrum teams. I've worked with agile methodologies (Scrum, Kanban). \\n"", '• I am social. I love new acquaintances and communication. \\n', '• Can train other people and monitor the progress of tasks. \\n', '• I am a team player with a systematic approach who can juggle multiple projects at the same time. \\n', '• Like to stretch your wings across user research, split testing, user experience and product design. \\n', '• Think about the most common devices. \\n', '• Have some experience with conversional driven design and split testing. \\n', '• Comfortable working on multiple projects at a time of taking ownership. \\n', '• Ability to prioritize projects, communicate progress and deliver on time. \\n', '• Passion for identifying and solving real user problems. \\n', ' \\n', 'SKILLS \\n', ' \\n', '• Create various kinds of animations using Adobe After Effect. \\n', '• Sketch to create pixel-perfect design. \\n', '• Programming in JavaScript, work with libraries and read documentations. \\n', '• Good foundation in Vue.js and React.js, I can independently carry out small tasks and help other developers. \\n', '• QA – Manual and automated testing (cucumber + capibara). \\n', '• Rapid prototyping in Figma and Sketch. \\n', '• Knowledge of typography, information design and modular grids. \\n', '• Experience in teamwork, remote development, experience in negotiations and presentations, experience in the \\nposition of art director. \\n', '• I follow current trends in web development and UI designs. Static, rubber, adaptability. \\n', '• Knowledge and experience in Pre-press and Printing. Experience with printing houses. Order and control of \\ncirculation. \\n', '• Knowledge of GitHub/GitLab – comfortably. \\n', ' \\n \\n', 'P R O G R E S S \\n', ' \\n \\n', 'HACKATONS \\n', ' \\n', '• Member of the Open Fight hackathon ﬁnalist team from OPEN \\nBank. \\n', ' \\n', '• Member of the hackathon winners team from the St. Petersburg \\nPolytechnic Institute. \\n', ' \\n', '• Member of the hackathon ﬁnalist team Budapest Hackjunction’18. \\n', ' \\n', '• Member of the Hackathon winners team Energy Blockchain Hack. \\n']","STEPAN

GOLDOBIN 

27 years old 

E X P E R I E N C E 

 

UI/UX DESIGNER / FRONTEND   | 
Clearscale (AWS Partner), USA 

 

 

 

09.2019 - now 

Rare unicorn. Working with: React, Angular, Ember, GraphQL, Node.js, Express. Also 
making UX/UI design and graphic design. 

 

UI/UX DESIGNER / FRONTEND   | 
QIWI, Moscow 

05.2019 - 09-2019 

Developed a service for companies, as a “Kickstarter”, but for banks/startups. Created 
UX/UI design and a frontend part (React). 

 
 

UI/ UX Designer 

UI/UX DESIGNER / FRONTEND   | 
Evercity, Moscow 

09.2018 - 05.2019 

Frontend Developer 

Motion Designer 

I have developed UI/UX and prototypes for the web service. 
Creating front end visualisation in React.js 

Made a more iterative development process with ﬂexible course change. 

 

UI/UX DESIGNER / FRONTEND   | 
MSTlab24, St.Petersburg 

03.2017 - 09.2019 

My name is Anton and I am a 

cross-functional specialist with UI / 

UX and Frontend skills. 

With a lot of experience in SCRUM methodology, I develop in several spheres: 
Development of UI/UX of mobile and web applications for internal BTB products. 
Experience using Haml/Sass/Vuejs for developing web applications and landing pages 
Manual and Automated Testing. 
I also created a library with a UI-web-kit - http://mandragora.mstdev.ru/ 

 

UI/UX DESIGNER / FRONTEND   | 
MyPocketGirls, Moscow 

06.2017 - 01.2018 

Development of user interfaces for the mobile game ""MyPocketGirls"", game design of 
mini-games. 

 
 

C O N T A C T 

UI/UX DESIGNER / FRONTEND   | 

Dbrain, Moscow 

09.2017 - 02.2018 

I developed designs for an AI service, implemented mock-ups for a landing page in 
HTML/CSS. 

 

UI/UX DESIGNER  |  04.2016 - 04.2017 

dribbble.com/Goldobinnnnn 

https://github.com/Goldobinnnnn 

App-labs, St.Petersburg 

Development of layouts for android and IOS applications and web services, prototypes, 
animations. Quality control development. Web development department management. 

 

UI/UX DESIGNER |  06.2015 - 04.2016 

+ 7 952 224 61 11  
7224511111@mail.ru 

Startup, St.Petersburg 

Development of design and application logic for reading product information on the 
barcode and selection of instructions to it. 

 

GRAPHIC   DESIGNER 
| 06.2012 - 06.2015 

 

St. Petersburg 

Russia 

Truck Studio, Naberezhnye Chelny 

Responsible for handling all printable media: from leaﬂets up to 10m banners, laser 
cutting and engraving, plotter cutting, mock-up development and layout. 

 
 

S K I L L S 

 

SOFTWARE  PACKAGES 

Sketch 

Figma 

Adobe Photoshop 

Adobe Illustrator 

Adobe After Effects 

Art skill 

LANGUAGE & FRAMEWORKS 

HTML/CSS 

Javascript 

Vue.js 

React.js 

Angular.js 

Node.js 

 
 

E D U C A T I O N 

 

NAB. CHELNY ART SCHOOL #2 

Artist 

2004 - 2009 

At art school I learned drawing skills, 
that still help me 

STATE INSTITUTION “KAMI” 

Lawyer 

2011 - 2012 

At the law school I studied the 
necessary knowledge in terms of the 
law 

 

MUNICIPAL EDUCATIONAL 
INSTITUTION ""INTERSCHOOL 
TRAINING COMPLEX"" 

Computer operator 

2007 - 2009 

I learned different programs such as 
Adobe Photoshop, Adobe After Effects, 
Flash 

 

L A N G U A G E 

EDUCATIONAL INSTITUTION 
""TECHNICAL COLLEGE 
""V.D.POTASHOVA"" 

Industrial system programmer 
Honor degree 

2009 - 2011 

I gained programming skills for 

metalworking machines. Also worked 

with Zeiss precision measuring machines. 

 

RUSSIAN 

Native speaker 

ENGLISH 

Upper Intermediate 

Hello again! 

Glad to see you on the second page 

 

A B O U T 

 
 

HACKATONS 

 

I have an overall design experience of over 7 years. I have experience working under various conditions in different 
environments. 

 

I have been a web developer for the past 2 years. At my current job, I developed a library with a design system using 
Vue.js  
I work on projects using technology stacks like Rails+VueJs and Rails+ReactJs. 

 

TECHNOLOGY  STACKS 

 

Design 
Adobe Photoshop CC, Sketch, Figma, CorelDraw, Illustrator, Invision, After Effects 

 

UI development and front-end 
JS, VueJS, ReactJs, AngularJs, EmberJs, GraphQL, HTML / CSS, SCSS and similar preprocessors, Webpack 

 

Backend development 
NodeJs, GraphQL, Express, Mongoose 

 

Testing 
Cucumber, Capibara, Jira, Kaiten 

 

STRENGTHS 

 

• Cross-functional - I'm Ideal for scrum teams. I've worked with agile methodologies (Scrum, Kanban). 

• I am social. I love new acquaintances and communication. 

• Can train other people and monitor the progress of tasks. 

• I am a team player with a systematic approach who can juggle multiple projects at the same time. 

• Like to stretch your wings across user research, split testing, user experience and product design. 

• Think about the most common devices. 

• Have some experience with conversional driven design and split testing. 

• Comfortable working on multiple projects at a time of taking ownership. 

• Ability to prioritize projects, communicate progress and deliver on time. 

• Passion for identifying and solving real user problems. 

 

SKILLS 

 

• Create various kinds of animations using Adobe After Effect. 

• Sketch to create pixel-perfect design. 

• Programming in JavaScript, work with libraries and read documentations. 

• Good foundation in Vue.js and React.js, I can independently carry out small tasks and help other developers. 

• QA – Manual and automated testing (cucumber + capibara). 

• Rapid prototyping in Figma and Sketch. 

• Knowledge of typography, information design and modular grids. 

• Experience in teamwork, remote development, experience in negotiations and presentations, experience in the 
position of art director. 

• I follow current trends in web development and UI designs. Static, rubber, adaptability. 

• Knowledge and experience in Pre-press and Printing. Experience with printing houses. Order and control of 
circulation. 

• Knowledge of GitHub/GitLab – comfortably. 

 
 

P R O G R E S S 

 
 

HACKATONS 

 

• Member of the Open Fight hackathon ﬁnalist team from OPEN 
Bank. 

 

• Member of the hackathon winners team from the St. Petersburg 
Polytechnic Institute. 

 

• Member of the hackathon ﬁnalist team Budapest Hackjunction’18. 

 

• Member of the Hackathon winners team Energy Blockchain Hack. 

"
45,source/VLADIMIR MATVEEV.pdf,"['Moscow, Russia \\nOpen to relocate \\nVisa sponsorship required \\nVLADIMIR \\nMATVEEV \\nCTO / Software Engineer / Tech Lead \\n', 'matv11v@gmail.com  \\n', '+7 995 0998 000 \\n', ' \\n', '  \\nPERSONAL SUMMARY \\n \\n', 'Entrepreneurial-spirited software engineer with over 15 years of experience mostly in web development (using \\nMicrosoft.NET technologies stack). 10+ years career as a software engineer, team lead and senior developer. \\n5+ years as a software project manager and CTO in a startup, managing team of 15. Broad expertise in IT, full \\nproject lifecycle management, client/vendor relationship management and financial/operational management. \\n', ' \\n', '  \\nTECHNICAL SKILLS \\n \\n', ' \\n', 'Languages \\nC#; JavaScript; T-SQL; LINQ; HTML; CSS; ES6+ \\n', 'Technologies and \\nFrameworks \\n', '.NET, .NET Core; ASP.NET Core, ASP.NET MVC; ASP.NET ASP.NET Web Forms; jQuery; \\nAngular; React; Vue; SOA/REST/Web Services; SignalR; Selenium; ADO.NET; Entity \\nFramework; Bootstrap \\n', 'Databases \\nMicrosoft SQL Server; MongoDB; Redis; My SQL; TimescaleDB \\n', 'Source Control \\nGit; TFS; SVN \\n', 'Methodology \\nScrum; Kanban; Lean; TDD \\n', 'Platforms \\nWindows Server; IIS \\n', '  Virtualization & Cloud \\n Windows Azure; Amazon Web Services \\n \\n', 'Tools \\nVSTS; ReSharper; JMeter; TeamCity; YouTrack; MS Visual Studio; Visual Studio Code \\n', '  \\nWORK EXPERIENCE \\n \\n', ' \\n', ' \\n', 'Founder and CTO \\nSep 2019 — Current \\n', 'Glomad — glomad.net \\n \\n', 'The Glomad.net was launched in early 2020. Our mission is to promote the idea of free movement with the \\nability of remote work and online entrepreneurship. The purpose of Glomad is to provide services for remote \\nworkers, travelers and digital nomads. The first demo version is launched on January 20, 2020. Currently, it is \\na crowdsourced database of cities in the world analyzing 8302 cities and 10 parameters for each as well as \\nabout 100 embassies. \\n', ' \\n \\n', ' \\nEngineering Manager (contract) \\nJun 2020 — Current \\n', ' \\nBPS Int. — connected-bim.com \\nMunich, Germany \\n', 'Building from scratch the full cycle of the development process of an innovative product in the field of IIoT. \\n', ' \\n \\n', ' \\n', 'Chief Technology Officer \\nFeb 2015 — Apr 2018 \\n', 'DaOffice LLC — daoffice.ru \\nMoscow, Russia \\n', 'As a partner and CTO was initially hired to oversee all product development, team building and management. I \\nworked on enterprise social software platform, a Russian analog of Microsoft Yammer and Facebook \\nWorkplace. \\nKey Achievements: \\n', ' \\n', '§ \\nImplemented product development lifecycle from scratch and introduced Agile methodologies. Therefore, \\nreleases were made according to schedule. \\n', '§ \\nProcess of mobile development was created. 2 new flagman products and 6 applications were released. \\n', '§ \\nAs a result of QA department launch a number of hotfixes was significantly decreased. \\n', '§ \\nWas engaged in system performance analysis. During evaluation the bottlenecks were detected, and web \\napplication response time decreased from ~4 sec to ~1,5 sec. \\n', '§ \\nSystem uptime was up to 99.9% due to monitoring system implementation. \\n', '§ \\nQuality of customer service increased up to 70% (based on first reply time and agent touches) according to \\nZendesk statistic. \\n', '§ \\nDesigned and implemented project IT infrastructure. Some optimizations saved 30% of the budget. \\n', '§ \\nOrganized work processes with 3rd party contributors. \\n', ""§ \\nDevelopment and management of KPI for the developers' team. \\n"", ' \\n \\n', ' \\n', 'Lead Software Engineer \\nFeb 2013 — Aug 2015 \\n', 'DELL Inc. — dell.com \\nMoscow, Russia \\n', 'Joined as a senior software engineer to work on web part of Dell One Active Roles Server. Worked on backend \\nand frontend parts of solution. Later was promoted to lead the web development team of 6. \\nKey Achievements: \\n', ' \\n', '§ \\nFor outstanding contribution to business results and dedication to customers was awarded The Dell \\nChampion Award as the employee of year. \\n', '§ \\nResponsible for new UI and UX as one of the major features of version 7.0. Decreased feature time-to \\nmarket from 12 to 4 months. \\n', '§ \\nUnit tests covering was increased to 70%. Unit tests for frontend were implemented by our team from \\nscratch. \\n', '§ \\nPresented MVP to the product owner collected feedback for next release and sync up on current \\ndevelopment state. It allowed to estimate must-have features in time. \\n', '§ \\nSystem performance analysis combined with stress testing allowed to detect and fix bottlenecks resulting \\nin the improvement of response time up to 20%. \\n', '§ \\nAs a result of the research, one of the offered modern front-end technologies was selected for use in \\nfollowing versions. \\n', ' \\n \\n', ' \\nEngineering Manager \\nJul 2011 — Feb 2013 \\n', ' \\nConcert.ru LLC — concert.ru \\nMoscow, Russia \\n', 'Started my way in Concert.ru (the biggest ticket portal in Russia) up from a software developer to Head of \\ndevelopment. Working collaboratively with in-house departments I combined positions of a full-stack web \\ndeveloper and team lead. \\nKey Achievements: \\n', ' \\n', '§ \\nCreated development, quality assurance, and implementation methodologies of product produce lifecycle. \\n', '§ \\nResponsible for an idea, development and delivery of a new product conducive to the business growth. \\n', '§ \\nThe development department grew up from 3 to 7 people. \\n', '§ \\nOrganized development and releases of mobile applications from scratch. \\n', '§ \\nHelpdesk department was created. \\n', '§ \\nDB monitoring process was implemented. Speed of most valuable reports was up to 20 times. \\n', '§ \\nDeveloped a strategy against DDOS attacks. \\n', '§ \\nCollaborated with SEO specialists that resulted in the top 2 rankings on Google and Yandex. \\n', '§ \\nThe ticket portal for Ukraine was launched which allowed the company to enter the new market. \\n', '  \\nKEY COMPETENCIES \\n \\n', ' \\n', '§ \\nWeb Development \\n', '§ \\nWeb Applications and Services \\n', '§ \\nSoftware Development \\nLifecycle \\n', '§ \\nSoftware Engineering \\n', '§ \\nAgile Methodologies \\n', '§ \\nScaled Agile Framework \\n', '§ \\nProject Management \\n', '§ \\nRisk Management \\n', '§ \\nSolutions Technical \\nArchitecture \\n', '§ \\nTeam Building & Development \\n', '§ \\nUX & UI Design \\n', '§ \\nStartups \\n', ' \\n', '  \\nEDUCATION \\n \\n', ' \\n', ' \\n', 'Master’s Degree in Computer Science \\n2002 — 2008 \\n', 'Southern Federal University \\nField of Information Systems and Technologies \\n', 'Russia \\n', ' \\n \\n', ' \\n', 'Y Combinator \\n2017 \\n', 'Startup Founder Track for Startup School Online with the Zentranet company \\nOnline \\n', ' \\n']","Moscow, Russia 
Open to relocate 
Visa sponsorship required 
VLADIMIR 
MATVEEV 
CTO / Software Engineer / Tech Lead 

matv11v@gmail.com  

+7 995 0998 000 

 

  
PERSONAL SUMMARY 
 

Entrepreneurial-spirited software engineer with over 15 years of experience mostly in web development (using 
Microsoft.NET technologies stack). 10+ years career as a software engineer, team lead and senior developer. 
5+ years as a software project manager and CTO in a startup, managing team of 15. Broad expertise in IT, full 
project lifecycle management, client/vendor relationship management and financial/operational management. 

 

  
TECHNICAL SKILLS 
 

 

Languages 
C#; JavaScript; T-SQL; LINQ; HTML; CSS; ES6+ 

Technologies and 
Frameworks 

.NET, .NET Core; ASP.NET Core, ASP.NET MVC; ASP.NET ASP.NET Web Forms; jQuery; 
Angular; React; Vue; SOA/REST/Web Services; SignalR; Selenium; ADO.NET; Entity 
Framework; Bootstrap 

Databases 
Microsoft SQL Server; MongoDB; Redis; My SQL; TimescaleDB 

Source Control 
Git; TFS; SVN 

Methodology 
Scrum; Kanban; Lean; TDD 

Platforms 
Windows Server; IIS 

  Virtualization & Cloud 
 Windows Azure; Amazon Web Services 
 

Tools 
VSTS; ReSharper; JMeter; TeamCity; YouTrack; MS Visual Studio; Visual Studio Code 

  
WORK EXPERIENCE 
 

 

 

Founder and CTO 
Sep 2019 — Current 

Glomad — glomad.net 
 

The Glomad.net was launched in early 2020. Our mission is to promote the idea of free movement with the 
ability of remote work and online entrepreneurship. The purpose of Glomad is to provide services for remote 
workers, travelers and digital nomads. The first demo version is launched on January 20, 2020. Currently, it is 
a crowdsourced database of cities in the world analyzing 8302 cities and 10 parameters for each as well as 
about 100 embassies. 

 
 

 
Engineering Manager (contract) 
Jun 2020 — Current 

 
BPS Int. — connected-bim.com 
Munich, Germany 

Building from scratch the full cycle of the development process of an innovative product in the field of IIoT. 

 
 

 

Chief Technology Officer 
Feb 2015 — Apr 2018 

DaOffice LLC — daoffice.ru 
Moscow, Russia 

As a partner and CTO was initially hired to oversee all product development, team building and management. I 
worked on enterprise social software platform, a Russian analog of Microsoft Yammer and Facebook 
Workplace. 
Key Achievements: 

 

§ 
Implemented product development lifecycle from scratch and introduced Agile methodologies. Therefore, 
releases were made according to schedule. 

§ 
Process of mobile development was created. 2 new flagman products and 6 applications were released. 

§ 
As a result of QA department launch a number of hotfixes was significantly decreased. 

§ 
Was engaged in system performance analysis. During evaluation the bottlenecks were detected, and web 
application response time decreased from ~4 sec to ~1,5 sec. 

§ 
System uptime was up to 99.9% due to monitoring system implementation. 

§ 
Quality of customer service increased up to 70% (based on first reply time and agent touches) according to 
Zendesk statistic. 

§ 
Designed and implemented project IT infrastructure. Some optimizations saved 30% of the budget. 

§ 
Organized work processes with 3rd party contributors. 

§ 
Development and management of KPI for the developers' team. 

 
 

 

Lead Software Engineer 
Feb 2013 — Aug 2015 

DELL Inc. — dell.com 
Moscow, Russia 

Joined as a senior software engineer to work on web part of Dell One Active Roles Server. Worked on backend 
and frontend parts of solution. Later was promoted to lead the web development team of 6. 
Key Achievements: 

 

§ 
For outstanding contribution to business results and dedication to customers was awarded The Dell 
Champion Award as the employee of year. 

§ 
Responsible for new UI and UX as one of the major features of version 7.0. Decreased feature time-to 
market from 12 to 4 months. 

§ 
Unit tests covering was increased to 70%. Unit tests for frontend were implemented by our team from 
scratch. 

§ 
Presented MVP to the product owner collected feedback for next release and sync up on current 
development state. It allowed to estimate must-have features in time. 

§ 
System performance analysis combined with stress testing allowed to detect and fix bottlenecks resulting 
in the improvement of response time up to 20%. 

§ 
As a result of the research, one of the offered modern front-end technologies was selected for use in 
following versions. 

 
 

 
Engineering Manager 
Jul 2011 — Feb 2013 

 
Concert.ru LLC — concert.ru 
Moscow, Russia 

Started my way in Concert.ru (the biggest ticket portal in Russia) up from a software developer to Head of 
development. Working collaboratively with in-house departments I combined positions of a full-stack web 
developer and team lead. 
Key Achievements: 

 

§ 
Created development, quality assurance, and implementation methodologies of product produce lifecycle. 

§ 
Responsible for an idea, development and delivery of a new product conducive to the business growth. 

§ 
The development department grew up from 3 to 7 people. 

§ 
Organized development and releases of mobile applications from scratch. 

§ 
Helpdesk department was created. 

§ 
DB monitoring process was implemented. Speed of most valuable reports was up to 20 times. 

§ 
Developed a strategy against DDOS attacks. 

§ 
Collaborated with SEO specialists that resulted in the top 2 rankings on Google and Yandex. 

§ 
The ticket portal for Ukraine was launched which allowed the company to enter the new market. 

  
KEY COMPETENCIES 
 

 

§ 
Web Development 

§ 
Web Applications and Services 

§ 
Software Development 
Lifecycle 

§ 
Software Engineering 

§ 
Agile Methodologies 

§ 
Scaled Agile Framework 

§ 
Project Management 

§ 
Risk Management 

§ 
Solutions Technical 
Architecture 

§ 
Team Building & Development 

§ 
UX & UI Design 

§ 
Startups 

 

  
EDUCATION 
 

 

 

Master’s Degree in Computer Science 
2002 — 2008 

Southern Federal University 
Field of Information Systems and Technologies 

Russia 

 
 

 

Y Combinator 
2017 

Startup Founder Track for Startup School Online with the Zentranet company 
Online 

 

"
46,source/Danil Vibly.pdf,"['Danil Vibly\\n', 'New Rochelle, New York, United States\\n', 'daaaibly@gmail.com\\n(901) 0007659\\nlinkedin.com/in/denisvaaay\\n', 'Summary\\n', ""I'm a Quality Assurance Engineer with great attention to detail and a commitment to developing and\\nimplementing continuous improvement initiatives through the collection and analysis of data and converting\\nit into actionable information\\n"", 'Skills\\n', 'Core Competencies: Software Quality Assurance, Manual Testing, Requirements Analysis, Test Planning\\nProject Planning Tools: Jira, Gitlab\\nSource Control: Git\\nMethodology: Scrum, Kanban\\nDatabases: Postgresql, MySQL, DBeaver\\nQA Tools & Software: WebAPI, Testing using Postman, Charles Proxy, Chrome Developer Tools\\n', 'Experience\\n', 'Software Quality Assurance Engineer\\n', 'IN/OUT, Los Angeles, CA\\n', 'March 2019 - Present (1 year)\\n', '●\\nParticipating\\nin\\nfull\\nsystem\\ndevelopment\\nlife\\ncycle\\nincluding\\ndesigning,\\ndeveloping\\nand\\n', 'implementing test plans, test cases, and test processes, test methodologies (Agile), deployments and\\npromotions of hotfixes and weekly releases\\n', '● Manual software testing experience (web-based applications, Client/Server, e-Commerce, Mobile)\\n', 'Operation Manager\\n', 'MKN Communications LLC, Knoxville, TN\\n', 'Mar 2017 - March 2019 (3 years)\\n', ""● Headed - 8 Foreman’s that worked with a team of engineers, CM's, PM’s, GC’s\\n"", '● Created structure and repeatability to allow the company to optimize the business processes\\n(project management, logistics, financial operations, document flow)\\n', 'Project Manager\\n', 'Demis Group, Moscow, Russia\\n', 'Sep 2014 - Feb 2017 (2 years 6 months)\\n', '● Focused on serving/consulting key agency’s clients on internet marketing/web development\\n', '●\\nIntroduced processes in the department to optimize work on projects (refinement of CRM and\\n', 'project management rules)\\n', 'Education\\n', ""Belarusian State University, Minsk, BY\\nMaster's Degree in Art Management, 2007 - 2014\\n""]","Danil Vibly

New Rochelle, New York, United States

daaaibly@gmail.com
(901) 0007659
linkedin.com/in/denisvaaay

Summary

I'm a Quality Assurance Engineer with great attention to detail and a commitment to developing and
implementing continuous improvement initiatives through the collection and analysis of data and converting
it into actionable information

Skills

Core Competencies: Software Quality Assurance, Manual Testing, Requirements Analysis, Test Planning
Project Planning Tools: Jira, Gitlab
Source Control: Git
Methodology: Scrum, Kanban
Databases: Postgresql, MySQL, DBeaver
QA Tools & Software: WebAPI, Testing using Postman, Charles Proxy, Chrome Developer Tools

Experience

Software Quality Assurance Engineer

IN/OUT, Los Angeles, CA

March 2019 - Present (1 year)

●
Participating
in
full
system
development
life
cycle
including
designing,
developing
and

implementing test plans, test cases, and test processes, test methodologies (Agile), deployments and
promotions of hotfixes and weekly releases

● Manual software testing experience (web-based applications, Client/Server, e-Commerce, Mobile)

Operation Manager

MKN Communications LLC, Knoxville, TN

Mar 2017 - March 2019 (3 years)

● Headed - 8 Foreman’s that worked with a team of engineers, CM's, PM’s, GC’s

● Created structure and repeatability to allow the company to optimize the business processes
(project management, logistics, financial operations, document flow)

Project Manager

Demis Group, Moscow, Russia

Sep 2014 - Feb 2017 (2 years 6 months)

● Focused on serving/consulting key agency’s clients on internet marketing/web development

●
Introduced processes in the department to optimize work on projects (refinement of CRM and

project management rules)

Education

Belarusian State University, Minsk, BY
Master's Degree in Art Management, 2007 - 2014

"
47,source/BALAMANOVA ASSEL.pdf,"['BALAMANOVA ASSEL\\n', 'EDUCATION\\n', '+77010009306 |\\n', 'assel.balamanova237@gmail.com |\\n', 'LinkedIn | Kazakhstan, Almaty |\\n', 'Ready to relocate\\n', 'International Information Technology University\\nBachelor of Information Systems\\nSep. 2016 – May 2022\\n', 'FH Schmalkalden University of Applied Sciences\\nExchange student of faculty Information Technologies\\nOct. 2018 – Feb 2019\\n', 'EXPERIENCE\\n', 'KCELL JSC\\n', 'Software Developer | Java Spring, flyway, mybatis, redis, RabbitMQ\\nSep 2020 – now\\n', '• Worked on back-end side of new corporate site of company from 0 to launch\\n• Experience on project migrated from monolith to microservices\\n• Started to write code review for colleagues\\n• Support junior SD\\n', 'Junior Software Developer |React, Java Spring, Oracle, PostgreSQL, RabbitMQ, JDBC\\nJul 2019 – Aug 2020\\n', '• Worked to optimize internal web-site which process million of users\\n• E-Registry project for accountant and clients\\n• Logger and validation starter\\n• Work together with DevOpses to migrate projects from VM to kubernetes\\n', 'Zero To One Labs\\n', 'Mobile Developer Intern| React Native\\nJun 2018 – Aug 2018\\n', '• Took part in a coding boot camp where implemented various cross-platform mobile apps using\\n', 'technologies such as React Native, GraphQL and Firebase\\n', 'AWARDS & ACHIEVEMENTS\\n', 'International Student Scientiﬁc and Practical Conference ""Youth, Science and Innovation - 2020"", 2nd place\\nFirst President Scholarship Winner between students of our country (Scholarship for top 50 students in KZ)\\nHonor of Yessenov`s Foundation Scholarship for achievements of study and activities between students in\\n', 'the country.\\n', '3rd place: Demo Presentation at nFactorial Incubator 2018 honor application for abbiturents which help to\\n', 'select future career and university, got 3rd place out of approximately 100 mobile apps by the end of Bootcamp.\\n', 'VOLUNTEERING & OTHER ACTIVITIES\\n', 'Volunteer in “Club Dobryakov” which organizes charity events in city Almaty\\n2018 – 2020\\n', 'Organizer and Leader of enthnic ensemble in university, every year the number of students is growing 2016 – 2020\\n', 'Student Mentor of Hackathon organized by UNICEF.\\n2016\\nSep\\n', 'Volunteer on “2017 Universade Winter Sport Games” International student`s sports federation.\\n2017 Feb\\n', 'TECHNICAL SKILLS\\n', 'Programming Languages: Java, JavaScript,\\n', 'Framework & Tools: Spring Boot, React, React Native, GraphQL, flyway, myBatis, Oracle, PostgreSQL, Spring Data,\\nFeignCloud, JUnit,\\nLanguages: English (Intermediate), Russian(Native Speaker)\\n']","BALAMANOVA ASSEL

EDUCATION

+77010009306 |

assel.balamanova237@gmail.com |

LinkedIn | Kazakhstan, Almaty |

Ready to relocate

International Information Technology University
Bachelor of Information Systems
Sep. 2016 – May 2022

FH Schmalkalden University of Applied Sciences
Exchange student of faculty Information Technologies
Oct. 2018 – Feb 2019

EXPERIENCE

KCELL JSC

Software Developer | Java Spring, flyway, mybatis, redis, RabbitMQ
Sep 2020 – now

• Worked on back-end side of new corporate site of company from 0 to launch
• Experience on project migrated from monolith to microservices
• Started to write code review for colleagues
• Support junior SD

Junior Software Developer |React, Java Spring, Oracle, PostgreSQL, RabbitMQ, JDBC
Jul 2019 – Aug 2020

• Worked to optimize internal web-site which process million of users
• E-Registry project for accountant and clients
• Logger and validation starter
• Work together with DevOpses to migrate projects from VM to kubernetes

Zero To One Labs

Mobile Developer Intern| React Native
Jun 2018 – Aug 2018

• Took part in a coding boot camp where implemented various cross-platform mobile apps using

technologies such as React Native, GraphQL and Firebase

AWARDS & ACHIEVEMENTS

International Student Scientiﬁc and Practical Conference ""Youth, Science and Innovation - 2020"", 2nd place
First President Scholarship Winner between students of our country (Scholarship for top 50 students in KZ)
Honor of Yessenov`s Foundation Scholarship for achievements of study and activities between students in

the country.

3rd place: Demo Presentation at nFactorial Incubator 2018 honor application for abbiturents which help to

select future career and university, got 3rd place out of approximately 100 mobile apps by the end of Bootcamp.

VOLUNTEERING & OTHER ACTIVITIES

Volunteer in “Club Dobryakov” which organizes charity events in city Almaty
2018 – 2020

Organizer and Leader of enthnic ensemble in university, every year the number of students is growing 2016 – 2020

Student Mentor of Hackathon organized by UNICEF.
2016
Sep

Volunteer on “2017 Universade Winter Sport Games” International student`s sports federation.
2017 Feb

TECHNICAL SKILLS

Programming Languages: Java, JavaScript,

Framework & Tools: Spring Boot, React, React Native, GraphQL, flyway, myBatis, Oracle, PostgreSQL, Spring Data,
FeignCloud, JUnit,
Languages: English (Intermediate), Russian(Native Speaker)

"
48,source/Marat Nuriev.pdf,"['Marat Nuriev\\n', 'marat@nuriev.me • linkedin.com/in/nuriev78/\\n', '.Net Developer\\n', 'TECHNICAL PROFICIENCIES\\n', 'Backend: .NET, C#, ASP.NET MVC, LINQ\\nFrontend: JavaScript, Ext JS, HTML, CSS\\nDatabases: PostgreSQL, Oracle, NHibernate\\nVersion Control: Git\\n', 'PROFESSIONAL EXPERIENCE\\n', 'BARS Group, Russia\\n', 'Full-stack .NET Developer (7/2018 – Present)\\n', 'Project: Electronic Budget of the Russian Federation (.NET MVC Web Application)\\n', 'Technologies: C#, ASP.NET MVC, Ext JS, JavaScript, NHibernate, Oracle, PostgreSQL, Castle Windsor, Git, Jira,\\nBitbucket, TeamCity, IIS\\n', 'Key Achievements:\\n', '● Reduced loading time of some pages from 10 to 3 seconds by improving requests to database and\\n', 'reducing materialization of data.\\n', '● Created messenger bot to create reports for client about finished tasks (uses Jira’s API).\\n', '● Built module for testing electronic signing of documents on client side after application update.\\n', '● Fixed bugs, such as bugs after merging brunches on Git or critical issues after update.\\n', '● Implemented graphical representation of information (different tables and reports).\\n', '● Supported and developed new functionality.\\n', 'Self-employed, Russia\\n', 'Software Developer (1/2015 – 7/2018)\\n', 'Technologies: C#, Windows Forms, JavaScript, HTML, CSS, MySQL, Entity Framework, PHP, Git\\n', 'Key Achievements:\\n', '● Created trading bots for computer games that has been used by hundreds of people every day.\\n', '● Developed messenger bots, one of them has 1000+ subscribers.\\n', '● Built windows forms applications to check strategies for stock market.\\n', '● Worked on own ideas and programs.\\n', 'EDUCATION AND TRAINING\\n', 'Bachelor of Computer Science (2012 – 2016). GPA: 3.23.\\n(in progress) Master of Computer Science. Part-time. 2019 – March 2022.\\nKazan State Power Engineering University, Russia\\n', 'LANGUAGES CERTIFICATES\\n', '● English: IELTS C1 (advanced). Listening: 8.5. Reading: 8.0. Writing: 7.0. Speaking: 7.0. Overall: 7.5.\\n', '● French: TCF B2 (upper-intermediate). CO: 480. CE: 518. EE: 13. EO: 10.\\n']","Marat Nuriev

marat@nuriev.me • linkedin.com/in/nuriev78/

.Net Developer

TECHNICAL PROFICIENCIES

Backend: .NET, C#, ASP.NET MVC, LINQ
Frontend: JavaScript, Ext JS, HTML, CSS
Databases: PostgreSQL, Oracle, NHibernate
Version Control: Git

PROFESSIONAL EXPERIENCE

BARS Group, Russia

Full-stack .NET Developer (7/2018 – Present)

Project: Electronic Budget of the Russian Federation (.NET MVC Web Application)

Technologies: C#, ASP.NET MVC, Ext JS, JavaScript, NHibernate, Oracle, PostgreSQL, Castle Windsor, Git, Jira,
Bitbucket, TeamCity, IIS

Key Achievements:

● Reduced loading time of some pages from 10 to 3 seconds by improving requests to database and

reducing materialization of data.

● Created messenger bot to create reports for client about finished tasks (uses Jira’s API).

● Built module for testing electronic signing of documents on client side after application update.

● Fixed bugs, such as bugs after merging brunches on Git or critical issues after update.

● Implemented graphical representation of information (different tables and reports).

● Supported and developed new functionality.

Self-employed, Russia

Software Developer (1/2015 – 7/2018)

Technologies: C#, Windows Forms, JavaScript, HTML, CSS, MySQL, Entity Framework, PHP, Git

Key Achievements:

● Created trading bots for computer games that has been used by hundreds of people every day.

● Developed messenger bots, one of them has 1000+ subscribers.

● Built windows forms applications to check strategies for stock market.

● Worked on own ideas and programs.

EDUCATION AND TRAINING

Bachelor of Computer Science (2012 – 2016). GPA: 3.23.
(in progress) Master of Computer Science. Part-time. 2019 – March 2022.
Kazan State Power Engineering University, Russia

LANGUAGES CERTIFICATES

● English: IELTS C1 (advanced). Listening: 8.5. Reading: 8.0. Writing: 7.0. Speaking: 7.0. Overall: 7.5.

● French: TCF B2 (upper-intermediate). CO: 480. CE: 518. EE: 13. EO: 10.

"
49,source/KHALIMBETOV ASLAN.pdf,"['KHALIMBETOV ASLAN \\n', '⋄ Seoul, South Korea \\n', 'khalimbetovvvvvvvv@gmail.com    \\n', 'OBJECTIVE \\n', 'Dedicated 3rd-year computer science student with strong skills in Python, C, SQL, and Java. Experienced in teaching \\n”Advanced C” and well-versed in algorithms and data structures. Looking for software development roles to apply \\nmy knowledge and grow professionally. \\n', ' \\n', 'EDUCATION \\n', 'Bachelor of Computer Science, Sejong University (Seoul/South Korea) \\n2020 - 2024 \\n', 'SKILLS \\n', 'Technical Languages: \\nPython, C, Java, SQL \\n', 'Frameworks: \\nDjango \\n', 'Data  Analysis  Libraries: \\nMatplotlib, Pandas \\n', 'Soft Skills: \\nProblem-solving, Critical Thinking, Communication, Teamwork \\n', ' \\n', 'EXPERIENCE \\n', 'Video  Codec  Engineer \\nAugust 2023 - Current \\n', 'Sejong University \\nSeoul, South Korea \\n', '• Collaborated with a multidisciplinary team to identify, troubleshoot, and resolve codec-related issues \\n', '• Documented standardization processes and findings, contributing to the lab’s knowledge base and best practices. \\n', 'Teacher  Assistant  Advanced  C Programming \\nMarch 2022 - July 2022 \\n', 'Sejong University \\n \\nSeoul, South Korea \\n', '• Boosted students’ understanding of Advanced C by 40% through tailored assignment assistance,  leveraging \\n', 'expertise in C language and debugging. \\n', '• Pioneered a teaching approach that elevated code efficiency by 50%, combining technical prowess with innovative \\n', 'curriculum strategies. \\n', ' \\n', 'PROJECTS \\n', 'Korea Income and Welfare Gender Predictor. \\n', '• Utilized Python, Pandas, Matplotlib, Seaborn, and Scikit-learn. \\n', '• Built a logistic regression model from scratch to predict gender based on income, region, and education. \\n', '• Achieved high accuracy, showcasing the model’s predictive capabilities. \\n', 'Django E-Commerce Clothing Platform. \\n', '• Developed using Django, focusing on clothing retail. \\n', '• Features include user-friendly navigation, secure authentication, advanced search, and efficient transaction sys- \\n', 'tems. \\n', '• Set a benchmark for online clothing platforms with its blend of design and functionality. \\n', 'EXTRA-CURRICULAR ACTIVITIES \\n', '• Core member of the university’s Computer Security Club, actively participating in discussions, workshops, and \\n', 'events focused on the latest cybersecurity trends and threats. \\n']","KHALIMBETOV ASLAN 

⋄ Seoul, South Korea 

khalimbetovvvvvvvv@gmail.com    

OBJECTIVE 

Dedicated 3rd-year computer science student with strong skills in Python, C, SQL, and Java. Experienced in teaching 
”Advanced C” and well-versed in algorithms and data structures. Looking for software development roles to apply 
my knowledge and grow professionally. 

 

EDUCATION 

Bachelor of Computer Science, Sejong University (Seoul/South Korea) 
2020 - 2024 

SKILLS 

Technical Languages: 
Python, C, Java, SQL 

Frameworks: 
Django 

Data  Analysis  Libraries: 
Matplotlib, Pandas 

Soft Skills: 
Problem-solving, Critical Thinking, Communication, Teamwork 

 

EXPERIENCE 

Video  Codec  Engineer 
August 2023 - Current 

Sejong University 
Seoul, South Korea 

• Collaborated with a multidisciplinary team to identify, troubleshoot, and resolve codec-related issues 

• Documented standardization processes and findings, contributing to the lab’s knowledge base and best practices. 

Teacher  Assistant  Advanced  C Programming 
March 2022 - July 2022 

Sejong University 
 
Seoul, South Korea 

• Boosted students’ understanding of Advanced C by 40% through tailored assignment assistance,  leveraging 

expertise in C language and debugging. 

• Pioneered a teaching approach that elevated code efficiency by 50%, combining technical prowess with innovative 

curriculum strategies. 

 

PROJECTS 

Korea Income and Welfare Gender Predictor. 

• Utilized Python, Pandas, Matplotlib, Seaborn, and Scikit-learn. 

• Built a logistic regression model from scratch to predict gender based on income, region, and education. 

• Achieved high accuracy, showcasing the model’s predictive capabilities. 

Django E-Commerce Clothing Platform. 

• Developed using Django, focusing on clothing retail. 

• Features include user-friendly navigation, secure authentication, advanced search, and efficient transaction sys- 

tems. 

• Set a benchmark for online clothing platforms with its blend of design and functionality. 

EXTRA-CURRICULAR ACTIVITIES 

• Core member of the university’s Computer Security Club, actively participating in discussions, workshops, and 

events focused on the latest cybersecurity trends and threats. 

"
50,source/Mark Pavlenko.pdf,"['Mark Pavlenko\\n', 'Senior Frontend Developer\\n', 'Contacts\\nvitaaan@gmail.com\\n+7(968)000-52-96\\n', '@pavlenko_viaaay\\n', 'pavlenko-aaaay\\npavlaaaovit\\n', ""Summary\\nI've been doing front-end development for over 6 years. During this time, I developed\\nSPA in React, made websites with SSR with Next.js, mobile applications in React Native\\nfor iOS/Android.\\n"", 'My strong point is the love of order in any project. This applies not only to code, but\\nalso to processes in teams. In the last two companies I combined development and\\nmanagement of a team, the size of which reached 10 people.\\n', 'Skills\\nJavaScript · TypeScript · React · Next.js · React Native · Redux.js · Webpack · D3.js\\n· Styled Components · Restyle · SAAS · Jest · React Testing Library · CSS · HTML ·\\nNode.js · Express.js · GraphQL · MySQL · Git\\n', 'Work experience – 6 years 3 months\\n', 'Senior Frontend Developer, Team Lead\\nPROFI – marketplace of specialties\\nMar 2022 - Present · 1 year 6 months\\n', 'For the last six months, I have been responsible for the development and implementation of UI-kit into\\nproducts. Previously, I developed the front-end of a mobile application and web version of Profi\\n', '✓ Speeded up the React Native application renderer by 30% after abandoning styled-components\\n✓\\nRewrote part of the code from the monolith into a separate microservice on Node.js. This\\n', 'made it possible to get rid of legacy PHP code and transfer part of the product to the target\\narchitecture\\n✓ Wrote 3 articles on Habr, which helped increase awareness of the IT brand\\n', 'Frontend Cluster Lead\\nSBER (PULSE) – digital environment for employees and managers\\nNov 2018 - Feb 2022 · 3 years 4 months\\n', 'I was a competency leader in the Analytics cluster and was responsible for the growth and development\\nof 10 front-end developers\\n', '✓ Launched 4 analytical products on the HR platform\\n✓ Delivered a presentation at the SberJS meetup with a topic about the D3.js charting library\\n✓ Created a comfortable atmosphere in the front-end community of the cluster\\n✓ Participated in the hiring of interns for the Sber Seasons internship and was a mentor for 4 interns\\n✓ Received an award for his contribution to the development of a mentoring culture at the bank\\n', 'Frontend Developer\\nKRIKDESIGN – Web Studio\\nAug 2017 - Oct 2018 · 1 years 3 months\\n', 'I developed front-end parts for websites using React or native JavaScript\\n', '✓ Made 2 websites with complex animations for the Awwwards, which won as the “site of the day”\\n', '✓ Created several interactive promotional landing pages for the IKEA website\\n', 'Additional information\\n', ""Education 2017 - 2021\\nMoscow Automobile and Road Construction\\nUniversity (MADI)\\nBachelor's degree, Information Technology\\n"", 'Publications\\n- Restyle as a new standard for creating UI in React Native\\n- Building Complex Forms with Ease: A Comprehensive Guide\\n- Advanced Data Visualization using D3.js and React\\n- Creating Your Own CLI for React: Tips and Tricks\\n- Creating Dynamic Sticky Effects for React Slider\\n-\\nImplementing Free Particle Movement with\\n', 'ReactJS Languages Russian – Native | English – Proficient\\n']","Mark Pavlenko

Senior Frontend Developer

Contacts
vitaaan@gmail.com
+7(968)000-52-96

@pavlenko_viaaay

pavlenko-aaaay
pavlaaaovit

Summary
I've been doing front-end development for over 6 years. During this time, I developed
SPA in React, made websites with SSR with Next.js, mobile applications in React Native
for iOS/Android.

My strong point is the love of order in any project. This applies not only to code, but
also to processes in teams. In the last two companies I combined development and
management of a team, the size of which reached 10 people.

Skills
JavaScript · TypeScript · React · Next.js · React Native · Redux.js · Webpack · D3.js
· Styled Components · Restyle · SAAS · Jest · React Testing Library · CSS · HTML ·
Node.js · Express.js · GraphQL · MySQL · Git

Work experience – 6 years 3 months

Senior Frontend Developer, Team Lead
PROFI – marketplace of specialties
Mar 2022 - Present · 1 year 6 months

For the last six months, I have been responsible for the development and implementation of UI-kit into
products. Previously, I developed the front-end of a mobile application and web version of Profi

✓ Speeded up the React Native application renderer by 30% after abandoning styled-components
✓
Rewrote part of the code from the monolith into a separate microservice on Node.js. This

made it possible to get rid of legacy PHP code and transfer part of the product to the target
architecture
✓ Wrote 3 articles on Habr, which helped increase awareness of the IT brand

Frontend Cluster Lead
SBER (PULSE) – digital environment for employees and managers
Nov 2018 - Feb 2022 · 3 years 4 months

I was a competency leader in the Analytics cluster and was responsible for the growth and development
of 10 front-end developers

✓ Launched 4 analytical products on the HR platform
✓ Delivered a presentation at the SberJS meetup with a topic about the D3.js charting library
✓ Created a comfortable atmosphere in the front-end community of the cluster
✓ Participated in the hiring of interns for the Sber Seasons internship and was a mentor for 4 interns
✓ Received an award for his contribution to the development of a mentoring culture at the bank

Frontend Developer
KRIKDESIGN – Web Studio
Aug 2017 - Oct 2018 · 1 years 3 months

I developed front-end parts for websites using React or native JavaScript

✓ Made 2 websites with complex animations for the Awwwards, which won as the “site of the day”

✓ Created several interactive promotional landing pages for the IKEA website

Additional information

Education 2017 - 2021
Moscow Automobile and Road Construction
University (MADI)
Bachelor's degree, Information Technology

Publications
- Restyle as a new standard for creating UI in React Native
- Building Complex Forms with Ease: A Comprehensive Guide
- Advanced Data Visualization using D3.js and React
- Creating Your Own CLI for React: Tips and Tricks
- Creating Dynamic Sticky Effects for React Slider
-
Implementing Free Particle Movement with

ReactJS Languages Russian – Native | English – Proficient

"
51,source/Budniak Ivan.pdf,"['• \\n', 'Budniak Ivan \\nSoftware Engineer with significant competitive programming experience \\n \\n', 'Email: budniakkkk@yandex.by  \\nMobile: +375 (44) 543-11-11 \\n \\n', ' \\n', 'EDUCATION \\n', 'Belarusian State University in Informatics and Radioelectronics \\nMinsk, Belarus \\n', 'Bachelor’s degree in Computer Science \\nSeptember 2017 — Expected 2021 \\n', 'Yandex School of Data Analysis \\nMoscow, Russia \\n', 'Master’s level program, Machine Learning development track \\nSeptember 2019 — Expected 2021 \\n', 'Relevant courses: Probability and Statistics, Machine Learning, Computer Vision, Natural Language Processing, Deep \\nLearning, Reinforcement Learning, Python, C++, GoLang, Algorithms and Data Structures, BigData, Parallel and \\nDistributed Computations \\n', ' \\n', 'WORK   EXPERIENCE \\n', 'Deltix (Bought by EPAM Systems at january 2020) \\nMinsk, Belarus \\n', 'Software Engineer \\nAugust 2018 – Present \\n', 'Developed a system for integration with various top crypto-custodies for crypto-trading platform used by hundreds of \\nthousands. \\n', '• Created a service for secure interacting with any Ethereum tokens. \\n• Fixed major issues of crypto-trading platform high loaded module. \\n• Built a tool for crypto-trading platform stress-testing. \\n', 'Mogilev State Regional Institute for Education Development \\nMogilev, Belarus \\n', 'Competitive Programming Mentor \\nFebrary, March 2018&2019 \\n', '• Preparing students of Mogilev region for the National Olympiad in Informatics. Many of them were awarded. \\n', 'PROJECTS \\n', 'JPEG decoder: Baseline sequential mode of JPEG decoder, written in C++ using OOP and various algorithms such as \\nHuffman decoding. \\nUkrainian-Russian translator: Written in Python with Sklearn library, using embedding space mapping with optimal \\ntransformation derived from SVD decomposition. Used public dataset with 1M word pairs. \\nLightBulbChan: Student assistant in the form of a multifunctional telegram bot. Uses various APIs to help students \\nprepare for classes. \\n', 'AWARDS \\n', 'ACM ICPC, NEERC ICPC \\nSaint-Petersburg, Russia — December, 2017 \\n', '• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion \\n• III degree award (2017, 81/244 place) \\n', 'ACM ICPC, Belarus and Baltics Regional Contest \\nMinsk, Belarus — October, 2017&2018 \\n', '• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion \\n• III degree award (2019, 18/57 place) \\n• II degree award (2017, 8/57 place) \\n', 'Individual Olympiad in Informatics and Programming \\nSaint-Petersburg, Russia — March 2017 \\n', '• Programming competition among schoolchildren of Belarus, Russia and Kazakhstan \\n• I degree award (10/180 place) \\n', 'Belarusian National Olympiad in Informatics \\nBelarus — March 2015&2016&2017 \\n', '• II degree award (2017, 12/123 place) \\n• II degree award (2016, 12/120 place) \\n• III degree award (2015, 39/118 place) \\n', 'Top 3% on Codeforces — ednotdead \\nTop 2% on Hackerrank — Ed_Os \\n', '• \\n', '• \\n', '• \\n', '• \\n']","• 

Budniak Ivan 
Software Engineer with significant competitive programming experience 
 

Email: budniakkkk@yandex.by  
Mobile: +375 (44) 543-11-11 
 

 

EDUCATION 

Belarusian State University in Informatics and Radioelectronics 
Minsk, Belarus 

Bachelor’s degree in Computer Science 
September 2017 — Expected 2021 

Yandex School of Data Analysis 
Moscow, Russia 

Master’s level program, Machine Learning development track 
September 2019 — Expected 2021 

Relevant courses: Probability and Statistics, Machine Learning, Computer Vision, Natural Language Processing, Deep 
Learning, Reinforcement Learning, Python, C++, GoLang, Algorithms and Data Structures, BigData, Parallel and 
Distributed Computations 

 

WORK   EXPERIENCE 

Deltix (Bought by EPAM Systems at january 2020) 
Minsk, Belarus 

Software Engineer 
August 2018 – Present 

Developed a system for integration with various top crypto-custodies for crypto-trading platform used by hundreds of 
thousands. 

• Created a service for secure interacting with any Ethereum tokens. 
• Fixed major issues of crypto-trading platform high loaded module. 
• Built a tool for crypto-trading platform stress-testing. 

Mogilev State Regional Institute for Education Development 
Mogilev, Belarus 

Competitive Programming Mentor 
Febrary, March 2018&2019 

• Preparing students of Mogilev region for the National Olympiad in Informatics. Many of them were awarded. 

PROJECTS 

JPEG decoder: Baseline sequential mode of JPEG decoder, written in C++ using OOP and various algorithms such as 
Huffman decoding. 
Ukrainian-Russian translator: Written in Python with Sklearn library, using embedding space mapping with optimal 
transformation derived from SVD decomposition. Used public dataset with 1M word pairs. 
LightBulbChan: Student assistant in the form of a multifunctional telegram bot. Uses various APIs to help students 
prepare for classes. 

AWARDS 

ACM ICPC, NEERC ICPC 
Saint-Petersburg, Russia — December, 2017 

• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion 
• III degree award (2017, 81/244 place) 

ACM ICPC, Belarus and Baltics Regional Contest 
Minsk, Belarus — October, 2017&2018 

• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion 
• III degree award (2019, 18/57 place) 
• II degree award (2017, 8/57 place) 

Individual Olympiad in Informatics and Programming 
Saint-Petersburg, Russia — March 2017 

• Programming competition among schoolchildren of Belarus, Russia and Kazakhstan 
• I degree award (10/180 place) 

Belarusian National Olympiad in Informatics 
Belarus — March 2015&2016&2017 

• II degree award (2017, 12/123 place) 
• II degree award (2016, 12/120 place) 
• III degree award (2015, 39/118 place) 

Top 3% on Codeforces — ednotdead 
Top 2% on Hackerrank — Ed_Os 

• 

• 

• 

• 

"
52,source/Gregoriy Alexeev.pdf,"['Gregoriy Alexeev\\n', 'UI/UX Designer\\n', 'Tbilisi, Georgia / +995 000-637-978 / greg.alexeev@me.com / Portfolio\\n', 'A hard-working, motivated, and experienced UI/UX Designer with a\\n', 'strong online portfolio, attention to detail, and excellent management\\n', 'skills. Quick learner with modern ideas and a huge knowledge base.\\n', 'Having excellent communication skills I can easily fit a\\n', 'cross-functional Agile team. Always ready to perform tasks quickly in\\n', 'different fields like design, development, management, or analyses.\\n', 'EXPERIENCE\\n', 'Senior UI/UX Designer Apr 2021 - Present\\n', 'Dualboot Partners, Charlotte, NC (Remote)\\n', 'Designing complex user flows, researching personas, organizing design\\n', 'systems for Web and Mobile (iOS, Android) applications and SaaS.\\n', 'Communicating with product directors, stakeholders, and distributed\\n', 'developers team. Improving design management process and mentoring\\n', 'junior designers.\\n', 'Senior UI/UX Designer Feb 2019 - Mar 2021\\n', 'Coursly.co, Moscow\\n', 'Designed an online LMS using the best practices of Interface Design in\\n', '6 months by implementing a system based on reusable components.\\n', 'Increased the number of trial users by 400% with A/B testing.\\n', 'Designed onboarding process and decreased a load of support center by\\n', '270%\\n', 'Senior UI/UX Designer, Team Lead Sep 2016 - Feb 2019\\n', '#VA, Moscow\\n', 'Managed a team of designers and developers. Worked with customers’\\n', 'requirements. Designed over 35 projects based on user interviews,\\n', 'prototypes and user flows. $60,000 turnover of the company in its first\\n', 'year on the web design market. Built online courses with over 300\\n', 'students who completed the course on UI/UX design.\\n', 'Senior Web Developer Jun 2016 - May 2018\\n', 'TechProMarketing, Boston, MA (Remote)\\n', 'Full Stack Web Development. Landing Page and eCommerce websites design\\n', 'mockups integration. SEO optimization and API integration of Stripe and\\n', 'Plaid Processing. Built continuous integration (CI) for WordPress-based\\n', 'websites. Managed a team of 7 developers. Writing tech specs and\\n', 'documentation.\\n', 'Junior UI Designer Jun 2014 - Dec 2014\\n', 'AIC, Moscow\\n', 'Web and mobile data-driven design (iOS & Android) of banking dashboards\\n', 'and financial services. Collaborating with the team to build a complex\\n', 'application design and usability testing. Designed system for the most\\n', 'popular Government Services Portal with 1,6M DAU.\\n', 'EDUCATION\\n', ""Bachelor's degree - IT Management Sep 2015 - May 2019\\n"", 'Plekhanov Russian University of Economics, Moscow\\n', 'Agile methodologies in IT Management and Web Technology.\\n', 'SKILLS\\n', 'Expert in: UI/UX Design, Interaction Design, Adobe XD, Sketch, Web\\n', 'Design, Workflows, InvisionApp, Wireframes Design, Figma, Visual\\n', 'Design, Zoom, Slack, SaaS, Dashboards, Product Design, HTML5, CSS3\\n', 'Intermediate in: Adobe Photoshop, WordPress, JavaScript, User Research,\\n', 'Customer Journey Map, Design Team Management, Prototyping & User\\n', 'Stories, Problem Solving skills, Other design tools, Laravel, Vue.js,\\n', 'Video Editing, Onboarding design, Moqups, Zeplin, eCommerce Design\\n', 'Basic In: Python, SQL, SEO, Motion Graphics, Graphic Design\\n', 'ONLINE PORTFOLIO\\n', 'Check out my portfolio website with all the available projects,\\n', 'case studies, and other activities. Please note, that some of the\\n', 'marked projects are not for public sharing.\\n']","Gregoriy Alexeev

UI/UX Designer

Tbilisi, Georgia / +995 000-637-978 / greg.alexeev@me.com / Portfolio

A hard-working, motivated, and experienced UI/UX Designer with a

strong online portfolio, attention to detail, and excellent management

skills. Quick learner with modern ideas and a huge knowledge base.

Having excellent communication skills I can easily fit a

cross-functional Agile team. Always ready to perform tasks quickly in

different fields like design, development, management, or analyses.

EXPERIENCE

Senior UI/UX Designer Apr 2021 - Present

Dualboot Partners, Charlotte, NC (Remote)

Designing complex user flows, researching personas, organizing design

systems for Web and Mobile (iOS, Android) applications and SaaS.

Communicating with product directors, stakeholders, and distributed

developers team. Improving design management process and mentoring

junior designers.

Senior UI/UX Designer Feb 2019 - Mar 2021

Coursly.co, Moscow

Designed an online LMS using the best practices of Interface Design in

6 months by implementing a system based on reusable components.

Increased the number of trial users by 400% with A/B testing.

Designed onboarding process and decreased a load of support center by

270%

Senior UI/UX Designer, Team Lead Sep 2016 - Feb 2019

#VA, Moscow

Managed a team of designers and developers. Worked with customers’

requirements. Designed over 35 projects based on user interviews,

prototypes and user flows. $60,000 turnover of the company in its first

year on the web design market. Built online courses with over 300

students who completed the course on UI/UX design.

Senior Web Developer Jun 2016 - May 2018

TechProMarketing, Boston, MA (Remote)

Full Stack Web Development. Landing Page and eCommerce websites design

mockups integration. SEO optimization and API integration of Stripe and

Plaid Processing. Built continuous integration (CI) for WordPress-based

websites. Managed a team of 7 developers. Writing tech specs and

documentation.

Junior UI Designer Jun 2014 - Dec 2014

AIC, Moscow

Web and mobile data-driven design (iOS & Android) of banking dashboards

and financial services. Collaborating with the team to build a complex

application design and usability testing. Designed system for the most

popular Government Services Portal with 1,6M DAU.

EDUCATION

Bachelor's degree - IT Management Sep 2015 - May 2019

Plekhanov Russian University of Economics, Moscow

Agile methodologies in IT Management and Web Technology.

SKILLS

Expert in: UI/UX Design, Interaction Design, Adobe XD, Sketch, Web

Design, Workflows, InvisionApp, Wireframes Design, Figma, Visual

Design, Zoom, Slack, SaaS, Dashboards, Product Design, HTML5, CSS3

Intermediate in: Adobe Photoshop, WordPress, JavaScript, User Research,

Customer Journey Map, Design Team Management, Prototyping & User

Stories, Problem Solving skills, Other design tools, Laravel, Vue.js,

Video Editing, Onboarding design, Moqups, Zeplin, eCommerce Design

Basic In: Python, SQL, SEO, Motion Graphics, Graphic Design

ONLINE PORTFOLIO

Check out my portfolio website with all the available projects,

case studies, and other activities. Please note, that some of the

marked projects are not for public sharing.

"
53,source/Karen Kekov.pdf,"['Karen Kekov \\n', 'SoFTWARE ENGiNEER \\nPonyville, Equestria  \\n', ' \\nSummary   \\n \\n', 'Software Engineer with 4+ years of experience in building distributed back‑end systems and infrastructure automation. Mainly focusing on the \\ndesign and development side of things, but also dabbling in SRE/DevOps practices. I enjoy solving challenging problems (be they of a technical \\nnature or otherwise) and learning new tools and technologies. \\n \\nWork Experience   \\n \\n', 'Super Expert IT Solutions GmbH. \\nCity, Country \\n', 'SoFTWARE ENGiNEER \\nMar. 2019 ‑ Present \\n', '• Designed a service‑oriented (a.k.a. microservice) architecture for the company’s flagship Customer Loyalty SaaS product, allowing for horizontal \\n', 'scalability, increasing development velocity and drastically reducing the operational complexity (as compared to a similar legacy application). \\n', '• Implemented several core API microservices in a cloud‑native fashion (leveraging Kubernetes abstractions) in Kotlin, Java and Python. \\n', '• Provisioned an easily manageable cloud infrastructure, utilizing Kubernetes on AWS. \\n', '• Built fully automated CI/CD pipelines on Bitbucket Pipelines, allowing to quickly build and containerize applications (images being stored in \\n', 'ECR) and deploy changes to a Kubernetes cluster in AWS. \\n', '• Deployed a centralized monitoring and logging environment (Prometheus, Victoria Metrics, Grafana, Linkerd, CloudWatch, Coralogix), allowing \\n', 'to easily monitor the system and locate problematic areas in case an incident occurs. \\n', '• Facilitated continuous learning in the team, introducing Kotlin (for writing small and clean server apps), Python (for writing automation scripts \\n', 'and performing load tests) and Kubernetes (for building flexible cloud‑native distributed systems). \\n', '• Facilitated cooperation in the team, making sure everyone sees the end‑goal of the system and not just the piece they are working on, and \\n', 'resolving conflicts between team members. \\n', 'Depressing Bank Ltd. \\nCity, Country \\n', 'SoFTWARE ENGiNEER \\n', '• Implemented a server application for off‑line processing of financial data. \\n', 'Oct. 2017 ‑ Feb. 2019 \\n', '• Implemented CI/CD pipelines using Jenkins, and helped the operations team to automate their side (development and production environment \\n', 'were completely separate, so the ops team had their own automation). \\n', '• Performed a major refactoring of a legacy Java application, rewriting most of it into Kotlin. \\n', 'Cool Startup Ltd. \\nCity, Country \\n', 'JAVA DEVELOPER \\nFeb. 2017 ‑ Oct. 2017 \\n', '• Implemented several microservices in Java for storing and retrieving image data and routing it to processing (text recognition) services, using \\n', 'MongoDB, RabbitMQ, S3 and ElasticSearch. \\n', '• Implemented integration and unit tests, performed load testing using JMeter. \\n \\nSkills   \\n \\n', '• Programming Languages: Java, Kotlin, Python, basic knowledge of Rust \\n', '• Databases/Message queues/etc.: SQL, NoSQL, RabbitMQ, Redis \\n', '• Infrastructure‑related: AWS cloud services, Kubernetes \\n', '• Other: Algorithms/Data structures, Linux, Docker, Git \\nCertifications   \\n \\n', 'AWS Certified Developer Associate \\n', 'CLOUD PLATFORM CERTiFICATiON \\n', '• Learned to leverage the cloud services provided by AWS. \\n', 'Jan. 2019 \\n', ' \\nEducation   \\n \\n', 'Some University \\nCity, Country \\n', 'B.S. iN COMPUTER SCiENCE \\nSep. 2017 ‑ (expected) Jul. 2021 \\n', ' \\n', 'Another University \\nCity, Country \\n', 'B.A. iN JAPANESE LANGUAGE \\nSep. 2011 ‑ Jul. 2015 \\n', ' \\n \\n \\n', 'OCTOBER 29, 2020 \\nLOL KEKOV · RÉSUMÉ \\n1 \\n']","Karen Kekov 

SoFTWARE ENGiNEER 
Ponyville, Equestria  

 
Summary   
 

Software Engineer with 4+ years of experience in building distributed back‑end systems and infrastructure automation. Mainly focusing on the 
design and development side of things, but also dabbling in SRE/DevOps practices. I enjoy solving challenging problems (be they of a technical 
nature or otherwise) and learning new tools and technologies. 
 
Work Experience   
 

Super Expert IT Solutions GmbH. 
City, Country 

SoFTWARE ENGiNEER 
Mar. 2019 ‑ Present 

• Designed a service‑oriented (a.k.a. microservice) architecture for the company’s flagship Customer Loyalty SaaS product, allowing for horizontal 

scalability, increasing development velocity and drastically reducing the operational complexity (as compared to a similar legacy application). 

• Implemented several core API microservices in a cloud‑native fashion (leveraging Kubernetes abstractions) in Kotlin, Java and Python. 

• Provisioned an easily manageable cloud infrastructure, utilizing Kubernetes on AWS. 

• Built fully automated CI/CD pipelines on Bitbucket Pipelines, allowing to quickly build and containerize applications (images being stored in 

ECR) and deploy changes to a Kubernetes cluster in AWS. 

• Deployed a centralized monitoring and logging environment (Prometheus, Victoria Metrics, Grafana, Linkerd, CloudWatch, Coralogix), allowing 

to easily monitor the system and locate problematic areas in case an incident occurs. 

• Facilitated continuous learning in the team, introducing Kotlin (for writing small and clean server apps), Python (for writing automation scripts 

and performing load tests) and Kubernetes (for building flexible cloud‑native distributed systems). 

• Facilitated cooperation in the team, making sure everyone sees the end‑goal of the system and not just the piece they are working on, and 

resolving conflicts between team members. 

Depressing Bank Ltd. 
City, Country 

SoFTWARE ENGiNEER 

• Implemented a server application for off‑line processing of financial data. 

Oct. 2017 ‑ Feb. 2019 

• Implemented CI/CD pipelines using Jenkins, and helped the operations team to automate their side (development and production environment 

were completely separate, so the ops team had their own automation). 

• Performed a major refactoring of a legacy Java application, rewriting most of it into Kotlin. 

Cool Startup Ltd. 
City, Country 

JAVA DEVELOPER 
Feb. 2017 ‑ Oct. 2017 

• Implemented several microservices in Java for storing and retrieving image data and routing it to processing (text recognition) services, using 

MongoDB, RabbitMQ, S3 and ElasticSearch. 

• Implemented integration and unit tests, performed load testing using JMeter. 
 
Skills   
 

• Programming Languages: Java, Kotlin, Python, basic knowledge of Rust 

• Databases/Message queues/etc.: SQL, NoSQL, RabbitMQ, Redis 

• Infrastructure‑related: AWS cloud services, Kubernetes 

• Other: Algorithms/Data structures, Linux, Docker, Git 
Certifications   
 

AWS Certified Developer Associate 

CLOUD PLATFORM CERTiFICATiON 

• Learned to leverage the cloud services provided by AWS. 

Jan. 2019 

 
Education   
 

Some University 
City, Country 

B.S. iN COMPUTER SCiENCE 
Sep. 2017 ‑ (expected) Jul. 2021 

 

Another University 
City, Country 

B.A. iN JAPANESE LANGUAGE 
Sep. 2011 ‑ Jul. 2015 

 
 
 

OCTOBER 29, 2020 
LOL KEKOV · RÉSUMÉ 
1 

"
54,source/Danila Shiga.pdf,"['Danila Shiga \\n', 'insaaaaaa@protonmail.com  \\n', 'SUMMARY \\n', ' \\n \\n', 'Larnaca,   Cyprus \\n', '+357 94  000  651 \\n', ' \\n', ' \\n', 'Experienced DevOps Engineer in both corporate-level  projects and small-scale  start-ups. Nine years \\nof experience in IT roles, such as DevOps and Network Engineer, including Lead responsibilities \\n', '• Tools: Configuration control and provisioning of Linux VMs via Ansible, Puppet, Terraform. CI/CD with Gitlab CI, \\n', 'Azure Pipelines, Jenkins, Helm. Monitoring and logging through Zabbix, Grafana, Prometheus,  ELK/EFK, Graylog. \\nRoutine automation using Bash, Python, knowledge in Java and its runtime, PHP, Go, C#, C++. \\n', '• Operations: Leading a team of System Engineers ensuring smooth operation and collaboration  between departments, \\n', 'while also performing duties of Scrum master. Consulting Product owner and stakeholders on IT operations. \\n', '• Infrastructure: Various cloud providers like AWS, GCP, Azure, Swisscom, including Kubernetes services. On-prem \\n', 'virtualization VMware, Hyper-V, KVM. Planning and implementation of solution architecture from day one till the finish. \\n', '• Advanced Knowledge: Code culture, Gitflow, CI/CD, Team motivation, Process automation, Technical assessment, \\n', 'Hardware, Self-learning, Technology research. \\n', 'PROFESSIONAL EXPERIENCE \\n', ' \\n', 'Senior DevOps Engineer \\nConzylum \\nOctober 2022 – Current \\n', '• Learned the project in 2 weeks, replacing retiring engineer. Made some meaningful impact and took integration lead in \\n', '1,5 months. Delivered full automation of project processes in 6 months. Currently tinkering the app for external clients. \\n', '• Defined project integration roadmap based on business goals. Improved CI/CD pipelines eliminating human interaction. \\n', '• Converted development process to Gitflow increasing development speed ~3 times and removing feature congestion. \\n', '• Implemented  elaborate monitoring that enabled rapid feedback and planning based on custom metrics. \\n', '• Led a team of two DevOps Engineers, a DBA and a QA Engineer. Wrote comprehensive work items that require no questions \\n', 'DevOps Engineer \\nAYA Group \\nMarch 2022 – September 2022 \\n', '• Rewrote CI/CD pipelines to ease scalability and introduce new features that reduced deployment time about 4 times. \\n', '• Integrated Vault secret storage securing sensitive data while moving it from SaaS solutions to on-prem. \\n', '• Developed crucial version control metrics for over 80 instances that streamlined processes for Dev and QA teams. \\n', '• Helped the team to recover from failures providing insights into potential causes that shorten regression analysis. \\n', 'DevOps Engineer \\nClearOps \\nSeptember 2021 – February 2022 \\n', '• Wrote custom Ansible roles and modules enabling features that are not present on the market. \\n', '• Automated Bitbucket pipelines through API to catch up with other solutions and even provide new functionality. \\n', '• Implemented Ansible role testing with molecule saving DevOps time and eliminating human factor. \\n', 'DevOps Engineer \\nBank of Saint-Petersburg \\nJune  2021 – September 2021 \\n', '• Learned the project in 2 weeks replacing current engineer on their vacation. \\n', '• Automated routine with shell scripts that reduced L3 support response time 2-3 times. \\n', '• Rewrote Zabbix web check pre-processing eliminating metrics delay that is crucial for banking sector. \\n', '• Improved Jenkins groovy scripts enabling deploy scalability  and overall stability. \\n', '• Leveraged communication with QA team making testing process several times faster that improved code quality. \\n', 'PREVIOUS PROFESSIONAL EXPERIENCE \\nFebruary 2014 – June 2021 \\n', ' \\n', '• Took a variety of roles like Lead Network Engineer, System Administrator and managed a team of Engineers. \\n', 'Worked for both international giants and small local businesses. \\n', '• Developed security policies that hardened corporate network making it impossible to attack it with malicious device. \\n', '• Interviewed potential candidates for IT department with new screening policies that ended up saving money by less \\n', 'hire but more quality professionals. This also increased average employment duration from ~1 year to 2-3 years. \\n', '• Mentored freshmen colleagues to earn a status of person of trust. One of them inherited my position as I quit. \\n', '• Wrote a PC inventory tool in C# that enabled IT department to cut costs due to more precise hardware ordering. \\n', '• Designed 8 new network branches while maintaining around 25 networks in total – approx. 2500 PCs. \\n', '• Wrote documentation for a square mile enterprise territory of network hardware – about 120 devices like switches, routers \\n', 'EDUCATION \\n', ' \\n', 'A.A.S. in Computer Science and Engineering  – Krasnodar College of Electronic Instrument Design, 2013 \\n']","Danila Shiga 

insaaaaaa@protonmail.com  

SUMMARY 

 
 

Larnaca,   Cyprus 

+357 94  000  651 

 

 

Experienced DevOps Engineer in both corporate-level  projects and small-scale  start-ups. Nine years 
of experience in IT roles, such as DevOps and Network Engineer, including Lead responsibilities 

• Tools: Configuration control and provisioning of Linux VMs via Ansible, Puppet, Terraform. CI/CD with Gitlab CI, 

Azure Pipelines, Jenkins, Helm. Monitoring and logging through Zabbix, Grafana, Prometheus,  ELK/EFK, Graylog. 
Routine automation using Bash, Python, knowledge in Java and its runtime, PHP, Go, C#, C++. 

• Operations: Leading a team of System Engineers ensuring smooth operation and collaboration  between departments, 

while also performing duties of Scrum master. Consulting Product owner and stakeholders on IT operations. 

• Infrastructure: Various cloud providers like AWS, GCP, Azure, Swisscom, including Kubernetes services. On-prem 

virtualization VMware, Hyper-V, KVM. Planning and implementation of solution architecture from day one till the finish. 

• Advanced Knowledge: Code culture, Gitflow, CI/CD, Team motivation, Process automation, Technical assessment, 

Hardware, Self-learning, Technology research. 

PROFESSIONAL EXPERIENCE 

 

Senior DevOps Engineer 
Conzylum 
October 2022 – Current 

• Learned the project in 2 weeks, replacing retiring engineer. Made some meaningful impact and took integration lead in 

1,5 months. Delivered full automation of project processes in 6 months. Currently tinkering the app for external clients. 

• Defined project integration roadmap based on business goals. Improved CI/CD pipelines eliminating human interaction. 

• Converted development process to Gitflow increasing development speed ~3 times and removing feature congestion. 

• Implemented  elaborate monitoring that enabled rapid feedback and planning based on custom metrics. 

• Led a team of two DevOps Engineers, a DBA and a QA Engineer. Wrote comprehensive work items that require no questions 

DevOps Engineer 
AYA Group 
March 2022 – September 2022 

• Rewrote CI/CD pipelines to ease scalability and introduce new features that reduced deployment time about 4 times. 

• Integrated Vault secret storage securing sensitive data while moving it from SaaS solutions to on-prem. 

• Developed crucial version control metrics for over 80 instances that streamlined processes for Dev and QA teams. 

• Helped the team to recover from failures providing insights into potential causes that shorten regression analysis. 

DevOps Engineer 
ClearOps 
September 2021 – February 2022 

• Wrote custom Ansible roles and modules enabling features that are not present on the market. 

• Automated Bitbucket pipelines through API to catch up with other solutions and even provide new functionality. 

• Implemented Ansible role testing with molecule saving DevOps time and eliminating human factor. 

DevOps Engineer 
Bank of Saint-Petersburg 
June  2021 – September 2021 

• Learned the project in 2 weeks replacing current engineer on their vacation. 

• Automated routine with shell scripts that reduced L3 support response time 2-3 times. 

• Rewrote Zabbix web check pre-processing eliminating metrics delay that is crucial for banking sector. 

• Improved Jenkins groovy scripts enabling deploy scalability  and overall stability. 

• Leveraged communication with QA team making testing process several times faster that improved code quality. 

PREVIOUS PROFESSIONAL EXPERIENCE 
February 2014 – June 2021 

 

• Took a variety of roles like Lead Network Engineer, System Administrator and managed a team of Engineers. 

Worked for both international giants and small local businesses. 

• Developed security policies that hardened corporate network making it impossible to attack it with malicious device. 

• Interviewed potential candidates for IT department with new screening policies that ended up saving money by less 

hire but more quality professionals. This also increased average employment duration from ~1 year to 2-3 years. 

• Mentored freshmen colleagues to earn a status of person of trust. One of them inherited my position as I quit. 

• Wrote a PC inventory tool in C# that enabled IT department to cut costs due to more precise hardware ordering. 

• Designed 8 new network branches while maintaining around 25 networks in total – approx. 2500 PCs. 

• Wrote documentation for a square mile enterprise territory of network hardware – about 120 devices like switches, routers 

EDUCATION 

 

A.A.S. in Computer Science and Engineering  – Krasnodar College of Electronic Instrument Design, 2013 

"
55,source/Denis Chernov.pdf,"['EDUCATION\\n', 'Denis Chernov\\n', '+79841342567 | denmail@gmail.com |\\n', 'linkedin/in/daaael-chernov-mx |\\n', 'github.com/Laaaaer\\n', 'Moscow State Technical University\\nMoscow, RU\\n', 'Bachelor Degree at Software Engineering\\nAug. 2018 – May 2022\\n', 'EXPERIENCE\\n', 'Java Software Developer\\nFebruary 2022 – Present\\n', 'DCloud Tech\\nMexico city, MX\\n', '• Implemented a report generation service that boosted our business efficiency, resulting in a 30% reduction in reporting\\n', 'time and a 20% increase in data accuracy, leading to improved decision-making and a 15% growth in overall\\nproductivity.\\n', '• Implemented a monitoring system for error tracking to proactively identify and resolve issues, resulting in a 50%\\n', 'reduction in production incidents.\\n', '• Implemented microservices for notifications and emails, that led to a 30% reduction in the time it takes to develop and\\n', 'deploy new features. Increased development efficiency has allowed us to introduce new functionalities to our clients 1.5\\ntimes faster, enhancing our competitive edge and resulting in a 10% boost in customer satisfaction.\\n', '• Optimized the cache system, resulting in a 40% reduction in both processing time and memory consumption. This\\n', 'enhancement significantly improved system performance and operational efficiency, leading to faster response times and\\ncost savings.\\n', '• Optimized and refactored the database schema to expedite the processing of user requests and information, resulting in\\n', 'significantly faster SQL queries. This improvement has also enabled us to achieve a 30% reduction in development time\\nand enhance overall system performance.\\n', 'Java Software Developer\\nFebruary 2020 – February 2022\\n', 'Soft Media Group\\nMoscow, RU\\n', '• Developed crucial features for the COVID-19 patient care system, which encompassed live patient monitoring and tracking,\\n', 'symptom evaluation, and contact tracing. The system was efficiently implemented across various healthcare facilities,\\nfacilitating prompt and efficient care for individuals affected by COVID-19 and playing a pivotal role in the broader battle\\nagainst the pandemic.\\n', '• Increased test code coverage from 60% to 90%, resulting in improved system reliability and performance and\\n', 'decreased risk of errors or bugs.\\n', '• Refactored and improved patient scheduling system resulting in a 30% reduction in scheduling errors and a 25% increase\\n', 'in appointment efficiency.\\n', '• Optimised SQL queries boosting performance from logarithmic to linear, which reduced time of patients had to wait for\\n', 'website loading for some requests up to 90%.\\n', '• Successfully deployed and configured integrated Keycloak server, which allowed to rework Authentication system and\\n', 'enhance system security.\\n', 'TECHNICAL SKILLS\\n', 'Languages: Java, SQL, Kotlin, MongoDB, JavaScript, HTML/CSS\\nTechnologies: Kafka, RabbitMQ, Oauth, ElasticSearch, Kibana, Redis, Hazelcast, Docker, AWS, Jenkins, Git Frameworks and\\nLibraries: Spring Framework, Spring Boot, Spring Cloud, Hibernate, JDBC, Liquibase, Flyway, JUnit, Mockito, Gradle, Maven\\n']","EDUCATION

Denis Chernov

+79841342567 | denmail@gmail.com |

linkedin/in/daaael-chernov-mx |

github.com/Laaaaer

Moscow State Technical University
Moscow, RU

Bachelor Degree at Software Engineering
Aug. 2018 – May 2022

EXPERIENCE

Java Software Developer
February 2022 – Present

DCloud Tech
Mexico city, MX

• Implemented a report generation service that boosted our business efficiency, resulting in a 30% reduction in reporting

time and a 20% increase in data accuracy, leading to improved decision-making and a 15% growth in overall
productivity.

• Implemented a monitoring system for error tracking to proactively identify and resolve issues, resulting in a 50%

reduction in production incidents.

• Implemented microservices for notifications and emails, that led to a 30% reduction in the time it takes to develop and

deploy new features. Increased development efficiency has allowed us to introduce new functionalities to our clients 1.5
times faster, enhancing our competitive edge and resulting in a 10% boost in customer satisfaction.

• Optimized the cache system, resulting in a 40% reduction in both processing time and memory consumption. This

enhancement significantly improved system performance and operational efficiency, leading to faster response times and
cost savings.

• Optimized and refactored the database schema to expedite the processing of user requests and information, resulting in

significantly faster SQL queries. This improvement has also enabled us to achieve a 30% reduction in development time
and enhance overall system performance.

Java Software Developer
February 2020 – February 2022

Soft Media Group
Moscow, RU

• Developed crucial features for the COVID-19 patient care system, which encompassed live patient monitoring and tracking,

symptom evaluation, and contact tracing. The system was efficiently implemented across various healthcare facilities,
facilitating prompt and efficient care for individuals affected by COVID-19 and playing a pivotal role in the broader battle
against the pandemic.

• Increased test code coverage from 60% to 90%, resulting in improved system reliability and performance and

decreased risk of errors or bugs.

• Refactored and improved patient scheduling system resulting in a 30% reduction in scheduling errors and a 25% increase

in appointment efficiency.

• Optimised SQL queries boosting performance from logarithmic to linear, which reduced time of patients had to wait for

website loading for some requests up to 90%.

• Successfully deployed and configured integrated Keycloak server, which allowed to rework Authentication system and

enhance system security.

TECHNICAL SKILLS

Languages: Java, SQL, Kotlin, MongoDB, JavaScript, HTML/CSS
Technologies: Kafka, RabbitMQ, Oauth, ElasticSearch, Kibana, Redis, Hazelcast, Docker, AWS, Jenkins, Git Frameworks and
Libraries: Spring Framework, Spring Boot, Spring Cloud, Hibernate, JDBC, Liquibase, Flyway, JUnit, Mockito, Gradle, Maven

"
56,source/MARGO SAGITOVA.pdf,"['MARGO SAGITOVA \\n', '+7(999)999-99-99 ⬦ x@x.com  \\n', 'EDUCATION \\n \\n', 'Moscow  Institute  of  Physics  and  Technology \\nSeptember 2019 - August 2023 \\n', '#11 QS EECA University Rankings 2020 \\n(Expected) \\n', 'Bachelor’s degree in Applied Mathematics, Physics and Computer Science \\nGPA 9.05 of 10 \\n', ' \\nWORK EXPERIENCE \\n \\n', 'Russian  Foundation  for  Basic  Research  grant  N◦ 20-07-00222 \\nJanuary 2019 - Present \\n', '“Synthetic DNA as an information carrier for long-term storage of non-biological data in it, including \\nthe creation of a prototype of an oligo library from NYRN oligonucleotides” \\n', '· Analyzing DNA-computing algorithms and information coding systems. \\n· Designing the prototype of the coding system. \\n', 'Russian  Foundation  for  Basic  Research  grant  N◦ 18-29-14076 \\nAugust 2018 - Present \\n', '“Legal and ethical aspects of the general DNA certification of the population of the Russian Federation \\nfor the purpose of DNA identification of a person” \\n', '· Designing and developing searching software for molecular biologists. \\n', 'ACHIEVEMENTS \\n \\n', 'Co-author of the article “Non-biological application of DNA molecules” \\nDOI:10.31301/2221-6197.bmcs.2019-28 \\n', 'Co-applicant of the patent “Coding methods using nitrogenous bases of DNA and olig- \\notecs” \\nRussian Federation patent application N◦ 2019126609 \\n', 'PROJECTS \\n \\n', 'Strategy Game \\nMay 2020 \\n', '· Collaborated with a classmate to develop a cross-platform game in C++. \\n· Learned diverse design patterns and implement clear and flexible architecture. \\n· Designed game engine classes and developed game mechanics. \\n', 'Website for DnD players \\nApril 2020 \\n', '· Learned Django framework in two weeks and developed backend using PostgreSQL database. \\n· Created frontend using HTML. \\n', 'Desktop App for SNPs Search \\nMarch 2020 \\n', '· Collaborated with molecular biologists to design universal searching app. \\n· Developed an app that allows to find different patterns in SNPs with Tkinter package. \\n', 'Algorithms  and  Data  Structures  practice \\nJanuary 2020 - May 2020 \\n', '· Implemented different data structures and algorithms including BigInteger, List, Planarity Check in \\n', 'C++. \\n', ' \\nTECHNICAL SKILLS \\n \\n', 'Languages \\nC++, Python, C \\n', 'Technologies \\nGit, NumPy, Tkinter, Django \\n', 'Other \\nLaTex, Linux \\n']","MARGO SAGITOVA 

+7(999)999-99-99 ⬦ x@x.com  

EDUCATION 
 

Moscow  Institute  of  Physics  and  Technology 
September 2019 - August 2023 

#11 QS EECA University Rankings 2020 
(Expected) 

Bachelor’s degree in Applied Mathematics, Physics and Computer Science 
GPA 9.05 of 10 

 
WORK EXPERIENCE 
 

Russian  Foundation  for  Basic  Research  grant  N◦ 20-07-00222 
January 2019 - Present 

“Synthetic DNA as an information carrier for long-term storage of non-biological data in it, including 
the creation of a prototype of an oligo library from NYRN oligonucleotides” 

· Analyzing DNA-computing algorithms and information coding systems. 
· Designing the prototype of the coding system. 

Russian  Foundation  for  Basic  Research  grant  N◦ 18-29-14076 
August 2018 - Present 

“Legal and ethical aspects of the general DNA certification of the population of the Russian Federation 
for the purpose of DNA identification of a person” 

· Designing and developing searching software for molecular biologists. 

ACHIEVEMENTS 
 

Co-author of the article “Non-biological application of DNA molecules” 
DOI:10.31301/2221-6197.bmcs.2019-28 

Co-applicant of the patent “Coding methods using nitrogenous bases of DNA and olig- 
otecs” 
Russian Federation patent application N◦ 2019126609 

PROJECTS 
 

Strategy Game 
May 2020 

· Collaborated with a classmate to develop a cross-platform game in C++. 
· Learned diverse design patterns and implement clear and flexible architecture. 
· Designed game engine classes and developed game mechanics. 

Website for DnD players 
April 2020 

· Learned Django framework in two weeks and developed backend using PostgreSQL database. 
· Created frontend using HTML. 

Desktop App for SNPs Search 
March 2020 

· Collaborated with molecular biologists to design universal searching app. 
· Developed an app that allows to find different patterns in SNPs with Tkinter package. 

Algorithms  and  Data  Structures  practice 
January 2020 - May 2020 

· Implemented different data structures and algorithms including BigInteger, List, Planarity Check in 

C++. 

 
TECHNICAL SKILLS 
 

Languages 
C++, Python, C 

Technologies 
Git, NumPy, Tkinter, Django 

Other 
LaTex, Linux 

"
57,source/CHE RNY AVS K I Y Artyom.pdf,"['Almaty, Kazakhstan https://www.linkedin.com/in/cghji/\\n', 'EMPLOYMENT\\nCHE RNY AVS K I Y Artyom\\nspa05698@gmail.com\\n', 'Software Engineer\\nTransport Holding of Almaty city\\nApr 2021 – Present\\n', 'onay.kz\\n', '● Developing the payment system from the ground up, with the total number of transactions exceeding 2\\n', 'million per day.\\n', '● Conducted research work and selected an appropriate tech stack considering the needs of the company.\\n', 'Software Engineer (Backend)\\nEurasian Bank\\nMar 2020 – Jan 2021\\n', 'Smartbank\\n', '● I have communicated directly with a business unit also collected and analyzed business requirements.\\n', '● Decomposition of the requirements of the tasks.\\n', ""● Reduced the process of opening Bank's products from 3 days to 5 minutes.\\n"", ""● Developed and launched the mechanism for transmitting the secure card data between client's and Bank's\\n"", 'systems through implementing the ISO-9564 standard with 3DES encryption.\\n', 'Software Engineer (Xamarin)\\nEurasian Bank\\nJun 2019 – Mar 2020\\n', 'Smartbank\\n', '● Reduced the app size by 30% by implementing best practices of working with static resources and refactoring\\n', ""the existing's codebase using Microsoft recommendations regarding handle native elements.\\n"", '● Saved the company more than 30000$ by porting native libraries of different scanners (Card, NFS, Barcode)\\n', 'from native iOS and Android platforms to Xamarin environment instead of buying box solutions.\\n', '● Integrated analytics and metrics.\\n', '● Integrated worldwide money transfer service.\\n', ""● Counseled the company's contractor.\\n"", 'Software Engineer\\nAMK-Eurasia LLP\\nMar 2018 – Jun 2019\\n', 'Otbasy bank\\n', '● Designed and implemented newly designed Otbasy bank application for banking system using Xamarin forms.\\n', ""● Developed and launched online services which helped reduce the load on the Bank's branches\\n"", '● Launched the cloud testing with Xamarin Test Cloud platform.\\n', '● Maintained and developed existing website.\\n', 'LICENSES AND CERTIFICATIONS\\nXamarin Certified Mobile Professional (2019)\\n', 'LANGUAGES AND TECHNOLOGIES\\nC#.NET; SQL; JavaScript; HTML; CSS; Java; Objective-C; WCF; BizTalk; SOAP; JSON; Xamarin.\\nVisual Studio; Microsoft SQL Server; XCode; dotMemory; dotTrace; BenchmarkDotNet;\\n', 'SOCIAL ACTIVITIES\\nFree time practice: C/C++; Math; GameDev(UE);\\n']","Almaty, Kazakhstan https://www.linkedin.com/in/cghji/

EMPLOYMENT
CHE RNY AVS K I Y Artyom
spa05698@gmail.com

Software Engineer
Transport Holding of Almaty city
Apr 2021 – Present

onay.kz

● Developing the payment system from the ground up, with the total number of transactions exceeding 2

million per day.

● Conducted research work and selected an appropriate tech stack considering the needs of the company.

Software Engineer (Backend)
Eurasian Bank
Mar 2020 – Jan 2021

Smartbank

● I have communicated directly with a business unit also collected and analyzed business requirements.

● Decomposition of the requirements of the tasks.

● Reduced the process of opening Bank's products from 3 days to 5 minutes.

● Developed and launched the mechanism for transmitting the secure card data between client's and Bank's

systems through implementing the ISO-9564 standard with 3DES encryption.

Software Engineer (Xamarin)
Eurasian Bank
Jun 2019 – Mar 2020

Smartbank

● Reduced the app size by 30% by implementing best practices of working with static resources and refactoring

the existing's codebase using Microsoft recommendations regarding handle native elements.

● Saved the company more than 30000$ by porting native libraries of different scanners (Card, NFS, Barcode)

from native iOS and Android platforms to Xamarin environment instead of buying box solutions.

● Integrated analytics and metrics.

● Integrated worldwide money transfer service.

● Counseled the company's contractor.

Software Engineer
AMK-Eurasia LLP
Mar 2018 – Jun 2019

Otbasy bank

● Designed and implemented newly designed Otbasy bank application for banking system using Xamarin forms.

● Developed and launched online services which helped reduce the load on the Bank's branches

● Launched the cloud testing with Xamarin Test Cloud platform.

● Maintained and developed existing website.

LICENSES AND CERTIFICATIONS
Xamarin Certified Mobile Professional (2019)

LANGUAGES AND TECHNOLOGIES
C#.NET; SQL; JavaScript; HTML; CSS; Java; Objective-C; WCF; BizTalk; SOAP; JSON; Xamarin.
Visual Studio; Microsoft SQL Server; XCode; dotMemory; dotTrace; BenchmarkDotNet;

SOCIAL ACTIVITIES
Free time practice: C/C++; Math; GameDev(UE);

"
58,source/Anna Shemerey.pdf,"['Anna Shemerey \\nSOFTWARE ENGINEER \\n+7-920-234-11-11 | mail@mail.ru | Plechanova str.32-54, Moskow, Russia \\n', ' \\n \\n \\n \\n', 'EXPERIENCE \\n \\n', 'Business News Media ZAO, Moscow, Russia — Senior Software Engineer \\n', 'SEPTEMBER 2018 - PRESENT \\n', 'Designed and implemented comments service via WebSockets (Go, Ruby, Postgresql, RabbitMQ, \\nRedis). \\n', 'Proposed a way to change the client requests logic decreasing DB load by 21%. \\n', ' \\n', 'Implemented functionality to meet the requirements of new laws passed by the Federal Tax Service \\n', '(VAT rate changed, a new type of receipt put into circulation) (Ruby, MSSql remote procedures, \\n', 'PostgreSQL). \\n', 'Refactored legacy code reducing the time the users spend on registration by 16%. \\n', ' \\n \\n', 'BillBored Inc, St John’s, Canada — Software Developer \\n', 'FEBRUARY 2018 - SEPTEMBER 2018 \\n', 'Implemented functional testing for an SDK in Elixir (ExUnit, VCR, XML-based third parties APIs). \\n', ' \\n', 'Unlimited Technologies, Moscow, Russia — Software Developer \\n', 'MAY 2016 - FEBRUARY 2018 \\n', 'Designed and implemented a push service via FCM and APNS integrated with all client platforms. \\n(Elixir, Erlang, Postgresql, Kafka, Redis). \\n', ' \\n', 'Business Car LLC (Toyota Tsusho Corporation subsidiary), Moscow, Russia \\n— Software Developer \\n', 'JULY 2015 - APRIL 2016 \\n', 'Designed and implemented a questionnaire section of the inner CRM system decreasing the \\npreservice time by 15%. (Ruby, RoR). \\n', ' \\n', 'Forward Media Group, Moscow, Russia — Advertising Sales Director \\n', 'JANUARY 2009 - JULY 2015 \\n', 'Managed and implemented ad sales plan covering all production and editorial costs of the original \\nRussian glossy magazine (Story magazine). \\n', ' \\n', 'VI, Moscow, Russia — Advertising Sales Director \\n', '2003 - 2008 \\n', 'As part of a team launched HELLO! Magazine in Russia. The ad sales plan was outstripped by 30% in \\nthe first year and by 15% in the second one. \\n', 'Participated in annual marketing events (Baselworld, SIHH) that increased the part of the luxury \\nsegment in ad budget by 60%. \\n', ' \\n', 'Computerra Publishing House, Moscow, Russia — Marketing and Advertising \\nManager \\n', '2003 \\n', 'Elaborating advertising and promotional materials about the company’s projects, ad sales. \\n', 'SUMMARY \\n', '4+ years of experience in Golang, Ruby, Elixir, and \\n', ""Erlang programming. I'm a self-taught person \\n"", 'with experience in designing and implementing \\n', 'software. Proven ability to write maintainable, \\n', 'quality code covered with tests. Strong yearning \\n', 'for perfect results, based on elegant solutions and \\nlatest technologies. Used to working under \\n', 'pressure to meet tight deadlines and handling \\n', 'unpredicted changes. \\n', 'I also have 10+ years of wide experience in \\n', 'Advertising & Sales with major Publishing Russian \\n', 'companies on top positions with strong skills in \\n', 'starting new projects. \\n', ' \\n \\n \\n', 'SKILLS \\n \\n', 'Golang, Ruby, Elixir, Erlang, PostgreSQL, \\n', 'Cassandra, Mnesia, Kafka, RabbitMQ, Redis, \\n', 'Memcached, ElasticSearch, Docker, Git \\n', ' \\n \\n \\n', 'EDUCATION \\n \\n', 'Bauman Moscow State Technical \\nUniversity, Moscow \\n', '2016 - 2019 \\n', 'B.S. in Computer Software Engineering \\n', ' \\n \\n', 'Lomonosov Moscow State University, \\nMoscow \\n', '1999 - 2004 \\n', 'M.S. in Developmental and Child Psychology \\n', ' \\n \\n \\n', 'PROJECTS \\n \\n', 'Vedomosti — print and online newspaper services \\n(vedomosti.ru, hbr-russia.ru). \\n', ' \\n', 'Express — enterprise messaging app. \\n \\n', 'Business Car — CRM system spanning all \\ndepartments of Toyota dealers in Russia. \\n']","Anna Shemerey 
SOFTWARE ENGINEER 
+7-920-234-11-11 | mail@mail.ru | Plechanova str.32-54, Moskow, Russia 

 
 
 
 

EXPERIENCE 
 

Business News Media ZAO, Moscow, Russia — Senior Software Engineer 

SEPTEMBER 2018 - PRESENT 

Designed and implemented comments service via WebSockets (Go, Ruby, Postgresql, RabbitMQ, 
Redis). 

Proposed a way to change the client requests logic decreasing DB load by 21%. 

 

Implemented functionality to meet the requirements of new laws passed by the Federal Tax Service 

(VAT rate changed, a new type of receipt put into circulation) (Ruby, MSSql remote procedures, 

PostgreSQL). 

Refactored legacy code reducing the time the users spend on registration by 16%. 

 
 

BillBored Inc, St John’s, Canada — Software Developer 

FEBRUARY 2018 - SEPTEMBER 2018 

Implemented functional testing for an SDK in Elixir (ExUnit, VCR, XML-based third parties APIs). 

 

Unlimited Technologies, Moscow, Russia — Software Developer 

MAY 2016 - FEBRUARY 2018 

Designed and implemented a push service via FCM and APNS integrated with all client platforms. 
(Elixir, Erlang, Postgresql, Kafka, Redis). 

 

Business Car LLC (Toyota Tsusho Corporation subsidiary), Moscow, Russia 
— Software Developer 

JULY 2015 - APRIL 2016 

Designed and implemented a questionnaire section of the inner CRM system decreasing the 
preservice time by 15%. (Ruby, RoR). 

 

Forward Media Group, Moscow, Russia — Advertising Sales Director 

JANUARY 2009 - JULY 2015 

Managed and implemented ad sales plan covering all production and editorial costs of the original 
Russian glossy magazine (Story magazine). 

 

VI, Moscow, Russia — Advertising Sales Director 

2003 - 2008 

As part of a team launched HELLO! Magazine in Russia. The ad sales plan was outstripped by 30% in 
the first year and by 15% in the second one. 

Participated in annual marketing events (Baselworld, SIHH) that increased the part of the luxury 
segment in ad budget by 60%. 

 

Computerra Publishing House, Moscow, Russia — Marketing and Advertising 
Manager 

2003 

Elaborating advertising and promotional materials about the company’s projects, ad sales. 

SUMMARY 

4+ years of experience in Golang, Ruby, Elixir, and 

Erlang programming. I'm a self-taught person 

with experience in designing and implementing 

software. Proven ability to write maintainable, 

quality code covered with tests. Strong yearning 

for perfect results, based on elegant solutions and 
latest technologies. Used to working under 

pressure to meet tight deadlines and handling 

unpredicted changes. 

I also have 10+ years of wide experience in 

Advertising & Sales with major Publishing Russian 

companies on top positions with strong skills in 

starting new projects. 

 
 
 

SKILLS 
 

Golang, Ruby, Elixir, Erlang, PostgreSQL, 

Cassandra, Mnesia, Kafka, RabbitMQ, Redis, 

Memcached, ElasticSearch, Docker, Git 

 
 
 

EDUCATION 
 

Bauman Moscow State Technical 
University, Moscow 

2016 - 2019 

B.S. in Computer Software Engineering 

 
 

Lomonosov Moscow State University, 
Moscow 

1999 - 2004 

M.S. in Developmental and Child Psychology 

 
 
 

PROJECTS 
 

Vedomosti — print and online newspaper services 
(vedomosti.ru, hbr-russia.ru). 

 

Express — enterprise messaging app. 
 

Business Car — CRM system spanning all 
departments of Toyota dealers in Russia. 

"
59,source/Viktor Pavlenko.pdf,"['Viktor Pavlenko \\n', 'Senior Software Engineer  \\n', 'WORK EXPERIENCE \\n', 'Engineering Manager, Star Global - 01/2015 - present - Kyiv, Ukraine \\n', ' \\n \\n \\n \\n', '+380976670000 \\n', 'Star is a global consultancy that delivers impactful technology products by connecting strategy, design \\nand engineering. \\n', '⇢ Implemented and delivered assistant tool for automotive industry using Python, Flask, React, \\n', 'MySQL, AWS and Terraform. Joined from the middle of the project and turned it into fully \\nscalable and reliable platform, increased performance of response and build time by 50%. \\n', '⇢ Created frontend side of a fuel delivery platform, managed team of 10 engineers(grew it \\n', 'from the zero). Integrated e2e and performance platform testing. Introduced React and \\nReact Native as a new stack and migrated legacy code to React and React Native. Built \\nmobile delivery pipeline and publishing. \\n', '⇢ Created a platform to connect car owners to workshop in Express, Sequalize, MySQL, \\n', 'Google Cloud, GraphQL and React Native. Introduced integration testing for all used \\nvendors which reduced amount of bugs by 15%. \\n', '⇢ Created a product to extend the functionality of the messenger service with a search \\n', 'engine, gallery and bots. Used Python, Django, Angular 2 to build fully scalable service. \\n', '⇢ Manage unit of backend engineers(50+), responsible for career development, project \\n', 'allocation and performance evaluation \\n', '⇢ Drive and develop company expertise in Node.js, React Native and Golang: give tech talks, \\n', 'run workshops, hire engineers \\n', '⇢ Build internal platform for performance evaluation, use NestJS, PostgreSQL, GraphQL and \\n', 'React to move quickly from proof of concept to a ready scalable product. \\n', ' \\n', 'Software Engineer, Django Stars - 01/2013 - 01/2015 - Kyiv, Ukraine \\n', 'Django Stars provides startups and enterprises with Python development services \\n', '⇢ Implemented a mortgage advice platform using Python and Django. \\n', '⇢ Created a platform to join divers, used Python, Django and Tastypie. \\n \\n', 'Software Engineer, Diawest Telecom - 01/2011 - 01/2013 - Kyiv, Ukraine \\n', 'Local telecommunication company. \\n', '⇢ Created and maintained email subscription service, used Python, MySQL and Postfix \\n', '⇢ Implemented and maintained many customer facing infrastructure tools using Python. \\n', 'EDUCATION AND CERTIFICATES \\n', '2008 M.S. in Information Security, National Technical University of Ukraine “Igor Sikorsky Kyiv \\n', 'Polytechnic Institute” \\n', 'TECHNICAL SKILLS \\n', '(8+ years): Python, Django, Flask and Git \\n', '(4+ years): MySQL, PostgreSQL and Redis \\n', '(3+ years): React, React Native, Redux, ES6 and Git. \\n', '(2+ years): Nodejs, Express, Koa \\n', 'LANGUAGES \\n', 'English - Advanced \\n', 'Your native language - Russian \\n']","Viktor Pavlenko 

Senior Software Engineer  

WORK EXPERIENCE 

Engineering Manager, Star Global - 01/2015 - present - Kyiv, Ukraine 

 
 
 
 

+380976670000 

Star is a global consultancy that delivers impactful technology products by connecting strategy, design 
and engineering. 

⇢ Implemented and delivered assistant tool for automotive industry using Python, Flask, React, 

MySQL, AWS and Terraform. Joined from the middle of the project and turned it into fully 
scalable and reliable platform, increased performance of response and build time by 50%. 

⇢ Created frontend side of a fuel delivery platform, managed team of 10 engineers(grew it 

from the zero). Integrated e2e and performance platform testing. Introduced React and 
React Native as a new stack and migrated legacy code to React and React Native. Built 
mobile delivery pipeline and publishing. 

⇢ Created a platform to connect car owners to workshop in Express, Sequalize, MySQL, 

Google Cloud, GraphQL and React Native. Introduced integration testing for all used 
vendors which reduced amount of bugs by 15%. 

⇢ Created a product to extend the functionality of the messenger service with a search 

engine, gallery and bots. Used Python, Django, Angular 2 to build fully scalable service. 

⇢ Manage unit of backend engineers(50+), responsible for career development, project 

allocation and performance evaluation 

⇢ Drive and develop company expertise in Node.js, React Native and Golang: give tech talks, 

run workshops, hire engineers 

⇢ Build internal platform for performance evaluation, use NestJS, PostgreSQL, GraphQL and 

React to move quickly from proof of concept to a ready scalable product. 

 

Software Engineer, Django Stars - 01/2013 - 01/2015 - Kyiv, Ukraine 

Django Stars provides startups and enterprises with Python development services 

⇢ Implemented a mortgage advice platform using Python and Django. 

⇢ Created a platform to join divers, used Python, Django and Tastypie. 
 

Software Engineer, Diawest Telecom - 01/2011 - 01/2013 - Kyiv, Ukraine 

Local telecommunication company. 

⇢ Created and maintained email subscription service, used Python, MySQL and Postfix 

⇢ Implemented and maintained many customer facing infrastructure tools using Python. 

EDUCATION AND CERTIFICATES 

2008 M.S. in Information Security, National Technical University of Ukraine “Igor Sikorsky Kyiv 

Polytechnic Institute” 

TECHNICAL SKILLS 

(8+ years): Python, Django, Flask and Git 

(4+ years): MySQL, PostgreSQL and Redis 

(3+ years): React, React Native, Redux, ES6 and Git. 

(2+ years): Nodejs, Express, Koa 

LANGUAGES 

English - Advanced 

Your native language - Russian 

"
60,source/IVAN LOPTEV.pdf,"['IVAN LOPTEV \\n', '+7(909)370-71-11 ⬦ selllll@gmail.com  \\n', ' \\nEDUCATION \\n', 'Higher School of Economics \\nSep 2019 – Expected Jun 2023 \\n', 'Bachelor in Applied Mathematics and Information Science \\nGPA: 9.18/10.0 \\n', 'Samara Lyceum of Information Technology \\nSep 2017 – Jun 2019 \\n', 'Received a gold medal for academic excellence. \\n', 'WORK EXPERIENCE \\n', 'Linear Algebra Teaching Assistant \\nSep 2020 – Jun 2021 \\n', 'Higher School of Economics \\n \\nMoscow, Russia \\n', 'Software Engineering Intern \\nJul 2020 – Sep 2020 \\n', 'Huawei \\nMoscow, Russia \\n', 'Ported an OS performance analysis system from Linux to Windows 10. Implemented a GUI for OS performance \\nanalysis tool using Python and Tcl/Tk. \\n', 'Algorithms Teaching Assistant \\nAug 2019 \\n', 'Summer Informatics School \\nLaagna, Estonia \\n', 'Developed front-end for a sports website using HTML5, CSS3 and JavaScript. \\n', 'Python Developer \\nJun 2018 – Aug 2018 \\n', 'SamExpress \\nSamara, Russia \\n', 'Developed and maintained some scrapers, including one that searches applications on a website and sends information \\nabout them on e-mail using Selenium and SMTP libraries. Developed a program which makes a raw Excel document \\nreadable using xlrd, xlwt and xlutils libraries. \\n', 'SKILLS \\n', 'Programming Languages \\nC++, Python, C, Bash \\n', 'Technologies \\nGit/GitHub/GitLab, Windows, Linux \\n', 'Languages \\nnative Russian, advanced English, beginner German \\n', ' \\nPROJECTS \\n', 'Hash Map. Implemented hash map with full functionality using separate chaining with linked list in C++. \\n', 'External Sorting. Implemented external sorting (the algorithms splits all input into blocks, sorts them separately, \\nand then ends up with a sorted array by recursively merging K array’s segments) using C++. \\n', 'ACADEMIC ACHIEVEMENTS \\n', '• All-Russian Informatics Olympiad Awardee. \\n', '• Winner of ”Vyshaia Proba” Informatics Olympiad and all-Siberian Informatics Olympiad. \\n', '• Master at Codeforces. \\n', 'HOBBIES \\n', '• Teaching school students algorithms and data structures individually. \\n', '• Attending healthy lifestyle. \\n', '• Studying two foreign languages: English and German. \\n']","IVAN LOPTEV 

+7(909)370-71-11 ⬦ selllll@gmail.com  

 
EDUCATION 

Higher School of Economics 
Sep 2019 – Expected Jun 2023 

Bachelor in Applied Mathematics and Information Science 
GPA: 9.18/10.0 

Samara Lyceum of Information Technology 
Sep 2017 – Jun 2019 

Received a gold medal for academic excellence. 

WORK EXPERIENCE 

Linear Algebra Teaching Assistant 
Sep 2020 – Jun 2021 

Higher School of Economics 
 
Moscow, Russia 

Software Engineering Intern 
Jul 2020 – Sep 2020 

Huawei 
Moscow, Russia 

Ported an OS performance analysis system from Linux to Windows 10. Implemented a GUI for OS performance 
analysis tool using Python and Tcl/Tk. 

Algorithms Teaching Assistant 
Aug 2019 

Summer Informatics School 
Laagna, Estonia 

Developed front-end for a sports website using HTML5, CSS3 and JavaScript. 

Python Developer 
Jun 2018 – Aug 2018 

SamExpress 
Samara, Russia 

Developed and maintained some scrapers, including one that searches applications on a website and sends information 
about them on e-mail using Selenium and SMTP libraries. Developed a program which makes a raw Excel document 
readable using xlrd, xlwt and xlutils libraries. 

SKILLS 

Programming Languages 
C++, Python, C, Bash 

Technologies 
Git/GitHub/GitLab, Windows, Linux 

Languages 
native Russian, advanced English, beginner German 

 
PROJECTS 

Hash Map. Implemented hash map with full functionality using separate chaining with linked list in C++. 

External Sorting. Implemented external sorting (the algorithms splits all input into blocks, sorts them separately, 
and then ends up with a sorted array by recursively merging K array’s segments) using C++. 

ACADEMIC ACHIEVEMENTS 

• All-Russian Informatics Olympiad Awardee. 

• Winner of ”Vyshaia Proba” Informatics Olympiad and all-Siberian Informatics Olympiad. 

• Master at Codeforces. 

HOBBIES 

• Teaching school students algorithms and data structures individually. 

• Attending healthy lifestyle. 

• Studying two foreign languages: English and German. 

"
61,source/Victor Ivaniushenko.pdf,"['Victor Ivaniushenko\\n', 'nbgtr.ivaniushenko@gmail.com\\nLinkedin\\n', 'Education\\n', 'LVIV POLYTECHNIC NATIONAL UNIVERSITY\\nSEP 2019—JUN 2023\\n', 'Computer Science, Artiﬁcial Intelligence — Bachelor, 3rd year (GPA: 3.47 / 4)\\n', 'Relevant coursework: Algorithms and Data structures, Linear Algebra, Statistics and\\n', 'Probability, Calculus, Databases, Operating Systems, Computer Architecture, OOP\\n', 'Experience\\n', 'MEMBER OF NON-PROFIT ORGANIZATION BEST LVIV\\nMAR 2020—PRESENT\\n', 'Organizer and lector of BBC: BEST Beat Course 2021\\n', '–\\nReached the audience through the webpage I created using React.js, so 30\\n', 'students applied to the course\\n', '–\\nTaught participants a process of music production and got 14 students without\\n', 'previous experience to compose a track\\n', 'Organizer and designer of BEST Training Week`9\\n', '–\\nDesigned and developed the informational website for students to apply to, so\\n', '106 participants rated the project as 9/10 on average and project design as 4/5\\n', 'Personal Projects\\n', 'DIGITAL MENU FOR RESTAURANTS WITH ORDERS MANAGEMENT STARTUP DEC 2021—NOV 2021\\n', '–\\nDesigned and developed menu application using Django & PostgreSQL for backend\\n', 'and React.js for frontend\\n– Containerized with Docker and described AWS infrastructure with Terraform\\n', 'KEYBOARD SAMPLER\\nSEP 2021\\n', 'Turns your computer keyboard into a sampler so you can record sound for each key\\n', '– Designed and developed an app using React.js\\n', '– Implemented CI/CD pipeline with GitHub Actions using Docker\\n', 'ANNOUNCEMENT SERVICE REST API (COURSEWORK)\\nDEC 2020\\n', '–\\nDesigned and implemented RESTful backend with user management using\\n', 'Flask for message board\\n', 'Skills\\n', 'Languages: Python / JavaScript / SQL / Bash\\n', 'Technologies: Git / Docker / AWS / Terraform / React.js\\n']","Victor Ivaniushenko

nbgtr.ivaniushenko@gmail.com
Linkedin

Education

LVIV POLYTECHNIC NATIONAL UNIVERSITY
SEP 2019—JUN 2023

Computer Science, Artiﬁcial Intelligence — Bachelor, 3rd year (GPA: 3.47 / 4)

Relevant coursework: Algorithms and Data structures, Linear Algebra, Statistics and

Probability, Calculus, Databases, Operating Systems, Computer Architecture, OOP

Experience

MEMBER OF NON-PROFIT ORGANIZATION BEST LVIV
MAR 2020—PRESENT

Organizer and lector of BBC: BEST Beat Course 2021

–
Reached the audience through the webpage I created using React.js, so 30

students applied to the course

–
Taught participants a process of music production and got 14 students without

previous experience to compose a track

Organizer and designer of BEST Training Week`9

–
Designed and developed the informational website for students to apply to, so

106 participants rated the project as 9/10 on average and project design as 4/5

Personal Projects

DIGITAL MENU FOR RESTAURANTS WITH ORDERS MANAGEMENT STARTUP DEC 2021—NOV 2021

–
Designed and developed menu application using Django & PostgreSQL for backend

and React.js for frontend
– Containerized with Docker and described AWS infrastructure with Terraform

KEYBOARD SAMPLER
SEP 2021

Turns your computer keyboard into a sampler so you can record sound for each key

– Designed and developed an app using React.js

– Implemented CI/CD pipeline with GitHub Actions using Docker

ANNOUNCEMENT SERVICE REST API (COURSEWORK)
DEC 2020

–
Designed and implemented RESTful backend with user management using

Flask for message board

Skills

Languages: Python / JavaScript / SQL / Bash

Technologies: Git / Docker / AWS / Terraform / React.js

"
62,source/Alex Morozko.pdf,"['Alex Morozko\\n', '+374 (91) 000 253\\naaan.morozko01@gmail.com\\ngithub.com/ol-aaarozko\\n', 'Education\\nSaint Petersburg State University\\nJuly 2023\\n', 'Bachelor of Software and Administration of Information Systems\\nGPA: 4.72 out of 5\\n', 'Experience\\nSoftware Engineer, Ark networks − Yerevan, Armenia\\nOct 2022 − Present\\n', '• Expanded RNIC test coverage by 50% by implementing test cases using InfiniBand Verbs API\\n• Collaborated with a 30-member industrial team in improving a proprietary distributed multi-threaded HW\\n', 'NIC verification system written in C and Bash\\n', '• Augmented the expectation subsystem to validate VirtIO-Net packet receive filtering features\\n', 'Embedded Software Engineer, OKTET Labs − Saint Petersburg, Russia\\nOct 2019 − Oct 2022\\n', '• Accelerated auxiliary kernel loading on Wi-Fi routers by 65% by migrating firmware loading code from user\\n', 'space to a kernel thread\\n', '• Designed and implemented API for using the serial port device file before mounting a root filesystem\\n• Accelerated OpenOnload fuzzing by 50x times using memory snapshots fuzzing technique\\n• Discovered one critical bug in an open-source user-level network stack OpenOnload by utilizing fuzzing\\n• Developed a Linux kernel module to store serial device logs from the start of the system, which allowed to\\n', 'identify three unaddressed kernel crashes\\n', '• Maintained LED subsystem in U-Boot for diverse Wi-Fi router models, enabling LED control within U-Boot\\n', 'Projects\\nNyx-Net contribution\\ngithub.com/nyx-fuzz/packer/pull/23\\n', '• Extended an open-source fuzzer Nyx-Net with the capability of fuzzing socket API-intercepting libraries by\\n', 'implementing real network mode\\n', '• Accelerated OpenOnload fuzzing speed by 50x times using extended Nyx-Net\\n', 'AFLNet contribution\\ngithub.com/aflnet/aflnet/pull/70\\n', '• Extended an open-source fuzzer AFLNet, allowing it to fuzz applications in a separate network namespace\\n• Discovered one critical bug in an OpenOnload application accelerator by fuzzing it with AFLNet\\n', 'PCAP Parser\\ngithub.com/ol-imorozko/pcap-parser\\n', '• Developed a C++ PCAP parser for a subset of the SPECTRA SIMBA public market data feed\\n• Employed design patterns for easily extendable and flexible code, enabling seamless integration with future\\n', 'updates and protocols\\n', 'Exec-on-board tool\\ngithub.com/ol-imorozko/exec-on-board\\n', '• Developed a single-binary Telnet client + TFTP server to facilitate work with embedded devices\\n', 'Achievements\\nRussian National Olympiad in Informatics − Semi-Finals Winner\\nMar 2019\\n', '• Semi-finals of the largest computer science competition for high school students in Russia\\n• 62nd place out of more than 18000 participants\\n', 'Skills\\n', 'Languages: C, C++, Bash, Python, OCaml, SQL\\nTechnologies: RDMA, Fuzzing, Networking, TCP/IP, Kernel Bypass, Git, Make\\n']","Alex Morozko

+374 (91) 000 253
aaan.morozko01@gmail.com
github.com/ol-aaarozko

Education
Saint Petersburg State University
July 2023

Bachelor of Software and Administration of Information Systems
GPA: 4.72 out of 5

Experience
Software Engineer, Ark networks − Yerevan, Armenia
Oct 2022 − Present

• Expanded RNIC test coverage by 50% by implementing test cases using InfiniBand Verbs API
• Collaborated with a 30-member industrial team in improving a proprietary distributed multi-threaded HW

NIC verification system written in C and Bash

• Augmented the expectation subsystem to validate VirtIO-Net packet receive filtering features

Embedded Software Engineer, OKTET Labs − Saint Petersburg, Russia
Oct 2019 − Oct 2022

• Accelerated auxiliary kernel loading on Wi-Fi routers by 65% by migrating firmware loading code from user

space to a kernel thread

• Designed and implemented API for using the serial port device file before mounting a root filesystem
• Accelerated OpenOnload fuzzing by 50x times using memory snapshots fuzzing technique
• Discovered one critical bug in an open-source user-level network stack OpenOnload by utilizing fuzzing
• Developed a Linux kernel module to store serial device logs from the start of the system, which allowed to

identify three unaddressed kernel crashes

• Maintained LED subsystem in U-Boot for diverse Wi-Fi router models, enabling LED control within U-Boot

Projects
Nyx-Net contribution
github.com/nyx-fuzz/packer/pull/23

• Extended an open-source fuzzer Nyx-Net with the capability of fuzzing socket API-intercepting libraries by

implementing real network mode

• Accelerated OpenOnload fuzzing speed by 50x times using extended Nyx-Net

AFLNet contribution
github.com/aflnet/aflnet/pull/70

• Extended an open-source fuzzer AFLNet, allowing it to fuzz applications in a separate network namespace
• Discovered one critical bug in an OpenOnload application accelerator by fuzzing it with AFLNet

PCAP Parser
github.com/ol-imorozko/pcap-parser

• Developed a C++ PCAP parser for a subset of the SPECTRA SIMBA public market data feed
• Employed design patterns for easily extendable and flexible code, enabling seamless integration with future

updates and protocols

Exec-on-board tool
github.com/ol-imorozko/exec-on-board

• Developed a single-binary Telnet client + TFTP server to facilitate work with embedded devices

Achievements
Russian National Olympiad in Informatics − Semi-Finals Winner
Mar 2019

• Semi-finals of the largest computer science competition for high school students in Russia
• 62nd place out of more than 18000 participants

Skills

Languages: C, C++, Bash, Python, OCaml, SQL
Technologies: RDMA, Fuzzing, Networking, TCP/IP, Kernel Bypass, Git, Make

"
63,source/Oleg Protsenko.pdf,"['Oleg Protsenko\\n', '425 Ballantrae Dr, Winnipeg, MB, R3T 6H6\\n', 'Mobile: (431) 000-1091\\nfiaaadvert@gmail.com\\n', 'https://www.linkedin.com/in/viaaaeslavprotsenko\\n', '/\\n', 'SUMMARY\\n', 'Experienced QA Automation Tester with a strong background in designing, developing, and executing automated test\\nscripts for web, mobile, and desktop applications. Proficient in multiple programming languages and test automation\\ntools, with a proven track record of improving software quality and efficiency. Skilled in collaborating with\\ncross-functional teams and integrating automation into CI/CD pipelines for rapid and reliable software delivery.\\n', 'WORK EXPERIENCE\\n', 'QA Software Tester, Identity Labs, NY\\nJan 2023 - Aug 2023\\n', '●\\nDevelop and document software testing plans\\n', '●\\nInstall software and hardware and configure operating system software in preparation for testing\\n', '●\\nExecute and document results of software application tests and information and telecommunication systems tests\\n', '●\\nDevelop and implement software and information system testing policies and procedures\\n', '●\\nDocument and report deviations from specifications and tolerances\\n', 'QA Software Tester, AB SOFT, Odessa, Ukraine\\nJan 2022 - Dec 2022\\n', '●\\nPerformed bug investigation (UI + API Heroku testing)\\n', '●\\nDevelop and document software testing plans\\n', '●\\nMaintained deployment control\\n', '●\\nOpened tickets for bugs (Jira) and assignments for the development department\\n', '●\\nManaged the ETA development department to fix bugs and review the resolution, including granting permissions\\nfor deployment and managing the release process\\n', '●\\nWrote test cases and documentation, as well as new tests to test innovations\\n', '●\\nCollaborated with external services: AWS, NetSuite, SalesForce\\n', '●\\nPerformed framework optimization\\n', 'EDUCATION\\n', 'College of Industrial Automation at the Academy of Refrigeration, Odesa, Ukraine\\n2014-2018\\n', 'Bachelor in Software Development\\n', 'VOLUNTEERING\\n', 'QA Software Tester, R9 Adverstisment, London, UK\\nJan 2023 - Present\\n', 'Startup\\n', '●\\nDevelop and document software testing plans\\n', '●\\nInstall software and hardware and configure operating system software in preparation for testing\\n', '●\\nExecute and document results of software application tests and information and telecommunication systems tests\\n', 'HARD SKILLS:\\n', 'Languages: Java 8.0, JavaScript\\nSoftware: Intelijj Idea , Visual Studio Code, Postman\\nTechnical Skills: JSON · REST · JIRA · Salesforce.com · Git - Selenium WebDriver, TestNG, AssertJ, Maven, Jenkins -\\nCypress - SCRUM, HTML , API\\n']","Oleg Protsenko

425 Ballantrae Dr, Winnipeg, MB, R3T 6H6

Mobile: (431) 000-1091
fiaaadvert@gmail.com

https://www.linkedin.com/in/viaaaeslavprotsenko

/

SUMMARY

Experienced QA Automation Tester with a strong background in designing, developing, and executing automated test
scripts for web, mobile, and desktop applications. Proficient in multiple programming languages and test automation
tools, with a proven track record of improving software quality and efficiency. Skilled in collaborating with
cross-functional teams and integrating automation into CI/CD pipelines for rapid and reliable software delivery.

WORK EXPERIENCE

QA Software Tester, Identity Labs, NY
Jan 2023 - Aug 2023

●
Develop and document software testing plans

●
Install software and hardware and configure operating system software in preparation for testing

●
Execute and document results of software application tests and information and telecommunication systems tests

●
Develop and implement software and information system testing policies and procedures

●
Document and report deviations from specifications and tolerances

QA Software Tester, AB SOFT, Odessa, Ukraine
Jan 2022 - Dec 2022

●
Performed bug investigation (UI + API Heroku testing)

●
Develop and document software testing plans

●
Maintained deployment control

●
Opened tickets for bugs (Jira) and assignments for the development department

●
Managed the ETA development department to fix bugs and review the resolution, including granting permissions
for deployment and managing the release process

●
Wrote test cases and documentation, as well as new tests to test innovations

●
Collaborated with external services: AWS, NetSuite, SalesForce

●
Performed framework optimization

EDUCATION

College of Industrial Automation at the Academy of Refrigeration, Odesa, Ukraine
2014-2018

Bachelor in Software Development

VOLUNTEERING

QA Software Tester, R9 Adverstisment, London, UK
Jan 2023 - Present

Startup

●
Develop and document software testing plans

●
Install software and hardware and configure operating system software in preparation for testing

●
Execute and document results of software application tests and information and telecommunication systems tests

HARD SKILLS:

Languages: Java 8.0, JavaScript
Software: Intelijj Idea , Visual Studio Code, Postman
Technical Skills: JSON · REST · JIRA · Salesforce.com · Git - Selenium WebDriver, TestNG, AssertJ, Maven, Jenkins -
Cypress - SCRUM, HTML , API

"
64,source/Vadim Brezovsky.pdf,"[' \\n', ' \\n', 'Vadim Brezovsky \\n', ' \\n', 'Java Software Developer \\n', ' \\n', ' \\n', 'Summary \\n', ' \\n', '• \\nExperience in commercial software development - 1 year as Java developer. \\n', '• \\nHave 4 months of remote work experience. \\n', '• \\nPractical work with Python, Bash and SQL. \\n', '• \\nGood work in team. Easy to learn. Admirable analytical skills. \\n', ' \\n', 'Skills \\n', ' \\n', '• \\nJava: Spring Framework (Boot, MVC, Data), Gradle, Maven, Hibernate, JUnit. \\n', '• \\nJavaScript: React, npm. \\n', '• \\nDatabases: SQL (SQLite, PostgreSQL, MS SQL Server). \\n', '• \\nOther skills: Linux (primary OS), Git, AWS, HTML, CSS, Bootstrap, Jenkins, Bash, \\nPython. \\n', ' \\n', 'Employment \\n', ' \\n', '• \\nSTiM (Nov 2019 - Present) \\n◦ Wialon Analytics – analytical system for cars sensors monitoring: \\n', '▪ Designed and implemented the system (both front and backend) from scratch. \\n', 'Technologies: Java, JavaScript, React, SQLite, MS SQL Server. \\n', ' \\n', 'Awards and Initiatives \\n', ' \\n', '• \\nHackathon""#BRESTHACK2018""- 3rd place as a team member of 2 people: \\n◦ Developed product from scratch to MVP in a limited time (only 48h). \\n◦ Prepared and presented our product (experience with public speaking). \\n', '• \\nBrest Python Meetup (Feb 29, 2019) - co-organizer and speaker. \\n', ' \\n', 'Languages \\n', ' \\n', '• \\nEnglish – B1 (Intermediate). \\n', '• \\nRussian – Native. \\n', ' \\n', 'Education \\n', ' \\n', '• \\nBrest State Polytechnic College - Mechanical Technical (2016 – 2020). \\n']"," 

 

Vadim Brezovsky 

 

Java Software Developer 

 

 

Summary 

 

• 
Experience in commercial software development - 1 year as Java developer. 

• 
Have 4 months of remote work experience. 

• 
Practical work with Python, Bash and SQL. 

• 
Good work in team. Easy to learn. Admirable analytical skills. 

 

Skills 

 

• 
Java: Spring Framework (Boot, MVC, Data), Gradle, Maven, Hibernate, JUnit. 

• 
JavaScript: React, npm. 

• 
Databases: SQL (SQLite, PostgreSQL, MS SQL Server). 

• 
Other skills: Linux (primary OS), Git, AWS, HTML, CSS, Bootstrap, Jenkins, Bash, 
Python. 

 

Employment 

 

• 
STiM (Nov 2019 - Present) 
◦ Wialon Analytics – analytical system for cars sensors monitoring: 

▪ Designed and implemented the system (both front and backend) from scratch. 

Technologies: Java, JavaScript, React, SQLite, MS SQL Server. 

 

Awards and Initiatives 

 

• 
Hackathon""#BRESTHACK2018""- 3rd place as a team member of 2 people: 
◦ Developed product from scratch to MVP in a limited time (only 48h). 
◦ Prepared and presented our product (experience with public speaking). 

• 
Brest Python Meetup (Feb 29, 2019) - co-organizer and speaker. 

 

Languages 

 

• 
English – B1 (Intermediate). 

• 
Russian – Native. 

 

Education 

 

• 
Brest State Polytechnic College - Mechanical Technical (2016 – 2020). 

"
65,source/Aldar Myagky.pdf,"['Aldar MyAgKY\\n', '@nemyagky | iald.mag.web@gmail.com | 7-996-000-01-45 | github/naayagky | Russia, Saint Petersburg\\n', 'WORK EXPERIENCE\\n', '• SELF-EMPLOYED\\n| FuLLSTAcK DEVELOPER\\nSaint Petersburg | June 2020 – June 2021\\n', '– Virtual keyboard, showing all available hotkeys for Figma, IDE redactor, etc. shortcutter.ru\\n– Participation in a three-month accelerator with a psychology project for 16-23 years old people\\n– Software for an animal shelter, transmitting a real-time image from cameras to the administration\\n– Participation in 4-5 smaller projects. More about this period in the projects section below\\n', '• SIDENIS | ANGuLAR DEVELOPER\\nSaint Petersburg | March 2020 - June\\n2020\\n', '– Developing huge Front-end software for an insurance company via Angular; NgRx on Front-end side,\\n', 'Node.js, Express.js on Back-end microservice side. Agile, autotesting, calls with foreign analytics\\n', '– Was responsible for developing new Angular pages, REST API endpoints, bug fixes, etc.\\n', '.\\n', '• EDISON | ANGuLAR DEVELOPER\\nKemerovo | June 2019 – January\\n2020\\n', 'Software for airport-like medical terminals, used for measuring pressure, doing an alcohol text,\\netc. Was responsible for:\\n', '– Communications with physical USB equipment via Node.js + SerialPort\\n– Electron.js app configuration & Linux installation\\n– Angular + Electron.js desktop app developing. Helping with Angular Front-end admin panel\\n– Creating electronic certifications for medical examinations results\\n', 'PROJECTS\\n', '• SHORTCUTTER\\nANGuLAR, ELEcTRON.js, NODE.js, C++,\\nWiNAPI\\n', 'Virtual keyboard, showing all available hotkeys for Figma, IDE redactor, etc. Angular, Node.js.\\nWindows/macOS installation via Electron.js. Includes 8 C++ and 4 Python dependencies\\n', '• YANHO\\n', 'Acceleration with a project, helping young people get psychology help. During the acceleration 150 castdev\\nhave been completed, 7 hypotheses have been tested and the first sales have been made\\n', '• ZEFIR\\nANGuLAR, WEBRTC,\\nExPRESS.js, C++\\n', 'Software for an animal shelter, used to look after the pets. C++ REST API server, used to manage webcams,\\nAngular + WebRTC Front-End website, Node.js microservices\\n', '• REPEAT ENGLISH\\nANGuLAR NATIVE, NGRx, FLuTTER,\\nFIREBASE\\n', 'Android & IOs app, used to learning English words by interval method. At first was written via\\nAngularNative, then it was rewritten via Dart+Flutter. SQLite&Firebase.\\n', '• OTHER\\n', 'Participating in projects like online canvas game, VK MiniApps application. three.js 3D scene\\nrendering, image from binary generator, etc.\\n', 'EDUCATION\\n', '• LICEUM 62\\nKemerovo | 2019\\n', 'FINISHED 9TH GRADE AND GOT A jOB IMMEDIATELY. FINISHED 11TH GRADE REMOTELY\\n', 'SKILLS\\n', 'Angular, NgRx, RxJs, Node.js, Express.js, Electron.js, Socket.io, Three.js, Angular Native, Dart, Flutter\\n', '1\\n']","Aldar MyAgKY

@nemyagky | iald.mag.web@gmail.com | 7-996-000-01-45 | github/naayagky | Russia, Saint Petersburg

WORK EXPERIENCE

• SELF-EMPLOYED
| FuLLSTAcK DEVELOPER
Saint Petersburg | June 2020 – June 2021

– Virtual keyboard, showing all available hotkeys for Figma, IDE redactor, etc. shortcutter.ru
– Participation in a three-month accelerator with a psychology project for 16-23 years old people
– Software for an animal shelter, transmitting a real-time image from cameras to the administration
– Participation in 4-5 smaller projects. More about this period in the projects section below

• SIDENIS | ANGuLAR DEVELOPER
Saint Petersburg | March 2020 - June
2020

– Developing huge Front-end software for an insurance company via Angular; NgRx on Front-end side,

Node.js, Express.js on Back-end microservice side. Agile, autotesting, calls with foreign analytics

– Was responsible for developing new Angular pages, REST API endpoints, bug fixes, etc.

.

• EDISON | ANGuLAR DEVELOPER
Kemerovo | June 2019 – January
2020

Software for airport-like medical terminals, used for measuring pressure, doing an alcohol text,
etc. Was responsible for:

– Communications with physical USB equipment via Node.js + SerialPort
– Electron.js app configuration & Linux installation
– Angular + Electron.js desktop app developing. Helping with Angular Front-end admin panel
– Creating electronic certifications for medical examinations results

PROJECTS

• SHORTCUTTER
ANGuLAR, ELEcTRON.js, NODE.js, C++,
WiNAPI

Virtual keyboard, showing all available hotkeys for Figma, IDE redactor, etc. Angular, Node.js.
Windows/macOS installation via Electron.js. Includes 8 C++ and 4 Python dependencies

• YANHO

Acceleration with a project, helping young people get psychology help. During the acceleration 150 castdev
have been completed, 7 hypotheses have been tested and the first sales have been made

• ZEFIR
ANGuLAR, WEBRTC,
ExPRESS.js, C++

Software for an animal shelter, used to look after the pets. C++ REST API server, used to manage webcams,
Angular + WebRTC Front-End website, Node.js microservices

• REPEAT ENGLISH
ANGuLAR NATIVE, NGRx, FLuTTER,
FIREBASE

Android & IOs app, used to learning English words by interval method. At first was written via
AngularNative, then it was rewritten via Dart+Flutter. SQLite&Firebase.

• OTHER

Participating in projects like online canvas game, VK MiniApps application. three.js 3D scene
rendering, image from binary generator, etc.

EDUCATION

• LICEUM 62
Kemerovo | 2019

FINISHED 9TH GRADE AND GOT A jOB IMMEDIATELY. FINISHED 11TH GRADE REMOTELY

SKILLS

Angular, NgRx, RxJs, Node.js, Express.js, Electron.js, Socket.io, Three.js, Angular Native, Dart, Flutter

1

"
66,source/Stanislav Gavrilov.pdf,"['Stanislav Gavrilov\\n', 'Montreal, Canada\\nEmail : mraaaagavrilov@gmail.com\\n', 'Mobile : +1-000-931-7854\\nLinkedIn : aaaygavrilov\\n', 'EXPERIENCE\\n', '• Ubisoft\\nMontreal, Canada\\n', 'Online Developer\\nSep 2019 - Present\\n', 'Development and operations (DevOps) of Cloud-Native backend RESTful web services on AWS that scale in the cloud and\\nthat are hit by millions of users every day (hundreds of thousands of concurrent users per service). From API Design,\\nImplementation, Continuous Delivery and Maintenance to Support.\\nWorking with multiple distant teams to achieve a common goal.\\n', '◦ Reduced legacy codebase by 20% by migrating old monolithic core service to run in the cloud.\\n◦ Built an internal tool about shadow-testing that reduced the number of production issues. (C#, Python ) Experienced\\n', 'with resource provisioning on AWS using different techniques, including Cloud Formation Template and\\nTroposphere/Sceptre.\\nDeveloped tooling that handles accounts data migration from MSSQL to AWS Aurora, which lead to saving at least 30\\nminutes/day per team member. (Python, Bash, AWS)\\n', '• Contractor\\nMunich, Germany\\n', 'Lead Software Engineer\\n2018 - 2019\\n', 'Development backend RESTful web service of a fitness class booking system in Go. Took ownership of a project shortly\\nbefore the release and managed to meet all the deadlines. Experienced with Docker, and multiple databases, including\\nMongoDB (On Prem and DigitalOcean), PostgreSQL, from the development and performance optimization to\\noperations. Experienced with payment workflows using Stripe as well as client passport implementation. (Go, PostgresSQL,\\nJavaScript)\\nExperienced with ethereum blockchain network, developing smart contracts using Solidity for insurance policy\\ncontracts.\\nSingly developed from scratch a full working Go based a low latency/high throughput web-chat on top of\\ngorilla-WebSockets decorated with a distributed cache layer for read heavy parts. (Go, PostgreSQL, Redis)\\n', '• AutoScout24\\nMunich, Germany\\n', 'Senior Software Engineer\\nOct 2018 - Sep 2019\\n', 'Development of backend event-driven microservices on top of Scala, Akka and Kafka and that are hit by millions of users\\nevery day across Europe (hundreds of thousands of concurrent users per service). Created CI/CD workflow utilizing\\nPython, Shell, on top of Jenkins. (Scala, Bash, AWS, Kafka)\\nReduced legacy codebase by 30% by migrating old monolithic web service to event-driven microservice architecture on top\\nof Scala, Akka, and Kafka. Improved availability by introducing monitoring and alerting solutions with DataDog and\\nOpsGenie.\\nReduced amortization cost of AWS infrastructure by implementing a separate Kafka processor that is responsible for\\nsoft-cleanup of the orphan images. (Scala, Kafka, S3, DynamoDb)\\nImplemented tooling that handles AWS scenarios (SSM parameters, assuming roles, etc.) which lead to saving at\\nleast an hour/week per team member. (Bash, Go, AWS)\\n', '• Carl Zeiss Microscopy GmbH\\nMunich, Germany\\n', 'Software Engineer B\\nApr 2017 - Sep 2018\\n', 'Helped and onboarded new hires, created short-term, and long-term goals and supported them along the way\\nImproved fail-safe by fixing memory leaks causing the crash of the software while trying to import\\nhigh-resolution snaps. Reduced time needed to finalize an experiment by introducing a digital signature\\nlead to saving time for inter-department communication.(Python, C#)\\nFixed more than 25 bugs over a year timeframe while analyzing the Carl Zeiss image segmentation and reporting\\nengine. Migrated legacy grain segmentation algorithm into the new modern technologies. (C++)\\n', '• Congree Language Technologies GmbH\\nKarlsbad, Germany\\n', 'Software Developer\\nApr 2014 - Mar 2017\\n', '◦ Achieved at least 30% code quality improvement by integrating a static-code analyzer with SonarQube.\\n', 'Accomplished scalability and fail-safe improvement by implementing a thin REST layer on top of\\nlanguage-check service. Improved performance by at least 40% by adding a cache layer for read-heavy parts of the\\nsystem.(Java, C#)\\nSpeed up document check by 15 % by implementing a new Congree API and migrating all the existing editor-plugins\\nto it. (Java, C#, C++)\\nDeveloped robust tooling that handles many test scenarios & enables automated deployment in test env,\\nreducing time-to-test from weeks to days (JavaScript, Java, Vmware vSphere).\\nReduced deployment time by almost 80% by implementing a distributed deployment system, leading to saving 30% of time\\nspent by solution specialists on the customer side. (JavaScript, C#)\\n', '• Andera, Inc.\\nProvidence, RI, USA\\n', 'Software Developer - remotely from Russia\\nJun 2011 - May 2013\\n', 'Bulk rates processing and import tool from CSV to Oracle and provides command interface on top for scheduling data\\nprocessing. Also created a strategy for saving rates history to FTP and SFTP servers. (C#)\\nWeb application used by online account opening system for financial institutions.Involved in features such as delivery time\\noptimization, tracking, queuing, and testing. Designed and implemented an overview dashboard for the multi-branch\\nfinancial institutions. (JavaScript)\\n', 'EDUCATION\\n', '• Tomsk Polytechnic University\\n', 'Master of Science in Computer Science\\n', '• Tomsk Polytechnic University\\n', 'Bachelor of Science in Computer Science\\n', 'SIDE PROJECTS\\n', '• gochat (in progress)\\nGolang based web-chat on top of gorilla-websockets decorated with a cache layer (Go, Redis,\\n', 'PostgresSQL, gRPC)\\n']","Stanislav Gavrilov

Montreal, Canada
Email : mraaaagavrilov@gmail.com

Mobile : +1-000-931-7854
LinkedIn : aaaygavrilov

EXPERIENCE

• Ubisoft
Montreal, Canada

Online Developer
Sep 2019 - Present

Development and operations (DevOps) of Cloud-Native backend RESTful web services on AWS that scale in the cloud and
that are hit by millions of users every day (hundreds of thousands of concurrent users per service). From API Design,
Implementation, Continuous Delivery and Maintenance to Support.
Working with multiple distant teams to achieve a common goal.

◦ Reduced legacy codebase by 20% by migrating old monolithic core service to run in the cloud.
◦ Built an internal tool about shadow-testing that reduced the number of production issues. (C#, Python ) Experienced

with resource provisioning on AWS using different techniques, including Cloud Formation Template and
Troposphere/Sceptre.
Developed tooling that handles accounts data migration from MSSQL to AWS Aurora, which lead to saving at least 30
minutes/day per team member. (Python, Bash, AWS)

• Contractor
Munich, Germany

Lead Software Engineer
2018 - 2019

Development backend RESTful web service of a fitness class booking system in Go. Took ownership of a project shortly
before the release and managed to meet all the deadlines. Experienced with Docker, and multiple databases, including
MongoDB (On Prem and DigitalOcean), PostgreSQL, from the development and performance optimization to
operations. Experienced with payment workflows using Stripe as well as client passport implementation. (Go, PostgresSQL,
JavaScript)
Experienced with ethereum blockchain network, developing smart contracts using Solidity for insurance policy
contracts.
Singly developed from scratch a full working Go based a low latency/high throughput web-chat on top of
gorilla-WebSockets decorated with a distributed cache layer for read heavy parts. (Go, PostgreSQL, Redis)

• AutoScout24
Munich, Germany

Senior Software Engineer
Oct 2018 - Sep 2019

Development of backend event-driven microservices on top of Scala, Akka and Kafka and that are hit by millions of users
every day across Europe (hundreds of thousands of concurrent users per service). Created CI/CD workflow utilizing
Python, Shell, on top of Jenkins. (Scala, Bash, AWS, Kafka)
Reduced legacy codebase by 30% by migrating old monolithic web service to event-driven microservice architecture on top
of Scala, Akka, and Kafka. Improved availability by introducing monitoring and alerting solutions with DataDog and
OpsGenie.
Reduced amortization cost of AWS infrastructure by implementing a separate Kafka processor that is responsible for
soft-cleanup of the orphan images. (Scala, Kafka, S3, DynamoDb)
Implemented tooling that handles AWS scenarios (SSM parameters, assuming roles, etc.) which lead to saving at
least an hour/week per team member. (Bash, Go, AWS)

• Carl Zeiss Microscopy GmbH
Munich, Germany

Software Engineer B
Apr 2017 - Sep 2018

Helped and onboarded new hires, created short-term, and long-term goals and supported them along the way
Improved fail-safe by fixing memory leaks causing the crash of the software while trying to import
high-resolution snaps. Reduced time needed to finalize an experiment by introducing a digital signature
lead to saving time for inter-department communication.(Python, C#)
Fixed more than 25 bugs over a year timeframe while analyzing the Carl Zeiss image segmentation and reporting
engine. Migrated legacy grain segmentation algorithm into the new modern technologies. (C++)

• Congree Language Technologies GmbH
Karlsbad, Germany

Software Developer
Apr 2014 - Mar 2017

◦ Achieved at least 30% code quality improvement by integrating a static-code analyzer with SonarQube.

Accomplished scalability and fail-safe improvement by implementing a thin REST layer on top of
language-check service. Improved performance by at least 40% by adding a cache layer for read-heavy parts of the
system.(Java, C#)
Speed up document check by 15 % by implementing a new Congree API and migrating all the existing editor-plugins
to it. (Java, C#, C++)
Developed robust tooling that handles many test scenarios & enables automated deployment in test env,
reducing time-to-test from weeks to days (JavaScript, Java, Vmware vSphere).
Reduced deployment time by almost 80% by implementing a distributed deployment system, leading to saving 30% of time
spent by solution specialists on the customer side. (JavaScript, C#)

• Andera, Inc.
Providence, RI, USA

Software Developer - remotely from Russia
Jun 2011 - May 2013

Bulk rates processing and import tool from CSV to Oracle and provides command interface on top for scheduling data
processing. Also created a strategy for saving rates history to FTP and SFTP servers. (C#)
Web application used by online account opening system for financial institutions.Involved in features such as delivery time
optimization, tracking, queuing, and testing. Designed and implemented an overview dashboard for the multi-branch
financial institutions. (JavaScript)

EDUCATION

• Tomsk Polytechnic University

Master of Science in Computer Science

• Tomsk Polytechnic University

Bachelor of Science in Computer Science

SIDE PROJECTS

• gochat (in progress)
Golang based web-chat on top of gorilla-websockets decorated with a cache layer (Go, Redis,

PostgresSQL, gRPC)

"
67,source/ANDREY PODKIDYSHEV.pdf,"['ANDREY PODKIDYSHEV\\n', 'Email : paaaidyshev.as@phystech.edu tg: KusokaaPT\\n', 'Mobile : +7 925 0003843\\n', 'SKILLS\\n•\\nDevelopment: Python, Bash, Git, C++, Docker, Jira/YouTrack, Flask and OpenAPI, React(base), Spark(base)\\n', '•\\nML: Pandas, Scipy, Numpy, Matplotlib, Sklearn, PyTorch, Catboost, XGBoost, Prophet, Statsmodels\\n', '•\\nAnalytics: SQL, A/B testing, Hypothesis testing, Statsmodels, Plotly\\n', '•\\nDL: Pytorch, Pytorch-forecasting, DL in NLP, DL in CV (base), Practical RL (base)\\n', '•\\nKnowledge: Algorithms, Data Structures, Machine Learning, Deep Learning in CV/NLP fundamental, Concurrent\\nComputing, Distributed Systems, LATEX, Natural Language Processing\\n', 'EXPERIENCE\\n', 'x5 Retail Group\\nMoscow, Russia\\n', '•\\nData Analyst\\nFeb 2021 - Present\\n', 'Created new features for exist scoring model that improves AUC metric. Now, I am in process of developing new scoring model, creating\\nfeatures for improving scoring metrics and creating full pipeline.\\n', 'BostonGene\\nMoscow, Russia\\n', '•\\nDeveloper, ’Named entity recognition service’\\nJun 2020 - Feb 2021\\n', 'Developed service that allows a user to manually markup abstracts of oncology articles with the opportunity to use an auto-recognition\\nNER system. I built a full-stack web site in React with Flask and SQLAlchemy.\\n', 'Moscow Institute of Physics and Technology\\nMoscow, Russia\\n', '•\\nUndergraduate Teaching Assistant, ”Applied Mathematical Statistics” course\\nSep 2020 - Dec 2020\\n', 'Developed assignments for students in Jupyter Notebook format. The tasks were about: point estimation, confidence interval, bootstrap\\nmethod, properties of statistical estimates, methods for finding estimates, testing statistical hypotheses, linear regression.\\n', 'Tinkoff Bank\\nMoscow, Russia\\n', '•\\nAnalyst Intern\\nJun 2019 - Sep 2019\\n', 'Built a robust machine learning model to predict next month’s credit card utilization. Achieved better quality using additional models\\nsuch as KMeans for clustering. I resorted to using Tableau to fast and easy reports for my colleagues.\\n', 'PROJECTS\\n', 'Time series forecasting library [Bachelor thesis]\\nTinkoff bank, Moscow, Russia\\n', 'Jun. 2020 - Present\\n', 'Developed an AutoML library for time series forecasting. It has an ability to work with the external feature(like weather or dollar\\nexchange rate). Created own architrave which makes it easy to add new models. Today it includes a lot of models such as\\nProphet(Facebook), Catboost(Yandex), DeepAR(Amazon), SARIMAX(statsmodels), and Deep Learning models from gluonTS and\\npytorch-forecasting libraries.\\n', 'Style Transfer asynchronous telegram bot [Pet project]\\nOnline, Solo project\\nDec. 2020 - Feb 2021\\n', 'Developed telegram asynchronous bot with a simple queue scheduler, deployed it to Heroku. Implemented two styles of transfer\\nalgorithms. The first is vanilla NST, I used the VGG19 model, took some convolution layers, and used special content/style loss to\\ncreate a new picture. The second is the cycleGan. The third is API solution by DeepMind.\\n', 'The third considered way of styling is API solution by DeepMind.\\n', 'EDUCATION\\n', 'Moscow Institute of Physics and Technology\\nMoscow, Russia\\n', 'Computer Science\\nSept. 2017 - Jul. 2021\\n', 'Average score - 4.55/5.00 (top 10% of the course)\\nMath courses: Mathematical statistics, Probability Theory, Higher Mathematics, Optimization methods\\nComputer Science courses: Machine Learning, Deep Learning coursers(NLP, CV, RL - basics), Data Engineering, C++,\\nPython, Algorithms and Data Structures, Distributed computing, Databases\\n', 'ADDITIONAL EDUCATION\\n', 'Open Courses\\nOnline classes\\n', 'Coursera and DL coursers\\nJun. 2019 - Feb. 2021\\n', 'Machine Learning and Data Analyses specialization (by Yandex)\\n', 'Python programming, Continuous Delivery and DevOps, C++ programming, NLP YSDA course, CS231n (CV by Stanford)\\n']","ANDREY PODKIDYSHEV

Email : paaaidyshev.as@phystech.edu tg: KusokaaPT

Mobile : +7 925 0003843

SKILLS
•
Development: Python, Bash, Git, C++, Docker, Jira/YouTrack, Flask and OpenAPI, React(base), Spark(base)

•
ML: Pandas, Scipy, Numpy, Matplotlib, Sklearn, PyTorch, Catboost, XGBoost, Prophet, Statsmodels

•
Analytics: SQL, A/B testing, Hypothesis testing, Statsmodels, Plotly

•
DL: Pytorch, Pytorch-forecasting, DL in NLP, DL in CV (base), Practical RL (base)

•
Knowledge: Algorithms, Data Structures, Machine Learning, Deep Learning in CV/NLP fundamental, Concurrent
Computing, Distributed Systems, LATEX, Natural Language Processing

EXPERIENCE

x5 Retail Group
Moscow, Russia

•
Data Analyst
Feb 2021 - Present

Created new features for exist scoring model that improves AUC metric. Now, I am in process of developing new scoring model, creating
features for improving scoring metrics and creating full pipeline.

BostonGene
Moscow, Russia

•
Developer, ’Named entity recognition service’
Jun 2020 - Feb 2021

Developed service that allows a user to manually markup abstracts of oncology articles with the opportunity to use an auto-recognition
NER system. I built a full-stack web site in React with Flask and SQLAlchemy.

Moscow Institute of Physics and Technology
Moscow, Russia

•
Undergraduate Teaching Assistant, ”Applied Mathematical Statistics” course
Sep 2020 - Dec 2020

Developed assignments for students in Jupyter Notebook format. The tasks were about: point estimation, confidence interval, bootstrap
method, properties of statistical estimates, methods for finding estimates, testing statistical hypotheses, linear regression.

Tinkoff Bank
Moscow, Russia

•
Analyst Intern
Jun 2019 - Sep 2019

Built a robust machine learning model to predict next month’s credit card utilization. Achieved better quality using additional models
such as KMeans for clustering. I resorted to using Tableau to fast and easy reports for my colleagues.

PROJECTS

Time series forecasting library [Bachelor thesis]
Tinkoff bank, Moscow, Russia

Jun. 2020 - Present

Developed an AutoML library for time series forecasting. It has an ability to work with the external feature(like weather or dollar
exchange rate). Created own architrave which makes it easy to add new models. Today it includes a lot of models such as
Prophet(Facebook), Catboost(Yandex), DeepAR(Amazon), SARIMAX(statsmodels), and Deep Learning models from gluonTS and
pytorch-forecasting libraries.

Style Transfer asynchronous telegram bot [Pet project]
Online, Solo project
Dec. 2020 - Feb 2021

Developed telegram asynchronous bot with a simple queue scheduler, deployed it to Heroku. Implemented two styles of transfer
algorithms. The first is vanilla NST, I used the VGG19 model, took some convolution layers, and used special content/style loss to
create a new picture. The second is the cycleGan. The third is API solution by DeepMind.

The third considered way of styling is API solution by DeepMind.

EDUCATION

Moscow Institute of Physics and Technology
Moscow, Russia

Computer Science
Sept. 2017 - Jul. 2021

Average score - 4.55/5.00 (top 10% of the course)
Math courses: Mathematical statistics, Probability Theory, Higher Mathematics, Optimization methods
Computer Science courses: Machine Learning, Deep Learning coursers(NLP, CV, RL - basics), Data Engineering, C++,
Python, Algorithms and Data Structures, Distributed computing, Databases

ADDITIONAL EDUCATION

Open Courses
Online classes

Coursera and DL coursers
Jun. 2019 - Feb. 2021

Machine Learning and Data Analyses specialization (by Yandex)

Python programming, Continuous Delivery and DevOps, C++ programming, NLP YSDA course, CS231n (CV by Stanford)

"
68,source/Denis Korenyako.pdf,"['Denis Korenyako\\n', 'Product Designer with 15+ years of background in UI/UX.\\nExperience in producing efficient user-centered design\\nsolutions from defining the problem to delivering a final\\nproduct. Strong skills in ideation and art direction. Able to\\nfunction as a project leader as well as an individual contributor.\\nPassionate about customer experience and all aspects of design.\\n', 'PORTFOLIO\\n', 'Phone:\\n+7 (905) 000-4567\\n', 'Email: den89@mail.com\\n', 'LinkedIn: www.linkedin.com/in/korenyaaa8k\\n', 'Country of residence: Russia, ready to relocate, Visa\\nassistance needed\\n', 'www.portfolio.url\\nSKILLS\\n', 'UX: prototypes, mockups, analysis, user\\nflows, personas\\n', 'EXPERIENCE\\n', 'Digital Manager — De Fonseca, Moscow\\n', 'MAY 2018 - PRESENT\\n', 'Italian home slippers brand №1\\n', '•\\nManaged all digital activities of De Fonseca in Russia.\\n', '•\\nDesigned the global website with localization in multiple\\nlanguages.\\n', '•\\nCreated a UX that resulted in 53% increase of conversion rate.\\n', '•\\nBuilt and delivered a digital strategy which led to a 388%\\nincrease of online sales\\n', '•\\nIncreased brand awareness and achieved 5x increase in branded\\nsearch traffic\\n', 'Art Director — Leto, Moscow\\n', 'AUGUST 2016 - APRIL 2018\\n', 'Russian leading digital agency, part of Ark Scholz & Friends Group\\n', '•\\nOversaw the art direction and design for a variety of clients\\nincluding Anheuser-Busch, Bosch, Ferrero, Hyundai, Imperial\\nTobacco, Mercedes- Benz, PepsiCo, Philip Morris, KFC,\\nKotányi, Mazda, SCA (Essity), Pizza Hut, Saint-Gobain,\\nUnilever, Valio, X5 Group.\\n', '•\\nLed the UX/UI of the client’s internal app from scratch to delivery\\nthat\\neffectively saved POS maintenance costs up to 70%\\n', '•\\nLed the website design for a leading food retailer from\\nanalytics and user research to production-ready UI.\\n', '•\\nBuilt new internal processes for rapid design and prototyping with\\nInVision\\nand Marvel\\n', 'Tools: Figma, Photoshop, InVision, Marvel, Excel, PowerPoint,\\nJira\\n', 'Methodologies: Agile, Design Thinking, Customer Development,\\nCustomer Journey Map, Jobs-to-be done\\n', 'LICENSES & CERTIFICATIONS\\n', 'Google Digital Garage,\\nThe Fundamentals of digital marketing\\n', 'JUNE 2021\\n', 'Google Analytics, Google Analytics Individual\\nQualification\\n', 'JUNE 2021\\n', 'Accenture, Digital Skills: User Experience\\n', 'MAY 2020\\n', 'Designer — KupiVIP, Moscow\\n', 'NOVEMBER 2015 - AUGUST 2016\\n', 'Largest Russian flash sales website, backed by Accel, Intel and\\nMangrove\\n', '•\\nDesigned the website with 1,5 million MAU being the only\\nUX/UI designer in the company.\\n', '•\\nAccomplished project in a strict deadline timeframe\\n', 'Designer — SpaceBox, Moscow\\n', 'MAY 2014 - OCTOBER 2015\\n', 'Design consultancy specialized in e-commerce and large-scale intranet\\nportals\\n', '•\\nDesigned a CRM for the biggest Russian online library.\\n', '•\\nConceptualized the intranet UI for one of the largest real estate\\ncompanies\\n', '•\\nSuccessfully designed websites for six company clients.\\n', 'EDUCATION\\n', 'Russian Academy\\nof Public Administration, Moscow — Diploma\\n', 'NOVEMBER 2005 - AUGUST 2006\\n', 'Passed final exam with Distinction Television director,\\nDiploma\\n', 'Moscow State University of Printing Arts, Moscow\\n— Uncompleted\\n', 'SEPTEMBER 1996 - JANUARY 2001\\n', 'Completed 5173 hours towards a BFA.\\n', 'EXPERIENCE (continued)\\n', 'Product Manager — Apartama, Moscow\\n', 'SEPTEMBER 2011 - FEBRUARY 2014\\n', 'Startup, social commerce platform and furnishing marketplace\\n', '•\\nInitiated and completed redesign that led to a 5% (1:20) conversion.\\n', '•\\nBoosted number of user registrations, increased customer purchases by 34%\\n', ""•\\nProgressed with the company's growth, beginning as a designer and promoted to\\nproduct manager.\\n"", '•\\nSpearheaded a cross-functional team of 5.\\n', 'Lead Web Designer — KM, Moscow\\n', 'SEPTEMBER 2010 - AUGUST 2011\\n', 'The oldest Russian news portal and encyclopedia\\n', '•\\nLed redesign of the main website with 3+ million MAU\\n', '•\\nCreated 120+ unique pages ahead of schedule.\\n', 'Designer — RBC Soft, Moscow\\n', 'AUGUST 2009 - SEPTEMBER 2010\\n', 'Major Russian software company, part of RBC (RosBusinessConsulting) media group\\n', '•\\nDesigned\\nRussian\\ngovernment\\nwebsites\\nfor\\nMinistry\\nof\\nTelecom\\nand\\nMass\\n', 'Communications,\\nMinistry\\nof\\nEconomic\\nDevelopment\\nand\\nFederal\\nService\\nfor\\n', 'Supervision in Education and Science.\\n', '•\\nDeveloped numerous PowerPoint decks which helped to secure over $5\\nmillion in funding and investments.\\n', 'Designer, DJEM Solutions, Moscow\\n', 'OCTOBER 2007 – MARCH 2009\\n', 'Art Director, BCD Group, Moscow\\n', 'MAY 2003 – SEPTEMBER 2007\\n', 'Art Director, New Publishing Projects, Moscow\\n', 'JULY 2002 – MAY 2003\\n', 'Web Designer, EuroAddress, Moscow\\n', 'OCTOBER 2001 – JUNE 2002\\n', 'Designer, Gazeta.ru, Moscow\\n', 'SEPTEMBER 1999 – OCTOBER 2001\\n', 'Web Designer, Triumvirate, Moscow\\n', 'OCTOBER 1998 — MAY 1999\\n', 'Game Artist, ElectroTECH Multimedia, Moscow\\n', 'SEPTEMBER 1997 — MARCH 1998\\n']","Denis Korenyako

Product Designer with 15+ years of background in UI/UX.
Experience in producing efficient user-centered design
solutions from defining the problem to delivering a final
product. Strong skills in ideation and art direction. Able to
function as a project leader as well as an individual contributor.
Passionate about customer experience and all aspects of design.

PORTFOLIO

Phone:
+7 (905) 000-4567

Email: den89@mail.com

LinkedIn: www.linkedin.com/in/korenyaaa8k

Country of residence: Russia, ready to relocate, Visa
assistance needed

www.portfolio.url
SKILLS

UX: prototypes, mockups, analysis, user
flows, personas

EXPERIENCE

Digital Manager — De Fonseca, Moscow

MAY 2018 - PRESENT

Italian home slippers brand №1

•
Managed all digital activities of De Fonseca in Russia.

•
Designed the global website with localization in multiple
languages.

•
Created a UX that resulted in 53% increase of conversion rate.

•
Built and delivered a digital strategy which led to a 388%
increase of online sales

•
Increased brand awareness and achieved 5x increase in branded
search traffic

Art Director — Leto, Moscow

AUGUST 2016 - APRIL 2018

Russian leading digital agency, part of Ark Scholz & Friends Group

•
Oversaw the art direction and design for a variety of clients
including Anheuser-Busch, Bosch, Ferrero, Hyundai, Imperial
Tobacco, Mercedes- Benz, PepsiCo, Philip Morris, KFC,
Kotányi, Mazda, SCA (Essity), Pizza Hut, Saint-Gobain,
Unilever, Valio, X5 Group.

•
Led the UX/UI of the client’s internal app from scratch to delivery
that
effectively saved POS maintenance costs up to 70%

•
Led the website design for a leading food retailer from
analytics and user research to production-ready UI.

•
Built new internal processes for rapid design and prototyping with
InVision
and Marvel

Tools: Figma, Photoshop, InVision, Marvel, Excel, PowerPoint,
Jira

Methodologies: Agile, Design Thinking, Customer Development,
Customer Journey Map, Jobs-to-be done

LICENSES & CERTIFICATIONS

Google Digital Garage,
The Fundamentals of digital marketing

JUNE 2021

Google Analytics, Google Analytics Individual
Qualification

JUNE 2021

Accenture, Digital Skills: User Experience

MAY 2020

Designer — KupiVIP, Moscow

NOVEMBER 2015 - AUGUST 2016

Largest Russian flash sales website, backed by Accel, Intel and
Mangrove

•
Designed the website with 1,5 million MAU being the only
UX/UI designer in the company.

•
Accomplished project in a strict deadline timeframe

Designer — SpaceBox, Moscow

MAY 2014 - OCTOBER 2015

Design consultancy specialized in e-commerce and large-scale intranet
portals

•
Designed a CRM for the biggest Russian online library.

•
Conceptualized the intranet UI for one of the largest real estate
companies

•
Successfully designed websites for six company clients.

EDUCATION

Russian Academy
of Public Administration, Moscow — Diploma

NOVEMBER 2005 - AUGUST 2006

Passed final exam with Distinction Television director,
Diploma

Moscow State University of Printing Arts, Moscow
— Uncompleted

SEPTEMBER 1996 - JANUARY 2001

Completed 5173 hours towards a BFA.

EXPERIENCE (continued)

Product Manager — Apartama, Moscow

SEPTEMBER 2011 - FEBRUARY 2014

Startup, social commerce platform and furnishing marketplace

•
Initiated and completed redesign that led to a 5% (1:20) conversion.

•
Boosted number of user registrations, increased customer purchases by 34%

•
Progressed with the company's growth, beginning as a designer and promoted to
product manager.

•
Spearheaded a cross-functional team of 5.

Lead Web Designer — KM, Moscow

SEPTEMBER 2010 - AUGUST 2011

The oldest Russian news portal and encyclopedia

•
Led redesign of the main website with 3+ million MAU

•
Created 120+ unique pages ahead of schedule.

Designer — RBC Soft, Moscow

AUGUST 2009 - SEPTEMBER 2010

Major Russian software company, part of RBC (RosBusinessConsulting) media group

•
Designed
Russian
government
websites
for
Ministry
of
Telecom
and
Mass

Communications,
Ministry
of
Economic
Development
and
Federal
Service
for

Supervision in Education and Science.

•
Developed numerous PowerPoint decks which helped to secure over $5
million in funding and investments.

Designer, DJEM Solutions, Moscow

OCTOBER 2007 – MARCH 2009

Art Director, BCD Group, Moscow

MAY 2003 – SEPTEMBER 2007

Art Director, New Publishing Projects, Moscow

JULY 2002 – MAY 2003

Web Designer, EuroAddress, Moscow

OCTOBER 2001 – JUNE 2002

Designer, Gazeta.ru, Moscow

SEPTEMBER 1999 – OCTOBER 2001

Web Designer, Triumvirate, Moscow

OCTOBER 1998 — MAY 1999

Game Artist, ElectroTECH Multimedia, Moscow

SEPTEMBER 1997 — MARCH 1998

"
69,source/Anzola AMANBEK.pdf,"['Anzola AMANBEK\\n', '+77070007850 • ralkog07@gmail.com • linkedin.com/in/aaaabek-faizolla • https://github.com/aaaugg\\n', 'EDUCATION\\nKazakh British Technical University\\nGraduating May 2025\\n', 'B.S. Computer Systems and Software\\n3.64/4.00 GPA\\n', 'Relevant coursework: Algorithms and Data Structure, OOP, Discrete Math, Calculus, Linear Algebra\\n', 'TECHNICAL SKILLS\\nLanguages: JavaScript, Golang, Python, C++, Java\\nFrameworks and Databases: React.js, Node.js (Express), Django, ,PostgreSQL, Angular, Gin\\nTechnologies: Git, Linux, Redux, Docker, Rest API, Postman Swagger, Kafka, Clean Architecture\\n', 'EXPERIENCE\\nLigeia.AI, Almaty, KZ\\nFrontEnd Developer\\nJan 2023 – Jun 2023\\n', '• Stack:React.js, Redux, Python(Django)\\n', '• Collaborated with a team of 5 to design a factory-speciﬁc website using Django (backend), PostgreSQL (database),\\n', 'and React.js (frontend).\\n', '• Crafted a real-time area chart widget using React.js and d3, enhancing data visualization capabilities.\\n', '• Automated UOM data extraction from POSC sources with Python, achieving a 20% faster scraping speed; used\\n', 'beautifulsoup4 and pandas for data transformation into CSV.\\n', '• Engaged in daily team discussions emphasizing code reviews and task planning, ensuring high code quality\\n', 'and alignment with project goals.\\n', 'APPRENTICESHIP\\nNfactorial Incubator 2022, Almaty, KZ Full Stack Web Development Bootcamp Participant Jun 2022 – Aug 2022\\n', '• Among 4,000 applicants, earned a spot among 150 selected participants in the 10-week international Bootcamp\\n', '• Focusing on HackerRank algorithmic contests, soft skills, and educational potential, while gaining expertise in the\\n', 'MERN stack for independent full-stack web application development,\\n', '• Extensive knowledge of Linux, Git, and client-server architecture through practical assignments, and creating a\\n', 'React.js-based web app for anime quote discovery.\\n', 'PROJECTS\\n', 'Anisearch\\nJun 2022 – Aug 2022\\n', 'Building React app that helps users to ﬁnd an anime quote based on keywords.\\nLink to project\\n', '• Stack:React.js, Node.js\\n', '• Developed a React application for discovering anime quotes based on keywords, integrated the AnimeChan API for\\n', 'random quotes, and Achieved a 20% improvement in performance by leveraging expertise in React hooks and\\naddressing and resolving codebase issues.\\n', 'Golang e-commerce app\\nApr 2023 - May 2023\\n', 'Led team of four to design and develop an e-commerce app\\nLink to project\\n', '• Stack:Golang, PostgreSQL, Docker\\n', '• Implemented normalized tables for various user roles and items in PostgreSQL, bolstered security with JWT\\n', 'authentication for user registration and login, streamlined server and database orchestration using Docker Com-\\npose, and created a Golang-based RESTful API to facilitate seamless CRUD operations for data management.\\n']","Anzola AMANBEK

+77070007850 • ralkog07@gmail.com • linkedin.com/in/aaaabek-faizolla • https://github.com/aaaugg

EDUCATION
Kazakh British Technical University
Graduating May 2025

B.S. Computer Systems and Software
3.64/4.00 GPA

Relevant coursework: Algorithms and Data Structure, OOP, Discrete Math, Calculus, Linear Algebra

TECHNICAL SKILLS
Languages: JavaScript, Golang, Python, C++, Java
Frameworks and Databases: React.js, Node.js (Express), Django, ,PostgreSQL, Angular, Gin
Technologies: Git, Linux, Redux, Docker, Rest API, Postman Swagger, Kafka, Clean Architecture

EXPERIENCE
Ligeia.AI, Almaty, KZ
FrontEnd Developer
Jan 2023 – Jun 2023

• Stack:React.js, Redux, Python(Django)

• Collaborated with a team of 5 to design a factory-speciﬁc website using Django (backend), PostgreSQL (database),

and React.js (frontend).

• Crafted a real-time area chart widget using React.js and d3, enhancing data visualization capabilities.

• Automated UOM data extraction from POSC sources with Python, achieving a 20% faster scraping speed; used

beautifulsoup4 and pandas for data transformation into CSV.

• Engaged in daily team discussions emphasizing code reviews and task planning, ensuring high code quality

and alignment with project goals.

APPRENTICESHIP
Nfactorial Incubator 2022, Almaty, KZ Full Stack Web Development Bootcamp Participant Jun 2022 – Aug 2022

• Among 4,000 applicants, earned a spot among 150 selected participants in the 10-week international Bootcamp

• Focusing on HackerRank algorithmic contests, soft skills, and educational potential, while gaining expertise in the

MERN stack for independent full-stack web application development,

• Extensive knowledge of Linux, Git, and client-server architecture through practical assignments, and creating a

React.js-based web app for anime quote discovery.

PROJECTS

Anisearch
Jun 2022 – Aug 2022

Building React app that helps users to ﬁnd an anime quote based on keywords.
Link to project

• Stack:React.js, Node.js

• Developed a React application for discovering anime quotes based on keywords, integrated the AnimeChan API for

random quotes, and Achieved a 20% improvement in performance by leveraging expertise in React hooks and
addressing and resolving codebase issues.

Golang e-commerce app
Apr 2023 - May 2023

Led team of four to design and develop an e-commerce app
Link to project

• Stack:Golang, PostgreSQL, Docker

• Implemented normalized tables for various user roles and items in PostgreSQL, bolstered security with JWT

authentication for user registration and login, streamlined server and database orchestration using Docker Com-
pose, and created a Golang-based RESTful API to facilitate seamless CRUD operations for data management.

"
70,source/Arseniy Konev.pdf,"['Arseniy Konev\\n', 'ML/DL specialist\\n', 'arsenkonev@gmail.com · Moscow,\\n', 'Russia\\n', 'EXPERIENCE\\n', '• Yandex\\n', 'Machine Learning Developer - Moscow, Russia Developing\\n', 'video recommender system. I work on the whole pipeline:\\n', 'logs processing/data collection/model\\n', 'training/AB-testing/models deployment\\n', 'March 2020 onwards\\n', '• Yandex.Market\\n', 'Intern analyst\\n', 'Developed a recommender system for categories. Re-\\n', 'sponsibilities: data collection/model training/AB- testing\\n', 'May - August 2019\\n', 'EDUCATION\\n', '• M.S. Data Science\\n', 'Skoltech\\n', 'Developing DL models for multimodal trajectory pre-\\n', 'diction for self-driving cars\\n', '2018-2021\\n', '• B.S. Physics\\n', 'Lomonosov Moscow State University\\n', '2014-2018\\n', 'AWARDS & RECOGNITION\\n', '• Open AI Caribbean Challenge\\n', 'Rooftops classification using satellite data. Used CNN\\n', 'models + smart stacking\\n', '3/1425\\n', 'Link to a post in organizers‘ blog\\n', '• Kaggle Lyft Motion Prediction for Au-\\n', 'tonomous Vehicles\\n', 'Bronze: 68 / 925 teams\\n', 'The task was to predict the trajectory of the agents\\n', '(cars/bikes/pedestrians etc) around the autonomous\\n', 'vehicle. I combined different approaches of pretrained\\n', 'CNNs and self-implemented graph nets\\n', 'AWARDS & RECOGNITION\\n', '• International hackathon Ice Vision Chal-\\n', 'lenge\\n', 'The task was to detect road sings with the inference\\n', 'time restriction\\n', '6 / 26\\n', 'Link\\n', 'SKILLS\\n', '• Technologies\\n', 'Python, Pytorch, TensorFlow, ML stack (numpy, scipy,\\n', 'pandas, sklearn etc), SQL\\n', '• Math\\n', 'Machine Learning / Deep Learning (implemented con-\\n', 'volutional nn using pure numpy, writing formulas for\\n', 'backprops) / Numerical Linear Algebra / Large Scale\\n', 'Optimization / Advanced Statistical Methods\\n', '• Languages\\n', 'Russian (native speaker), English (fluent)\\n', 'PROJECTS\\n', '• Optimal Control of Satellite Model via\\n', 'Neural Networks [pdf]\\n', 'comparison\\nof\\ndeep\\nlearning\\nand\\nreinforcement\\n', 'approaches to the task of optimal control of satellite\\n', 'model\\n', '• A�ention/decision maps [pdf]\\n', 'Detecting\\nregions\\nof MRI responsible for health\\n', 'problem\\n']","Arseniy Konev

ML/DL specialist

arsenkonev@gmail.com · Moscow,

Russia

EXPERIENCE

• Yandex

Machine Learning Developer - Moscow, Russia Developing

video recommender system. I work on the whole pipeline:

logs processing/data collection/model

training/AB-testing/models deployment

March 2020 onwards

• Yandex.Market

Intern analyst

Developed a recommender system for categories. Re-

sponsibilities: data collection/model training/AB- testing

May - August 2019

EDUCATION

• M.S. Data Science

Skoltech

Developing DL models for multimodal trajectory pre-

diction for self-driving cars

2018-2021

• B.S. Physics

Lomonosov Moscow State University

2014-2018

AWARDS & RECOGNITION

• Open AI Caribbean Challenge

Rooftops classification using satellite data. Used CNN

models + smart stacking

3/1425

Link to a post in organizers‘ blog

• Kaggle Lyft Motion Prediction for Au-

tonomous Vehicles

Bronze: 68 / 925 teams

The task was to predict the trajectory of the agents

(cars/bikes/pedestrians etc) around the autonomous

vehicle. I combined different approaches of pretrained

CNNs and self-implemented graph nets

AWARDS & RECOGNITION

• International hackathon Ice Vision Chal-

lenge

The task was to detect road sings with the inference

time restriction

6 / 26

Link

SKILLS

• Technologies

Python, Pytorch, TensorFlow, ML stack (numpy, scipy,

pandas, sklearn etc), SQL

• Math

Machine Learning / Deep Learning (implemented con-

volutional nn using pure numpy, writing formulas for

backprops) / Numerical Linear Algebra / Large Scale

Optimization / Advanced Statistical Methods

• Languages

Russian (native speaker), English (fluent)

PROJECTS

• Optimal Control of Satellite Model via

Neural Networks [pdf]

comparison
of
deep
learning
and
reinforcement

approaches to the task of optimal control of satellite

model

• A�ention/decision maps [pdf]

Detecting
regions
of MRI responsible for health

problem

"
71,source/Leonid Kolesnikov.pdf,"['Leonid Kolesnikov\\n', '+7(981)000-58-13 | aaahka0264@gmail.com | linkedin.com/in/saaaka0264 | github.com/saaaka0264\\n', 'SKILLS\\n', 'Technologies: JavaScript, TypeScript, React, Inferno, HTML5, CSS3, SASS/SCSS, CSS-modules, styled-components, PostCSS, Redux,\\nRedux Toolkit, Redux-thunk, Redux-saga, Jest, Mocha, Chai, Enzyme, React Testing Library, axios, MUI, Bootstrap, lodash, Gulp.js,\\nWebpack, Git, Jenkins, Sonar, JSON, AJAX, REST, GraphQL, Node.js, Express, Mongoose, Webstorm, MacOS\\nKey Competencies: Algorithms and Data Structure, Computer Networks, REST API\\nKey Social Skills: Effective communication, Conflict resolution, Active listening, Empathy, Partnerships and Risk Managment,\\nRespect\\nLanguages: English - B1, Deutsch - A1, Russian - Native\\n', 'EXPERIENCE\\n', 'Sberbank of Russia\\nSaint Petersburg, Russia\\n', 'Software Engineer\\nDecember 2020 – until now\\n', '• Implemented 1 user interface for editing data on banking products from scratch\\n', '• Improved application for precious metals with legacy code in record time (received a certificate of merit)\\n', '• Built 1 large user interface with coins for millions of users\\n', 'Andersen Lab\\nSaint Petersburg, Russia\\n', 'Software Engineer\\nMarch 2017 – December 2020\\n', '• Created several landing pages, 2 loan calculators for real estate exchange\\n', '• Constructed a credit broker UI for largest Russian online bank. Main platform support\\n', '• Constructed a component with registration and form builder for designing polls\\n', '• Made a simple management platform hosting\\n', 'PROJECTS\\n', 'Internal business platform | JavaScript, React, Redux, Jest, CSS Modules\\nNovember 2022 – until now\\n', '• Initiated project, described documentation and basis of application, played a key role in its formation and laid\\n', 'foundation for its success\\n', '• Reviewed code\\n', '• Cooperated with team, participating in agile scrum events\\n', '• Task statuses in Jira\\n', '• Designed architecture\\n', '• Created and support 1 user interface for editing data on banking products\\n', '• Achieved success in enhancing performance (JSDoc, unit tests)\\n', 'Bars catalog | JavaScript, TypeScript, React, Redux, Jest, CSS Modules\\nDecember 2020 – until now\\n', '• Delivered code review\\n', '• Participated in Scrum events (sprints, daily, sprint planning, estimation)\\n', '• Navigated through tight timelines while tackling extensive layout modifications to meet project requirements\\n', '• Assumed core responsibility for planning end estimation of project tasks and timelines ensuring efficient project\\n', 'management\\n', '• Task statuses in Jira\\n', '• Improved application for precious metals with legacy code in record time (received a certificate of merit)\\n', '• Fixed more bugs\\n', '• Honed code (unit tests, typescript)\\n', 'Coin catalog (Sberbank) | JavaScript, TypeScript, React, Redux, Jest, CSS Modules\\nDecember 2020 – until now\\n', '• Provided code review\\n', '• Facilitated in Scrum events (sprints, daily, sprint planning, estimation)\\n', '• Took an active role in business side development, involving initiation and troubleshooting of business and\\n', 'development process\\n', '• Task statuses in Jira\\n', '• Communicated with other teams (about design, etc.)\\n', '• Fixed bugs and support main pages\\n', '• Introduced a variety of new features to elevate user experience\\n', '• Built 1 large user interface with coins for millions of users\\n', '• Implementing new features\\n', '• Maintained various smaller projects on request\\n', '• Enhanced code (unit tests, typescript)\\n', 'PropertyGuru Group | TypeScript, React, Redux, Redux-Thunk, Mocha, Chai\\nAugust 2019 – December 2020\\n', '• Initializing a new project\\n', '• Wrote several landing pages and 2 loan calculators\\n', '• Cooperated with team, participating in agile scrum events\\n', 'Internet banking | JavaScript, React (Inferno), Redux, Webpack, CSS Modules, PostCSS June 2018 – August 2019\\n', '• Devised 1 credit broker interface\\n', '• Main broker platform support\\n', '• Communicated with other teams\\n', '• Managed without sprints from release to release (on average 2 weeks)\\n', 'Choicely | JavaScript, React (Inferno), Redux, Webpack, CSS Module, PostCSS\\nOctober 2017 – June 2018\\n', '• Made 1 component with registration and 1 form builder\\n', '• Honed code\\n', '• Rewrote project to React from Inferno\\n', '• Analyzed code\\n', '• Participated in Scrum events (sprints, daily, retrospective)\\n', 'Majordomo (Andersen Lab) | JavaScript, React, Bootstrap, CSS\\nMarch 2017 – October 2017\\n', '• Initializing a new project\\n', '• Devised a platform designed for hosting management\\n', '• Developing components and binding to API\\n', '• Facilitated in Scrum events (sprints, daily)\\n']","Leonid Kolesnikov

+7(981)000-58-13 | aaahka0264@gmail.com | linkedin.com/in/saaaka0264 | github.com/saaaka0264

SKILLS

Technologies: JavaScript, TypeScript, React, Inferno, HTML5, CSS3, SASS/SCSS, CSS-modules, styled-components, PostCSS, Redux,
Redux Toolkit, Redux-thunk, Redux-saga, Jest, Mocha, Chai, Enzyme, React Testing Library, axios, MUI, Bootstrap, lodash, Gulp.js,
Webpack, Git, Jenkins, Sonar, JSON, AJAX, REST, GraphQL, Node.js, Express, Mongoose, Webstorm, MacOS
Key Competencies: Algorithms and Data Structure, Computer Networks, REST API
Key Social Skills: Effective communication, Conflict resolution, Active listening, Empathy, Partnerships and Risk Managment,
Respect
Languages: English - B1, Deutsch - A1, Russian - Native

EXPERIENCE

Sberbank of Russia
Saint Petersburg, Russia

Software Engineer
December 2020 – until now

• Implemented 1 user interface for editing data on banking products from scratch

• Improved application for precious metals with legacy code in record time (received a certificate of merit)

• Built 1 large user interface with coins for millions of users

Andersen Lab
Saint Petersburg, Russia

Software Engineer
March 2017 – December 2020

• Created several landing pages, 2 loan calculators for real estate exchange

• Constructed a credit broker UI for largest Russian online bank. Main platform support

• Constructed a component with registration and form builder for designing polls

• Made a simple management platform hosting

PROJECTS

Internal business platform | JavaScript, React, Redux, Jest, CSS Modules
November 2022 – until now

• Initiated project, described documentation and basis of application, played a key role in its formation and laid

foundation for its success

• Reviewed code

• Cooperated with team, participating in agile scrum events

• Task statuses in Jira

• Designed architecture

• Created and support 1 user interface for editing data on banking products

• Achieved success in enhancing performance (JSDoc, unit tests)

Bars catalog | JavaScript, TypeScript, React, Redux, Jest, CSS Modules
December 2020 – until now

• Delivered code review

• Participated in Scrum events (sprints, daily, sprint planning, estimation)

• Navigated through tight timelines while tackling extensive layout modifications to meet project requirements

• Assumed core responsibility for planning end estimation of project tasks and timelines ensuring efficient project

management

• Task statuses in Jira

• Improved application for precious metals with legacy code in record time (received a certificate of merit)

• Fixed more bugs

• Honed code (unit tests, typescript)

Coin catalog (Sberbank) | JavaScript, TypeScript, React, Redux, Jest, CSS Modules
December 2020 – until now

• Provided code review

• Facilitated in Scrum events (sprints, daily, sprint planning, estimation)

• Took an active role in business side development, involving initiation and troubleshooting of business and

development process

• Task statuses in Jira

• Communicated with other teams (about design, etc.)

• Fixed bugs and support main pages

• Introduced a variety of new features to elevate user experience

• Built 1 large user interface with coins for millions of users

• Implementing new features

• Maintained various smaller projects on request

• Enhanced code (unit tests, typescript)

PropertyGuru Group | TypeScript, React, Redux, Redux-Thunk, Mocha, Chai
August 2019 – December 2020

• Initializing a new project

• Wrote several landing pages and 2 loan calculators

• Cooperated with team, participating in agile scrum events

Internet banking | JavaScript, React (Inferno), Redux, Webpack, CSS Modules, PostCSS June 2018 – August 2019

• Devised 1 credit broker interface

• Main broker platform support

• Communicated with other teams

• Managed without sprints from release to release (on average 2 weeks)

Choicely | JavaScript, React (Inferno), Redux, Webpack, CSS Module, PostCSS
October 2017 – June 2018

• Made 1 component with registration and 1 form builder

• Honed code

• Rewrote project to React from Inferno

• Analyzed code

• Participated in Scrum events (sprints, daily, retrospective)

Majordomo (Andersen Lab) | JavaScript, React, Bootstrap, CSS
March 2017 – October 2017

• Initializing a new project

• Devised a platform designed for hosting management

• Developing components and binding to API

• Facilitated in Scrum events (sprints, daily)

"
72,source/DMIRTII TKACHENKO.pdf,"['Python \\n', 'Unix \\n', 'SQL \\n', 'Jira \\n', 'HTML \\n', ' \\n', 'DMIRTII TKACHENKO \\n', 'EDUCATION \\n \\n', 'Taras Shevchenko National University \\n', 'Bachelor in Computer Science \\n', ' Aug 2014 – June 2018 \\nKyiv, UA \\n', 'Taras Shevchenko National University \\n', 'Masters in Computer Science \\n', ' Aug 2018 – June 2020 \\nKyiv, UA \\n', ' \\nEXPERIENCE \\n \\n', 'Data Operator \\n', 'Ring Ukraine \\n', ' Nov 2017 – Oct 2018 \\nKyiv, UA \\n', '• Labeling the objects on images and video frames using various \\n', 'labeling tools on Mac OS. \\n', '• Working closely with a development team that supports and \\n', 'improves the labeling tool and R&D team that uses the data \\nproduced. \\n', '• Providing feedback on the tool, and contributing to creating a \\n', 'labeling manual. \\n', '• Analyzing videos and assign them to defined categories. \\n• Moderation of the multimedia content. \\n• Create reports based on the labeling results. \\n', ' \\n', 'Community manager \\n', 'Data Science UA \\n', ' Nov 2019 – May 2020 \\nKyiv, UA \\n', '• SMM and Content-management (Facebook, Instagram, Tele- \\n', 'gram, LinkedIn, YouTube). \\n', '• FB advertising setup. \\n• E-mail marketing. \\n• Event-management. \\n• Public relations. \\n• Project management. \\n', 'LANGUAGES \\n \\n', 'Ukrainian \\nEnglish \\nGerman \\n', 'TECHNICAL SKILLS \\n \\n', ' \\n', 'ACHIEVEMENTS \\n \\n', 'Computer vision hackathon winner(2nd \\nplace) \\n• Application “AR Visual Presence System”. \\n• Collaborated with 4 teammates to build an \\n', 'amazing user experience. \\n', ' \\nCERTIFICATES \\n \\n', 'Programming for Everybody (Getting \\nStarted with Python) \\n', 'Coursera \\n', ' June 2020 \\nKyiv, UA \\n', 'Programming for Everybody (Python \\nData Structures \\n', 'Coursera \\n', ' June 2020 \\nKyiv, UA \\n', 'Networking Essentials \\n', 'Cisco \\n', ' May 2015 \\nKyiv, UA \\n', 'IELTS \\n', 'British Council \\n', ' May 2015 \\nKyiv, UA \\n', ' \\nVOLUNTEER \\n \\n', 'Developer Student Club \\n', 'Google \\n', ' Jan – May 2020 \\nKyiv, UA \\n', 'Hackathon Expert Group \\n', 'Taras Shevchenko National University \\n', ' Sep 2017-May 2020 \\nKyiv, UA \\n', 'Data Science Conference #8 \\n', 'Data Science UA \\n', ' Oct 2019 \\nKyiv, UA \\n']","Python 

Unix 

SQL 

Jira 

HTML 

 

DMIRTII TKACHENKO 

EDUCATION 
 

Taras Shevchenko National University 

Bachelor in Computer Science 

 Aug 2014 – June 2018 
Kyiv, UA 

Taras Shevchenko National University 

Masters in Computer Science 

 Aug 2018 – June 2020 
Kyiv, UA 

 
EXPERIENCE 
 

Data Operator 

Ring Ukraine 

 Nov 2017 – Oct 2018 
Kyiv, UA 

• Labeling the objects on images and video frames using various 

labeling tools on Mac OS. 

• Working closely with a development team that supports and 

improves the labeling tool and R&D team that uses the data 
produced. 

• Providing feedback on the tool, and contributing to creating a 

labeling manual. 

• Analyzing videos and assign them to defined categories. 
• Moderation of the multimedia content. 
• Create reports based on the labeling results. 

 

Community manager 

Data Science UA 

 Nov 2019 – May 2020 
Kyiv, UA 

• SMM and Content-management (Facebook, Instagram, Tele- 

gram, LinkedIn, YouTube). 

• FB advertising setup. 
• E-mail marketing. 
• Event-management. 
• Public relations. 
• Project management. 

LANGUAGES 
 

Ukrainian 
English 
German 

TECHNICAL SKILLS 
 

 

ACHIEVEMENTS 
 

Computer vision hackathon winner(2nd 
place) 
• Application “AR Visual Presence System”. 
• Collaborated with 4 teammates to build an 

amazing user experience. 

 
CERTIFICATES 
 

Programming for Everybody (Getting 
Started with Python) 

Coursera 

 June 2020 
Kyiv, UA 

Programming for Everybody (Python 
Data Structures 

Coursera 

 June 2020 
Kyiv, UA 

Networking Essentials 

Cisco 

 May 2015 
Kyiv, UA 

IELTS 

British Council 

 May 2015 
Kyiv, UA 

 
VOLUNTEER 
 

Developer Student Club 

Google 

 Jan – May 2020 
Kyiv, UA 

Hackathon Expert Group 

Taras Shevchenko National University 

 Sep 2017-May 2020 
Kyiv, UA 

Data Science Conference #8 

Data Science UA 

 Oct 2019 
Kyiv, UA 

"
73,source/EGOR SADIBEKOV .pdf,"['EGOR SADIBEKOV - SOFTWARE ENGINEER \\n', ' | email: sadibe11111@gmail.com phone: (+7) 7073219111 | \\n', 'Summary: Experienced product-oriented software engineer with 2+ years in fintech, driven by a strong passion \\nfor building secure, scalable, and efficient systems that can serve millions of users. \\n', ' \\n', 'EDUCATION \\nM.S. in Information Systems \\n2022 – 2024 \\n', 'at Kazakh British Technical University \\nResearch: Assessing brain development in children by analyzing brain signals (EEG) with Python and ML. \\n', 'B.A. in Political Science \\n2018 – 2022 \\n', 'at Nazarbayev University \\n', ' \\nWORK EXPERIENCE \\nSoftware Engineer at Kaspi.kz (60B evaluation, LSE listed - KAKZF) \\n05/2022 – Present \\n', 'TechStack: Java 17, Kotlin, Kubernetes \\nAlmaty, Kazakhstan \\n', '● \\nProposed and implemented a solution, integrating JWT security authorization and Redis caching, \\nresulting in an 80% reduction in database queries. \\n', '● \\nReduced backend service latency from 1500 ms to 300 ms by implementing parallel decomposition of \\nworkers and asynchronous programming in a collaborative team setting. \\n', '● \\nDeveloped a reactive rate limiter microservice in Java, bolstering security against denial-of-service \\nattacks as part of a cross-functional team. \\n', '● \\nSpearheaded the creation of a mobile service for secure data management, leading to a remarkable \\n95% increase in positive user reviews. \\n', '● \\nOptimized Spring unit and integration tests by 70% through abstract class inheritance, contributing \\nto more efficient daily continuous integration processes. \\n', '● \\nImplemented Kafka-based event control, enabling auditing for 80% of business processes, such as \\nonline credit transactions. \\n', 'Software Engineer at Sberbank (the largest digital ecosystem in Russia) \\n05/2021 – 04/2022 \\n', 'TechStack: Python, Apache Airflow, Kafka \\nMoscow, Russia \\n', '● \\nImplemented a ranking system based on statistical algorithms in Python, leveraging Apache Airflow \\nfor workflow orchestration. This led to a remarkable productivity increase of over 80%. \\n', '● \\nEngineered a Python-based smart push notification algorithm, integrated with Kafka for real-time \\nevent streaming. This algorithm increased revenue by 150% through timely debt collection reminders. \\n', '● \\nProposed and successfully executed a strategy to minimize systematic deviations from 60 to a core \\n15, significantly enhancing data analysis quality and the performance of existing algorithms. \\n', 'TECHNOLOGIES & SKILLS \\nJava | Kotlin | Python | Git | Kubernetes, Docker | Apache Kafka, Airflow | Camunda BPM | OpenCV | SQL \\n(PostgreSQL, MySQL), NoSQL (Redis, MongoDB) | Effective team worker | Problem solver \\n', 'PROJECTS \\nRestaurant booking \\n/restaurant-book \\n', '● \\nDeveloped a Kotlin backend using reactive programming, incorporating both CQRS and Event \\nSourcing design patterns. Supports asynchronous reservation of restaurant places. \\n', 'Blog Posting Application \\n/simple-blog-application \\n', '● \\nBuilt a Spring Boot-based application with Java backend and Vue.js frontend that enables authorized \\nusers to publish and read blog posts on any topic. \\n', 'Car model Recognizer \\n/car-model-recognizer \\n', '● \\nImplemented a Java computer vision algorithm using convolutional neural network, capable of \\nidentifying car models based on car images. \\n']","EGOR SADIBEKOV - SOFTWARE ENGINEER 

 | email: sadibe11111@gmail.com phone: (+7) 7073219111 | 

Summary: Experienced product-oriented software engineer with 2+ years in fintech, driven by a strong passion 
for building secure, scalable, and efficient systems that can serve millions of users. 

 

EDUCATION 
M.S. in Information Systems 
2022 – 2024 

at Kazakh British Technical University 
Research: Assessing brain development in children by analyzing brain signals (EEG) with Python and ML. 

B.A. in Political Science 
2018 – 2022 

at Nazarbayev University 

 
WORK EXPERIENCE 
Software Engineer at Kaspi.kz (60B evaluation, LSE listed - KAKZF) 
05/2022 – Present 

TechStack: Java 17, Kotlin, Kubernetes 
Almaty, Kazakhstan 

● 
Proposed and implemented a solution, integrating JWT security authorization and Redis caching, 
resulting in an 80% reduction in database queries. 

● 
Reduced backend service latency from 1500 ms to 300 ms by implementing parallel decomposition of 
workers and asynchronous programming in a collaborative team setting. 

● 
Developed a reactive rate limiter microservice in Java, bolstering security against denial-of-service 
attacks as part of a cross-functional team. 

● 
Spearheaded the creation of a mobile service for secure data management, leading to a remarkable 
95% increase in positive user reviews. 

● 
Optimized Spring unit and integration tests by 70% through abstract class inheritance, contributing 
to more efficient daily continuous integration processes. 

● 
Implemented Kafka-based event control, enabling auditing for 80% of business processes, such as 
online credit transactions. 

Software Engineer at Sberbank (the largest digital ecosystem in Russia) 
05/2021 – 04/2022 

TechStack: Python, Apache Airflow, Kafka 
Moscow, Russia 

● 
Implemented a ranking system based on statistical algorithms in Python, leveraging Apache Airflow 
for workflow orchestration. This led to a remarkable productivity increase of over 80%. 

● 
Engineered a Python-based smart push notification algorithm, integrated with Kafka for real-time 
event streaming. This algorithm increased revenue by 150% through timely debt collection reminders. 

● 
Proposed and successfully executed a strategy to minimize systematic deviations from 60 to a core 
15, significantly enhancing data analysis quality and the performance of existing algorithms. 

TECHNOLOGIES & SKILLS 
Java | Kotlin | Python | Git | Kubernetes, Docker | Apache Kafka, Airflow | Camunda BPM | OpenCV | SQL 
(PostgreSQL, MySQL), NoSQL (Redis, MongoDB) | Effective team worker | Problem solver 

PROJECTS 
Restaurant booking 
/restaurant-book 

● 
Developed a Kotlin backend using reactive programming, incorporating both CQRS and Event 
Sourcing design patterns. Supports asynchronous reservation of restaurant places. 

Blog Posting Application 
/simple-blog-application 

● 
Built a Spring Boot-based application with Java backend and Vue.js frontend that enables authorized 
users to publish and read blog posts on any topic. 

Car model Recognizer 
/car-model-recognizer 

● 
Implemented a Java computer vision algorithm using convolutional neural network, capable of 
identifying car models based on car images. 

"
74,source/Pavel Paveluc.pdf,"['Luxembourg, Luxembourg\\nLuxembourg, Blue card\\nPavel Paveluc\\n', '+352-000-118-082\\n', 'slaaaase@gmail.com\\n', 'Employment\\nSenior Software Engineer\\nDocler Holding\\nSeptember 2018 – Present\\n', 'I am working on the payment system for a high load Media project with millions of users per day.\\nOur team is responsible for all payment processing operations at Doclerholding main streaming services.\\n', '· Transform\\nthe\\nbusiness\\nrequirements\\ninto\\ndeployment/development\\ntasks\\nwith\\nthe\\nnext\\n', 'implementation.\\n', '· Leading a team of 1 software developer.\\n', 'Refactoring Legacy Code Base\\n· Document and implementing a solution architecture for the frontend part of the payment system of\\n', 'high-volume customer-facing portal reducing the TTM (time-to-market) by 20% ensuring high code\\nmaintainability.\\n', '· Document current high-level system data flows which result in a 20% onboarding time decrease.\\nInfrastructure\\n· Implemented a visual tool for generating the entry point of our payment system which reduced the\\n', 'amount of time needed for manual testing by 25%.\\n', '· Implemented and launched an End to End testing system connected to the CI/CD pipeline which reduced\\n', 'the amount of time needed for manual testing by 25%.\\n', 'Other\\n· Member of the on-call rotation;\\n', 'Other experience\\nSoftware Engineer- Frontend @DoclerHolding (2018-2019)\\n· Front-end development project focused on streaming. (Typescript,React.js, styled-components.)\\n', 'Full-stack Web engineer @Big Data Federation, Inc. (2017-2018)\\n· Implemented and Deployed a rich dashboard application from scratch used for showing financial data\\n', 'with predictions.\\n', '· Led a team of 2 frontend software engineers.\\n· Designed reusable user interface components in D3.js, React, and Javascript ES6.\\n· Writing unit tests using Mocha and Enzyme.\\n', 'Full-stack Web engineer @Leads-Trade SRL (2016-2017)\\n· Front-end and Back-end development projects.\\n· Multi-Client real-time WebSocket application integrated into a tool for capturing leads.\\n', 'Full-stack Web engineer @Fruitware SRL (2014-2016)\\nBuilding web projects from scratch with WordPress CMS, Laravel, Opencart, and other open-source content\\nmanagement systems.\\nCreating fully responsive html5 templates from provided designs and integrating them in cms.\\nEducation\\n', 'Chisinau, Republic of Moldova\\nAcademy of Economic Studies\\n2012-2016\\n', '· Bachelor’s degree in Information Technologies(IT), 2012.\\nLanguages and Technologies:\\nTypescript, Javascript, Node.js, D3.js React.js, Vue.js, PHP, Linux,\\nDatabases: MongoDB, MySQL.\\n']","Luxembourg, Luxembourg
Luxembourg, Blue card
Pavel Paveluc

+352-000-118-082

slaaaase@gmail.com

Employment
Senior Software Engineer
Docler Holding
September 2018 – Present

I am working on the payment system for a high load Media project with millions of users per day.
Our team is responsible for all payment processing operations at Doclerholding main streaming services.

· Transform
the
business
requirements
into
deployment/development
tasks
with
the
next

implementation.

· Leading a team of 1 software developer.

Refactoring Legacy Code Base
· Document and implementing a solution architecture for the frontend part of the payment system of

high-volume customer-facing portal reducing the TTM (time-to-market) by 20% ensuring high code
maintainability.

· Document current high-level system data flows which result in a 20% onboarding time decrease.
Infrastructure
· Implemented a visual tool for generating the entry point of our payment system which reduced the

amount of time needed for manual testing by 25%.

· Implemented and launched an End to End testing system connected to the CI/CD pipeline which reduced

the amount of time needed for manual testing by 25%.

Other
· Member of the on-call rotation;

Other experience
Software Engineer- Frontend @DoclerHolding (2018-2019)
· Front-end development project focused on streaming. (Typescript,React.js, styled-components.)

Full-stack Web engineer @Big Data Federation, Inc. (2017-2018)
· Implemented and Deployed a rich dashboard application from scratch used for showing financial data

with predictions.

· Led a team of 2 frontend software engineers.
· Designed reusable user interface components in D3.js, React, and Javascript ES6.
· Writing unit tests using Mocha and Enzyme.

Full-stack Web engineer @Leads-Trade SRL (2016-2017)
· Front-end and Back-end development projects.
· Multi-Client real-time WebSocket application integrated into a tool for capturing leads.

Full-stack Web engineer @Fruitware SRL (2014-2016)
Building web projects from scratch with WordPress CMS, Laravel, Opencart, and other open-source content
management systems.
Creating fully responsive html5 templates from provided designs and integrating them in cms.
Education

Chisinau, Republic of Moldova
Academy of Economic Studies
2012-2016

· Bachelor’s degree in Information Technologies(IT), 2012.
Languages and Technologies:
Typescript, Javascript, Node.js, D3.js React.js, Vue.js, PHP, Linux,
Databases: MongoDB, MySQL.

"
75,source/Malik Raiskhanov .pdf,"['Malik Raiskhanov iOS\\nSoftware Engineer Almaty,\\nKazakhstan Willing to\\nrelocate\\n', 'ra684hanov.a@gmail.com\\n', '+7 701 000 32 00\\n', 'https://linkedin.com/in/as\\n', 'aaahan-r/\\n', 'https://leetcode.com/As\\n', 'ylaaanR/\\n', 'EXPERIENCE\\n“Kolesa Group”\\nAlmaty, Kazakhstan\\n', 'iOS Developer (Kolesa.kz, Krisha.kz, Market.kz, Avtoelon.uz)\\nSeptember 2017 –\\n', 'present\\n', '● Designed and implemented saving search queries with further notiﬁcations about new\\n', 'positions, which resulted in higher retention and Daily Active Users\\n', '● Designed and implemented chat features such as sending images, audio messages, location\\n', 'and own adverts, which resulted in more contacts and retention\\n', '● Developed balance top up and NPS modules, that are used across several projects\\n● Refactored legacy domain models code, leading to 15% less memory consumption and 20%\\n', 'less network traﬀic usage\\n', '● Developed an impact analysis script to identify if a project build needs to be ran on CI/CD when\\n', 'making changes in common modules, which led to shorter build queues and less build waiting\\ntime\\n', 'EDUCATION\\n', 'International Information Technology University, Almaty, Kazakhstan\\nSep 2014 – Jun\\n', '2018\\n● Bachelor of Engineering and Technology in Information Systems (GPA 3.73/4.0)\\n', 'Schmalkalden University of Applied Sciences, Thuringia, Germany\\nOct 2016 – Feb\\n', '2017\\n● Exchange semester\\n', '● Implemented chat module as part of the coursework project (Android, Java, Firebase Messaging)\\n', 'TECHNICAL SKILLS\\n', 'Languages: Swift, Objective-C\\nTechnologies and Frameworks: iOS SDK, UIKit, Autolayout, MVC, GCD, AVFoundation,\\nCoreLocation, APNS, REST API, Cocoapods, Git, CI/CD, Fastlane\\n', 'ACTIVITIES\\n', 'Gave two talks at the Kolesa MeetUp on topics:\\n', '● “How we implemented audio messages in chat”, https://youtu.be/J6_jHLBE0HM (Russian)\\n2020\\n', '● “Debugging in Xcode”\\n2018\\n', 'ACHIEVEMENTS\\n● 1st place at Kolesa Internal Hackathon with “Car Make and Model recognition” project\\n2019\\n', '● ACM ICPC Quarter-ﬁnals participant in Northern-Eurasian Region, Almaty\\n2015\\n']","Malik Raiskhanov iOS
Software Engineer Almaty,
Kazakhstan Willing to
relocate

ra684hanov.a@gmail.com

+7 701 000 32 00

https://linkedin.com/in/as

aaahan-r/

https://leetcode.com/As

ylaaanR/

EXPERIENCE
“Kolesa Group”
Almaty, Kazakhstan

iOS Developer (Kolesa.kz, Krisha.kz, Market.kz, Avtoelon.uz)
September 2017 –

present

● Designed and implemented saving search queries with further notiﬁcations about new

positions, which resulted in higher retention and Daily Active Users

● Designed and implemented chat features such as sending images, audio messages, location

and own adverts, which resulted in more contacts and retention

● Developed balance top up and NPS modules, that are used across several projects
● Refactored legacy domain models code, leading to 15% less memory consumption and 20%

less network traﬀic usage

● Developed an impact analysis script to identify if a project build needs to be ran on CI/CD when

making changes in common modules, which led to shorter build queues and less build waiting
time

EDUCATION

International Information Technology University, Almaty, Kazakhstan
Sep 2014 – Jun

2018
● Bachelor of Engineering and Technology in Information Systems (GPA 3.73/4.0)

Schmalkalden University of Applied Sciences, Thuringia, Germany
Oct 2016 – Feb

2017
● Exchange semester

● Implemented chat module as part of the coursework project (Android, Java, Firebase Messaging)

TECHNICAL SKILLS

Languages: Swift, Objective-C
Technologies and Frameworks: iOS SDK, UIKit, Autolayout, MVC, GCD, AVFoundation,
CoreLocation, APNS, REST API, Cocoapods, Git, CI/CD, Fastlane

ACTIVITIES

Gave two talks at the Kolesa MeetUp on topics:

● “How we implemented audio messages in chat”, https://youtu.be/J6_jHLBE0HM (Russian)
2020

● “Debugging in Xcode”
2018

ACHIEVEMENTS
● 1st place at Kolesa Internal Hackathon with “Car Make and Model recognition” project
2019

● ACM ICPC Quarter-ﬁnals participant in Northern-Eurasian Region, Almaty
2015

"
76,source/Малиновский Аркадий.pdf,"['Навыки\\n', 'Малиновский\\n', 'Аркадий\\n', '(914)-755-0000 |\\n', 'gaaaawi@galqiwi.ru |\\n', '@galaawi |\\ngalaawi\\n', 'Языки программирования : C++, Python, SQL (PostgreSQL, SQLite)\\nТехнологии : linux, git, docker, pycharm/clion\\n', 'Образование\\n', 'Студент бакалавриата МФТИ, 3 курс\\n09/2019 – настоящее\\n', 'Физтех-школа Прикладной Математики и Информатики (ФПМИ)\\nДолгопрудный, Московская область\\n', 'Pet проекты\\n', 'vk.com/udfbot\\n09/2020 — 01/2021\\n', '4.6к пользователей\\n', '• Бот для создания простых дипфейков на основе first order motion model,\\n', '• Использовались Python, Docker, Flask, requests, sqlite.\\n', 'vk.com/png2pdf\\n07/2020\\n', '452 пользователя\\n', '• Бот для конвертации png в pdf,\\n', '• Использовались Python, requests, imagemagick.\\n', 'habr.galqiwi.ru\\n11/2019\\n', '268 пользователей\\n', '• Проект показывает графики сна пользователей хабра, собирая статистику комментирования,\\n', '• Использовались Django, Pillow, requests.\\n', 'Достижения\\n', 'Золотая медаль на международной олимпиаде по физике,\\nДважды абсолют, четырежды победитель всероссийской олимпиады по физике, Дважды\\nпризёр всероссийской олимпиады по математике.\\n', 'Опыт работы\\n', 'Terra Quantum\\n08/2020 –\\n', 'настоящее\\nML Engeneer\\n', '• Разработал GPT-based пайплайн для диалогового бота, применяемый во внутреннем продукте компании,\\n', '• Использовались huggingface, pytorch, docker.\\n']","Навыки

Малиновский

Аркадий

(914)-755-0000 |

gaaaawi@galqiwi.ru |

@galaawi |
galaawi

Языки программирования : C++, Python, SQL (PostgreSQL, SQLite)
Технологии : linux, git, docker, pycharm/clion

Образование

Студент бакалавриата МФТИ, 3 курс
09/2019 – настоящее

Физтех-школа Прикладной Математики и Информатики (ФПМИ)
Долгопрудный, Московская область

Pet проекты

vk.com/udfbot
09/2020 — 01/2021

4.6к пользователей

• Бот для создания простых дипфейков на основе first order motion model,

• Использовались Python, Docker, Flask, requests, sqlite.

vk.com/png2pdf
07/2020

452 пользователя

• Бот для конвертации png в pdf,

• Использовались Python, requests, imagemagick.

habr.galqiwi.ru
11/2019

268 пользователей

• Проект показывает графики сна пользователей хабра, собирая статистику комментирования,

• Использовались Django, Pillow, requests.

Достижения

Золотая медаль на международной олимпиаде по физике,
Дважды абсолют, четырежды победитель всероссийской олимпиады по физике, Дважды
призёр всероссийской олимпиады по математике.

Опыт работы

Terra Quantum
08/2020 –

настоящее
ML Engeneer

• Разработал GPT-based пайплайн для диалогового бота, применяемый во внутреннем продукте компании,

• Использовались huggingface, pytorch, docker.

"
77,source/Andrey Maximov.pdf,"['Andrey Maximov \\nFull-Stack Developer \\n', ' amaximov.off@gmail.com  \\n', ' +7916793111 \\n', ' \\n', 'PROFILE \\n', ' \\n', ' \\n', 'Full-stack developer adept in working in both \\nfront-end and backend development processes \\nwith 3 year of experience in Python, Django \\nREST, JS, React, SQL. Well versed in \\nprogramming \\ndesign, \\ndevelopment, \\nand \\n', 'implementation of functional specifications. \\nKnowledge of different programming languages \\nand various development tools and frameworks. \\n', ' \\n \\nSKILLS \\n \\n', 'Python \\nDjango REST, FastAPI, Celery, libraries (pdfkit, \\nxlsxwriter, datetime, etc) \\n', 'NodeJS \\nReact, MobX, Redux, Math, Canvas \\n', 'SQL \\nPostgreSQL, MySQL \\n', 'Git version control \\n', 'Docker \\n', 'CI/CD pipelines \\n', 'HTML & CSS \\n', 'Agile methodologies \\n', 'Security and data protection \\n', 'Troubleshooting and debugging \\n', ' \\n', ' \\n', ' \\nPROJECTS \\n \\n', 'Microservice Application \\n \\n', 'Python, Apache Kafka, Zookeeper, \\nKafkaConnector, Docker, Postgresql, MongoDB, \\nElasticsearch \\n02/2023 – 03/2023 \\nCreating a microservice application using \\nApache Kafka to update the information \\nbetween databases. \\n', ""Development of a Secure Smart Home \\nManagement Service  \\nJavaScript, React, Mobx, Docker, CI/CD \\n09/2022 – 06/2023 \\nDevelopment of client's part of security service \\nand automation of smart home management \\nprocesses using JS React. The system has a \\ndynamic smart home design module which was \\ndeveloped using library Mobx and Canvas \\ncomponent. \\n"", 'Parser for data collection \\n \\n', 'Python (selenium, browsermobproxy, json, \\nrequests) \\n08/2023 – 08/2023 \\nThe parser for collecting data from a website \\nusing a proxy server and API requests. \\n', 'Development of a Graphical Application \\nUsing the MVC Pattern \\n \\n', 'QT, SQL \\n09/2022 – 11/2022 \\nA graphical application that writes/reads data \\nfrom a database entity to/from a local file on a \\ncomputer. \\n', 'Development of a Client-Server Application \\nwith Database Design and Creation  \\nQT, SQL \\n01/2022 – 05/2022 \\nThe client-server application that works with \\nSQL server. The software part was developed in \\nQT. The client can add, edit and delete records. \\nA relational database was designed and created. \\n', 'French Numbers Parser \\n \\n', 'Python (re library) \\n12/2022 – 01/2023 \\nA software that converts numbers written in \\nFrench in cursive into Roman numerals. \\n', 'Team collaboration and communication \\n \\n \\n', 'EDUCATION \\n', ' \\nPROFESSIONAL EXPERIENCE \\n \\n', 'Full-Stack Developer \\nInformation Technology Center \\n08/2022 – present | Moscow, Russia \\n Created 10+ API modules \\n  Developed 50+ different React components \\n Provided interaction of a client and server \\n', 'components \\n', ' Code review \\n Worked directly with the database \\n Configured Docker and CI/CD \\n(Python Django REST, JavaScript React, SQL, \\nDocker, CI/CD) \\n', ' \\n', ' \\n', 'Bachelor of Technology - BTech / \\nInformation Systems and Technologies \\nMIREA (Russian Technological University) \\nThesis: Development of a Secure Smart Home \\nManagement Service \\n', ' \\n', 'LANGUAGES \\n', ' \\n', ' \\n', 'English \\n', 'Russian \\n']","Andrey Maximov 
Full-Stack Developer 

 amaximov.off@gmail.com  

 +7916793111 

 

PROFILE 

 

 

Full-stack developer adept in working in both 
front-end and backend development processes 
with 3 year of experience in Python, Django 
REST, JS, React, SQL. Well versed in 
programming 
design, 
development, 
and 

implementation of functional specifications. 
Knowledge of different programming languages 
and various development tools and frameworks. 

 
 
SKILLS 
 

Python 
Django REST, FastAPI, Celery, libraries (pdfkit, 
xlsxwriter, datetime, etc) 

NodeJS 
React, MobX, Redux, Math, Canvas 

SQL 
PostgreSQL, MySQL 

Git version control 

Docker 

CI/CD pipelines 

HTML & CSS 

Agile methodologies 

Security and data protection 

Troubleshooting and debugging 

 

 

 
PROJECTS 
 

Microservice Application 
 

Python, Apache Kafka, Zookeeper, 
KafkaConnector, Docker, Postgresql, MongoDB, 
Elasticsearch 
02/2023 – 03/2023 
Creating a microservice application using 
Apache Kafka to update the information 
between databases. 

Development of a Secure Smart Home 
Management Service  
JavaScript, React, Mobx, Docker, CI/CD 
09/2022 – 06/2023 
Development of client's part of security service 
and automation of smart home management 
processes using JS React. The system has a 
dynamic smart home design module which was 
developed using library Mobx and Canvas 
component. 

Parser for data collection 
 

Python (selenium, browsermobproxy, json, 
requests) 
08/2023 – 08/2023 
The parser for collecting data from a website 
using a proxy server and API requests. 

Development of a Graphical Application 
Using the MVC Pattern 
 

QT, SQL 
09/2022 – 11/2022 
A graphical application that writes/reads data 
from a database entity to/from a local file on a 
computer. 

Development of a Client-Server Application 
with Database Design and Creation  
QT, SQL 
01/2022 – 05/2022 
The client-server application that works with 
SQL server. The software part was developed in 
QT. The client can add, edit and delete records. 
A relational database was designed and created. 

French Numbers Parser 
 

Python (re library) 
12/2022 – 01/2023 
A software that converts numbers written in 
French in cursive into Roman numerals. 

Team collaboration and communication 
 
 

EDUCATION 

 
PROFESSIONAL EXPERIENCE 
 

Full-Stack Developer 
Information Technology Center 
08/2022 – present | Moscow, Russia 
 Created 10+ API modules 
  Developed 50+ different React components 
 Provided interaction of a client and server 

components 

 Code review 
 Worked directly with the database 
 Configured Docker and CI/CD 
(Python Django REST, JavaScript React, SQL, 
Docker, CI/CD) 

 

 

Bachelor of Technology - BTech / 
Information Systems and Technologies 
MIREA (Russian Technological University) 
Thesis: Development of a Secure Smart Home 
Management Service 

 

LANGUAGES 

 

 

English 

Russian 

"
78,source/Vadim Bozhenko.pdf,"[' \\n', ' \\n', 'Main skills \\nPython 2/3, Golang, Bash, \\nLinux/Unix, git, gitflow, Ansible \\n', 'Secondary skills \\nC/C++, Ruby, PHP, JS, Java 8+, \\nSQL/NoSQL DBs \\n', 'Python frameworks \\nDjango, Flask, SQLAlchemy, \\nAsyncio, Celery, pytest \\n', 'Linux Distributions \\nUbuntu 14.04+, Debian 8+, SLES \\n12+, CentOS 6+ \\n', 'Databases and key-value \\nstorages \\n', 'PostgreSQL, MySQL/MariaDB, \\nMongoDB, Redis \\n', 'Windows knowledge \\nWindows Server 2012+, Windows \\n7+, Active Directory management, \\nSamba (SMB/CIFS) \\n', 'Containers and virtualization \\ntechnologies \\n', 'Docker, Kubernetes, LXC, KVM, \\nQEMU \\n', 'CI/CD tools \\nAzure DevOps, Gitlab CI, Jenkins \\n', 'Misc. utilities \\nZabbix, Postfix, maintaining \\npackage repositories \\n', ' \\n', 'SKILLS \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n', 'Vadim Bozhenko \\n', 'Location:  Haifa, Israel \\n', 'Email:  caudadragojjj@gmail.com \\n', ' \\n', ' \\n', ' \\n \\n \\n', ' \\n \\n \\n', ' \\n', ' \\n', ' \\n', 'English \\nUpper-Intermediate/B2 \\n', 'Russian \\nNative/C2 \\n', 'Ukrainian \\nNative/C2 \\n', 'Hebrew \\nBeginner/A2 \\n', ' \\n', 'custom cloud services and using SecureBoot \\n', '• \\nJira \\n', ' \\n', '03/2018 – 08/2019, 03/2020 - Present \\n', 'Software Developer/DevOps, Cybervision (USA), Kyiv \\nUkraine, In-office/Remote \\nResponsibilities: \\n', '• \\nDeveloping application for installing custom Hadoop \\ndistro on hundreds of servers (Java, Python, Bash, \\nAnsible) \\n', '• \\nMigration to Python 3 while having option to run code \\nwith Python 2.6+ \\n', '• \\nImproving product integration for AWS, GCP and Azure \\n', '• \\nDeveloping custom Ansible modules, improving existing \\n', '• \\nWriting internal documentation \\n', '• \\nTests and general refactoring \\n', '• \\nJira \\n', '07/2017 – 03/2018 \\n', 'Software Developer/System Administrator, \\nBitBullCapital (CA, USA), Remote \\nResponsibilities: \\n', '• \\nData extraction from various blockchain APIs (Python) \\n', '• \\nData normalization for MongoDB/Relation DBs \\n', '• \\nCreating and maintaining infrastructure in AWS \\n(Windows and Linux) \\n', '• \\nBash programming \\n', '10/2016 – 07/2017 \\n', 'Software Developer/System Administrator, ABC holding \\nltd (Poland), Kyiv Ukraine, Remote \\nResponsibilities: \\n', '• \\nDeveloping a hosting panel in Python 2/3 \\n', '• \\nMigration to Python 3 \\n', '• \\nHardening Linux server, Kernel tuning \\n', '• \\nConfiguring mail servers \\n', '• \\nMaintaining a Debian repository \\n', '• \\nDeveloping CI/CD tools in Python/Bash \\n', '• \\nRedmine \\n', '01/2016 – 10/2016 \\n', 'System Administrator, Softico (Ukraine), Kyiv Ukraine, \\nIn office \\nResponsibilities: \\n', '• \\nMaintaining existing on-site infrastructure \\n', '• \\nDeveloping service tools in Python \\n', '• \\nMaintaining VPN, internals Windows servers, websites \\n', ' \\n \\n \\n', ' \\n \\n \\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\nCitizenship \\nUkraine \\n', 'Residency \\nIsrael \\n', 'Work permit Israel, Ukraine \\n', ' \\n']"," 

 

Main skills 
Python 2/3, Golang, Bash, 
Linux/Unix, git, gitflow, Ansible 

Secondary skills 
C/C++, Ruby, PHP, JS, Java 8+, 
SQL/NoSQL DBs 

Python frameworks 
Django, Flask, SQLAlchemy, 
Asyncio, Celery, pytest 

Linux Distributions 
Ubuntu 14.04+, Debian 8+, SLES 
12+, CentOS 6+ 

Databases and key-value 
storages 

PostgreSQL, MySQL/MariaDB, 
MongoDB, Redis 

Windows knowledge 
Windows Server 2012+, Windows 
7+, Active Directory management, 
Samba (SMB/CIFS) 

Containers and virtualization 
technologies 

Docker, Kubernetes, LXC, KVM, 
QEMU 

CI/CD tools 
Azure DevOps, Gitlab CI, Jenkins 

Misc. utilities 
Zabbix, Postfix, maintaining 
package repositories 

 

SKILLS 

 

 

 

 

 

 

 

 

 

 

 

Vadim Bozhenko 

Location:  Haifa, Israel 

Email:  caudadragojjj@gmail.com 

 

 

 
 
 

 
 
 

 

 

 

English 
Upper-Intermediate/B2 

Russian 
Native/C2 

Ukrainian 
Native/C2 

Hebrew 
Beginner/A2 

 

custom cloud services and using SecureBoot 

• 
Jira 

 

03/2018 – 08/2019, 03/2020 - Present 

Software Developer/DevOps, Cybervision (USA), Kyiv 
Ukraine, In-office/Remote 
Responsibilities: 

• 
Developing application for installing custom Hadoop 
distro on hundreds of servers (Java, Python, Bash, 
Ansible) 

• 
Migration to Python 3 while having option to run code 
with Python 2.6+ 

• 
Improving product integration for AWS, GCP and Azure 

• 
Developing custom Ansible modules, improving existing 

• 
Writing internal documentation 

• 
Tests and general refactoring 

• 
Jira 

07/2017 – 03/2018 

Software Developer/System Administrator, 
BitBullCapital (CA, USA), Remote 
Responsibilities: 

• 
Data extraction from various blockchain APIs (Python) 

• 
Data normalization for MongoDB/Relation DBs 

• 
Creating and maintaining infrastructure in AWS 
(Windows and Linux) 

• 
Bash programming 

10/2016 – 07/2017 

Software Developer/System Administrator, ABC holding 
ltd (Poland), Kyiv Ukraine, Remote 
Responsibilities: 

• 
Developing a hosting panel in Python 2/3 

• 
Migration to Python 3 

• 
Hardening Linux server, Kernel tuning 

• 
Configuring mail servers 

• 
Maintaining a Debian repository 

• 
Developing CI/CD tools in Python/Bash 

• 
Redmine 

01/2016 – 10/2016 

System Administrator, Softico (Ukraine), Kyiv Ukraine, 
In office 
Responsibilities: 

• 
Maintaining existing on-site infrastructure 

• 
Developing service tools in Python 

• 
Maintaining VPN, internals Windows servers, websites 

 
 
 

 
 
 

 

 

 

 

 
Citizenship 
Ukraine 

Residency 
Israel 

Work permit Israel, Ukraine 

 

"
79,source/Miron MEDVEDEV.pdf,"['Miron MEDVEDEV\\n', '+995 593 000 923\\n', 'eaaavedvq@gmail.com ⋄ LinkedIn ⋄ GitHub\\n', 'OBJECTIVE\\nAI and Data Science professional with hands-on experience in model development, deployment, NLP and data analysis.\\nSeeking challenging opportunities to further develop and apply my skills.\\n', 'EDUCATION\\n', 'Master of Science in Applied Economics, Higher School of Economics\\n2020-2022\\n', 'Bachelor of Economics, Higher School of Economics\\n2016-2020\\n', 'EXPERIENCE\\nMachine Learning Engineer, Amberdata\\nNov 2022 - Present\\n', '• Increased news video accessibility by 30% by developing and deploying a neural network for subtitle generation using\\n', 'FastAPI and RabbitMQ.\\n', '• Improved the information retrieval speed by 20% by implementing a Q&A model using BERT and FAISS index.\\n', '• Elevated the F1 score to 90% in opinion detection for Unified State Exam essays by fine-tuning BERT.\\n', '• Enhanced user profile accuracy by 15% by training a model on clickstreams to produce user embeddings.\\n', '• Raised targeted marketing efficiency by 30% by contributing to a team project to classify users based on socio-\\n', 'demographic characteristics.\\n', '• Streamlined internal decision-making by supporting the analytics team in developing 5 Superset dashboards using\\n', 'PySpark and Hive.\\n', 'AI Researcher, SkillCup\\nMay 2023 - June 2023\\n', '• Boosted content creation rate by 20% by engineering a system that autonomously generates multiple-choice questions\\n', 'using FRED-T5 and ruGPT-3.\\n', '• Managed end-to-end project phases including client communication, leading to successful deployment on Yandex\\n', 'DataSphere.\\n', 'Data Science Intern, SBERBANK\\nJuly 2021 - Oct 2021\\n', '• Increased organizational transparency by visualizing inter-departmental connections using NetGraphX and Graphviz.\\n', '• Achieved CER = 0.065 and WER = 0.157 by leading a Russian Handwriting Recognition project using a state-of-the-art\\n', 'architecture. Link to the project on GitHub\\n', '• Accelerated issue resolution time by 10% by employing LDA to categorize frequent problems in Jira tickets.\\n', 'SKILLS\\n', 'Programming\\nPython, SQL, R, Git, Linux, Bash, LATEX\\n', 'Libraries\\nPytorch, Numpy, Tensorflow, FastAPI, Pyspark, Deepspeed, Pyspark, XGboost, Pandas,\\nScikit-learn, Matplotlib, Plotly, Seaborn\\n', 'Tools\\nHive, Superset, RabbitMQ, Yandex DataSphere\\n', 'Languages\\nEnglish, Russian\\n', 'HOBBIES\\n', '• Passionate about climbing.\\n• Enthusiastic follower of For-\\n', 'mula 1 racing.\\n', '• Enjoy watching and analyz- ing\\n', 'films.\\n', '• Active listener of various mu- sic\\n', 'genres.\\n', '• Avid football fan and player.\\n• Active E-sports fan, rooting for\\n', '9Pandas\\n']","Miron MEDVEDEV

+995 593 000 923

eaaavedvq@gmail.com ⋄ LinkedIn ⋄ GitHub

OBJECTIVE
AI and Data Science professional with hands-on experience in model development, deployment, NLP and data analysis.
Seeking challenging opportunities to further develop and apply my skills.

EDUCATION

Master of Science in Applied Economics, Higher School of Economics
2020-2022

Bachelor of Economics, Higher School of Economics
2016-2020

EXPERIENCE
Machine Learning Engineer, Amberdata
Nov 2022 - Present

• Increased news video accessibility by 30% by developing and deploying a neural network for subtitle generation using

FastAPI and RabbitMQ.

• Improved the information retrieval speed by 20% by implementing a Q&A model using BERT and FAISS index.

• Elevated the F1 score to 90% in opinion detection for Unified State Exam essays by fine-tuning BERT.

• Enhanced user profile accuracy by 15% by training a model on clickstreams to produce user embeddings.

• Raised targeted marketing efficiency by 30% by contributing to a team project to classify users based on socio-

demographic characteristics.

• Streamlined internal decision-making by supporting the analytics team in developing 5 Superset dashboards using

PySpark and Hive.

AI Researcher, SkillCup
May 2023 - June 2023

• Boosted content creation rate by 20% by engineering a system that autonomously generates multiple-choice questions

using FRED-T5 and ruGPT-3.

• Managed end-to-end project phases including client communication, leading to successful deployment on Yandex

DataSphere.

Data Science Intern, SBERBANK
July 2021 - Oct 2021

• Increased organizational transparency by visualizing inter-departmental connections using NetGraphX and Graphviz.

• Achieved CER = 0.065 and WER = 0.157 by leading a Russian Handwriting Recognition project using a state-of-the-art

architecture. Link to the project on GitHub

• Accelerated issue resolution time by 10% by employing LDA to categorize frequent problems in Jira tickets.

SKILLS

Programming
Python, SQL, R, Git, Linux, Bash, LATEX

Libraries
Pytorch, Numpy, Tensorflow, FastAPI, Pyspark, Deepspeed, Pyspark, XGboost, Pandas,
Scikit-learn, Matplotlib, Plotly, Seaborn

Tools
Hive, Superset, RabbitMQ, Yandex DataSphere

Languages
English, Russian

HOBBIES

• Passionate about climbing.
• Enthusiastic follower of For-

mula 1 racing.

• Enjoy watching and analyz- ing

films.

• Active listener of various mu- sic

genres.

• Avid football fan and player.
• Active E-sports fan, rooting for

9Pandas

"
80,source/Semen Ivanov.pdf,"['SEMEN IVANOV\\n', 'Moscow, Russia · +99856990099\\nEmail: semenIvanov54@gmail.com · linkedin.com/in/semenIvanov65\\n', 'I am a Cyber Security specialist with five years of experience in Penetration\\nTesting, Security Architecture and Computer Forensics. Currently I am working\\nas a Security Analyst for ORG. My role involves security assessment and\\npenetration testing processes.\\nThe main responsibilities of my role include:\\n', '●\\nThreat Intelligence analysis services;\\n', '●\\nAnalytical support of information security assessment;\\n', '●\\nPreparing penetration testing and web application security assessment reports;\\n', '●\\nCollaboration with Customer to present results and recommendations;\\n', '●\\nDeveloping various scripts in Python to improve department workflows.\\n', 'I am an OSCP (Offensive Security Certified Professional) holder and currently\\npassing the ‘Advance web attack exploitation course’ by Offensive Security team to\\nobtain OSWE (Offensive Security Web Expert). In addition, I have experience in\\nthe Security System Architecture development for customers based on outlined\\nclient requirements (most of them based on Russian law (GDPR)).\\nI consider myself to be a focused and enthusiastic young person with strong\\norganizational and people skills. My hobbies are hiking, cycling and other sports\\nactivities. In my current team I have implemented a hiking program for team\\nbuilding purposes.\\n', 'EXPERIENCE\\n', 'SEP 2018 - PRESENT (2 YEAR 10 MONTHS +)\\nSECURITY ANALYST, ORG\\nAs a Security Analyst, I work closely with infrastructure and web application\\npenetration teams. I participate in security assessment and penetration\\ntesting projects. The role includes:\\n', '●\\nProviding Threat Intelligence analysis services;\\n', '●\\nAnalytical support of information security assessment;\\n', '●\\nPreparing penetration testing and web application security assessment reports;\\n', '●\\nDeveloping various scripts in Python to automate routine jobs.\\n', 'JUL 2017 - SEP 2018 (1 YEAR 3 MONTHS)\\nCYBER SECURITY ARCHITECT, ORG\\nAs a Security Architect, I developed security system architecture for\\ncustomers based on the outlined requirements (most of them based on\\nRussian law (GDPR)). My main responsibilities included:\\n', '●\\nDevelopment of security system architecture for customers;\\n', '●\\nPreparation of technical and commercial proposals, calculation of specifications;\\n', '●\\nOrganizing workshops with clients to assist with identification of their business needs in\\nterms of providing the appropriate Information Security;\\n', '●\\nDesigning and Implementing vulnerability management processes;\\n', '●\\nPreparing and implementing Inside/Outside information security audits including web,\\nWi-Fi, infrastructure etc.\\n', 'In 2018, I was involved in the Standoff game on Positive Hack Days\\nconference with team SVR (defenders’ side).\\n', 'MAY 2016 - NOV 2016 (7 MONTHS)\\nFORENSIC SPECIALIST, ORG (CONTRACT ROLE)\\nAs part of this role I was responsible for:\\n', '●\\nThe forensic technology services and was involved in a large fraud investigation FCPA\\n(Foreign Corrupt Practices Act);\\n', '●\\nEngagement in the CIS (Commonwealth of Independent States) and Europe as a part of\\nthe Fraud Investigation team.\\n', 'These engagements typically involved imaging of computers and servers,\\ndata recovery, processing and analysis.\\n', 'JAN 2015 - DEC 2015 (1 YEAR)\\nFORENSIC SPECIALIST, ORG\\n', 'The main duties of this role included:\\n●\\nForensic investigation technician support in fraud investigation for a big industrial\\ncompany focusing on the full complex of all eDiscovery processes and related\\nprocedures;\\n', '●\\nParticipation in preparation of notarized electronic evidence for Russian civil court;\\n', '●\\nAssistance in creation and preparation of infrastructure for remote secure review of\\nevidence for international investigation;\\n', '●\\nCo-Creator of Forensic technology laboratory focusing on sustainability, building and\\ndevelopment of the Team, designing and setting up the forensic technology solutions\\ndata center with the eDiscovery and computer forensic software and hardware.\\n', 'AUG 2007 - JUN 2008 (11 MONTHS)\\nTECHNICAL SERVICES ENGINEER, ORG\\nFull life-cycle of warranty service for Servers, PC, Laptops & peripheral\\ndevices. The role included:\\n', '●\\nCommunication with the client;\\n', '●\\nIdentifying issue in PC, Server or peripheral devices;\\n', '●\\nRepairing warranty devices and installing the requested software.\\n', 'EDUCATION\\n', '2008 - 2014\\nSPECIALIST DIPLOMA, NNN STATE TECHNICAL UNIVERSITY\\nInformatics and Control Systems Department, Information Security Chair.\\nAverage score is 4.5 out of 5\\n', 'DEC 2013 - MAY 2014 (6 MONTHS)\\nORG\\nFinal internship in Org Company: Responsible for Imaged devices with FTK\\nImager software, UFED and Tableau Write-Blockers devices. Forensically\\nanalyzed disk images with EnCase software for illegal actions or activities\\n', '2\\n', '2004 - 2008\\nDIPLOMA OF SECONDARY VOCATIONAL, COLLEGE OF RADIO-ELECTRONICS\\nComputer Systems Networking and Telecommunications Chair\\n', 'SKILLS\\n', '●\\nPenetration Testing with Kali Linux\\n', '●\\nThreat & Vulnerability Management\\n', '●\\nPython & Bash scripting\\n', '●\\nSecurity Architecture Design\\n', '●\\nNetwork Security\\n', '●\\nBurp Suite\\n', '●\\nMetasploit framework\\n', '●\\nCheckmarx SAST\\n', '●\\nMicrosoft products\\n', '●\\nKnowledge of Jira and Conﬂuence\\n', 'CERTIFICATIONS\\n', '●\\nOffensive Security Certified Professional (OSCP) - Offensive Security. Certificate ID: OS-XXXXXX\\n', '●\\nCheck Point Certified Security Administrator (CCSA) - Check Point Software Technologies,Ltd.\\nIssued Feb 2018 - Expires Feb 2020 Certificate ID: XXXXXXXX\\n', '●\\nCertified Specialist of MaxPatrol vulnerability scanner - Positive Technologies\\nIssued Oct 2017 - Expires Feb 2019\\nCertificate ID: XXXXXX\\n', 'PUBLICATION\\n', 'Digital Footprint Intelligence Report (в оригинальном резюме кликабельна)\\n', '3\\n']","SEMEN IVANOV

Moscow, Russia · +99856990099
Email: semenIvanov54@gmail.com · linkedin.com/in/semenIvanov65

I am a Cyber Security specialist with five years of experience in Penetration
Testing, Security Architecture and Computer Forensics. Currently I am working
as a Security Analyst for ORG. My role involves security assessment and
penetration testing processes.
The main responsibilities of my role include:

●
Threat Intelligence analysis services;

●
Analytical support of information security assessment;

●
Preparing penetration testing and web application security assessment reports;

●
Collaboration with Customer to present results and recommendations;

●
Developing various scripts in Python to improve department workflows.

I am an OSCP (Offensive Security Certified Professional) holder and currently
passing the ‘Advance web attack exploitation course’ by Offensive Security team to
obtain OSWE (Offensive Security Web Expert). In addition, I have experience in
the Security System Architecture development for customers based on outlined
client requirements (most of them based on Russian law (GDPR)).
I consider myself to be a focused and enthusiastic young person with strong
organizational and people skills. My hobbies are hiking, cycling and other sports
activities. In my current team I have implemented a hiking program for team
building purposes.

EXPERIENCE

SEP 2018 - PRESENT (2 YEAR 10 MONTHS +)
SECURITY ANALYST, ORG
As a Security Analyst, I work closely with infrastructure and web application
penetration teams. I participate in security assessment and penetration
testing projects. The role includes:

●
Providing Threat Intelligence analysis services;

●
Analytical support of information security assessment;

●
Preparing penetration testing and web application security assessment reports;

●
Developing various scripts in Python to automate routine jobs.

JUL 2017 - SEP 2018 (1 YEAR 3 MONTHS)
CYBER SECURITY ARCHITECT, ORG
As a Security Architect, I developed security system architecture for
customers based on the outlined requirements (most of them based on
Russian law (GDPR)). My main responsibilities included:

●
Development of security system architecture for customers;

●
Preparation of technical and commercial proposals, calculation of specifications;

●
Organizing workshops with clients to assist with identification of their business needs in
terms of providing the appropriate Information Security;

●
Designing and Implementing vulnerability management processes;

●
Preparing and implementing Inside/Outside information security audits including web,
Wi-Fi, infrastructure etc.

In 2018, I was involved in the Standoff game on Positive Hack Days
conference with team SVR (defenders’ side).

MAY 2016 - NOV 2016 (7 MONTHS)
FORENSIC SPECIALIST, ORG (CONTRACT ROLE)
As part of this role I was responsible for:

●
The forensic technology services and was involved in a large fraud investigation FCPA
(Foreign Corrupt Practices Act);

●
Engagement in the CIS (Commonwealth of Independent States) and Europe as a part of
the Fraud Investigation team.

These engagements typically involved imaging of computers and servers,
data recovery, processing and analysis.

JAN 2015 - DEC 2015 (1 YEAR)
FORENSIC SPECIALIST, ORG

The main duties of this role included:
●
Forensic investigation technician support in fraud investigation for a big industrial
company focusing on the full complex of all eDiscovery processes and related
procedures;

●
Participation in preparation of notarized electronic evidence for Russian civil court;

●
Assistance in creation and preparation of infrastructure for remote secure review of
evidence for international investigation;

●
Co-Creator of Forensic technology laboratory focusing on sustainability, building and
development of the Team, designing and setting up the forensic technology solutions
data center with the eDiscovery and computer forensic software and hardware.

AUG 2007 - JUN 2008 (11 MONTHS)
TECHNICAL SERVICES ENGINEER, ORG
Full life-cycle of warranty service for Servers, PC, Laptops & peripheral
devices. The role included:

●
Communication with the client;

●
Identifying issue in PC, Server or peripheral devices;

●
Repairing warranty devices and installing the requested software.

EDUCATION

2008 - 2014
SPECIALIST DIPLOMA, NNN STATE TECHNICAL UNIVERSITY
Informatics and Control Systems Department, Information Security Chair.
Average score is 4.5 out of 5

DEC 2013 - MAY 2014 (6 MONTHS)
ORG
Final internship in Org Company: Responsible for Imaged devices with FTK
Imager software, UFED and Tableau Write-Blockers devices. Forensically
analyzed disk images with EnCase software for illegal actions or activities

2

2004 - 2008
DIPLOMA OF SECONDARY VOCATIONAL, COLLEGE OF RADIO-ELECTRONICS
Computer Systems Networking and Telecommunications Chair

SKILLS

●
Penetration Testing with Kali Linux

●
Threat & Vulnerability Management

●
Python & Bash scripting

●
Security Architecture Design

●
Network Security

●
Burp Suite

●
Metasploit framework

●
Checkmarx SAST

●
Microsoft products

●
Knowledge of Jira and Conﬂuence

CERTIFICATIONS

●
Offensive Security Certified Professional (OSCP) - Offensive Security. Certificate ID: OS-XXXXXX

●
Check Point Certified Security Administrator (CCSA) - Check Point Software Technologies,Ltd.
Issued Feb 2018 - Expires Feb 2020 Certificate ID: XXXXXXXX

●
Certified Specialist of MaxPatrol vulnerability scanner - Positive Technologies
Issued Oct 2017 - Expires Feb 2019
Certificate ID: XXXXXX

PUBLICATION

Digital Footprint Intelligence Report (в оригинальном резюме кликабельна)

3

"
81,source/Ivan Ulyanov.pdf,"['Ivan Ulyanov\\n', '(+1) 403-000-6344 | aaaan.ulianov@gmail.com | linkedin.com/in/aaaabur/ | Canada, AB\\n', 'SUMMARY\\n', 'With over a decade in the tech industry, I’ve transitioned from foundational coding of low-latency platforms to steering transformative\\nprojects across diverse domains.\\nSpecializing in TypeScript, React.js, Node.js, and GraphQL, I utilize cloud technologies to craft robust and scalable solutions. My agility\\nin project development and passion for continuous improvement have led to recognized contributions and leadership roles. Beyond\\nmere coding, I’ve pioneered custom frameworks, emphasized clean coding practices, and championed collaborative team dynamics.\\nWith an entrepreneurial spirit, I ensure seamless and rapid product evolution, always striving for excellence.\\n', 'EXPERIENCE\\n', 'Full Stack Software Engineer\\nOct 2021 – Present\\n', 'Tilla\\n', '• Identified the need for and led the transition from an Express-based prototype to a robust, production-ready NestJS\\n', 'application, taking full ownership of the project’s success.\\n', '• Seamlessly migrated the system from REST API to GraphQL, ensuring the integration of industry best practices and\\n', 'providing hands-on coaching to the team for easier adaptation to the new tech stack.\\n', '• Pioneered the introduction of performance monitoring; upon pinpointing critical inefficiencies, I took responsibility for\\n', 'redesigning the architecture and logic, achieving a remarkable reduction in request delays from 1 minute to almost\\ninstantaneous responses.\\n', 'Software Engineer\\nMar 2021 – Oct 2021\\n', 'Deel\\n', '• Assumed ownership of a vital legacy admin application, collaboratively devising a strategy with team members to overhaul\\n', 'its architectural design.\\n', '• Introduced pivotal toolbelt enhancements, taking charge of resolving long-standing challenges tied to hot reloading, source\\n', 'mapping, and debugging.\\n', '• Recognizing the potential of TypeScript and modern architectural methodologies, I actively advocated for\\n', 'company-wide adoption. Taking personal responsibility, I steered the transformation of the admin application,\\nculminating in a significantly enhanced, clean, and maintainable codebase.\\n', 'Co-Founder, CTO\\nMar 2018 – Jun 2021\\n', 'RedFenix\\n', '• Architected and developed a comprehensive, multifaceted platform which included a variety of web and mobile\\n', 'applications, specialized WiFi captive portals, and a solid NodeJS backend. - Adapting to emerging tech needs, I self-taught\\nand integrated new technologies related to WiFi networks and firmware development\\n', '• Managed and technically mentored a developer team, ensuring consistent adherence to coding best practices,\\n', 'effective product development, and efficient deployments.\\n', '• Oversaw the seamless deployment of all platform components on the Google Cloud Platform, emphasizing\\n', 'scalability and reliability.\\n', '• Our technical efforts and innovations led us to be part of the Chile SUP program, and I was proud to see our product\\n', 'succeed in a pilot with a major ISP in Ecuador.\\n', 'Senior Software Engineer, Architect\\nJan 2018 – Mar 2021\\n', 'Orthodox Union\\n', '• Played a lead role in redeveloping the company’s internal CRM backend, transitioning to the innovative Event Sourcing\\n', 'approach.\\n', '• Immersed myself in advanced concepts such as Event Sourcing, CQRS, and Domain-Driven Development. This empowered\\n', 'me to architect a novel and efficient system and enriched the team’s expertise as I shared my insights and learnings.\\n', '• Successful migration from an older system to a modern, more efficient one earned commendations from both the\\n', 'business department and senior leadership\\n', '• Originally onboarded for a specific task, my contributions and the tangible impact they delivered led to extended\\n', 'long-term contract, entrusting me with even more responsibilities.\\n', 'Senior Software Developer, Architect\\nFeb 2016 – Jan 2018\\n', 'RevJetRevJet\\n', '• Acted as a key troubleshooter for urgent team projects, ensuring timely delivery across multiple company products,\\n', 'bolstering operational efficiency.\\n', '• Distinguished as a top-tier engineer, I created a social network advertising application from the ground up, which\\n', 'subsequently anchored the company’s go-to-market strategy.\\n', 'Software Engineer\\nJan 2015 – Feb 2016\\n', 'TrueDash\\n', '• Pioneered the adoption of Full Stack development, enabling the team to expedite feature rollouts and efficiently meet\\n', 'business objectives.\\n', '• Championed OOP best practices, driving the shift to ES6 and a class-centric architecture; mentored the team on code\\n', 'enhancement techniques.\\n', '• Collaborated with the Backend team to optimize system API, achieving significant reductions in network load and\\n', 'minimizing API calls.\\n', 'Senior Software Engineer\\nApr 2014 – Dec 2014\\n', 'NPTV\\n', '• Together with my team, I developed a cutting-edge reactive framework atop a browser-less engine, incorporating\\n', 'elements like virtual DOM logic, rendering pathways, and layout algorithms.\\n', '• Showcased the capabilities of this new technology by crafting applications rooted in the framework.\\n', '• Revitalized my foundational C++ skills, facilitating the creation of an environment anchored in the V8 JavaScript engine.\\n', 'Furthermore, I introduced a remote debugging agent to amplify debugging functionalities for fellow developers.\\n', 'Front-End Software Engineer\\nSep 2011 - Mar 2014\\n', 'Spotware Systems (cTrader)\\n', '• As an early developer on the team, I established foundational elements for a SaaS low-latency trading platform tailored\\n', 'for Forex exchange. This foundation has sustained and facilitated growth for over a decade.\\n', '• Pioneered a custom JavaScript framework and toolset, emphasizing swift development cycles.\\n', '• Achieved exceptional optimization, enabling real-time charting, network, and data processing. Impressively, the\\n', 'browser-based performance surpassed that of its C native counterpart.\\n', '• Stepped up in a leadership capacity to streamline inter-team communication, catalyzing accelerated product\\n', 'evolution.\\n', 'TECHNICAL SKILLS\\n', 'Languages: TypeScript, GraphQL, JavaScript, SQL (Postgres), MongoDB, HTML/CSS\\nFrameworks: React, Node.js, NestJS, Prisma, Express, Vue, React Native\\nTools: Git, Docker, Google Cloud Platform (GCP), Amazon Web Services (AWS)\\nOther: Software Architecture, Team Coaching, Product Management, Team Leadership, Individual Contributor\\n', 'EDUCATION\\n', 'Altai State Technical University\\nMaster in Computer Science\\n']","Ivan Ulyanov

(+1) 403-000-6344 | aaaan.ulianov@gmail.com | linkedin.com/in/aaaabur/ | Canada, AB

SUMMARY

With over a decade in the tech industry, I’ve transitioned from foundational coding of low-latency platforms to steering transformative
projects across diverse domains.
Specializing in TypeScript, React.js, Node.js, and GraphQL, I utilize cloud technologies to craft robust and scalable solutions. My agility
in project development and passion for continuous improvement have led to recognized contributions and leadership roles. Beyond
mere coding, I’ve pioneered custom frameworks, emphasized clean coding practices, and championed collaborative team dynamics.
With an entrepreneurial spirit, I ensure seamless and rapid product evolution, always striving for excellence.

EXPERIENCE

Full Stack Software Engineer
Oct 2021 – Present

Tilla

• Identified the need for and led the transition from an Express-based prototype to a robust, production-ready NestJS

application, taking full ownership of the project’s success.

• Seamlessly migrated the system from REST API to GraphQL, ensuring the integration of industry best practices and

providing hands-on coaching to the team for easier adaptation to the new tech stack.

• Pioneered the introduction of performance monitoring; upon pinpointing critical inefficiencies, I took responsibility for

redesigning the architecture and logic, achieving a remarkable reduction in request delays from 1 minute to almost
instantaneous responses.

Software Engineer
Mar 2021 – Oct 2021

Deel

• Assumed ownership of a vital legacy admin application, collaboratively devising a strategy with team members to overhaul

its architectural design.

• Introduced pivotal toolbelt enhancements, taking charge of resolving long-standing challenges tied to hot reloading, source

mapping, and debugging.

• Recognizing the potential of TypeScript and modern architectural methodologies, I actively advocated for

company-wide adoption. Taking personal responsibility, I steered the transformation of the admin application,
culminating in a significantly enhanced, clean, and maintainable codebase.

Co-Founder, CTO
Mar 2018 – Jun 2021

RedFenix

• Architected and developed a comprehensive, multifaceted platform which included a variety of web and mobile

applications, specialized WiFi captive portals, and a solid NodeJS backend. - Adapting to emerging tech needs, I self-taught
and integrated new technologies related to WiFi networks and firmware development

• Managed and technically mentored a developer team, ensuring consistent adherence to coding best practices,

effective product development, and efficient deployments.

• Oversaw the seamless deployment of all platform components on the Google Cloud Platform, emphasizing

scalability and reliability.

• Our technical efforts and innovations led us to be part of the Chile SUP program, and I was proud to see our product

succeed in a pilot with a major ISP in Ecuador.

Senior Software Engineer, Architect
Jan 2018 – Mar 2021

Orthodox Union

• Played a lead role in redeveloping the company’s internal CRM backend, transitioning to the innovative Event Sourcing

approach.

• Immersed myself in advanced concepts such as Event Sourcing, CQRS, and Domain-Driven Development. This empowered

me to architect a novel and efficient system and enriched the team’s expertise as I shared my insights and learnings.

• Successful migration from an older system to a modern, more efficient one earned commendations from both the

business department and senior leadership

• Originally onboarded for a specific task, my contributions and the tangible impact they delivered led to extended

long-term contract, entrusting me with even more responsibilities.

Senior Software Developer, Architect
Feb 2016 – Jan 2018

RevJetRevJet

• Acted as a key troubleshooter for urgent team projects, ensuring timely delivery across multiple company products,

bolstering operational efficiency.

• Distinguished as a top-tier engineer, I created a social network advertising application from the ground up, which

subsequently anchored the company’s go-to-market strategy.

Software Engineer
Jan 2015 – Feb 2016

TrueDash

• Pioneered the adoption of Full Stack development, enabling the team to expedite feature rollouts and efficiently meet

business objectives.

• Championed OOP best practices, driving the shift to ES6 and a class-centric architecture; mentored the team on code

enhancement techniques.

• Collaborated with the Backend team to optimize system API, achieving significant reductions in network load and

minimizing API calls.

Senior Software Engineer
Apr 2014 – Dec 2014

NPTV

• Together with my team, I developed a cutting-edge reactive framework atop a browser-less engine, incorporating

elements like virtual DOM logic, rendering pathways, and layout algorithms.

• Showcased the capabilities of this new technology by crafting applications rooted in the framework.

• Revitalized my foundational C++ skills, facilitating the creation of an environment anchored in the V8 JavaScript engine.

Furthermore, I introduced a remote debugging agent to amplify debugging functionalities for fellow developers.

Front-End Software Engineer
Sep 2011 - Mar 2014

Spotware Systems (cTrader)

• As an early developer on the team, I established foundational elements for a SaaS low-latency trading platform tailored

for Forex exchange. This foundation has sustained and facilitated growth for over a decade.

• Pioneered a custom JavaScript framework and toolset, emphasizing swift development cycles.

• Achieved exceptional optimization, enabling real-time charting, network, and data processing. Impressively, the

browser-based performance surpassed that of its C native counterpart.

• Stepped up in a leadership capacity to streamline inter-team communication, catalyzing accelerated product

evolution.

TECHNICAL SKILLS

Languages: TypeScript, GraphQL, JavaScript, SQL (Postgres), MongoDB, HTML/CSS
Frameworks: React, Node.js, NestJS, Prisma, Express, Vue, React Native
Tools: Git, Docker, Google Cloud Platform (GCP), Amazon Web Services (AWS)
Other: Software Architecture, Team Coaching, Product Management, Team Leadership, Individual Contributor

EDUCATION

Altai State Technical University
Master in Computer Science

"
82,source/Artur Nagimov.pdf,"['CONTACT\\n', 'E-mail: rosaaalav.nagimov@gmail.com Telegram:\\n@roaaaslavnagimov Tel.: +1 408 000 7296\\n', 'PROFILE\\n', ""Frontend developer with 1.5 years of hands-on experience\\nin React/Next development, having worked in both\\ncorporate and freelance settings. I'm fueled by a strong\\npassion for continuous learning and professional growth,\\nand I'm now embarking on a journey to broaden my\\nexpertise to encompass backend development as well.\\n"", 'EDUCATION\\n', 'FRONTEND DEVELOPER • JULY 2023\\n', 'Professional certification by Meta\\n', 'BACHELOR’S DEGREE\\nAPPLIED INFORMATICS IN ECONOMICS JULY 2023\\nSiberian Institute of Business and Information Technology\\nTomsk, Russia\\n', 'KEY SKILLS\\n', 'Semantic HTML layout React.js\\nNext.js\\nJavaScript / TypeScript\\nCSS preprocessors and libraries Redux and Redux Toolkit\\nJest and React Testing Library\\n', 'LANGUAGES\\n', 'English (B2) Russian - native.\\n', 'EXPERIENCE\\n', 'FRONTEND DEVELOPER • JUNE 2023—PRESENT\\n', 'Freelance • CA, San Jose\\n', 'Working on various projects, including:\\n-\\nDeveloping user interfaces and components for a\\n', 'web-based CRM system (Peredelano Projects,\\ncommunity-based development). Stack: React,\\nTypeScript, Vite, Tailwind.\\n-\\nImplementing a card game for a\\n', 'Telegram bot Web App (private customer, solo\\ndevelopment). Stack: React, Redux, SCSS.\\n-\\nCreating a functional web application as a landing\\n', 'page for a mobile app, implemented as a fully static exported\\nNext.js app with dynamic routing, structure, and language\\nversions (private customer, only frontend developer on the\\nteam). Stack: Next.js (SSG), TypeScript, Jest, SCSS.\\n', 'FRONTEND DEVELOPER • AUGUST 2022—MAY 2023\\nEventinc\\nGmbH •\\nHamburg,\\nGermany\\nWorking as a\\npart of a\\ndevelopment\\nteam.\\n-\\nImplemented layout and functional changes, as well\\n', 'as developed new components, based on Figma mockups.\\nThis included design adjustments and the creation of a\\nprivate-data filtering system for the internal messenger to\\nreduce fraud. Additionally, refactored the filtering system to\\nenhance its client-side capabilities, thereby decreasing server\\nusage and the number of API calls.\\n-\\nIdentified and resolved a wide array of visual bugs,\\n', 'actively participated in code reviews, and contributed to the\\ninner-development-QA process.\\n', '-\\nCreated unit tests for components using Jest and\\n', 'React Testing Library. Developed tests for Cypress E2E\\ntesting.\\n-\\nExecuted the development of A/B tests to\\n', 'facilitate data-driven decisions regarding new features.\\n- Engaged in refactoring legacy code.\\nStack: Next.js, TypeScript, SCSS, LESS, Jest, Cypress.\\n', 'FRONTEND DEVELOPER • MARCH 2022—JULY 2022\\n', 'Freelance • Phnom Penh, Cambodia\\n', 'Developed static-content SPA’s with inner routing and form\\nhandling, utilizing Bootstrap styles and components, and\\nbased on Figma mockups and existing sites.\\nStack: React, React Router (HashRouter), Bootstrap, Redux.\\n']","CONTACT

E-mail: rosaaalav.nagimov@gmail.com Telegram:
@roaaaslavnagimov Tel.: +1 408 000 7296

PROFILE

Frontend developer with 1.5 years of hands-on experience
in React/Next development, having worked in both
corporate and freelance settings. I'm fueled by a strong
passion for continuous learning and professional growth,
and I'm now embarking on a journey to broaden my
expertise to encompass backend development as well.

EDUCATION

FRONTEND DEVELOPER • JULY 2023

Professional certification by Meta

BACHELOR’S DEGREE
APPLIED INFORMATICS IN ECONOMICS JULY 2023
Siberian Institute of Business and Information Technology
Tomsk, Russia

KEY SKILLS

Semantic HTML layout React.js
Next.js
JavaScript / TypeScript
CSS preprocessors and libraries Redux and Redux Toolkit
Jest and React Testing Library

LANGUAGES

English (B2) Russian - native.

EXPERIENCE

FRONTEND DEVELOPER • JUNE 2023—PRESENT

Freelance • CA, San Jose

Working on various projects, including:
-
Developing user interfaces and components for a

web-based CRM system (Peredelano Projects,
community-based development). Stack: React,
TypeScript, Vite, Tailwind.
-
Implementing a card game for a

Telegram bot Web App (private customer, solo
development). Stack: React, Redux, SCSS.
-
Creating a functional web application as a landing

page for a mobile app, implemented as a fully static exported
Next.js app with dynamic routing, structure, and language
versions (private customer, only frontend developer on the
team). Stack: Next.js (SSG), TypeScript, Jest, SCSS.

FRONTEND DEVELOPER • AUGUST 2022—MAY 2023
Eventinc
GmbH •
Hamburg,
Germany
Working as a
part of a
development
team.
-
Implemented layout and functional changes, as well

as developed new components, based on Figma mockups.
This included design adjustments and the creation of a
private-data filtering system for the internal messenger to
reduce fraud. Additionally, refactored the filtering system to
enhance its client-side capabilities, thereby decreasing server
usage and the number of API calls.
-
Identified and resolved a wide array of visual bugs,

actively participated in code reviews, and contributed to the
inner-development-QA process.

-
Created unit tests for components using Jest and

React Testing Library. Developed tests for Cypress E2E
testing.
-
Executed the development of A/B tests to

facilitate data-driven decisions regarding new features.
- Engaged in refactoring legacy code.
Stack: Next.js, TypeScript, SCSS, LESS, Jest, Cypress.

FRONTEND DEVELOPER • MARCH 2022—JULY 2022

Freelance • Phnom Penh, Cambodia

Developed static-content SPA’s with inner routing and form
handling, utilizing Bootstrap styles and components, and
based on Figma mockups and existing sites.
Stack: React, React Router (HashRouter), Bootstrap, Redux.

"
83,source/Anton Garkavy.pdf,"['Anton Garkavy \\nEmail: anton2906x@gmail.com \\n', 'Software Engineer Intern \\nMobile: +7-929-111-26-34 \\n', ' \\n', 'EDUCATION \\n', 'Belarusian State University \\nMinsk, Belarus \\n', 'Bachelor’s degree in Computer Science \\nSeptember 2018 — Expected 2022 \\n', 'Yandex School of Data Science \\nMoscow, Russia \\n', 'Master’s level program, Machine Learning development track \\nSeptember 2019 — Expected 2021 \\n', 'Cumulative GPA: 4.63/5.00 \\nRelevant courses: Probability and Statistics, Machine Learning, Computer Vision, Natural Language Processing, Deep \\nLearning, Reinforcement Learning, Python, C++, GoLang, Algorithms and Data Structures, BigData, Parallel and \\nDistributed Computations \\n', ' \\n', 'WORK   EXPERIENCE \\n', 'Yandex \\nMinsk, Belarus \\n', 'Software Engineer Intern \\nJuly 2020 — October 2020 \\n', 'Used Python for exploring machine learning algorithms used to predicting travel times for Yandex.Taxi services with \\n50M+ users and 2B+ rides \\nDeep neural networks of various architectures were trained, however, incorporating further structure from the road \\nnetwork proved difficult \\n', '• Besides exploring machine learning models, I also used C++ for testing & bug fixing taxi backend services \\n', 'Yandex \\nMoscow, Russia \\n', 'Software Engineer Intern \\nJuly 2019 — October 2019 \\n', 'Used C++ to implement a new approach for finding similar images using state-of-the-art machine learning algorithms \\nfor Yandex.Images service with 6K+ QPS. Gain a 4x time boost \\n', '• Optimized the logic for determining the similarity of texts. Gain a 1.2x memory reduction \\n• Experience with BigData, MapReduce technology \\n', 'PROJECTS \\n', 'JPEG decoder: Baseline sequential mode of JPEG decoder, written in C++ using OOP and various algorithms such as \\nHuffman decoding \\nCode style checker for C++: The utility checks the names used in the code for compliance with the Google \\nStyleguide, and also looks for potential typos in these names relying on the Levenshtein distance. Written in C++ using \\nthe Clang tooling library \\nUkrainian-Russian translator: Written in Python with Sklearn library, using embedding space mapping with optimal \\ntransformation derived from SVD decomposition. Used public dataset with 1M word pairs \\n', 'AWARDS \\n', 'ACM ICPC, NEERC Western Subregional Contest \\nMinsk, Belarus — October, 2018 \\n', '• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion \\n• Place 20/46 — 3rd degree award \\n', 'Individual Olympiad in informatics \\nSaint-Petersburg, Russia — March 2018 \\n', '• Sports programming competition among schoolchildren of Belarus, Russia and Kazakhstan \\n• Place 52/374 — 2nd degree award \\n', 'Belarusian National Olympiad in Informatics \\nMinsk, Belarus — March 2018 \\n', '• National level \\n• Place 45/124 — 3rd degree award \\n', 'Top 5% on Codeforces — Artemx \\n', ' \\n', 'OTHER \\n', 'Competitive programming mentor — preparing students for Belarusian National Olympiad in Informatics and other \\nprogramming contests \\n', '• \\n• \\n', '• \\n', '• \\n', '• \\n', '• \\n', '• \\n', '• \\n', '• \\n']","Anton Garkavy 
Email: anton2906x@gmail.com 

Software Engineer Intern 
Mobile: +7-929-111-26-34 

 

EDUCATION 

Belarusian State University 
Minsk, Belarus 

Bachelor’s degree in Computer Science 
September 2018 — Expected 2022 

Yandex School of Data Science 
Moscow, Russia 

Master’s level program, Machine Learning development track 
September 2019 — Expected 2021 

Cumulative GPA: 4.63/5.00 
Relevant courses: Probability and Statistics, Machine Learning, Computer Vision, Natural Language Processing, Deep 
Learning, Reinforcement Learning, Python, C++, GoLang, Algorithms and Data Structures, BigData, Parallel and 
Distributed Computations 

 

WORK   EXPERIENCE 

Yandex 
Minsk, Belarus 

Software Engineer Intern 
July 2020 — October 2020 

Used Python for exploring machine learning algorithms used to predicting travel times for Yandex.Taxi services with 
50M+ users and 2B+ rides 
Deep neural networks of various architectures were trained, however, incorporating further structure from the road 
network proved difficult 

• Besides exploring machine learning models, I also used C++ for testing & bug fixing taxi backend services 

Yandex 
Moscow, Russia 

Software Engineer Intern 
July 2019 — October 2019 

Used C++ to implement a new approach for finding similar images using state-of-the-art machine learning algorithms 
for Yandex.Images service with 6K+ QPS. Gain a 4x time boost 

• Optimized the logic for determining the similarity of texts. Gain a 1.2x memory reduction 
• Experience with BigData, MapReduce technology 

PROJECTS 

JPEG decoder: Baseline sequential mode of JPEG decoder, written in C++ using OOP and various algorithms such as 
Huffman decoding 
Code style checker for C++: The utility checks the names used in the code for compliance with the Google 
Styleguide, and also looks for potential typos in these names relying on the Levenshtein distance. Written in C++ using 
the Clang tooling library 
Ukrainian-Russian translator: Written in Python with Sklearn library, using embedding space mapping with optimal 
transformation derived from SVD decomposition. Used public dataset with 1M word pairs 

AWARDS 

ACM ICPC, NEERC Western Subregional Contest 
Minsk, Belarus — October, 2018 

• Competition in sports programming among teams of universities of the North Eastern Europe, Western Subregion 
• Place 20/46 — 3rd degree award 

Individual Olympiad in informatics 
Saint-Petersburg, Russia — March 2018 

• Sports programming competition among schoolchildren of Belarus, Russia and Kazakhstan 
• Place 52/374 — 2nd degree award 

Belarusian National Olympiad in Informatics 
Minsk, Belarus — March 2018 

• National level 
• Place 45/124 — 3rd degree award 

Top 5% on Codeforces — Artemx 

 

OTHER 

Competitive programming mentor — preparing students for Belarusian National Olympiad in Informatics and other 
programming contests 

• 
• 

• 

• 

• 

• 

• 

• 

• 

"
84,source/Igor Rodin.pdf,"['Igor Rodin \\n', 'Email: i.rod1245@gmail.com \\nPhone: +7 999 735 99 92 \\n', 'About Me \\n', 'A Senior Frontend Engineer with strong analytics experience. My motivation loop: learn the problem, \\ntake ownership, make things done, analyze impact. Working with a passion for details and the best \\nuser experience. Openminded, proactive and focused on delivering results. \\n', ' \\n', 'Languages/Frameworks \\n', 'Expert in JavaScript, React, and Redux \\nConfident in VueJS \\nProficient in Python, PHP, SQL, Django, and Laravel \\n', ' \\n', 'Work experience \\n', 'HubHaus, Growth Engineer / Full Stack Engineer (10/2018 - present) \\n', 'VueJS universal app architecture + CI/CD configuration (VueJS, Docker, AWS ECS) \\n', 'Designed and created a VueJS project generator with preconfigured internal packages including authentication \\nand a UI toolkit. Prepared npm packages for generator. \\n', 'Web scraping platform (Python, Scrapy, AWS FireHose) \\n', 'Designed and created a platform for continuous web scraping. The platform provides an infrastructure for creating \\nscrapers, monitoring their progress and measuring data loss. \\n', 'AWS SageMaker model CI/CD (Docker, Python, AWS ECS) \\n', 'Dockerized an ML model, created an API wrapper, set up an infrastructure for deployment, and integrated a UI to \\ninteract with the model. \\n', 'ergeon, Senior Full Stack Engineer (05/2018 - 10/2018) \\n', 'Frontend projects migration (React, React SSR, Redux) \\n', 'ergeon bought the ezhome codebase. Cleaned up and refactored the frontend app for a new product. \\n', 'ezhome, Senior Frontend Engineer / Architect / Frontend Lead (09/2015 - 05/2018) \\n', 'A/B test platform and analytics integration for customer-facing apps (Segment, Google Analytics, \\n', 'Mixpanel, Google Optimize) \\nProject lead for analytics integration. Developed naming conventions and event data structures. Guided mobile \\nengineers with implementation and reviewed all platform integration results. Interacted with data engineers to \\nreceive requirements and feedback for analytics data. Implemented and integrated cross-project A/B testing \\nplatform. \\n', 'React universal app architecture (React, React SSR, Redux) \\n', 'Early proponent of universal (isomorphic) app architecture. Developed React-based SSR architecture, discovered \\nand fixed many cross-platform problems. Led frontend team to develop apps based on that architecture. \\n', 'Kibbit, Senior Frontend Developer / Architect (01/2015 - 09/2015) \\n', 'AngularJS frontend architecture (AngularJS 1.x) \\n', 'Created an AngularJS app architecture. Led frontend development. \\n', 'Hotelbook service, Senior Frontend Developer / Architect (06/2014 - 01/2015) \\nFlocktory, Senior Developer, Internal Interfaces (12/2013 - 06/2014) \\nLinguaLeo, JavaScript Developer (08/2012 - 11/2013) \\n', 'Education \\n', '09/2010 – 01/2012 \\nCisco Networking Academy, Obninsk, Kaluga region, Russia \\n', ""09/2010 – 06/2012 \\nMaster's degree specializing in Information Technology \\nScientific Research Nuclear University MEPhl, Faculty of Cybernetics \\nObninsk, Kaluga region, Russia \\n"", ' \\n', '09/2006 – 07/2010 \\nBachelor’s degree specializing in Computer Systems, Networks and Technologies \\nScientific Research Nuclear University MEPhI, Faculty of Cybernetics \\nObninsk, Kaluga region, Russia \\n', ' \\n', 'Personality \\n', 'Strengths \\n', '● Spatial thinking \\n● Ability to see from another person’s point of view and approach situations from different \\n', 'perspectives. \\n', 'Approach to work \\n', '● Be flexible, be detail-oriented, and think long term. Always find the right balance between speed and \\n', 'quality. \\n', ""● Be passionate about what you are doing and think about the product as a whole. \\n● See task/decisions/roadmap from a business/product owner's perspective. Always try to understand \\n"", 'other points of view. \\n', '● Having a well-thought-through architecture is the key to success. \\n● QA and delivering high-quality products is important. \\n', ' \\nPersonal Interests \\n', 'Rock-climbing (was a coach for rock-climbing university team), downhill, cycling \\n']","Igor Rodin 

Email: i.rod1245@gmail.com 
Phone: +7 999 735 99 92 

About Me 

A Senior Frontend Engineer with strong analytics experience. My motivation loop: learn the problem, 
take ownership, make things done, analyze impact. Working with a passion for details and the best 
user experience. Openminded, proactive and focused on delivering results. 

 

Languages/Frameworks 

Expert in JavaScript, React, and Redux 
Confident in VueJS 
Proficient in Python, PHP, SQL, Django, and Laravel 

 

Work experience 

HubHaus, Growth Engineer / Full Stack Engineer (10/2018 - present) 

VueJS universal app architecture + CI/CD configuration (VueJS, Docker, AWS ECS) 

Designed and created a VueJS project generator with preconfigured internal packages including authentication 
and a UI toolkit. Prepared npm packages for generator. 

Web scraping platform (Python, Scrapy, AWS FireHose) 

Designed and created a platform for continuous web scraping. The platform provides an infrastructure for creating 
scrapers, monitoring their progress and measuring data loss. 

AWS SageMaker model CI/CD (Docker, Python, AWS ECS) 

Dockerized an ML model, created an API wrapper, set up an infrastructure for deployment, and integrated a UI to 
interact with the model. 

ergeon, Senior Full Stack Engineer (05/2018 - 10/2018) 

Frontend projects migration (React, React SSR, Redux) 

ergeon bought the ezhome codebase. Cleaned up and refactored the frontend app for a new product. 

ezhome, Senior Frontend Engineer / Architect / Frontend Lead (09/2015 - 05/2018) 

A/B test platform and analytics integration for customer-facing apps (Segment, Google Analytics, 

Mixpanel, Google Optimize) 
Project lead for analytics integration. Developed naming conventions and event data structures. Guided mobile 
engineers with implementation and reviewed all platform integration results. Interacted with data engineers to 
receive requirements and feedback for analytics data. Implemented and integrated cross-project A/B testing 
platform. 

React universal app architecture (React, React SSR, Redux) 

Early proponent of universal (isomorphic) app architecture. Developed React-based SSR architecture, discovered 
and fixed many cross-platform problems. Led frontend team to develop apps based on that architecture. 

Kibbit, Senior Frontend Developer / Architect (01/2015 - 09/2015) 

AngularJS frontend architecture (AngularJS 1.x) 

Created an AngularJS app architecture. Led frontend development. 

Hotelbook service, Senior Frontend Developer / Architect (06/2014 - 01/2015) 
Flocktory, Senior Developer, Internal Interfaces (12/2013 - 06/2014) 
LinguaLeo, JavaScript Developer (08/2012 - 11/2013) 

Education 

09/2010 – 01/2012 
Cisco Networking Academy, Obninsk, Kaluga region, Russia 

09/2010 – 06/2012 
Master's degree specializing in Information Technology 
Scientific Research Nuclear University MEPhl, Faculty of Cybernetics 
Obninsk, Kaluga region, Russia 

 

09/2006 – 07/2010 
Bachelor’s degree specializing in Computer Systems, Networks and Technologies 
Scientific Research Nuclear University MEPhI, Faculty of Cybernetics 
Obninsk, Kaluga region, Russia 

 

Personality 

Strengths 

● Spatial thinking 
● Ability to see from another person’s point of view and approach situations from different 

perspectives. 

Approach to work 

● Be flexible, be detail-oriented, and think long term. Always find the right balance between speed and 

quality. 

● Be passionate about what you are doing and think about the product as a whole. 
● See task/decisions/roadmap from a business/product owner's perspective. Always try to understand 

other points of view. 

● Having a well-thought-through architecture is the key to success. 
● QA and delivering high-quality products is important. 

 
Personal Interests 

Rock-climbing (was a coach for rock-climbing university team), downhill, cycling 

"
85,source/Serj Mkrtchyan.pdf,"[' \\n', 'Serj Mkrtchyan \\n', 'Worldwide (Remote) \\n', ' \\n', '    serj.onllll@gmail.com  \\n', 'Summary \\n', 'I am an engineer with very wide range of knowledge, who loves interesting tasks. Always ready to dive into new \\ntechnology/language if it perfectly suits. \\n \\n', 'Backend: SQL, Python, Golang \\nDatabases: PostgreSQL, Redis, IBM db2 \\n', 'Experience \\n', 'Software Engineer \\nRASSE (I-Teco Group) \\n', 'Sep 2017 - Present (3 years 2 months +) \\nDeveloped system of government inspections. \\n', ' \\n', 'Technologies: SQL, PL/SQL, Python, Golang, Java, docker, ETL, bash, git, db2, PostgreSQL, Redis, \\nElasticsearch, CI/CD, Ansible \\n', ' \\n', 'Key Achievements: \\n- Expanded system functionality by the terms of reference \\n- Gained perfomance and reduced application load by adding several services to monolith \\n- Gained system perfomance by optimizing SQL-queries & procedures \\n- Designed APIs architecture and developed services \\n- Designed architecture of database and entity relations \\n- Made system more stable by resolving locks and deadlocks \\n- Coordinated works with team lead \\n- Successfully migrated all data between old version of system and new one \\n- Successfully made 15 releases \\n- Integrated with several external systems \\n- Automated common routines \\n- Worked with rare products like IBM db2, IBM Websphere, AIX, Jython \\n- Defended against hacker attack \\n', ' \\n', 'Database Developer \\nElar corporation \\nJun 2016 - Aug 2017 (1 year 3 months) \\nI developed and maintained retro-conversion projects (data recognition of old archives, like First World \\nWar archive and Second World War archives) http://podvignaroda.ru \\n', ' \\n', 'Technologies: \\nSQL, T-SQL, VBA, MSSQL, MSAccess, MySQL, ETL \\n', ' \\n', 'Key Achievements: \\n- Several finished projects of data recognition \\n- Increased accuracy of data by creating vba scripts \\n- Increased efficiency of project by integrating dictionaries, T-SQL procedures, special functions etc. \\n', ' \\n', '  iOS Developer \\n', ""Custom project \\nAug 2015 - Oct 2015 (3 months) \\nAs a university project, I've made an iOS application for dating with locations of every user near you. \\n"", ' \\n', 'Technologies: Objective-C, MapKit, Layout Containers, MySQL, php \\nKey Achievements: Finished application \\n', ' \\n', '  Web Developer \\n', 'Custom projects \\nOct 2013 - Mar 2014 (6 months) \\nAs a freelancer I created several websites, mostly landings. My responsibility was everything listed in \\nstatement of work. Most often: frontend, minor backend changes, server settings \\n', ' \\n', 'Technologies: HTML, CSS, JQuery, php \\nKey Achievements: Developed websites with adaptive design as from scratch as working with \\nWordPress \\n', ' \\nEducation \\n', ""  Moscow State University of Economics, Statistics and Informatics (MESI) \\nBachelor's degree \\n2011 - 2015 \\n"", ' \\nSkills \\n', 'SQL • Python • Go (Programming Language) • PostgreSQL • Redis • Architecture • IBM Db2 \\n']"," 

Serj Mkrtchyan 

Worldwide (Remote) 

 

    serj.onllll@gmail.com  

Summary 

I am an engineer with very wide range of knowledge, who loves interesting tasks. Always ready to dive into new 
technology/language if it perfectly suits. 
 

Backend: SQL, Python, Golang 
Databases: PostgreSQL, Redis, IBM db2 

Experience 

Software Engineer 
RASSE (I-Teco Group) 

Sep 2017 - Present (3 years 2 months +) 
Developed system of government inspections. 

 

Technologies: SQL, PL/SQL, Python, Golang, Java, docker, ETL, bash, git, db2, PostgreSQL, Redis, 
Elasticsearch, CI/CD, Ansible 

 

Key Achievements: 
- Expanded system functionality by the terms of reference 
- Gained perfomance and reduced application load by adding several services to monolith 
- Gained system perfomance by optimizing SQL-queries & procedures 
- Designed APIs architecture and developed services 
- Designed architecture of database and entity relations 
- Made system more stable by resolving locks and deadlocks 
- Coordinated works with team lead 
- Successfully migrated all data between old version of system and new one 
- Successfully made 15 releases 
- Integrated with several external systems 
- Automated common routines 
- Worked with rare products like IBM db2, IBM Websphere, AIX, Jython 
- Defended against hacker attack 

 

Database Developer 
Elar corporation 
Jun 2016 - Aug 2017 (1 year 3 months) 
I developed and maintained retro-conversion projects (data recognition of old archives, like First World 
War archive and Second World War archives) http://podvignaroda.ru 

 

Technologies: 
SQL, T-SQL, VBA, MSSQL, MSAccess, MySQL, ETL 

 

Key Achievements: 
- Several finished projects of data recognition 
- Increased accuracy of data by creating vba scripts 
- Increased efficiency of project by integrating dictionaries, T-SQL procedures, special functions etc. 

 

  iOS Developer 

Custom project 
Aug 2015 - Oct 2015 (3 months) 
As a university project, I've made an iOS application for dating with locations of every user near you. 

 

Technologies: Objective-C, MapKit, Layout Containers, MySQL, php 
Key Achievements: Finished application 

 

  Web Developer 

Custom projects 
Oct 2013 - Mar 2014 (6 months) 
As a freelancer I created several websites, mostly landings. My responsibility was everything listed in 
statement of work. Most often: frontend, minor backend changes, server settings 

 

Technologies: HTML, CSS, JQuery, php 
Key Achievements: Developed websites with adaptive design as from scratch as working with 
WordPress 

 
Education 

  Moscow State University of Economics, Statistics and Informatics (MESI) 
Bachelor's degree 
2011 - 2015 

 
Skills 

SQL • Python • Go (Programming Language) • PostgreSQL • Redis • Architecture • IBM Db2 

"
86,source/Alan Abdirasul.pdf,"['Alan Abdirasul \\nSenior Java Software Engineer \\n|aаааааааbdirasul@gmail.com \\n', 'Summary \\n \\n', 'Experienced Software Engineer with 5+ years of experience participating in all aspects of the software development lifecycle, which includes estimating, \\ntechnical design, implementation documentation, testing, deployment, and support of applications developed for various clients. \\n', 'Skills   \\n \\n', '• Programming Languages: Java, Kotlin, JavaScript, TypeScript \\n', '• Backend Technologies: Spring boot, WebFlux, Gradle, Maven, RabbitMQ, Kafka, WebSocket, Spring Cloud, Hibernate, GraphQL, gRPC \\n', '• Databases: PostgreSql, MySql, MongoDB, Redis, Oracle Database, R2DBC \\n', '• Frontend Technologies: React, Redux, HTML, CSS \\n', '• Software development tools: Git, Github, Gitlab, CodeCommit, CI/CD, CircleCi, Jenkins, Grafana, Prometheus, Graphite, JUnit, Mockito \\n', '• Cloud: Docker, Kubernetes, AWS, Digital Ocean \\n', '• Soft Skills: Leadership, communication, problem-solving, adaptability, teamwork, time management, critical thinking, emotional intelligence. \\n', 'Experience   \\n \\n', 'Lead Java Software Engineer \\nPeaksoft \\nChicago, Illinois USA(Remote) \\n05/2022 - Present \\n', '• Deployed and scaled applications on AWS. \\n', '• Effectively communicated within a multi-disciplined team, across 23 locations and 5 time zones. \\n', '• Managed task assignments and priorities for timely deliveries. \\n', '• Collaborated with stakeholders to prioritize system enhancements, boosting business process efficiency by 27%. \\n', '• Introduced pair programming, elevating code quality by 35% and accelerating project delivery. \\n', '• Orchestrated successful implementation of microservices architecture for improved scalability. \\n', '• Mentored and supported 18 junior and middle developers, enhancing code quality by 30%. \\n', ' \\n', 'Senior Software Engineer \\nPeaksoft \\nChicago, Illinois USA(Remote) 05/2021 - 05/2022 \\n', '• Enhanced application responsiveness and scalability through algorithm optimization.. \\n', '• Skillfully integrated third-party systems, contributing to a 23% increase in global revenue. \\n', '• IImplemented and optimized Grafana deployments, elevating application monitoring capabilities. \\n', '• Automated software delivery processes using CircleCI for efficient deployment. \\n', ' \\n', 'Software Engineer \\nInclusive Technology \\nBishkek, Kyrgyzstan(On-site) \\n11/2020 - 06/2021 \\n', '• Optimized workflows, reducing development time by 25%. \\n', '• Orchestrated efficient communication across frontend, backend, and AQA teams, advancing deadlines by 12%. \\n', '• Guided 6 junior and middle developers, fostering growth and development. \\n', '• Engineered innovative features, including real-time grammar checking. \\n', 'Full-Stack Developer \\nAksoft \\nBishkek, Kyrgyzstan(On-site) \\n05/2018 - 11/2020 \\n', '• Developed scalable applications using Java, JavaScript, React.js, and Redux.js. \\n', '• Optimized database designs and query performance, resulting in more efficient data management. \\n', '• Collaborated with cross-functional teams to gather requirements and deliver solutions tailored to client needs. \\n', '• Implemented CI/CD pipelines using CircleCI, achieving a significant 70% boost in deployment efficiency. \\n', ""• Leveraged Docker for containerization, which reduced deployment time by 32% while improving the app's scalability.. \\n"", '• Managed projects efficiently through the use of Gradle and Maven, facilitating coordinated efforts. \\n', '• Leveraged Amazon S3 to enhance metadata storage and retrieval within Spring MVC projects. \\n', ' \\nEducation   \\n \\n', ""Computer Science, Bachelor's Degree \\nKirgizistan-Türkiye Manas Üniversitesi \\n09/2017 - 09/2020 \\n"", 'Mentorship   \\n \\n', ""• CodeWise Academy: I employed interactive teaching methods, real-world examples, and hands-on coding projects to enhance students' grasp of Java \\nprogramming concepts. I led face-to-face Zoom sessions accommodating diverse language preferences, inspire critical thinking, conduct assessments, and \\nhave successfully guided over 180 students, with 87 securing jobs, fostering their growth through mentoring and code reviews. (09/2022 - Present) \\n• Avenir Education Company: Instructed students in backend development (Spring, Java, JDBC), guiding coding assignments, configuring CI/CD \\npipelines, and leading projects. Mentored 300+ students in web development with Java-based backend systems, conducting code reviews and providing \\ncareer advice for success. \\n(03/2020 - 01/2022) \\n""]","Alan Abdirasul 
Senior Java Software Engineer 
|aаааааааbdirasul@gmail.com 

Summary 
 

Experienced Software Engineer with 5+ years of experience participating in all aspects of the software development lifecycle, which includes estimating, 
technical design, implementation documentation, testing, deployment, and support of applications developed for various clients. 

Skills   
 

• Programming Languages: Java, Kotlin, JavaScript, TypeScript 

• Backend Technologies: Spring boot, WebFlux, Gradle, Maven, RabbitMQ, Kafka, WebSocket, Spring Cloud, Hibernate, GraphQL, gRPC 

• Databases: PostgreSql, MySql, MongoDB, Redis, Oracle Database, R2DBC 

• Frontend Technologies: React, Redux, HTML, CSS 

• Software development tools: Git, Github, Gitlab, CodeCommit, CI/CD, CircleCi, Jenkins, Grafana, Prometheus, Graphite, JUnit, Mockito 

• Cloud: Docker, Kubernetes, AWS, Digital Ocean 

• Soft Skills: Leadership, communication, problem-solving, adaptability, teamwork, time management, critical thinking, emotional intelligence. 

Experience   
 

Lead Java Software Engineer 
Peaksoft 
Chicago, Illinois USA(Remote) 
05/2022 - Present 

• Deployed and scaled applications on AWS. 

• Effectively communicated within a multi-disciplined team, across 23 locations and 5 time zones. 

• Managed task assignments and priorities for timely deliveries. 

• Collaborated with stakeholders to prioritize system enhancements, boosting business process efficiency by 27%. 

• Introduced pair programming, elevating code quality by 35% and accelerating project delivery. 

• Orchestrated successful implementation of microservices architecture for improved scalability. 

• Mentored and supported 18 junior and middle developers, enhancing code quality by 30%. 

 

Senior Software Engineer 
Peaksoft 
Chicago, Illinois USA(Remote) 05/2021 - 05/2022 

• Enhanced application responsiveness and scalability through algorithm optimization.. 

• Skillfully integrated third-party systems, contributing to a 23% increase in global revenue. 

• IImplemented and optimized Grafana deployments, elevating application monitoring capabilities. 

• Automated software delivery processes using CircleCI for efficient deployment. 

 

Software Engineer 
Inclusive Technology 
Bishkek, Kyrgyzstan(On-site) 
11/2020 - 06/2021 

• Optimized workflows, reducing development time by 25%. 

• Orchestrated efficient communication across frontend, backend, and AQA teams, advancing deadlines by 12%. 

• Guided 6 junior and middle developers, fostering growth and development. 

• Engineered innovative features, including real-time grammar checking. 

Full-Stack Developer 
Aksoft 
Bishkek, Kyrgyzstan(On-site) 
05/2018 - 11/2020 

• Developed scalable applications using Java, JavaScript, React.js, and Redux.js. 

• Optimized database designs and query performance, resulting in more efficient data management. 

• Collaborated with cross-functional teams to gather requirements and deliver solutions tailored to client needs. 

• Implemented CI/CD pipelines using CircleCI, achieving a significant 70% boost in deployment efficiency. 

• Leveraged Docker for containerization, which reduced deployment time by 32% while improving the app's scalability.. 

• Managed projects efficiently through the use of Gradle and Maven, facilitating coordinated efforts. 

• Leveraged Amazon S3 to enhance metadata storage and retrieval within Spring MVC projects. 

 
Education   
 

Computer Science, Bachelor's Degree 
Kirgizistan-Türkiye Manas Üniversitesi 
09/2017 - 09/2020 

Mentorship   
 

• CodeWise Academy: I employed interactive teaching methods, real-world examples, and hands-on coding projects to enhance students' grasp of Java 
programming concepts. I led face-to-face Zoom sessions accommodating diverse language preferences, inspire critical thinking, conduct assessments, and 
have successfully guided over 180 students, with 87 securing jobs, fostering their growth through mentoring and code reviews. (09/2022 - Present) 
• Avenir Education Company: Instructed students in backend development (Spring, Java, JDBC), guiding coding assignments, configuring CI/CD 
pipelines, and leading projects. Mentored 300+ students in web development with Java-based backend systems, conducting code reviews and providing 
career advice for success. 
(03/2020 - 01/2022) 

"
87,source/Polina Gorbunova.pdf,"['Polina Gorbunova\\n', 'Backend Software Engineer\\n', 'EXPERIENCE\\n', 'Teacher Assistant, De Anza College; Cupertino, Ca\\nJanuary-May 2019\\n', 'I was a teacher assistant for Object Oriented Analysis and Design. Developed ﬂow charts, state/event diagrams,\\nconceptual class diagrams. Tutored students individually and in groups.\\n', 'PROJECTS\\n', 'Movie app\\nPython, 2021\\n', '– Used The movie DB API to fetch information on various movies by popular, newly released, search requests.\\n', '– Implemented the backend CRUD operations with SQLite for saving movies to watch/watched list.\\n–\\nIncreased the loading speed by multithreading API requests to deliver high quality posters for multiple\\n', 'movies faster (from ~10 seconds to ~2 seconds).\\n', '– Developed frontend features (grid and slider for movie presentation, bu�on updates) using Tkinter.\\n', 'Android Weather Application\\nJAVA, 2019\\n', '– Created an Android Weather App reading data in JSON from a website.\\n', '– Incorporated in the app the options of changing the location to show the weather.\\n–\\nThe app has the functionality to open GoogleMaps, copy location to the clipboard and share info\\n', 'via message.\\n', 'Cursed Zombie Game, TeamLead of 6\\nC++, 2019\\n', '– Implemented Object Oriented design developing the structure of the game. Used SFML library.\\n', '– Maintained detailed and accurate notes and documentation for various tasks.\\n– Got the best game award for the CIS29 class.\\n', 'Backend for a car store webAPI\\nJAVA, 2018\\n', '– Created the project that implemented CRUD operations for car database.\\n', '– Server and client side of the API (using proxy design).\\n– Created self healing code, used multithreading, Tomcat.\\n', 'EDUCATION\\n', 'De Anza College; Computer Information Science Major GPA 3.98\\n2019-2021\\n', 'Saint Petersburg State University of Aerospace Instrumentation; Management GPA 3.72\\n2011-2015\\n', '- Bachelor’s Degree, graduated with Honors.\\n', 'PUBLICATIONS\\n', 'System design for choosing a location for opening a retail store using MATLAB Fuzzy Logic module.\\nApr 13, 2015\\n', 'SKILLS\\n', 'Python, matplotlib, numpy, pandas, BeautifulSoup, Jupyter Notebook, tkinter Java,\\nTomcat, JavaEE, Eclipse, AndroidStudio, JDBC, JSP, Core Java),\\n', 'C++, STL, DBs, SQL, SQLite, PostgreSQL, JSON, regex, HTML, CSS,\\nUNIX/LINUX/iOS/MacOS/Windows(CLI), Git.\\n', 'Elmsford ct., Cupertino, Ca 95014\\n', '(916) 000 88 83\\n', 'polina78.gorbunova@yahoo.com\\n', 'h�ps://www.linkedin.com/in/pol-gorbun/\\n', 'h�ps://github.com/Gorbunova\\n']","Polina Gorbunova

Backend Software Engineer

EXPERIENCE

Teacher Assistant, De Anza College; Cupertino, Ca
January-May 2019

I was a teacher assistant for Object Oriented Analysis and Design. Developed ﬂow charts, state/event diagrams,
conceptual class diagrams. Tutored students individually and in groups.

PROJECTS

Movie app
Python, 2021

– Used The movie DB API to fetch information on various movies by popular, newly released, search requests.

– Implemented the backend CRUD operations with SQLite for saving movies to watch/watched list.
–
Increased the loading speed by multithreading API requests to deliver high quality posters for multiple

movies faster (from ~10 seconds to ~2 seconds).

– Developed frontend features (grid and slider for movie presentation, bu�on updates) using Tkinter.

Android Weather Application
JAVA, 2019

– Created an Android Weather App reading data in JSON from a website.

– Incorporated in the app the options of changing the location to show the weather.
–
The app has the functionality to open GoogleMaps, copy location to the clipboard and share info

via message.

Cursed Zombie Game, TeamLead of 6
C++, 2019

– Implemented Object Oriented design developing the structure of the game. Used SFML library.

– Maintained detailed and accurate notes and documentation for various tasks.
– Got the best game award for the CIS29 class.

Backend for a car store webAPI
JAVA, 2018

– Created the project that implemented CRUD operations for car database.

– Server and client side of the API (using proxy design).
– Created self healing code, used multithreading, Tomcat.

EDUCATION

De Anza College; Computer Information Science Major GPA 3.98
2019-2021

Saint Petersburg State University of Aerospace Instrumentation; Management GPA 3.72
2011-2015

- Bachelor’s Degree, graduated with Honors.

PUBLICATIONS

System design for choosing a location for opening a retail store using MATLAB Fuzzy Logic module.
Apr 13, 2015

SKILLS

Python, matplotlib, numpy, pandas, BeautifulSoup, Jupyter Notebook, tkinter Java,
Tomcat, JavaEE, Eclipse, AndroidStudio, JDBC, JSP, Core Java),

C++, STL, DBs, SQL, SQLite, PostgreSQL, JSON, regex, HTML, CSS,
UNIX/LINUX/iOS/MacOS/Windows(CLI), Git.

Elmsford ct., Cupertino, Ca 95014

(916) 000 88 83

polina78.gorbunova@yahoo.com

h�ps://www.linkedin.com/in/pol-gorbun/

h�ps://github.com/Gorbunova

"
88,source/Lilya SUCHKOVA.pdf,"['Lilya SUCHKOVA\\n', '+7-(916)-000-90-76 ⬦ ssaaakova@icloud.com\\n', 'Moscow ⬦ Russia\\n', 'https://www.linkedin.com/in/lil-suchkova/\\n', 'Data Scientist and Analyst with solid academic background, 6 years of experience in e-commerce and\\nbanking.\\nI perform analytics, build and utilize machine learning models for banks’ campaigning in order to\\n', 'understand consumer behavior and their preferences, which helps to increase company’s profit and\\ncustomer satisfaction.\\nI am looking for a Data Scientist / Machine Learning Engineer position in the Nordic countries.\\n', 'EXPERIENCE\\n', 'Rosbank, Soci´et´e G´en´erale Group\\nJan 2021 - present\\n', 'Data Scientist – Retail Business, Customer Experience Modeling\\nMoscow\\n', '· Developed model for private loans demand elasticity prediction and conducted A/B test on its effect\\n· Currently developing models for private loans response rate and refinance take rate predictions\\n', 'Tools: Python (numpy, pandas, sklearn, lightGBM), SAS\\n', 'SberBank\\nSep 2019 - Jan 2021\\n', 'Data Scientist – Retail Business, Mass Personalization\\nMoscow\\n', '· Developed and maintained machine learning models to predict response on investment and savings\\n', 'products: deposits, broker accounts and other:\\n', '• My new metal accounts response prediction model increased uplift 3.5x times and generated addi-\\n', 'tional NPV of 2.6 mln USD per Q2 2020\\n', '• Developed model for predicting financial literacy level for the project that won Best Social Project award\\n', 'at Retail Finance Awards 2020\\n', '· Completed ad-hoc analysis on clients’ savings behavior and helped to design A/B tests for campaign\\n', 'efficiency evaluation\\nTools: Python (numpy, pandas, sklearn, lightGBM), SQL (Teradata), SAS\\n', 'SberBank\\nNov 2015 - Sep 2019\\n', 'Financial Data Analyst – Treasury, Funds Transfer Pricing\\nMoscow\\n', '· Developed and maintained model for basis risk premium evaluation for internal funding of long-term projects\\n', 'with floating loan rates to mitigate interest rate risk\\n', '· Developed custom-made methods for measuring rationality of exercising embedded options for retail\\n', 'deposits (withdrawal and top-up)\\n', '· Completed regular and ad-hoc analytic reports on interest rates, balance sheet structure and dynamics,\\n', 'prepared documents for Rates Committee and Assets-Liabilities Management Committee\\nTools: MS Excel (+VBA), SQL (MS SQL Server, Teradata), R, Python\\n', 'Lamoda\\nJun 2015 - Oct 2015\\n', 'Data Analyst – Business Development & Customer Insights\\nMoscow\\n', '· Developed from scratch a report on regional sales and customer preferences’ difference\\n· Prepared ad-hoc analytics on customer behavior: prepayment systems comparison, orders cancellation\\n', 'measurement\\n', '· Maintained regular reports on customer feedback\\n', 'Tools: MS Excel, SQL (Oracle), Hive\\n', 'EDUCATION\\n', 'Higher School of Economics, Moscow\\nM.Sc. in Data Science & Financial Technologies\\nJul 2019\\n', 'GPA: 4.5/5.0\\nRelevant courses: Machine Learning, NLP, Deep Learning, Big Data, Stochastic Processes & Time Series\\nM.Sc. in Financial Economics\\nJun 2015\\n', 'GPA: 4.8/5.0, cum laude\\nRelevant courses: Econometrics, Financial Markets & Instruments, Game Theory\\n', 'B.Sc. Applied Mathematics & Computer Science\\nJun 2013\\n', 'GPA: 4.85/5.0, cum laude\\nRelevant courses: Optimization, Game Theory & Social Choice, Probability Theory & Statistics, Databases,\\nProgramming (C++, C#, MATLAB)\\n', 'SKILLS\\n', 'Programming\\nPython (numpy, pandas, matplotlib, sklearn, lightGBM, XGBoost)\\n', 'Databases\\nMS SQL Server, Teradata\\n', 'Models\\nlogistic regression, decision trees, gradient boosting, clustering, t-SNE\\n', 'Other\\ndata visualization, statistics, A/B testing\\n', 'Tools\\nSAS, git, bash, VS Code, Jupyter Notebook, Google Colab\\n', 'Languages\\nEnglish (fluent), Russian (native)\\n', 'OTHER CERTIFICATIONS\\n', 'Introduction to PySpark, DataCamp\\nJul 2021\\n', 'Introduction to Data Engineering, DataCamp\\nJun 2021\\n', 'Machine Learning PRO Accelerator, SkillFactory\\nDec 2020 - Mar 2021\\n', 'Data Visualization with Python by IBM, Coursera\\nJan 2021\\n', 'Machine Learning with TensorFlow on GCP (2/5 courses) by Google, Coursera\\nSep 2020\\n']","Lilya SUCHKOVA

+7-(916)-000-90-76 ⬦ ssaaakova@icloud.com

Moscow ⬦ Russia

https://www.linkedin.com/in/lil-suchkova/

Data Scientist and Analyst with solid academic background, 6 years of experience in e-commerce and
banking.
I perform analytics, build and utilize machine learning models for banks’ campaigning in order to

understand consumer behavior and their preferences, which helps to increase company’s profit and
customer satisfaction.
I am looking for a Data Scientist / Machine Learning Engineer position in the Nordic countries.

EXPERIENCE

Rosbank, Soci´et´e G´en´erale Group
Jan 2021 - present

Data Scientist – Retail Business, Customer Experience Modeling
Moscow

· Developed model for private loans demand elasticity prediction and conducted A/B test on its effect
· Currently developing models for private loans response rate and refinance take rate predictions

Tools: Python (numpy, pandas, sklearn, lightGBM), SAS

SberBank
Sep 2019 - Jan 2021

Data Scientist – Retail Business, Mass Personalization
Moscow

· Developed and maintained machine learning models to predict response on investment and savings

products: deposits, broker accounts and other:

• My new metal accounts response prediction model increased uplift 3.5x times and generated addi-

tional NPV of 2.6 mln USD per Q2 2020

• Developed model for predicting financial literacy level for the project that won Best Social Project award

at Retail Finance Awards 2020

· Completed ad-hoc analysis on clients’ savings behavior and helped to design A/B tests for campaign

efficiency evaluation
Tools: Python (numpy, pandas, sklearn, lightGBM), SQL (Teradata), SAS

SberBank
Nov 2015 - Sep 2019

Financial Data Analyst – Treasury, Funds Transfer Pricing
Moscow

· Developed and maintained model for basis risk premium evaluation for internal funding of long-term projects

with floating loan rates to mitigate interest rate risk

· Developed custom-made methods for measuring rationality of exercising embedded options for retail

deposits (withdrawal and top-up)

· Completed regular and ad-hoc analytic reports on interest rates, balance sheet structure and dynamics,

prepared documents for Rates Committee and Assets-Liabilities Management Committee
Tools: MS Excel (+VBA), SQL (MS SQL Server, Teradata), R, Python

Lamoda
Jun 2015 - Oct 2015

Data Analyst – Business Development & Customer Insights
Moscow

· Developed from scratch a report on regional sales and customer preferences’ difference
· Prepared ad-hoc analytics on customer behavior: prepayment systems comparison, orders cancellation

measurement

· Maintained regular reports on customer feedback

Tools: MS Excel, SQL (Oracle), Hive

EDUCATION

Higher School of Economics, Moscow
M.Sc. in Data Science & Financial Technologies
Jul 2019

GPA: 4.5/5.0
Relevant courses: Machine Learning, NLP, Deep Learning, Big Data, Stochastic Processes & Time Series
M.Sc. in Financial Economics
Jun 2015

GPA: 4.8/5.0, cum laude
Relevant courses: Econometrics, Financial Markets & Instruments, Game Theory

B.Sc. Applied Mathematics & Computer Science
Jun 2013

GPA: 4.85/5.0, cum laude
Relevant courses: Optimization, Game Theory & Social Choice, Probability Theory & Statistics, Databases,
Programming (C++, C#, MATLAB)

SKILLS

Programming
Python (numpy, pandas, matplotlib, sklearn, lightGBM, XGBoost)

Databases
MS SQL Server, Teradata

Models
logistic regression, decision trees, gradient boosting, clustering, t-SNE

Other
data visualization, statistics, A/B testing

Tools
SAS, git, bash, VS Code, Jupyter Notebook, Google Colab

Languages
English (fluent), Russian (native)

OTHER CERTIFICATIONS

Introduction to PySpark, DataCamp
Jul 2021

Introduction to Data Engineering, DataCamp
Jun 2021

Machine Learning PRO Accelerator, SkillFactory
Dec 2020 - Mar 2021

Data Visualization with Python by IBM, Coursera
Jan 2021

Machine Learning with TensorFlow on GCP (2/5 courses) by Google, Coursera
Sep 2020

"
89,source/Akhundov Damat.pdf,"['Akhundov Damat\\n', 'SoFTWARE ENGiNEER · BACKEND DEVELoPER\\n', 'Baku, Azerbaijan\\n', '(+994) 51 000-60-17 |\\nakhundov1damat@gmail.com |\\nakhunddamat |\\nakhundov1damat\\n', '“Software is art.”\\n', 'Summary\\n', 'Current Middle Backend Developer at product company Online Gymnasium. I have experience in developing microservice\\narchitecture, working with databases, parallel tasks, converting files, integrating external services, working with caching, as well\\nas training new employees. Special‑ izing in RESTful API realization. Using Django REST Framework and FastAPI for this purpose.\\nPrefer to use FastAPI and developing structure of system manually. Also prefer to use Linux, namely Manjaro. Interested in\\nchallenging tasks related to architecture development and learning new technologies.\\n', 'Work Experience\\n', 'Online Gymnasium\\nRemote\\n', 'MiDDLE BACKEND DEVELoPER\\n• Developed database structure via Django ORM.\\n• Worked with Celery tasks. Applied best practises.\\n• Implemented integration between BigBlueButton\\n', 'and Django REST Framework.\\n', '• Used Test Driven Development.\\n• Built structure of the project via style guide.\\n• Implemented RESTful API microservice.\\n• Worked with Docker and Docker Compose.\\n• Realised ORM optimization.\\n• Developed an application for converting files from\\n', 'two services (JOD Converter and CloudConvert)\\n', 'Feb. 2020 ‑ Present.\\n', 'Freelance\\nBaku, Azerbaijan\\n', 'JUNIOR BACKEND DEVELOPER\\n• Developed payment\\n', 'system.\\n', '• Worked with OpenCV on\\n', 'Python.\\n', '• Realized authentication\\n', 'system for FastAPI.\\n', 'Feb. 2019 ‑ Feb. 2020\\n', 'Skills\\n', 'DevOps\\nDocker, Docker Compose\\n', 'Frameworks\\nDjango REST Framework, Django, FastAPI, REST API\\n', 'Methodologies\\nTest Driven Development, Domain Driven Development\\n', 'Principles\\nSOLID, YAGNI, DRY\\n', 'Databases\\nPostgres, Redis, Cassandra\\n', 'Programming Languages\\nPython, C\\n', 'Languages\\nEnglish, Russian, Azerbaijani\\n', 'Education\\n', 'ASOIU(Azerbaijan State Oil and Industrial University)\\nBaku, Azerbaijan\\n', 'B.S. IN INFORMATION TECHNOLOGIES\\n', 'AND MANAGEMENT\\n', '• Got a Full Scholarship.\\n', 'Oct. 2020 ‑ Oct. 2024\\n', 'Ramin Mahmudzadeh school of solving Olympiad problems\\nBaku, Azerbaijan\\n', 'OLYMPIAD PROBLEMS SOLVER\\n• Learned to solve problems of\\n', 'different level of complexity.\\n', 'Sep. 2018 ‑ 2019\\n', 'DECEMBER 16, 2021\\nAKHUNDOV MURAD · RÉSUMÉ\\n1\\n']","Akhundov Damat

SoFTWARE ENGiNEER · BACKEND DEVELoPER

Baku, Azerbaijan

(+994) 51 000-60-17 |
akhundov1damat@gmail.com |
akhunddamat |
akhundov1damat

“Software is art.”

Summary

Current Middle Backend Developer at product company Online Gymnasium. I have experience in developing microservice
architecture, working with databases, parallel tasks, converting files, integrating external services, working with caching, as well
as training new employees. Special‑ izing in RESTful API realization. Using Django REST Framework and FastAPI for this purpose.
Prefer to use FastAPI and developing structure of system manually. Also prefer to use Linux, namely Manjaro. Interested in
challenging tasks related to architecture development and learning new technologies.

Work Experience

Online Gymnasium
Remote

MiDDLE BACKEND DEVELoPER
• Developed database structure via Django ORM.
• Worked with Celery tasks. Applied best practises.
• Implemented integration between BigBlueButton

and Django REST Framework.

• Used Test Driven Development.
• Built structure of the project via style guide.
• Implemented RESTful API microservice.
• Worked with Docker and Docker Compose.
• Realised ORM optimization.
• Developed an application for converting files from

two services (JOD Converter and CloudConvert)

Feb. 2020 ‑ Present.

Freelance
Baku, Azerbaijan

JUNIOR BACKEND DEVELOPER
• Developed payment

system.

• Worked with OpenCV on

Python.

• Realized authentication

system for FastAPI.

Feb. 2019 ‑ Feb. 2020

Skills

DevOps
Docker, Docker Compose

Frameworks
Django REST Framework, Django, FastAPI, REST API

Methodologies
Test Driven Development, Domain Driven Development

Principles
SOLID, YAGNI, DRY

Databases
Postgres, Redis, Cassandra

Programming Languages
Python, C

Languages
English, Russian, Azerbaijani

Education

ASOIU(Azerbaijan State Oil and Industrial University)
Baku, Azerbaijan

B.S. IN INFORMATION TECHNOLOGIES

AND MANAGEMENT

• Got a Full Scholarship.

Oct. 2020 ‑ Oct. 2024

Ramin Mahmudzadeh school of solving Olympiad problems
Baku, Azerbaijan

OLYMPIAD PROBLEMS SOLVER
• Learned to solve problems of

different level of complexity.

Sep. 2018 ‑ 2019

DECEMBER 16, 2021
AKHUNDOV MURAD · RÉSUMÉ
1

"
90,source/Artyom Poluhin.pdf,"['EXPERIENCE\\n', 'Artyom Poluhin\\n', 'Lead Site Reliability Engineer\\n89140989647 | rt78@gmail.com |\\n', 'linkedin | Authorized to work in the US\\n', 'Lead Site Reliability Engineer\\nMay 2017 – Present\\n', 'Company1, CA Los Angeles, Remote\\n', '• Led and managed a team of Sr. SREs for 6 years, fostering a collaborative and high-performing multinational\\n', 'environment, including setting KPIs, mentoring, developing roadmaps, and championing SRE approaches and culture\\nacross the company.\\n', '• Reduced engineer involvement in incidents by 40% by automating manual instructions.\\n', '• Developed a service that automated the SSL certificate renewal and replacement process.\\n', '• Provisioned infrastructure-as-a-code with self-written tools(Python, Ansible) and Terraform.\\n', '• Migrated the Cloud platform: Project planning, automated migration processes, resource management, and team\\n', 'coordination.\\n', '• Enhanced the CI/CD pipelines, resulting in a 30% reduction in update duration.\\n', '• Designed & managed services in AWS: Route 53, ELB, EC2, RDS, S3 including automation of CLI tools.\\n', '• Maintain a 99.99% SLA for a cloud platform, including more than 30 data centers and hundreds of microservices.\\n', '• Reduced hardware and license costs by 20% with expertly managing capacity planning and forecasting, and aligned results\\n', 'with marketing, sales, and R&D departments.\\n', '• Implemented an incident management process resulting in a 45% reduction in incidents and MTTR by 40%.\\n', '• Implemented Scrum methodologies to align SRE objectives with broader organizational goals, and enhance\\n', 'transparency and accountability.\\n', 'Sr Site Reliability Engineer\\nApril 2014 – May 2018\\n', 'Company1, CA Los Angeles, Remote\\n', '• Designed an architectural process to review new components, which reduced time to the production by 30%.\\n', '• Designed & developed infrastructure for an on-premise cloud platform including hundreds of physical servers.\\n', '• Defined SLA, SLO, and SLI for infrastructure services, and configured Grafana Dashboards.\\n', '• Reduce update time by 40% by implementing distributed Jenkins infrastructure and designing CI/CD.\\n', '• Developed automated & redundant database architecture based on MariaDB(MySQL).\\n', 'Sr. Cloud Platform Engineer\\nApril 2014 – April 2016\\n', 'Company1, CA Los Angeles, Remote\\n', '• Managed distributed storage: maintenance, deployment, and update automation.\\n', '• Managed Cloud Platform: Deploy with Ansible, maintained a 99.99% SLA.\\n', '• Designed and developed infrastructure for on-premise cloud platforms.\\n', '• Developed provisioning system that reduced time to production by 40%.\\n', 'Sr. System Engineer\\nMay 2013 – April 2014\\n', 'Company1\\n', '• Reduced time to production by 40% by automating the deployment of the distributed storage.\\n', '• Implemented monitoring system based on Zabbix and Cacti and covered 90% of systems with monitoring.\\n', '• Optimized hardware configuration and reduced price by server by 25%.\\n', 'Linux administrator\\nJuly 2008 – May 2013\\n', 'Company2\\n', '• Managed Linux infrastructure based on the following services: DHCP, Mail servers, FTP, and DNS.\\n', '• Performed migration from Linux Fedora to Centos.\\n', '• Implemented backups of the core infrastructure services: Databases, Repositories, and Mail servers.\\n', 'TECHNICAL SKILLS\\n', 'Languages: Python, Bash, SQL, Groovy\\nServices: Kubernetes, AWS, Prometheus, Jenkins/Gitlab, MySQL, Nginx, HAproxy, Elasticsearch\\nTools: Git, Docker, Terraform, Ansible, Grafana, Kibana, PagerDuty\\n', 'Processes: Incident and Capacity management, SLA/SLO/SLI, Toil automation, Agile, DevOps methodology, DR\\n', 'EDUCATION\\n', 'Moscow State University\\nMajor in computer technology\\nAug. 2003 – May 2008\\n']","EXPERIENCE

Artyom Poluhin

Lead Site Reliability Engineer
89140989647 | rt78@gmail.com |

linkedin | Authorized to work in the US

Lead Site Reliability Engineer
May 2017 – Present

Company1, CA Los Angeles, Remote

• Led and managed a team of Sr. SREs for 6 years, fostering a collaborative and high-performing multinational

environment, including setting KPIs, mentoring, developing roadmaps, and championing SRE approaches and culture
across the company.

• Reduced engineer involvement in incidents by 40% by automating manual instructions.

• Developed a service that automated the SSL certificate renewal and replacement process.

• Provisioned infrastructure-as-a-code with self-written tools(Python, Ansible) and Terraform.

• Migrated the Cloud platform: Project planning, automated migration processes, resource management, and team

coordination.

• Enhanced the CI/CD pipelines, resulting in a 30% reduction in update duration.

• Designed & managed services in AWS: Route 53, ELB, EC2, RDS, S3 including automation of CLI tools.

• Maintain a 99.99% SLA for a cloud platform, including more than 30 data centers and hundreds of microservices.

• Reduced hardware and license costs by 20% with expertly managing capacity planning and forecasting, and aligned results

with marketing, sales, and R&D departments.

• Implemented an incident management process resulting in a 45% reduction in incidents and MTTR by 40%.

• Implemented Scrum methodologies to align SRE objectives with broader organizational goals, and enhance

transparency and accountability.

Sr Site Reliability Engineer
April 2014 – May 2018

Company1, CA Los Angeles, Remote

• Designed an architectural process to review new components, which reduced time to the production by 30%.

• Designed & developed infrastructure for an on-premise cloud platform including hundreds of physical servers.

• Defined SLA, SLO, and SLI for infrastructure services, and configured Grafana Dashboards.

• Reduce update time by 40% by implementing distributed Jenkins infrastructure and designing CI/CD.

• Developed automated & redundant database architecture based on MariaDB(MySQL).

Sr. Cloud Platform Engineer
April 2014 – April 2016

Company1, CA Los Angeles, Remote

• Managed distributed storage: maintenance, deployment, and update automation.

• Managed Cloud Platform: Deploy with Ansible, maintained a 99.99% SLA.

• Designed and developed infrastructure for on-premise cloud platforms.

• Developed provisioning system that reduced time to production by 40%.

Sr. System Engineer
May 2013 – April 2014

Company1

• Reduced time to production by 40% by automating the deployment of the distributed storage.

• Implemented monitoring system based on Zabbix and Cacti and covered 90% of systems with monitoring.

• Optimized hardware configuration and reduced price by server by 25%.

Linux administrator
July 2008 – May 2013

Company2

• Managed Linux infrastructure based on the following services: DHCP, Mail servers, FTP, and DNS.

• Performed migration from Linux Fedora to Centos.

• Implemented backups of the core infrastructure services: Databases, Repositories, and Mail servers.

TECHNICAL SKILLS

Languages: Python, Bash, SQL, Groovy
Services: Kubernetes, AWS, Prometheus, Jenkins/Gitlab, MySQL, Nginx, HAproxy, Elasticsearch
Tools: Git, Docker, Terraform, Ansible, Grafana, Kibana, PagerDuty

Processes: Incident and Capacity management, SLA/SLO/SLI, Toil automation, Agile, DevOps methodology, DR

EDUCATION

Moscow State University
Major in computer technology
Aug. 2003 – May 2008

"
91,source/Elena Akterskaia.pdf,"['Elena Akterskaia, PhD \\nGreen Card Holder \\nProfile \\n', '+1 619 111-0525 \\n', 'aktersaaa@gmail.com \\n', '333 Harrison St, San Francisco CA \\n', ' \\n', '• Enthusiastic software engineer with academic and industrial experience (5+ years) in algorithms development and \\n', 'optimization, with focus on efficiency and automation. PhD research experience (finished in 3 years), developed a \\ncomplex numerical simulation approach that allowed modeling failure progression in aircraft fuselage. \\n', '• Programming: Python (adv.), Matlab (adv.), SQL(int.), C (int.) \\n• Numerical: probability theory, simulations, numpy, pandas, scipy, scikit-learn, matplotlib, pytorch \\n• ML algorithms: deep learning, computer vision, linear / logistic regression, random forest, gradient boosted trees, \\n', 'SVM, kNN, PCA, k-means \\n', 'Education \\n', '2019 \\nPh.D., Mechanical Engineering, Leibniz University Hannover, Germany, GPA 1.0/1.0 \\n', ' \\nCourses on Advanced Algorithms and Data structures, Machine Learning, Databases and SQL for Data Science, \\n', '2019 \\nProgramming on Python, System Design, Statistics for Data Science, Programming for competitions \\n', '2019 \\nProject Management, Leibniz University Hannover, Germany, Certificate \\n', '2012 \\nM.S., Computational Mechanics, Peter the Great St. Petersburg Polytechnic University, Russia, GPA 5.0/5.0 \\n', '2010 \\nB.C., Computational Mechanics, Peter the Great St. Petersburg Polytechnic University, Russia, GPA 4.95/5.0 \\n', 'WORK EXPERIENCE \\n', ' \\n', '2016-2019 \\nAssociate Researcher, Leibniz University Hannover, Germany \\n', '• Developed a novel multiscale method for modeling and prediction of failure progression in the fuselage aircraft, \\n', 'performed material degradation modeling and established a framework for recalculation of homogenized properties \\nto ensure seamless transfer of information from the refined local level to larger global level which allowed to reduce \\ncomputational time up to 50% \\n', '• Developed automatic pipeline for model creations for the finite element software (full geometry described by nodes \\n', 'and elements locations and properties) and post-processing output data for the part of fuselage model, increasing \\nprediction accuracy to 1-3% \\n', '2018 \\nMarie Skłodowska-Curie Fellow, Porto University, Portugal \\n', '• Designed and implemented scripts for automatization of models’ creation and transfer data between models \\n2017 \\nMarie Skłodowska-Curie Fellow, University of Bristol, UK \\n', '• Formulated discrete cohesive zone model for shell panel structures that allows physical modeling of adhesive layer \\n', 'between panels and leads to decrease in computational time by 75% \\n', '2008-2015 \\nHead of optional educational courses \\n', '• Prospecting for new customers and PR. Teacher of advanced math, physics \\n2008-2012 \\nResearch scientist SWE, CompMech Lab Ltd., Russia \\n', '• Developed a set of programs for automatic parametric model generations to obtain and evaluate homogenized \\n', 'properties of composite materials. Post-processed and analyzed results from simulations of stochastic models to \\ninvestigate influence of random inclusions and their sizes on material level. Hyperparameter search for an optimal \\nmodel for the injection molding simulation of a bumper. \\n', 'Publications \\n', ' \\n', '• Akterskaia M, Camanho P, Jansen E, Arteiro A, Rolfes R. Progressive delamination analysis through two-way global- \\n', 'local coupling approach preserving energy dissipation for single-mode and mixed-mode loading, CS 223, 2019 \\n', '• Akterskaia M, Jansen E, Hallett S, Weaver P, Rolfes R. Progressive Failure Analysis of Stiffened Composite Panels Using \\n', 'a Two-Way Loose Coupling Approach Including Intralaminar Failure and Debonding, AIAA Journal 57, n. 7, 2019 \\n', '• Akterskaia M, Jansen E, Hallett S, Weaver P, Rolfes R. Analysis of skin-stringer debonding in composite panels through \\n', 'a two-way global-local method, Composite Structures 202, 1280–1294, 2018 \\n', '• Akterskaia M, Jansen E, Hühne S, Rolfes R. Efficient progressive failure analysis of multi-stringer stiffened composite \\n', 'panels through a two-way loose coupling global-local approach, Composite Structures.183, 137–145, 2018 \\n', '• Book chapter: Akterskaia M, Jansen E, Hallett S, Weaver P, Rolfes R. Post-buckling progressive failure analysis of \\n', 'composite panels using a two-way global-local coupling approach including intralaminar failure and debonding. In \\nAdvances in Predictive Models and Methodologies for Numerically Efficient Linear and Nonlinear Analysis of \\nComposites. Springer International Publishing, 2019, pp. 83–102 \\n']","Elena Akterskaia, PhD 
Green Card Holder 
Profile 

+1 619 111-0525 

aktersaaa@gmail.com 

333 Harrison St, San Francisco CA 

 

• Enthusiastic software engineer with academic and industrial experience (5+ years) in algorithms development and 

optimization, with focus on efficiency and automation. PhD research experience (finished in 3 years), developed a 
complex numerical simulation approach that allowed modeling failure progression in aircraft fuselage. 

• Programming: Python (adv.), Matlab (adv.), SQL(int.), C (int.) 
• Numerical: probability theory, simulations, numpy, pandas, scipy, scikit-learn, matplotlib, pytorch 
• ML algorithms: deep learning, computer vision, linear / logistic regression, random forest, gradient boosted trees, 

SVM, kNN, PCA, k-means 

Education 

2019 
Ph.D., Mechanical Engineering, Leibniz University Hannover, Germany, GPA 1.0/1.0 

 
Courses on Advanced Algorithms and Data structures, Machine Learning, Databases and SQL for Data Science, 

2019 
Programming on Python, System Design, Statistics for Data Science, Programming for competitions 

2019 
Project Management, Leibniz University Hannover, Germany, Certificate 

2012 
M.S., Computational Mechanics, Peter the Great St. Petersburg Polytechnic University, Russia, GPA 5.0/5.0 

2010 
B.C., Computational Mechanics, Peter the Great St. Petersburg Polytechnic University, Russia, GPA 4.95/5.0 

WORK EXPERIENCE 

 

2016-2019 
Associate Researcher, Leibniz University Hannover, Germany 

• Developed a novel multiscale method for modeling and prediction of failure progression in the fuselage aircraft, 

performed material degradation modeling and established a framework for recalculation of homogenized properties 
to ensure seamless transfer of information from the refined local level to larger global level which allowed to reduce 
computational time up to 50% 

• Developed automatic pipeline for model creations for the finite element software (full geometry described by nodes 

and elements locations and properties) and post-processing output data for the part of fuselage model, increasing 
prediction accuracy to 1-3% 

2018 
Marie Skłodowska-Curie Fellow, Porto University, Portugal 

• Designed and implemented scripts for automatization of models’ creation and transfer data between models 
2017 
Marie Skłodowska-Curie Fellow, University of Bristol, UK 

• Formulated discrete cohesive zone model for shell panel structures that allows physical modeling of adhesive layer 

between panels and leads to decrease in computational time by 75% 

2008-2015 
Head of optional educational courses 

• Prospecting for new customers and PR. Teacher of advanced math, physics 
2008-2012 
Research scientist SWE, CompMech Lab Ltd., Russia 

• Developed a set of programs for automatic parametric model generations to obtain and evaluate homogenized 

properties of composite materials. Post-processed and analyzed results from simulations of stochastic models to 
investigate influence of random inclusions and their sizes on material level. Hyperparameter search for an optimal 
model for the injection molding simulation of a bumper. 

Publications 

 

• Akterskaia M, Camanho P, Jansen E, Arteiro A, Rolfes R. Progressive delamination analysis through two-way global- 

local coupling approach preserving energy dissipation for single-mode and mixed-mode loading, CS 223, 2019 

• Akterskaia M, Jansen E, Hallett S, Weaver P, Rolfes R. Progressive Failure Analysis of Stiffened Composite Panels Using 

a Two-Way Loose Coupling Approach Including Intralaminar Failure and Debonding, AIAA Journal 57, n. 7, 2019 

• Akterskaia M, Jansen E, Hallett S, Weaver P, Rolfes R. Analysis of skin-stringer debonding in composite panels through 

a two-way global-local method, Composite Structures 202, 1280–1294, 2018 

• Akterskaia M, Jansen E, Hühne S, Rolfes R. Efficient progressive failure analysis of multi-stringer stiffened composite 

panels through a two-way loose coupling global-local approach, Composite Structures.183, 137–145, 2018 

• Book chapter: Akterskaia M, Jansen E, Hallett S, Weaver P, Rolfes R. Post-buckling progressive failure analysis of 

composite panels using a two-way global-local coupling approach including intralaminar failure and debonding. In 
Advances in Predictive Models and Methodologies for Numerically Efficient Linear and Nonlinear Analysis of 
Composites. Springer International Publishing, 2019, pp. 83–102 

"
92,source/Alexey Melnichnikov.pdf,"['  \\nAlexey Melnichnikov \\n', 'Software Engineer \\n', ' \\n', 'Address Moscow, Moscow, 125310 \\n', 'Phone 77777777777777 \\n', 'E-mail example@gmail.com \\n', 'LinkedIn https://linkedin.com/in/ \\n', ' \\n \\n \\n', 'An experienced software engineer with expertise in back-end development of large-scale and projects \\n', 'from the ground-up to runtime. Skilled in directing development with creative and performance-oriented \\n', 'approach. A team player with leadership and mentorship experience, close collaboration with businesses \\nto meet the needs of end users. \\n', ' \\n', 'Skills \\n', 'Languages: Java, Kotlin, Groovy \\n', 'RDBMS: PostgreSQL, Oracle \\n', 'NoSQL: MongoDB, Cassandra, Clickhouse, Elasticsearch, Hazelcast, Infinispan \\n', ' \\n', 'Techs: Spring (Core, Cloud, Boot), ORMS (Hibernate, MyBatis), Java specs ( JMS, JAX-RS, JAX-WS), \\n', 'JUnit, Spock, Testcontainers, GraphQL, Vert.X, Kafka, RabbitMQ, Docker (Swarm, Compose), \\n', 'Proxmox VE, SOA/REST/Web Services, WebSockets \\n', 'Tools: Jira, GitHub, BitBucket, GitLab, TeamCity, Ansible \\n', 'VCS: Git, Svn, Mercurial (HG) \\n', 'Methodology : Agile, Scrum, Kanban, TDD \\n', 'Web Servers: Nginx, Tomcat, Netty, Jetty \\n', 'Work History \\n', ' \\n', 'Mar 2019 - \\n', 'Current \\n', 'Software Engineer \\n', 'Mail.ru Group, Moscow \\n', 'Project: Financial marketplace for entrepreneurs развивай.рф (razvivai.rf) \\nAccomplishments: \\n', 'Implemented MWP and shipped it to production for 4 months. \\n', 'Developed system architecture. \\n', 'Profiled and tuned up all JVM apps. As a result, decreased the price of \\n', 'infrastructure by two. \\n', 'Techs: Java, Kotlin, Groovy, PostgreSQL(debezium), Docker Swarm (migration process \\n', ' \\n \\n', 'May 2017 - \\n', 'Apr 2020 \\n', ' \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n', 'Apr 2016 - \\n', 'Mar 2019 \\n', ' \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n', 'Jul 2014 - \\n', 'Apr 2016 \\n', 'to Kubernetes), Kafka. \\n', 'Lead Software Engineer \\n', 'Divico LLC, Moscow \\n', 'Project: Internal bloggers search platform. Team lead, a distributed team of 5. \\nAccomplishments: \\n', 'Created infrastructure from scratch using Proxmox virtualization and Docker. \\nOrganized code review process. \\nOfficial Beta version was shipped on time. \\n', 'Created analytics dataflow of YouTube, Instagram, VK bloggers, which helped to \\n', 'analyze trends in social networks. That highly increased marketing revenue. \\nCreated report management which automated major part of manual labour of \\nsome departments. \\n', 'Techs: Java, Scala, PostgreSQL, Clickhouse, Cassandra, Docker Swarm, RabbitMQ, \\nSpring Dataflow, Elasticsearch. \\n', 'Software Engineer \\n', 'Nexign, Moscow \\n', 'Projects: \\n', 'MegaFon( tier 1 telecom operator ) customer portal API, Billing API, Push \\n', 'notifications API, support chat service. \\nOpensource template engine development https://github.com/MegafonWebLab \\n/histone-java2 \\n', 'Billing Platform, API Gateway service \\n', 'Accomplishments: \\n', 'Orchestrated efficient large-scale software deployments, including testing \\nfeatures, correcting code and code reviewing. \\n', 'I designed and developed a support chat that facilitated communication with \\nend users. \\nContributed to Histone2 template engine. \\n', 'Main developer of API Gateway service, which served as main API composition \\n', 'layer in new Billing platform. Assisted with the interviewing and hiring of software \\nengineers. \\n', 'Techs: Java, Vert.x, MongonDB, PostgreSQL, RabbitMQ, Zookeeper, Docker Swarm. \\n', 'Software Engineer \\n', 'Eldorado LLC, Moscow \\n', 'Projects: Online store eldorado.ru and mobile application for employees. \\nAccomplishments: \\n', 'Took a significant part in the development of online platform on SAP Hybris \\nplatform. \\nRewrote PL/SQL business logic to Java API. \\nCreated a mobile application using Apache Cordova. \\n', 'Techs: Java, JS(Apache Cordova), Oracle. \\n', ' \\n', 'Education \\n', ' \\n', 'Sep 2007 - \\n', 'Jun 2013 \\n', 'Master of Science: Electrical And Electronics Engineering \\nMoscow Aviation Institute - Moscow \\n', ' \\n', 'Certifications \\n', 'Sep 2016 \\nCoursera Course Certificates: Functional Programming Principles in Scala \\n', ' \\n', 'Mar 2017 \\nCoursera Course Certificates: Functional Program Design in Scala \\n', ' \\n', 'Apr 2017 \\nCoursera Course Certificates: Parallel programming \\n']","  
Alexey Melnichnikov 

Software Engineer 

 

Address Moscow, Moscow, 125310 

Phone 77777777777777 

E-mail example@gmail.com 

LinkedIn https://linkedin.com/in/ 

 
 
 

An experienced software engineer with expertise in back-end development of large-scale and projects 

from the ground-up to runtime. Skilled in directing development with creative and performance-oriented 

approach. A team player with leadership and mentorship experience, close collaboration with businesses 
to meet the needs of end users. 

 

Skills 

Languages: Java, Kotlin, Groovy 

RDBMS: PostgreSQL, Oracle 

NoSQL: MongoDB, Cassandra, Clickhouse, Elasticsearch, Hazelcast, Infinispan 

 

Techs: Spring (Core, Cloud, Boot), ORMS (Hibernate, MyBatis), Java specs ( JMS, JAX-RS, JAX-WS), 

JUnit, Spock, Testcontainers, GraphQL, Vert.X, Kafka, RabbitMQ, Docker (Swarm, Compose), 

Proxmox VE, SOA/REST/Web Services, WebSockets 

Tools: Jira, GitHub, BitBucket, GitLab, TeamCity, Ansible 

VCS: Git, Svn, Mercurial (HG) 

Methodology : Agile, Scrum, Kanban, TDD 

Web Servers: Nginx, Tomcat, Netty, Jetty 

Work History 

 

Mar 2019 - 

Current 

Software Engineer 

Mail.ru Group, Moscow 

Project: Financial marketplace for entrepreneurs развивай.рф (razvivai.rf) 
Accomplishments: 

Implemented MWP and shipped it to production for 4 months. 

Developed system architecture. 

Profiled and tuned up all JVM apps. As a result, decreased the price of 

infrastructure by two. 

Techs: Java, Kotlin, Groovy, PostgreSQL(debezium), Docker Swarm (migration process 

 
 

May 2017 - 

Apr 2020 

 
 
 
 
 
 
 
 
 
 
 
 

Apr 2016 - 

Mar 2019 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Jul 2014 - 

Apr 2016 

to Kubernetes), Kafka. 

Lead Software Engineer 

Divico LLC, Moscow 

Project: Internal bloggers search platform. Team lead, a distributed team of 5. 
Accomplishments: 

Created infrastructure from scratch using Proxmox virtualization and Docker. 
Organized code review process. 
Official Beta version was shipped on time. 

Created analytics dataflow of YouTube, Instagram, VK bloggers, which helped to 

analyze trends in social networks. That highly increased marketing revenue. 
Created report management which automated major part of manual labour of 
some departments. 

Techs: Java, Scala, PostgreSQL, Clickhouse, Cassandra, Docker Swarm, RabbitMQ, 
Spring Dataflow, Elasticsearch. 

Software Engineer 

Nexign, Moscow 

Projects: 

MegaFon( tier 1 telecom operator ) customer portal API, Billing API, Push 

notifications API, support chat service. 
Opensource template engine development https://github.com/MegafonWebLab 
/histone-java2 

Billing Platform, API Gateway service 

Accomplishments: 

Orchestrated efficient large-scale software deployments, including testing 
features, correcting code and code reviewing. 

I designed and developed a support chat that facilitated communication with 
end users. 
Contributed to Histone2 template engine. 

Main developer of API Gateway service, which served as main API composition 

layer in new Billing platform. Assisted with the interviewing and hiring of software 
engineers. 

Techs: Java, Vert.x, MongonDB, PostgreSQL, RabbitMQ, Zookeeper, Docker Swarm. 

Software Engineer 

Eldorado LLC, Moscow 

Projects: Online store eldorado.ru and mobile application for employees. 
Accomplishments: 

Took a significant part in the development of online platform on SAP Hybris 
platform. 
Rewrote PL/SQL business logic to Java API. 
Created a mobile application using Apache Cordova. 

Techs: Java, JS(Apache Cordova), Oracle. 

 

Education 

 

Sep 2007 - 

Jun 2013 

Master of Science: Electrical And Electronics Engineering 
Moscow Aviation Institute - Moscow 

 

Certifications 

Sep 2016 
Coursera Course Certificates: Functional Programming Principles in Scala 

 

Mar 2017 
Coursera Course Certificates: Functional Program Design in Scala 

 

Apr 2017 
Coursera Course Certificates: Parallel programming 

"
93,source/Pavel Egorov .pdf,"[' \\n \\n', 'anonymous@gmail.com \\n+38(000)000 00 00 \\n \\n', 'EDUCATION \\n', 'Pavel Egorov \\n', ' \\n \\n', 'Languages: \\n', 'Python, C, Java, HTML, CSS \\n', 'English               \\n', 'B2+ (Upper-Intermediate) \\n', 'Bachelor of Computer Science at Ukrainian Catholic University \\n', ' \\n', 'Relevant courses: Algorithms & Data Structures, Computer System Architecture, \\nObject-Oriented Programming, Probability & Statistics, Python Programming, \\nMathematical analysis, Discrete Mathematics. \\n', 'EXPERIENCE \\n', 'Expected graduation: \\n', 'July 2023 \\n', 'GPA: 93.81/100 \\n', ' \\nPython Developer \\nMarch - May 2020 \\n', 'Project “Emotion Detector” \\nLviv, Ukraine \\n', '● Created a project for my term work at the university that helps Twitter users determine their mood and \\n', 'emotions \\n', '● Increased people awareness of their emotional state; reduced the number of depressions and other mental \\n', 'illnesses \\n', '● Implemented it using Python; evaluated the mood of Twitter users by Natural Language Processing; \\n', 'worked with Database and Twitter API \\n', '● Developed a web application using HTML, CSS, Flask and Dash; hosted it by Pythonanywhere service \\n', 'Python Teacher \\nMarch 2020 \\n', 'CoderDojo \\nLviv, Ukraine \\n', '● Communicated with a group of children and explained to them the basics of Python \\n● Involved children and youth in learning programming; increased their knowledge about technical tools, \\n', 'programming languages and opportunities for IT education \\n', '● Taught students to create their own programs and projects \\n', 'TECHNICAL SKILLS \\n \\n', '● Python (NLP, NLTK, JSON, plotly, matplotlib, PEP 8 standard of coding) \\n● C, Java, HTML, CSS \\n● Web Development (Flask, Dash, Pythonanywhere hosting) \\n● API knowledge, Git, PyCharm, VS Code, CLion, IntelliJ IDEA. \\n', ' \\n', 'AWARDS AND ACTIVITIES \\n', ' \\n', '● Won a scholarship for tuition fees for Bachelor studies based on academic and leadership rewards \\n● Won in Synchro Space Hackathon with a project aimed to triple the use of bicycles on the island of \\n', 'Khortytsia in Ukraine \\n', '● Participated in ICPC (International Collegiate Programming Contest) \\n● Participate in University Parliament where working in a team and creating projects to improve the lives of \\n', 'students \\n', '● Volunteer at Lviv Regional Youth Center (July 2018 - Present) where organize social projects for young \\n', 'people, contribute to local and national forums and events \\n', '● Spoke on youth lectures about communication skills and opportunities in small cities \\n● Volunteered in an orphanage and in a home for the elderly \\n● Volunteered at Lviv IT Arena (September 2019), Book Forum Lviv (May 2018 and September 2018), Lviv \\n', 'Oratory Open (June 2018) \\n']"," 
 

anonymous@gmail.com 
+38(000)000 00 00 
 

EDUCATION 

Pavel Egorov 

 
 

Languages: 

Python, C, Java, HTML, CSS 

English               

B2+ (Upper-Intermediate) 

Bachelor of Computer Science at Ukrainian Catholic University 

 

Relevant courses: Algorithms & Data Structures, Computer System Architecture, 
Object-Oriented Programming, Probability & Statistics, Python Programming, 
Mathematical analysis, Discrete Mathematics. 

EXPERIENCE 

Expected graduation: 

July 2023 

GPA: 93.81/100 

 
Python Developer 
March - May 2020 

Project “Emotion Detector” 
Lviv, Ukraine 

● Created a project for my term work at the university that helps Twitter users determine their mood and 

emotions 

● Increased people awareness of their emotional state; reduced the number of depressions and other mental 

illnesses 

● Implemented it using Python; evaluated the mood of Twitter users by Natural Language Processing; 

worked with Database and Twitter API 

● Developed a web application using HTML, CSS, Flask and Dash; hosted it by Pythonanywhere service 

Python Teacher 
March 2020 

CoderDojo 
Lviv, Ukraine 

● Communicated with a group of children and explained to them the basics of Python 
● Involved children and youth in learning programming; increased their knowledge about technical tools, 

programming languages and opportunities for IT education 

● Taught students to create their own programs and projects 

TECHNICAL SKILLS 
 

● Python (NLP, NLTK, JSON, plotly, matplotlib, PEP 8 standard of coding) 
● C, Java, HTML, CSS 
● Web Development (Flask, Dash, Pythonanywhere hosting) 
● API knowledge, Git, PyCharm, VS Code, CLion, IntelliJ IDEA. 

 

AWARDS AND ACTIVITIES 

 

● Won a scholarship for tuition fees for Bachelor studies based on academic and leadership rewards 
● Won in Synchro Space Hackathon with a project aimed to triple the use of bicycles on the island of 

Khortytsia in Ukraine 

● Participated in ICPC (International Collegiate Programming Contest) 
● Participate in University Parliament where working in a team and creating projects to improve the lives of 

students 

● Volunteer at Lviv Regional Youth Center (July 2018 - Present) where organize social projects for young 

people, contribute to local and national forums and events 

● Spoke on youth lectures about communication skills and opportunities in small cities 
● Volunteered in an orphanage and in a home for the elderly 
● Volunteered at Lviv IT Arena (September 2019), Book Forum Lviv (May 2018 and September 2018), Lviv 

Oratory Open (June 2018) 

"
94,source/Fedor Shulyak.pdf,"['Fedor Shulyak \\n', 'DevOps Engineer \\n \\n \\n \\n', 'Address \\nCambridge, United Kingdom \\n', 'Email \\nshaaak11111@gmail.com \\n', 'Phone \\n+447795877777 \\n', ' \\n \\n', ' \\n01 PROFILE \\nI am an IT professional over 6 years of experience, mostly as a DevOps Engineer. I have deep \\n', 'experience with various AWS services such as EC2 / RDS / DynamoDB / VPC / Route53 / \\n', 'EKS /S3 / ActiveMQ /Lambda / IAM / Cloudformation, etc. Also, I am proficient with Docker and \\n', 'Kubernetes for containerization tasks as well as Terraform as Infrastructure as Code tasks. Have \\n', 'hands-on experience with Ansible and Chef as configuration management tools, Python, and \\n', 'Shell for scripting means. Computer network experience. \\n', ' \\n \\n', '02 SKILLS \\nInfrastructure as Code (IaC) \\n', 'Continuous Integration (CI) \\n', 'Terraform \\n', 'Kubernetes (k8s) \\n', 'Docker \\n', 'Ansible \\n', 'Chef \\n', 'Jenkins \\n', 'Teamcity \\n', 'Gitlab-CI \\n', 'Prometheus \\n', 'Amazon AWS \\n', 'Microsoft Azure \\n', 'Python Scripting \\n', 'Shell Scripting \\n', 'Computer Networks \\n', 'Linux \\n', 'Nginx \\n', 'Splunk \\n', ' \\n03 EMPLOYMENT HISTORY \\n', ' \\n \\n', '09/2019 — Present \\nDevOps Engineer at Gearset \\nCambridge, United \\n', 'Kingdom \\n', ' \\n', '• Maintenance and development of high-load Kubernetes cluster hosted in AWS (kops / \\n', 'EKS). \\n', '• Design and maintenance of application build, test, and infrastructure CI pipelines (python, \\n', 'bash, Teamcity). \\n', '• Development of automated scripts for security and infrastructure control (using python and \\n', 'AWS Lambda). \\n', '• Configured routine platform security audit (OWASP). \\n', '• Close work with developers to provide necessary consultation about integration platform \\n', 'features and application itself. \\n', ' \\n', ' \\n', '04/2019 — 09/2019 \\nSite Reliability Engineer at Accenture \\nRiga, Latvia \\n', '• Support of huge high-load development platform based on docker-swarm including \\n', 'multiple applications (Jira / Confluence / Jenkins / Gitlab / BitBucket / Selenium / Artifactory \\n', '/ Nexus, etc.). \\n', '• Managing AWS stack infrastructure using Cloudformation and Terraform. \\n', '• Configuration and system management using Ansible. \\n', ' \\n \\n', ' \\n', '04/2018 — 04/2019 \\nDevOps Engineer at Accenture \\nRiga, Latvia \\n', ' \\n', '• DevOps team lead and team management. \\n', '• Developed an isolated continuous integration production system for the client (based on \\n', 'Kubernetes and python automation). \\n', '• Support of development processes with a configuration of CI/CD jobs and pipelines in \\n', 'Jenkins and GitLab-CI. Configuration and maintain docker images build pipelines and \\n', 'deployment processes to different environments. \\n', '• System and configuration management using Chef. \\n', '• Python and shell scripts development. \\n', ' \\n \\n \\n', '11/2017 — 04/2018 \\nDevOps Lead at SolbegSoft \\nMinsk, Belarus \\n', ' \\n', '• Design and management of the company infrastructure and networks (Mikrotik / HP / \\n', 'Juniper / oVirt / VMWare / Windows Server / Active Directory ). \\n', '• Achieved high redundancy of the company infrastructure. \\n', '• Created fluent internal workflows, and implemented DevOps practices for many internal \\n', 'teams. \\n', '• DevOps team training planning. \\n', '• Improvement of internal company servers and network infrastructure. \\n', '• Developed automated CI system for client dynamic websites hosted in AWS using Ansible, \\n', 'python and bash. \\n', ' \\n', ' \\n', '03/2017 — 10/2017 \\nDevOps Engineer at SolbegSoft \\nMinsk, Belarus \\n', ' \\n', '• Configuration and maintenance of the high-load web cluster based on the NixOps \\n', 'configuration management and deployment system (Nixops / NixOS / Teamcity / AWS \\n', 'RDS). \\n', '• Configuration of various CI/CD pipelines using Teamcity (for .Net / PHP / JS etc.). \\n', '• Design and configuration from scratch web-cluster using Ansible, Terraform and AWS \\n', 'stack. Configuration docker images build for .Net Core-based project. \\n', '• Configuration of virtualization Hyper-V and oVirt based failover cluster for internal company \\n', 'infrastructure. \\n', '• Provisioning and maintenance of servers and networks in code-driven infrastructure (AWS) \\n', 'LAN hardware configuration (HP/Mikrotik) using Terraform and Ansible. \\n', ' \\n', ' \\n', '09/2016 — 03/2017 \\nDevOps Engineer at Esodin.by \\nMinsk, Belarus \\n', ' \\n', '• Maintenance of the web cluster hosted in AWS using Ansible, Terraform. \\n', '• Provisioning and support servers, networks hosted in AWS using Terraform. \\n', '• Design and configuration of continuous integration pipelines in TeamCity. \\n', '• Configuration and maintenance of .Net Core dockerized microservice system. \\n', '01/2016 — 08/2016 \\nSystem Administrator at Esodin.by \\nMinsk, Belarus \\n', ' \\n', '• Technical user support. \\n', '• LAN laying and installation. \\n', '• Installation and configuration of services (Active Directory, DHCP, DNS, Samba) based \\n', 'on Windows Server family systems. \\n', '• High-availability file server configuration using a Debian-based server system with smb \\n', 'protocol and authorization using Active Directory. \\n', '• Network security configuration with the Kerio gateway system. \\n', '• Design and support of the Qemu-KVM virtualization cluster for company infrastructure. \\n', '• Incident management using centralized monitoring and alerting system (Zabbix). \\n', ' \\n', '10/2013 — 08/2015 \\nSystem Administrator at School of Business and \\nManagement of Technology of BSU \\n', 'Minsk, Belarus \\n', '• LAN layout and installation. \\n', '• Design, monitoring, and maintenance of LAN based on Cisco vendor equipment. \\n', '• User technical support. \\n', '• Configuration of distributed Active Directory federation. \\n', '• Support of VMware based hypervisor cluster. \\n', '• The number of supported hosts is about 150. \\n', ' \\n', ' \\n04 COURSES \\n', ' \\n', 'Sep 2016 — Nov 2016 \\nCCNA 1 Introduction to Networks \\n', ' \\n \\n', 'Dec 2016 — Feb 2017 \\nCCNA 2 Routing and Switching Essentials \\n', ' \\n \\n', 'Mar 2017 — Apr 2017 \\nCCNA 3 Scaling Network \\n', ' \\n \\n', 'Apr 2017 — Jun 2019 \\nCCNA 4 Advanced Network \\n']","Fedor Shulyak 

DevOps Engineer 
 
 
 

Address 
Cambridge, United Kingdom 

Email 
shaaak11111@gmail.com 

Phone 
+447795877777 

 
 

 
01 PROFILE 
I am an IT professional over 6 years of experience, mostly as a DevOps Engineer. I have deep 

experience with various AWS services such as EC2 / RDS / DynamoDB / VPC / Route53 / 

EKS /S3 / ActiveMQ /Lambda / IAM / Cloudformation, etc. Also, I am proficient with Docker and 

Kubernetes for containerization tasks as well as Terraform as Infrastructure as Code tasks. Have 

hands-on experience with Ansible and Chef as configuration management tools, Python, and 

Shell for scripting means. Computer network experience. 

 
 

02 SKILLS 
Infrastructure as Code (IaC) 

Continuous Integration (CI) 

Terraform 

Kubernetes (k8s) 

Docker 

Ansible 

Chef 

Jenkins 

Teamcity 

Gitlab-CI 

Prometheus 

Amazon AWS 

Microsoft Azure 

Python Scripting 

Shell Scripting 

Computer Networks 

Linux 

Nginx 

Splunk 

 
03 EMPLOYMENT HISTORY 

 
 

09/2019 — Present 
DevOps Engineer at Gearset 
Cambridge, United 

Kingdom 

 

• Maintenance and development of high-load Kubernetes cluster hosted in AWS (kops / 

EKS). 

• Design and maintenance of application build, test, and infrastructure CI pipelines (python, 

bash, Teamcity). 

• Development of automated scripts for security and infrastructure control (using python and 

AWS Lambda). 

• Configured routine platform security audit (OWASP). 

• Close work with developers to provide necessary consultation about integration platform 

features and application itself. 

 

 

04/2019 — 09/2019 
Site Reliability Engineer at Accenture 
Riga, Latvia 

• Support of huge high-load development platform based on docker-swarm including 

multiple applications (Jira / Confluence / Jenkins / Gitlab / BitBucket / Selenium / Artifactory 

/ Nexus, etc.). 

• Managing AWS stack infrastructure using Cloudformation and Terraform. 

• Configuration and system management using Ansible. 

 
 

 

04/2018 — 04/2019 
DevOps Engineer at Accenture 
Riga, Latvia 

 

• DevOps team lead and team management. 

• Developed an isolated continuous integration production system for the client (based on 

Kubernetes and python automation). 

• Support of development processes with a configuration of CI/CD jobs and pipelines in 

Jenkins and GitLab-CI. Configuration and maintain docker images build pipelines and 

deployment processes to different environments. 

• System and configuration management using Chef. 

• Python and shell scripts development. 

 
 
 

11/2017 — 04/2018 
DevOps Lead at SolbegSoft 
Minsk, Belarus 

 

• Design and management of the company infrastructure and networks (Mikrotik / HP / 

Juniper / oVirt / VMWare / Windows Server / Active Directory ). 

• Achieved high redundancy of the company infrastructure. 

• Created fluent internal workflows, and implemented DevOps practices for many internal 

teams. 

• DevOps team training planning. 

• Improvement of internal company servers and network infrastructure. 

• Developed automated CI system for client dynamic websites hosted in AWS using Ansible, 

python and bash. 

 

 

03/2017 — 10/2017 
DevOps Engineer at SolbegSoft 
Minsk, Belarus 

 

• Configuration and maintenance of the high-load web cluster based on the NixOps 

configuration management and deployment system (Nixops / NixOS / Teamcity / AWS 

RDS). 

• Configuration of various CI/CD pipelines using Teamcity (for .Net / PHP / JS etc.). 

• Design and configuration from scratch web-cluster using Ansible, Terraform and AWS 

stack. Configuration docker images build for .Net Core-based project. 

• Configuration of virtualization Hyper-V and oVirt based failover cluster for internal company 

infrastructure. 

• Provisioning and maintenance of servers and networks in code-driven infrastructure (AWS) 

LAN hardware configuration (HP/Mikrotik) using Terraform and Ansible. 

 

 

09/2016 — 03/2017 
DevOps Engineer at Esodin.by 
Minsk, Belarus 

 

• Maintenance of the web cluster hosted in AWS using Ansible, Terraform. 

• Provisioning and support servers, networks hosted in AWS using Terraform. 

• Design and configuration of continuous integration pipelines in TeamCity. 

• Configuration and maintenance of .Net Core dockerized microservice system. 

01/2016 — 08/2016 
System Administrator at Esodin.by 
Minsk, Belarus 

 

• Technical user support. 

• LAN laying and installation. 

• Installation and configuration of services (Active Directory, DHCP, DNS, Samba) based 

on Windows Server family systems. 

• High-availability file server configuration using a Debian-based server system with smb 

protocol and authorization using Active Directory. 

• Network security configuration with the Kerio gateway system. 

• Design and support of the Qemu-KVM virtualization cluster for company infrastructure. 

• Incident management using centralized monitoring and alerting system (Zabbix). 

 

10/2013 — 08/2015 
System Administrator at School of Business and 
Management of Technology of BSU 

Minsk, Belarus 

• LAN layout and installation. 

• Design, monitoring, and maintenance of LAN based on Cisco vendor equipment. 

• User technical support. 

• Configuration of distributed Active Directory federation. 

• Support of VMware based hypervisor cluster. 

• The number of supported hosts is about 150. 

 

 
04 COURSES 

 

Sep 2016 — Nov 2016 
CCNA 1 Introduction to Networks 

 
 

Dec 2016 — Feb 2017 
CCNA 2 Routing and Switching Essentials 

 
 

Mar 2017 — Apr 2017 
CCNA 3 Scaling Network 

 
 

Apr 2017 — Jun 2019 
CCNA 4 Advanced Network 

"
95,source/Kairat KHISAMIEV.pdf,"['Kairat KHISAMIEV\\n', 'Senior JavaScript Developer with 6 YoE\\n', 'aiaa3t@gmail.com • Belgrade, Serbia\\n', 'Languages: JavaScript/TypeScript; Technologies: React, React Native, Next.js, Nest, CSS, CSS in JS, Playwright; Databases: PostgreSQL, Mongo,\\nElastic, Redis; Other: Docker;\\nFamiliar with: Nuxt, Vue, C++, Go, Kubernetes\\n', 'PROFESSIONAL EXPERIENCE\\nArchetype AI\\nAugust 2023 – October 2023\\n', 'Full stack Nest, React developer. Archetype AI - multimodal AI foundation model that fuses real-time sensor data with natural language.\\n', '●\\nPrototyped and implemented a scalable real-time low-latency (under 1 second) camera streaming service for following image processing\\nwith AI tools;\\n', '●\\nPrototyped an internal streamer’s visualizer for real-time stream playing;\\n', '●\\nOn a very tight schedule unblocked a release of a major product by implementing a scalable real-time low-latency (under 1 second) camera\\nstreaming service providing video feed to AI tools for processing at Archetype AI.\\n', 'Technologies: TypeScript, React, Nest, Socket.io, shadcn/ui, jest, vitest, npm.\\n', 'Spotnana (Vendor at Akvelon Inc)\\nFebruary 2022 – August 2023\\n', 'Frontend React/React Native developer. Spotnana - Travel-as-a-Service; powers unparalleled global travel experiences.\\n', '●\\nReduced app loading time from 400 to 200 milliseconds, improved design consistency and user experience and accessibility by transitioning\\nan old frontend UI design system to a new MUI 5-based one with lazy components;\\n', '●\\nImplemented features that gained Spotnana partnerships with Amazon, Walmart, and Meta;\\n', ""●\\nAdded extensive telemetry that significantly improved team's effectiveness by providing insights into user experience.\\n"", '●\\nReduced CI/CD running time from 50 minutes to 30 by optimizing unit tests and sharing best practices with the team;\\n', '●\\nIncreased code test coverage from 80% to 85%;\\n', '●\\nImproved developer experience and code quality by configuring eslint rules;\\n', '●\\nReduced total bundle size for 100kb by removing redux state manager, switching moment to days;\\n', '●\\nTightly interacted with a product manager and designer resulting in the implementation of consistent user-friendly UI;\\n', '●\\nLed a team of 3 developers.\\n', 'Technologies: TypeScript, React, React-Native, i18n, react-query, design system, Material UI, lerna, turborepo, jest, react testing library, playwright.\\n', 'Rentals-Platform (Vendor at Akvelon Inc)\\nMarch 2020 – November 2021\\n', 'Full stack Node, React, Vue developer. Rentals-Platform - is the premier online classifieds site for renting recreational vehicles.\\n', ""●\\nArchitected, built and supported Dealer and Shopping frontends and backends throughout the app's lifecycle;\\n"", '●\\nAutomated the tax rates calculation by integration with Avalara tax calculation service;\\n', '●\\nAutomated the customer support service actions by implementing admin tools for complex booking refund and update scenarios;\\n', '●\\nAssisted in the migration of 100 new customers to the rentals platform by migrating databases and continuously syncing databases from third-\\nparty services;\\n', '●\\nLed a team of 3 developers.\\n', 'Technologies: JavaScript/TypeScript, Next.js, Nest, Nuxt, AWS Functions, S3, Mongo, PostgreSQL, Hasura, Elastic Search, Kibana, Bootstrap,\\nMaterial UI Core, MobX, Vuex.\\n', 'Maana (Vendor at Akvelon Inc)\\nMay 2019 – March 2020\\n', 'Frontend React developer. Maana - solution for Oil and Gas companies to optimize their data with intelligent systems\\n', '●\\nImplemented a real-time data analyzing tool and notification system using Material-UI;\\n', '●\\nHelped gain a new partnership by implementing MS Azure SSO which was a keystone requirement of the new\\n', 'client. Technologies: JavaScript/TypeScript, React, React-Apollo, Material UI.\\n', 'National energy company (Vendor at Optisoft)\\nJanuary 2018 – May 2019\\n', 'Full-stack NET Developer/React developer. Project for real-time fleet management of over 1000 cars.\\n', '●\\nArchitected and built REST API and database structure;\\n', '●\\nAutomated entire business operational workflow: booking vehicles, maintaining vehicles, and budget\\n', 'calculation. Technologies: JavaScript, C#, React, Redux, Asp net core, EF core, Postgresql.\\n', 'CERTIFICATION\\n', 'AWS Certified Cloud Practioner, Amazon Web Services, Dec 2021, Certification ID: GJRNHZDDFJEEQ69S\\n', 'EDUCATION\\n', ""Bachelor's Degree in Applied Computer Science Kazan National Research Technical University named after A. N. Tupolev.\\n""]","Kairat KHISAMIEV

Senior JavaScript Developer with 6 YoE

aiaa3t@gmail.com • Belgrade, Serbia

Languages: JavaScript/TypeScript; Technologies: React, React Native, Next.js, Nest, CSS, CSS in JS, Playwright; Databases: PostgreSQL, Mongo,
Elastic, Redis; Other: Docker;
Familiar with: Nuxt, Vue, C++, Go, Kubernetes

PROFESSIONAL EXPERIENCE
Archetype AI
August 2023 – October 2023

Full stack Nest, React developer. Archetype AI - multimodal AI foundation model that fuses real-time sensor data with natural language.

●
Prototyped and implemented a scalable real-time low-latency (under 1 second) camera streaming service for following image processing
with AI tools;

●
Prototyped an internal streamer’s visualizer for real-time stream playing;

●
On a very tight schedule unblocked a release of a major product by implementing a scalable real-time low-latency (under 1 second) camera
streaming service providing video feed to AI tools for processing at Archetype AI.

Technologies: TypeScript, React, Nest, Socket.io, shadcn/ui, jest, vitest, npm.

Spotnana (Vendor at Akvelon Inc)
February 2022 – August 2023

Frontend React/React Native developer. Spotnana - Travel-as-a-Service; powers unparalleled global travel experiences.

●
Reduced app loading time from 400 to 200 milliseconds, improved design consistency and user experience and accessibility by transitioning
an old frontend UI design system to a new MUI 5-based one with lazy components;

●
Implemented features that gained Spotnana partnerships with Amazon, Walmart, and Meta;

●
Added extensive telemetry that significantly improved team's effectiveness by providing insights into user experience.

●
Reduced CI/CD running time from 50 minutes to 30 by optimizing unit tests and sharing best practices with the team;

●
Increased code test coverage from 80% to 85%;

●
Improved developer experience and code quality by configuring eslint rules;

●
Reduced total bundle size for 100kb by removing redux state manager, switching moment to days;

●
Tightly interacted with a product manager and designer resulting in the implementation of consistent user-friendly UI;

●
Led a team of 3 developers.

Technologies: TypeScript, React, React-Native, i18n, react-query, design system, Material UI, lerna, turborepo, jest, react testing library, playwright.

Rentals-Platform (Vendor at Akvelon Inc)
March 2020 – November 2021

Full stack Node, React, Vue developer. Rentals-Platform - is the premier online classifieds site for renting recreational vehicles.

●
Architected, built and supported Dealer and Shopping frontends and backends throughout the app's lifecycle;

●
Automated the tax rates calculation by integration with Avalara tax calculation service;

●
Automated the customer support service actions by implementing admin tools for complex booking refund and update scenarios;

●
Assisted in the migration of 100 new customers to the rentals platform by migrating databases and continuously syncing databases from third-
party services;

●
Led a team of 3 developers.

Technologies: JavaScript/TypeScript, Next.js, Nest, Nuxt, AWS Functions, S3, Mongo, PostgreSQL, Hasura, Elastic Search, Kibana, Bootstrap,
Material UI Core, MobX, Vuex.

Maana (Vendor at Akvelon Inc)
May 2019 – March 2020

Frontend React developer. Maana - solution for Oil and Gas companies to optimize their data with intelligent systems

●
Implemented a real-time data analyzing tool and notification system using Material-UI;

●
Helped gain a new partnership by implementing MS Azure SSO which was a keystone requirement of the new

client. Technologies: JavaScript/TypeScript, React, React-Apollo, Material UI.

National energy company (Vendor at Optisoft)
January 2018 – May 2019

Full-stack NET Developer/React developer. Project for real-time fleet management of over 1000 cars.

●
Architected and built REST API and database structure;

●
Automated entire business operational workflow: booking vehicles, maintaining vehicles, and budget

calculation. Technologies: JavaScript, C#, React, Redux, Asp net core, EF core, Postgresql.

CERTIFICATION

AWS Certified Cloud Practioner, Amazon Web Services, Dec 2021, Certification ID: GJRNHZDDFJEEQ69S

EDUCATION

Bachelor's Degree in Applied Computer Science Kazan National Research Technical University named after A. N. Tupolev.

"
96,source/Evgenii Kalinin.pdf,"['Evgenii Kalinin \\n', 'MyHomeCity, Ohio | 513-000-0000 | xxxxxxx@gmail.com | https://www.linkedin.com/in/xxxxxxxxxx/ \\n', ' \\nSUMMARY \\n', 'IT professional with more than 15 years of experience in the field. Quick learner. Has a wide variety of skills in \\nnetworking, IT infrastructure, operating systems, virtualization, cloud technologies, databases, system design, \\ndeployment automation, monitoring and more. Adept at utilizing consistent and organized practices to \\nachieve company goals, even in high-pressure environments. \\n', ' \\nPROFESSIONAL EXPERIENCE \\n', ' \\nTechnical Operations Manager | MyCurrentCompany | MyHomeCity, OH \\nJuly 2019 – Current \\n', '• Led 7 projects from Managed Services Operations side through the entire project life cycle, successfully \\n', 'meeting SLA conditions. \\n', '• Implemented changes to the monitoring systems that resulted in reduction of the number of incidents by \\n', '20%. \\n', '• Made improvements to the alert management process that decreased the number of monitoring events \\n', 'by 70% and reduced LOE for the L1 support team accordingly. \\n', '• Prepared detailed technical plans and instructions for engineering teams conducting maintenance \\n', 'windows. \\n', '• Designed and implemented components for large-scale systems, including but not limited to: network \\n', 'design, load balancing, capacity planning, performance analysis, disaster recovery, CI/CD, autoscaling. \\n', '• Worked on triage, investigation and resolution of Production incidents. \\n• Guided, coached and lead project teams, delegating tasks and evaluating performance and progression of \\n', 'project pace. \\n', ' \\nLead IT Engineer | MyCurrentCompany \\nJanuary 2017 – July 2019 \\n', '• Implemented monitoring systems and performance analysis tools based on Prometheus, Victoria Metrics, \\n', 'Grafana, ICINGA. \\n', '• Implemented deployment automation processes based on GitLab CI, Ansible, AWX, Jenkins, Rundeck and \\n', 'other automation solutions. \\n', '• Developed Bash and Python wrappers for legacy automation jobs and monitoring tools. \\n• Supported migration of legacy solutions to environments based on Docker and Kubernetes. \\n• Organized migration of software solutions to virtualized environments based on KVM, Hyper-V, VMWare. \\n', ' \\nIT Engineer | MyCurrentCompany \\nApril 2014 – January 2017 \\n', '• Utilized knowledge of Linux operating system, network equipment and protocols to perform \\n', 'administration, performance analysis and troubleshooting of large-scale software solutions in Production \\nand Non-Production environments. \\n', '• Acquired experience in administration and troubleshooting of systems based on Linux, Weblogic, Java, \\n', 'Oracle DB, Oracle RAC. \\n', '• Developed Bash and Python scripts to automate day-to-day activities of Managed Services Operations \\n', 'team. \\n', '• Supported implementation of new ticketing systems based on Jira. \\n', 'Head of Network Operations Department | MyExCompany | Saratov, Russian Federation February 2012 – April 2014 \\n', '• Completed migration of the backbone network nodes in regional data centers from Cisco 7200 series to \\n', 'Cisco ASR 9000 series \\n', '• Implemented new network monitoring and incident management strategies with proactive approach. \\n', 'That decreased the number of incidents by about 30%, improved SLIs and reduced average resolution time \\nfor Sev.1 and Sev.2 incidents by at least 10%. \\n', '• Provided technical guidance and expertise to the Network Development and Network Operation teams. \\n', ' \\nLead Network Operations Engineer | MyExCompany \\nSeptember 2010 – February 2012 \\n', '• Implemented IPv6 on the backbone network and RAS devices. \\n• Implemented IGMP over MPLS on the backbone network to provide triple play services to the customers \\n• Performed troubleshooting for Juniper, Cisco and other network equipment using port mirroring and \\n', 'deep packet analysis. \\n', '• Deployed hardware-based and software-based PBX setups with GSM gateways, SIP and different kinds of \\n', 'trunks. \\n', '• Troubleshot complex multi-vendor network service provider issues. \\n• Collaborated with vendors to identify best options for optimizing network performance. \\n• Implemented new network monitoring strategy based on Cricket and a self-made alerting system. \\n', ' \\nNetwork Operations Engineer | MyExCompany \\nMarch 2008 – September 2010 \\n', '• Utilized knowledge of TCP/IP stack and other network protocols like OSPF, ISIS, BGP, MPLS to provide \\n', 'reliable operations of a large region-scaled network. \\n', '• Utilized knowledge of Cisco, Juniper, Dell, Huawei, D-Link and network equipment of other vendors to \\n', 'support day-to-day work of the Network Operations Department \\n', '• Used deep knowledge of network protocols to analyze the traffic captured from the network devices 0to \\n', 'troubleshoot network issues. \\n', '• Performed network devices provisioning. \\n• Monitored network capacity and performance to diagnose and resolve complex network problems. \\n', ' \\nSKILLS \\n', 'ITIL • Linux • System Administration • Ansible • AWX • Jenkins • CI/CD • Gitlab CI • Docker • Kubernetes • KVM, QEMU, \\nHyper-V, VMWare • Oracle DB, RAC, ASM • Weblogic • System Design • High Availability • Performance Monitoring • \\nFault Monitoring • Capacity Planning • Load Balancing • SSL • TLS • TSDB - Prometheus, InfluxDB • Grafana • \\nNetworking, Firewalls, VPN • Cisco, Juniper • Routing - BGP, OSPF, MPLS • L2 networking • VoIP • SIP • RTP/SRTP • \\nDial Plans • Communication channel equipment \\n', ' \\nPROGRAMMING AND SCRIPTING \\n', 'Python • Shell / Bash • C • Java • JavaScript • SQL, PL/SQL • WLST \\n', ' \\nEDUCATION \\n', 'Saratov State University | Saratov, Russian Federation | 1999 – 2004 \\n', 'Field of Study – Computer Science \\nDegree Obtained – University Diploma, Engineering \\n']","Evgenii Kalinin 

MyHomeCity, Ohio | 513-000-0000 | xxxxxxx@gmail.com | https://www.linkedin.com/in/xxxxxxxxxx/ 

 
SUMMARY 

IT professional with more than 15 years of experience in the field. Quick learner. Has a wide variety of skills in 
networking, IT infrastructure, operating systems, virtualization, cloud technologies, databases, system design, 
deployment automation, monitoring and more. Adept at utilizing consistent and organized practices to 
achieve company goals, even in high-pressure environments. 

 
PROFESSIONAL EXPERIENCE 

 
Technical Operations Manager | MyCurrentCompany | MyHomeCity, OH 
July 2019 – Current 

• Led 7 projects from Managed Services Operations side through the entire project life cycle, successfully 

meeting SLA conditions. 

• Implemented changes to the monitoring systems that resulted in reduction of the number of incidents by 

20%. 

• Made improvements to the alert management process that decreased the number of monitoring events 

by 70% and reduced LOE for the L1 support team accordingly. 

• Prepared detailed technical plans and instructions for engineering teams conducting maintenance 

windows. 

• Designed and implemented components for large-scale systems, including but not limited to: network 

design, load balancing, capacity planning, performance analysis, disaster recovery, CI/CD, autoscaling. 

• Worked on triage, investigation and resolution of Production incidents. 
• Guided, coached and lead project teams, delegating tasks and evaluating performance and progression of 

project pace. 

 
Lead IT Engineer | MyCurrentCompany 
January 2017 – July 2019 

• Implemented monitoring systems and performance analysis tools based on Prometheus, Victoria Metrics, 

Grafana, ICINGA. 

• Implemented deployment automation processes based on GitLab CI, Ansible, AWX, Jenkins, Rundeck and 

other automation solutions. 

• Developed Bash and Python wrappers for legacy automation jobs and monitoring tools. 
• Supported migration of legacy solutions to environments based on Docker and Kubernetes. 
• Organized migration of software solutions to virtualized environments based on KVM, Hyper-V, VMWare. 

 
IT Engineer | MyCurrentCompany 
April 2014 – January 2017 

• Utilized knowledge of Linux operating system, network equipment and protocols to perform 

administration, performance analysis and troubleshooting of large-scale software solutions in Production 
and Non-Production environments. 

• Acquired experience in administration and troubleshooting of systems based on Linux, Weblogic, Java, 

Oracle DB, Oracle RAC. 

• Developed Bash and Python scripts to automate day-to-day activities of Managed Services Operations 

team. 

• Supported implementation of new ticketing systems based on Jira. 

Head of Network Operations Department | MyExCompany | Saratov, Russian Federation February 2012 – April 2014 

• Completed migration of the backbone network nodes in regional data centers from Cisco 7200 series to 

Cisco ASR 9000 series 

• Implemented new network monitoring and incident management strategies with proactive approach. 

That decreased the number of incidents by about 30%, improved SLIs and reduced average resolution time 
for Sev.1 and Sev.2 incidents by at least 10%. 

• Provided technical guidance and expertise to the Network Development and Network Operation teams. 

 
Lead Network Operations Engineer | MyExCompany 
September 2010 – February 2012 

• Implemented IPv6 on the backbone network and RAS devices. 
• Implemented IGMP over MPLS on the backbone network to provide triple play services to the customers 
• Performed troubleshooting for Juniper, Cisco and other network equipment using port mirroring and 

deep packet analysis. 

• Deployed hardware-based and software-based PBX setups with GSM gateways, SIP and different kinds of 

trunks. 

• Troubleshot complex multi-vendor network service provider issues. 
• Collaborated with vendors to identify best options for optimizing network performance. 
• Implemented new network monitoring strategy based on Cricket and a self-made alerting system. 

 
Network Operations Engineer | MyExCompany 
March 2008 – September 2010 

• Utilized knowledge of TCP/IP stack and other network protocols like OSPF, ISIS, BGP, MPLS to provide 

reliable operations of a large region-scaled network. 

• Utilized knowledge of Cisco, Juniper, Dell, Huawei, D-Link and network equipment of other vendors to 

support day-to-day work of the Network Operations Department 

• Used deep knowledge of network protocols to analyze the traffic captured from the network devices 0to 

troubleshoot network issues. 

• Performed network devices provisioning. 
• Monitored network capacity and performance to diagnose and resolve complex network problems. 

 
SKILLS 

ITIL • Linux • System Administration • Ansible • AWX • Jenkins • CI/CD • Gitlab CI • Docker • Kubernetes • KVM, QEMU, 
Hyper-V, VMWare • Oracle DB, RAC, ASM • Weblogic • System Design • High Availability • Performance Monitoring • 
Fault Monitoring • Capacity Planning • Load Balancing • SSL • TLS • TSDB - Prometheus, InfluxDB • Grafana • 
Networking, Firewalls, VPN • Cisco, Juniper • Routing - BGP, OSPF, MPLS • L2 networking • VoIP • SIP • RTP/SRTP • 
Dial Plans • Communication channel equipment 

 
PROGRAMMING AND SCRIPTING 

Python • Shell / Bash • C • Java • JavaScript • SQL, PL/SQL • WLST 

 
EDUCATION 

Saratov State University | Saratov, Russian Federation | 1999 – 2004 

Field of Study – Computer Science 
Degree Obtained – University Diploma, Engineering 

"
97,source/DENIS NEBESNOV.pdf,"['DENIS NEBESNOV\\n', '+7-921-000-00-61 ⋄ Alanya Turkey ⋄ Open to relocation\\n', 'daaaesnov@gmail.com ⋄ Linkedin ⋄ Telegram\\n', 'SUMMARY\\n', ""With over a decade of experience in IT Project Development, Service Operations, and Project Management, I have\\nconsistently demonstrated my ability to lead and deliver successful outcomes. I've led diverse teams ranging from\\n5 to 40 members, effectively optimizing resource allocation for project success. My collaborative approach\\nextends across all organizational levels, from frontline workers to senior executives. I've managed budgets\\nranging from\\n$50k to $2mln, ensuring efficient resource utilization. My expertise lies in adeptly navigating complex\\nenvironments, addressing policy challenges, and overcoming bureaucratic obstacles while consistently achieving\\nproject objectives.\\n"", 'PROFESSIONAL EXPERIENCE\\n', 'ITSM independent consultant | Part time Project manager, Freelance\\nJul 2022 - Current\\n', '• Assisted with redesign process workflows, roles and responsibilities, documentation, and associated tools to\\n', 'reduce silos between teams and increase efficiency and decrease average time to resolution from 24 hours\\nto 8 working hours.\\n', '• Consulted with ITSM tool selection by identifying key aspects for compare and business requirements,\\n', 'policies and current team experience. Researched 8 products and arranged 4 demonstrations with vendors\\nor its partners.\\n', 'Service Manager, Gazpromneft\\nApr 2021 - Jul 2022\\n', '• Provided a cloud-based service CaaS (Containers as a Service) to approximately 120 internal development\\n', 'teams by managing service team of 8 engineers (3 FTE of 2nd line engineers, 3 FTE of development and\\nmaintain engineers + 2 FTE of 1st line support specialists).\\n', '• Developed and presented a new service, payment, and ordering process, negotiated over 100 projects and\\n', 'secured and signed contracts with over 80% of them.\\n', '• Streamlined end-to-end workflow and adjusted Jira for Support and Development teams. As a result,\\n', 'Increased number of incidents and requests resolved within SLA from 80% to 92%.\\n', '• Conducted collaborative meetings, enhancing planning efficiency and reducing consultancy requests from\\n', '20% to less than 5%. This effort also eliminated service incidents due to communication issues and speeded\\nup service request assignments from 5 to 2 hours using a clear matrix and definitions.\\n', '• Optimized monitoring processes and implemented Grafana dashboards, resulting in a remarkable 83%\\n', 'reduction in monthly report preparation time from 24 hours to just 4 hours. This enhanced issue\\ninvestigations, provided strong evidence during discussions, and effectively identified and addressed\\nperformance bottlenecks, leading to significant time and resource savings.\\n', '• Contributed to the launch of new services (CaaS, DaaS, PaaS) and established a comprehensive service\\n', 'catalog for the transition team. This involved developing architecture, budgets, service request catalogs,\\ndefining objectives, tariffs, developing SLAs, and contracts.\\n', 'Head of the Support Team, Kirovsky zavod\\nJun 2012 - Mar 2021\\n', '•\\nEstablished and supervised technical support services, leading a team of 8 to 12 engineers covering\\n', 'both 1st and 2nd lines of support. Maintained over 5000 CI and delivered support to approximately 2500\\nusers.\\n', '•\\nEnhanced the Service Desk tool by implementing streamlined workflows tailored to request types,\\n', 'optimizing alerts, generating reports, and updating the service portfolio. This transitioned 30% of requests\\nfrom phone or email to 80% through the customer portal, freeing up more time for maintenance and service\\nrequests.\\n', '• By initiating and managing the development of a PC inventory tool for 5000+ assets and introducing an\\n', 'annual technical audit for precise infrastructure insight, cost forecasting, and risk management, I improved\\nasset-accounting alignment, simplified inventory processes, and saved 10-15% in CAPEX on user devices.\\n', '• In partnership with Ricoh, I enhanced the printing service by implementing a secure printing management\\n', 'system, Streamline NX, and unifying devices. This resulted in significant cost savings, with expenditures\\ndropping from 1.2 million rubles per year for toner and spare parts to 800 thousand rubles. Additionally, we\\nreduced incident requests by over 80%.\\n', 'Project Manager, Kirov-Enorgomash\\nApr 2010 – Jun 2012\\n', '• Managed a complex Nuclear Power Plant device development project, overseeing all stages from design to\\n', 'commissioning. With a budget exceeding 200 million rubles, over 5000 parts, a height requirement of 120\\nmeters, and a load capacity of 80+ tons, I ensured successful project completion while meeting deadlines,\\nensuring quality, and coordinating with contractors\\n', '• Analyzed cost projections, identified gaps in expenses and project duration estimates, and successfully\\n', 'negotiated contract changes, adding 30 million rubles to the contract cost and extending the due date by\\nthree years. Additionally, optimized control operations, saving over 20 million rubles and cutting production\\ntime by three months.\\n', 'SKILLS\\n', 'Tools and methodology: ITSM, Jira, Manage Engine, HPSM, BPMN, Waterfall, Kanban, Scrum, Power BI· MS\\nProject, MS Excel, Grafana\\n', 'Skills: Leadership, Project Management, Communication, Emotional intelligence, Coaching and Mentoring,\\nStrategic Planning, Operation management, HR Management, Compliance and Regulations, Quality Control,\\nInventory Management, Risk Management\\n', 'Language skills: Russian: native, English: Proficient (C1)\\n', 'EDUCATION\\n', 'Peter the Great St. Petersburg Polytechnic University\\nBS: Information Technology in Industry\\n2010\\n']","DENIS NEBESNOV

+7-921-000-00-61 ⋄ Alanya Turkey ⋄ Open to relocation

daaaesnov@gmail.com ⋄ Linkedin ⋄ Telegram

SUMMARY

With over a decade of experience in IT Project Development, Service Operations, and Project Management, I have
consistently demonstrated my ability to lead and deliver successful outcomes. I've led diverse teams ranging from
5 to 40 members, effectively optimizing resource allocation for project success. My collaborative approach
extends across all organizational levels, from frontline workers to senior executives. I've managed budgets
ranging from
$50k to $2mln, ensuring efficient resource utilization. My expertise lies in adeptly navigating complex
environments, addressing policy challenges, and overcoming bureaucratic obstacles while consistently achieving
project objectives.

PROFESSIONAL EXPERIENCE

ITSM independent consultant | Part time Project manager, Freelance
Jul 2022 - Current

• Assisted with redesign process workflows, roles and responsibilities, documentation, and associated tools to

reduce silos between teams and increase efficiency and decrease average time to resolution from 24 hours
to 8 working hours.

• Consulted with ITSM tool selection by identifying key aspects for compare and business requirements,

policies and current team experience. Researched 8 products and arranged 4 demonstrations with vendors
or its partners.

Service Manager, Gazpromneft
Apr 2021 - Jul 2022

• Provided a cloud-based service CaaS (Containers as a Service) to approximately 120 internal development

teams by managing service team of 8 engineers (3 FTE of 2nd line engineers, 3 FTE of development and
maintain engineers + 2 FTE of 1st line support specialists).

• Developed and presented a new service, payment, and ordering process, negotiated over 100 projects and

secured and signed contracts with over 80% of them.

• Streamlined end-to-end workflow and adjusted Jira for Support and Development teams. As a result,

Increased number of incidents and requests resolved within SLA from 80% to 92%.

• Conducted collaborative meetings, enhancing planning efficiency and reducing consultancy requests from

20% to less than 5%. This effort also eliminated service incidents due to communication issues and speeded
up service request assignments from 5 to 2 hours using a clear matrix and definitions.

• Optimized monitoring processes and implemented Grafana dashboards, resulting in a remarkable 83%

reduction in monthly report preparation time from 24 hours to just 4 hours. This enhanced issue
investigations, provided strong evidence during discussions, and effectively identified and addressed
performance bottlenecks, leading to significant time and resource savings.

• Contributed to the launch of new services (CaaS, DaaS, PaaS) and established a comprehensive service

catalog for the transition team. This involved developing architecture, budgets, service request catalogs,
defining objectives, tariffs, developing SLAs, and contracts.

Head of the Support Team, Kirovsky zavod
Jun 2012 - Mar 2021

•
Established and supervised technical support services, leading a team of 8 to 12 engineers covering

both 1st and 2nd lines of support. Maintained over 5000 CI and delivered support to approximately 2500
users.

•
Enhanced the Service Desk tool by implementing streamlined workflows tailored to request types,

optimizing alerts, generating reports, and updating the service portfolio. This transitioned 30% of requests
from phone or email to 80% through the customer portal, freeing up more time for maintenance and service
requests.

• By initiating and managing the development of a PC inventory tool for 5000+ assets and introducing an

annual technical audit for precise infrastructure insight, cost forecasting, and risk management, I improved
asset-accounting alignment, simplified inventory processes, and saved 10-15% in CAPEX on user devices.

• In partnership with Ricoh, I enhanced the printing service by implementing a secure printing management

system, Streamline NX, and unifying devices. This resulted in significant cost savings, with expenditures
dropping from 1.2 million rubles per year for toner and spare parts to 800 thousand rubles. Additionally, we
reduced incident requests by over 80%.

Project Manager, Kirov-Enorgomash
Apr 2010 – Jun 2012

• Managed a complex Nuclear Power Plant device development project, overseeing all stages from design to

commissioning. With a budget exceeding 200 million rubles, over 5000 parts, a height requirement of 120
meters, and a load capacity of 80+ tons, I ensured successful project completion while meeting deadlines,
ensuring quality, and coordinating with contractors

• Analyzed cost projections, identified gaps in expenses and project duration estimates, and successfully

negotiated contract changes, adding 30 million rubles to the contract cost and extending the due date by
three years. Additionally, optimized control operations, saving over 20 million rubles and cutting production
time by three months.

SKILLS

Tools and methodology: ITSM, Jira, Manage Engine, HPSM, BPMN, Waterfall, Kanban, Scrum, Power BI· MS
Project, MS Excel, Grafana

Skills: Leadership, Project Management, Communication, Emotional intelligence, Coaching and Mentoring,
Strategic Planning, Operation management, HR Management, Compliance and Regulations, Quality Control,
Inventory Management, Risk Management

Language skills: Russian: native, English: Proficient (C1)

EDUCATION

Peter the Great St. Petersburg Polytechnic University
BS: Information Technology in Industry
2010

"
98,source/JOHN SMITH.pdf,"['JOHN SMITH \\n', '+99999999 · johnsmith@gmail.com \\n', 'linkedin.com/in/johnsmith/ · github.com/john_smith \\n', ' \\n', 'EDUCATION \\n', 'Some University · Astana, Kazakhstan \\n', 'B.S. in Computer Science \\n• Selected coursework: Computer Systems and Organization · Programming Languages · Performance and \\n', 'Data Structures · Formal Languages ·Algorithms \\n', '• Activity: Some club \\n', ' \\n', 'EXPERIENCE \\n', 'Company · Software Developer Intern · Astana, Kazakhstan \\nJun 2023-Aug 2023 \\n', '• Implemented a synchronous API polling feature in an iOS app, reducing picture loading latency by 67%. \\n• Developed login and registration functionality, enhancing user security with IOS Keychain and streamlining the \\n', 'onboarding process for about 500 registered users. \\n', '• Refactored the existing Python API codebase on FastAPI to support new database architecture. \\n', ' \\n', 'PROJECTS \\n', 'Grocery Store \\n• Developed an MVC-based application for a grocery store, utilizing REST API for data retrieval. \\n• Employed UICollectionView to populate the screen with a wide range of grocery products. \\n• Implemented validation for the UITextField, ensuring data integrity before allowing users to proceed with the \\n', 'checkout process. \\n', ""Messenger \\n• Integrated Firebase as the backend service for storing and managing users' messages, ensuring real-time \\n"", 'synchronization and data persistence. \\n', '• Effectively managed dependencies using CocoaPods, specifically to incorporate animations for the launch \\n', 'screen, enhancing the overall user experience. \\n', ""Clima \\n• Designed and developed a weather application for iOS devices. \\n• Implemented geolocation functionality to determine the user's current location and display the weather \\n"", 'temperature based on their geolocation using Core Location. \\n', '• Integrated the OpenWeather API to fetch weather data for a specified city, providing accurate weather \\n', 'information. \\n', 'News \\n• News app written on the MVC architecture. [infinite scroll, divided into 6 categories, polling api] \\n \\n', 'SKILLS \\n', '• Programming Languages: Swift, C++, C, Python, Java. \\n• Technologies and Frameworks: OOP, UIKit, SwiftUI, Firebase Cloud Firestore, Cocoapods, Git, AutoLayout, \\n', 'RestAPI, UsersDefaults, Core Data, JSON Decoding, MVC/MVP \\n']","JOHN SMITH 

+99999999 · johnsmith@gmail.com 

linkedin.com/in/johnsmith/ · github.com/john_smith 

 

EDUCATION 

Some University · Astana, Kazakhstan 

B.S. in Computer Science 
• Selected coursework: Computer Systems and Organization · Programming Languages · Performance and 

Data Structures · Formal Languages ·Algorithms 

• Activity: Some club 

 

EXPERIENCE 

Company · Software Developer Intern · Astana, Kazakhstan 
Jun 2023-Aug 2023 

• Implemented a synchronous API polling feature in an iOS app, reducing picture loading latency by 67%. 
• Developed login and registration functionality, enhancing user security with IOS Keychain and streamlining the 

onboarding process for about 500 registered users. 

• Refactored the existing Python API codebase on FastAPI to support new database architecture. 

 

PROJECTS 

Grocery Store 
• Developed an MVC-based application for a grocery store, utilizing REST API for data retrieval. 
• Employed UICollectionView to populate the screen with a wide range of grocery products. 
• Implemented validation for the UITextField, ensuring data integrity before allowing users to proceed with the 

checkout process. 

Messenger 
• Integrated Firebase as the backend service for storing and managing users' messages, ensuring real-time 

synchronization and data persistence. 

• Effectively managed dependencies using CocoaPods, specifically to incorporate animations for the launch 

screen, enhancing the overall user experience. 

Clima 
• Designed and developed a weather application for iOS devices. 
• Implemented geolocation functionality to determine the user's current location and display the weather 

temperature based on their geolocation using Core Location. 

• Integrated the OpenWeather API to fetch weather data for a specified city, providing accurate weather 

information. 

News 
• News app written on the MVC architecture. [infinite scroll, divided into 6 categories, polling api] 
 

SKILLS 

• Programming Languages: Swift, C++, C, Python, Java. 
• Technologies and Frameworks: OOP, UIKit, SwiftUI, Firebase Cloud Firestore, Cocoapods, Git, AutoLayout, 

RestAPI, UsersDefaults, Core Data, JSON Decoding, MVC/MVP 

"
99,source/Mikhail Mukhamatulin.pdf,"['Mikhail Mukhamatulin \\n', '+7-981-809-26-88 | mikeee.mukhamatulin@gmail.com  \\n', 'EMPLOYMENT \\n', 'Deutsche Bank \\nJan 2019 - Present \\n', 'Software Engineer, Associate \\nSaint Petersburg, Russia \\n', '• Standardized inter-process communications methods between micro-frontend applications by developing gRPC \\n', 'message broker service in C# and promoting its adoption across teams \\n', '• Implemented REST API reverse-proxy using ASP.NET for gRPC services of frontend applications, which \\n', 'drastically simplified a mocking of communication between apps for E2E testing and increased code coverage \\n', '• Ported several WPF views of monolith C# desktop application to micro-frontend Typescript Angular apps, which \\n', 'reduced initial application size and gave the ability to independently deploy those view components \\n', '• Decreased time of opening web-based application popups from 10 seconds to less than 2 in 95% of cases, by \\n', 'creating preload and reuse mechanism of renderer processes in Chromium Embedded Framework \\n', '• Developed extension JavaScript API which gave the ability to applications launched inside the embedded browser \\n', 'of desktop client to manipulate the browser window properties and interact with applications platform \\n', '• Fixed various critical bugs of CEF running on client’s restrictive environments and, thus, unblocked migration of \\n', 'several applications and removed the company’s reputational risks \\n', 'Swordfish Security \\nMay 2018 - Dec 2018 \\n', 'Full Stack .NET Developer \\nSaint Petersburg, Russia \\n', '• Developed a secure cross-platform local secrets’ storage service for macOS and Windows on .NET Core, which \\n', 'simplified and sped up desktop client application development \\n', '• Substantially increased application testability and shortened release cycle from 3 months to 2 weeks by leading \\n', 'MVVM adoption inside team for desktop client application development \\n', '• Implemented a cross-session caching mechanism of client-server requests, which has reduced the desktop \\n', 'application’s startup time by 80% \\n', '• Won first place on the company’s internal hackathon by creating an experimental iOS application to install and \\n', 'update security certificates on mobile devices using animated QR-codes \\n', 'Belkasoft \\nOct 2015 - Apr 2018 \\n', 'Software Engineer \\nSaint Petersburg, Russia \\n', '• Decreased disk image scan time by 22% and reduced application’s CPU load by 17%, by implementing an \\n', 'asynchronous C# API for reading data from the various file systems and disk images \\n', '• Designed and developed the application’s dashboard page with charts of the latest disk image scans, which was \\n', 'widely used in the application’s promotion materials and greatly increased the appeal of the product to customers \\n', '• Separated a pipeline of building Lucene search index by moving it to a dedicated process that handles a persistent \\n', 'job queue and, thus, improved reliability and simplified workflow of disk image scan \\n', '• Developed SQLite3 database file parser with support of reading freelist, unallocated space, rollback journal, and \\n', 'write-ahead log, which gave access to deleted entries and allowed to work with damaged database files \\n', '• Created an alternative implementation of Android Debug Bridge protocol, which allowed to capture whole mobile \\n', 'device storage image via USB for the following data analysis \\n', 'EDUCATION \\n', 'Saint Petersburg State University \\nSep 2012 - Jul 2016 \\n', 'Bachelor of Science in Applied Mathematics and Computer Science | GPA: 3.76 (4.76/5) \\nSaint Petersburg, Russia \\n', 'PROJECTS \\n', 'AnkiOneClick | Popup dictionary extension for Chrome which allows creating unknown foreign word flashcards with \\ntranslations for Anki (TypeScript, React, Python, Flask) \\n', 'SpbBuildingAgeMaps | Data Visualization of buildings ages in Saint Petersburg based on information parsed from \\nseveral sources and built using OpenStreetMap and CartoDB (C#, SQLite) \\n', 'TECHNICAL SKILLS \\n', 'Languages: C#, TypeScript, JavaScript, Python, C++ \\nDatabases: MSSQL, MySQL, SQLite \\nFrameworks: WPF, Xamarin, ASP.NET, React, Angular, Backbone.js \\nTechnologies: CEF, Node.js, Electron, gRPC, Lucene \\n']","Mikhail Mukhamatulin 

+7-981-809-26-88 | mikeee.mukhamatulin@gmail.com  

EMPLOYMENT 

Deutsche Bank 
Jan 2019 - Present 

Software Engineer, Associate 
Saint Petersburg, Russia 

• Standardized inter-process communications methods between micro-frontend applications by developing gRPC 

message broker service in C# and promoting its adoption across teams 

• Implemented REST API reverse-proxy using ASP.NET for gRPC services of frontend applications, which 

drastically simplified a mocking of communication between apps for E2E testing and increased code coverage 

• Ported several WPF views of monolith C# desktop application to micro-frontend Typescript Angular apps, which 

reduced initial application size and gave the ability to independently deploy those view components 

• Decreased time of opening web-based application popups from 10 seconds to less than 2 in 95% of cases, by 

creating preload and reuse mechanism of renderer processes in Chromium Embedded Framework 

• Developed extension JavaScript API which gave the ability to applications launched inside the embedded browser 

of desktop client to manipulate the browser window properties and interact with applications platform 

• Fixed various critical bugs of CEF running on client’s restrictive environments and, thus, unblocked migration of 

several applications and removed the company’s reputational risks 

Swordfish Security 
May 2018 - Dec 2018 

Full Stack .NET Developer 
Saint Petersburg, Russia 

• Developed a secure cross-platform local secrets’ storage service for macOS and Windows on .NET Core, which 

simplified and sped up desktop client application development 

• Substantially increased application testability and shortened release cycle from 3 months to 2 weeks by leading 

MVVM adoption inside team for desktop client application development 

• Implemented a cross-session caching mechanism of client-server requests, which has reduced the desktop 

application’s startup time by 80% 

• Won first place on the company’s internal hackathon by creating an experimental iOS application to install and 

update security certificates on mobile devices using animated QR-codes 

Belkasoft 
Oct 2015 - Apr 2018 

Software Engineer 
Saint Petersburg, Russia 

• Decreased disk image scan time by 22% and reduced application’s CPU load by 17%, by implementing an 

asynchronous C# API for reading data from the various file systems and disk images 

• Designed and developed the application’s dashboard page with charts of the latest disk image scans, which was 

widely used in the application’s promotion materials and greatly increased the appeal of the product to customers 

• Separated a pipeline of building Lucene search index by moving it to a dedicated process that handles a persistent 

job queue and, thus, improved reliability and simplified workflow of disk image scan 

• Developed SQLite3 database file parser with support of reading freelist, unallocated space, rollback journal, and 

write-ahead log, which gave access to deleted entries and allowed to work with damaged database files 

• Created an alternative implementation of Android Debug Bridge protocol, which allowed to capture whole mobile 

device storage image via USB for the following data analysis 

EDUCATION 

Saint Petersburg State University 
Sep 2012 - Jul 2016 

Bachelor of Science in Applied Mathematics and Computer Science | GPA: 3.76 (4.76/5) 
Saint Petersburg, Russia 

PROJECTS 

AnkiOneClick | Popup dictionary extension for Chrome which allows creating unknown foreign word flashcards with 
translations for Anki (TypeScript, React, Python, Flask) 

SpbBuildingAgeMaps | Data Visualization of buildings ages in Saint Petersburg based on information parsed from 
several sources and built using OpenStreetMap and CartoDB (C#, SQLite) 

TECHNICAL SKILLS 

Languages: C#, TypeScript, JavaScript, Python, C++ 
Databases: MSSQL, MySQL, SQLite 
Frameworks: WPF, Xamarin, ASP.NET, React, Angular, Backbone.js 
Technologies: CEF, Node.js, Electron, gRPC, Lucene 

"
100,source/ANDREW MIRONOV.pdf,"[' \\n', ' \\n', 'ANDREW MIRONOV \\n', ' \\n', 'Moscow, Russia • +79257810000 •cv@mail.me \\n', ' \\n \\n \\n \\n \\n', 'September 2018 - \\nPresent \\n', 'Senior Full Stack Developer \\n', 'Work History \\n', 'DevOps Engineer / Lead Developer of the Platform Team \\n', 'Heartland Retail (50 employees, web-based POS system) \\n', 'Led the migration to Docker and Kubernetes \\nBuilt a Kubernetes platform from scratch with dedicated staging and production environments \\nCreated a CI pipeline in Buildkite for the staging and production environments \\nPackaged the system components into 29+ Terraform modules and 4+ Helm charts \\nSetup Datadog dashboards and alerts for infrastructure monitoring \\nMigrated the development environment from Vagrant to 15 Docker services, and built tooling \\naround that \\nImplemented a platform for on-demand testing environments allowing developers to spin up an \\nindependent copy of the application in under 5 minutes \\nMoved all clients from Rackspace to Kubernetes on AWS, and saving thousands of dollars in \\nmonthly infrastructure costs \\nIntroduced the RFC discussion process to gather team feedback before implementing features \\nExtracted a loosely coupled internal service out of the monolith and designed a distributed event \\nlog with Redis Stream \\n', ' \\n \\n', 'Technologies: Redis, Kubernetes, Terraform, Helm. \\n', ' \\n', 'May 2015 - \\nSeptember 2018 \\n', 'Senior Full Stack Developer \\n', 'Heartland Retail (50 employees, web-based POS system) \\n', 'Independently developed dozens of new modules by analyzing the requirements and coming up \\nwith an integrated full-stack solution \\nExtended the reporting system with several dimensions and metrics \\nIntegrated the application with Shopify enabling hundreds of clients to start selling online during \\nthe COVID-19 lockdown \\nConnected the POS with Scraffic Traffic Counting services and QuickBooks accounting software \\nDeveloped the Sales Plans, Layaway and Employee Timecards modules integrated with the \\nreporting system \\n', ' \\n \\n', 'Technologies: React, JavaScript, TypeScript, Ruby, Sinatra, Rails, PostgreSQL. \\n', ' \\n', 'Feb 2015 - Present \\nFull Stack Developer / Founder \\n', 'Masterbot (RU) (1 employee, bot platform for Telegram) \\n', 'Spearheaded the chatbot revolution on Telegram \\nLaunched a chat marketing platform reaching 25,000+ of subscribers for the most popular Russian \\nblogger, Ilya Varlamov \\nArranged a contract with a large Russian news media outlet, Moslenta \\nSet up a marketing solution for a popular collaborative blog, Dirty \\n', ' \\n \\n', 'Technologies: Ruby, Rails, MySQL. \\n', 'May 2011 - Feb 2015 \\nSenior Full Stack Developer / CIO \\n', '7 Pikes (30 employees, POS for pharmacies) \\n', 'Led a team of 20 engineers in developing an ERP/POS system \\nCoordinated the installation of the software at 1,000+ pharmacies \\nDesigned and implemented resilient software architecture \\nDeveloped the core Sales module integrated with cash drawers and payment terminals \\nIntegrated software with accounting and human resources systems 1C \\nAssisted with recruiting and interviewing of new and potential developers \\n', ' \\n \\n', 'Technologies: Ruby, Rails, MySQL, Chef. \\n', ' \\n', 'Jul 2010 - May 2012 \\nFull Stack Developer / Founder \\n', 'Jaconda (2 employees, project team chat) \\n', 'Launched a chat platform for engineering teams that is used by hundreds of leading-edge remote \\ncompanies \\nFound a way to provide group chat for Google Talk using any instant messengers \\nContributed file transfers, vCards, and chat statuses support to the popular open-source Ruby \\nXMPP library \\n', ' \\n \\n', 'Technologies: Ruby, Rails, MySQL, EventMachine for XMPP integration. \\n', ' \\n', 'Jul 2007 - Jul 2010 \\nFull Stack Developer / Team Lead \\n', 'Piluli.ru (50 employees, the largest Russian online pharmacy) \\n', 'Lead a team of six developers in building a business process management system for the largest \\nonline pharmacy in Russia \\nIntegrated SIP calling and built an interface for a small call center of five operators \\nAutomated order placement and distribution across ten suppliers \\nProvided technical guidance to team members \\n', ' \\n \\n', 'Technologies: Ruby, Rails, MySQL. \\n', ' \\n', 'Education \\n', ""2005 - 2010 \\nMaster's Degree, Mathematician/Programmer specialization \\n"", 'Orenburg State University (OSU) \\n', ' \\n', '2005 - 2010 \\nAdditional Qualification, Russian-English translator \\n', 'Orenburg State University (OSU) \\n', ' \\n', 'Certifications \\n', 'Ruby Association Certified Ruby Programmer Silver \\n', 'Ruby Association LLC \\n', ' \\n', 'Certified Professional \\n', 'ICAgile \\n', ' \\n', 'Lean/Kanban Professional \\n', 'LeanKanban University \\n', 'Languages \\n', 'Russian — Native \\nEnglish — Advanced \\n', ' \\n \\n', 'Open-Source Projects \\n', ' \\n \\n', 'react-redux-loading-bar - Open-sourced a loading bar (aka, progress bar) for Redux and React \\n', 'blather - Contributed SOCKS5, vCards and chat state notifications support to Ruby XMPP client (XEP-0096, XEP-0065, XEP-0047, XEP- \\n0054, XEP-0085) \\n', 'external-dns - Contributed support for ExternalName services \\n', ' \\n \\n', 'Interests & Hobbies \\n', 'Automating my home with Home Assistant on a Raspberry Pi \\nSeeing the world https://mrnv.me/s8mu \\nCrossFit training \\nDownhill skiing \\nOccasional writing at https://blog.mironov.live \\n', ' \\n', ' \\n']"," 

 

ANDREW MIRONOV 

 

Moscow, Russia • +79257810000 •cv@mail.me 

 
 
 
 
 

September 2018 - 
Present 

Senior Full Stack Developer 

Work History 

DevOps Engineer / Lead Developer of the Platform Team 

Heartland Retail (50 employees, web-based POS system) 

Led the migration to Docker and Kubernetes 
Built a Kubernetes platform from scratch with dedicated staging and production environments 
Created a CI pipeline in Buildkite for the staging and production environments 
Packaged the system components into 29+ Terraform modules and 4+ Helm charts 
Setup Datadog dashboards and alerts for infrastructure monitoring 
Migrated the development environment from Vagrant to 15 Docker services, and built tooling 
around that 
Implemented a platform for on-demand testing environments allowing developers to spin up an 
independent copy of the application in under 5 minutes 
Moved all clients from Rackspace to Kubernetes on AWS, and saving thousands of dollars in 
monthly infrastructure costs 
Introduced the RFC discussion process to gather team feedback before implementing features 
Extracted a loosely coupled internal service out of the monolith and designed a distributed event 
log with Redis Stream 

 
 

Technologies: Redis, Kubernetes, Terraform, Helm. 

 

May 2015 - 
September 2018 

Senior Full Stack Developer 

Heartland Retail (50 employees, web-based POS system) 

Independently developed dozens of new modules by analyzing the requirements and coming up 
with an integrated full-stack solution 
Extended the reporting system with several dimensions and metrics 
Integrated the application with Shopify enabling hundreds of clients to start selling online during 
the COVID-19 lockdown 
Connected the POS with Scraffic Traffic Counting services and QuickBooks accounting software 
Developed the Sales Plans, Layaway and Employee Timecards modules integrated with the 
reporting system 

 
 

Technologies: React, JavaScript, TypeScript, Ruby, Sinatra, Rails, PostgreSQL. 

 

Feb 2015 - Present 
Full Stack Developer / Founder 

Masterbot (RU) (1 employee, bot platform for Telegram) 

Spearheaded the chatbot revolution on Telegram 
Launched a chat marketing platform reaching 25,000+ of subscribers for the most popular Russian 
blogger, Ilya Varlamov 
Arranged a contract with a large Russian news media outlet, Moslenta 
Set up a marketing solution for a popular collaborative blog, Dirty 

 
 

Technologies: Ruby, Rails, MySQL. 

May 2011 - Feb 2015 
Senior Full Stack Developer / CIO 

7 Pikes (30 employees, POS for pharmacies) 

Led a team of 20 engineers in developing an ERP/POS system 
Coordinated the installation of the software at 1,000+ pharmacies 
Designed and implemented resilient software architecture 
Developed the core Sales module integrated with cash drawers and payment terminals 
Integrated software with accounting and human resources systems 1C 
Assisted with recruiting and interviewing of new and potential developers 

 
 

Technologies: Ruby, Rails, MySQL, Chef. 

 

Jul 2010 - May 2012 
Full Stack Developer / Founder 

Jaconda (2 employees, project team chat) 

Launched a chat platform for engineering teams that is used by hundreds of leading-edge remote 
companies 
Found a way to provide group chat for Google Talk using any instant messengers 
Contributed file transfers, vCards, and chat statuses support to the popular open-source Ruby 
XMPP library 

 
 

Technologies: Ruby, Rails, MySQL, EventMachine for XMPP integration. 

 

Jul 2007 - Jul 2010 
Full Stack Developer / Team Lead 

Piluli.ru (50 employees, the largest Russian online pharmacy) 

Lead a team of six developers in building a business process management system for the largest 
online pharmacy in Russia 
Integrated SIP calling and built an interface for a small call center of five operators 
Automated order placement and distribution across ten suppliers 
Provided technical guidance to team members 

 
 

Technologies: Ruby, Rails, MySQL. 

 

Education 

2005 - 2010 
Master's Degree, Mathematician/Programmer specialization 

Orenburg State University (OSU) 

 

2005 - 2010 
Additional Qualification, Russian-English translator 

Orenburg State University (OSU) 

 

Certifications 

Ruby Association Certified Ruby Programmer Silver 

Ruby Association LLC 

 

Certified Professional 

ICAgile 

 

Lean/Kanban Professional 

LeanKanban University 

Languages 

Russian — Native 
English — Advanced 

 
 

Open-Source Projects 

 
 

react-redux-loading-bar - Open-sourced a loading bar (aka, progress bar) for Redux and React 

blather - Contributed SOCKS5, vCards and chat state notifications support to Ruby XMPP client (XEP-0096, XEP-0065, XEP-0047, XEP- 
0054, XEP-0085) 

external-dns - Contributed support for ExternalName services 

 
 

Interests & Hobbies 

Automating my home with Home Assistant on a Raspberry Pi 
Seeing the world https://mrnv.me/s8mu 
CrossFit training 
Downhill skiing 
Occasional writing at https://blog.mironov.live 

 

 

"
101,source/David Samoylov.pdf,"['David Samoylov\\n', '+7 (707) 000-76-27 | eaaanesmlv@gmail.com | linkedin.com/in/aaaenesmlv\\n', 'ABOUT\\n', 'A Software Engineer with 5 years of extensive experience in designing, developing, and maintaining robust backend\\napplications. Enthusiastic about enhancing my core skills while also keeping up with the latest industry trends and\\nbest practices.\\n', 'EXPERIENCE\\n', 'Kaspersky\\nMoscow, Russia\\n', 'Research Developer\\nApr. 2021 – Aug. 2023\\n', '• Developed and maintained a development environment for anti-malware records, complemented by an\\n', 'integrated version control system and support for distributed compilation across multiple platforms.\\n', '• Implemented a command-line tool to facilitate the creation of Visual Studio projects and the generation of C++\\n', 'DLLs for debugging purposes, which significantly improved malware analysts workflow.\\n', '• Created a log analysis tool that helped to identify recurring problems and establish connections between\\n', 'seemingly unrelated issues, which enhanced team troubleshooting capabilities.\\n', '• Collaborated with a team to employ an application metric collection system, integrating it with Grafana for\\n', 'dashboards and alerts, resulting in reduced incident response time from hours to minutes.\\n', '• Accomplished the migration of the anti-malware records from Perforce to Git.\\n', '• Developed a plugin that performs static code analysis of a domain-specific programming language.\\n', '• Migrated a project CI pipeline from TeamCity to Azure DevOps.\\n', 'Komdiagnostika\\nOrenburg, Russia\\n', 'Software Engineer\\nAug. 2018 – Apr. 2021\\n', '• Developed and maintained a software solution for vibration-based condition monitoring, automated\\n', 'spectrum analysis and predictive maintenance.\\n', '• Implemented a database disk usage prediction system, enhancing monitoring capabilities.\\n', '• Participated in application profiling and optimization and accelerated spectrum harmonic analysis\\n', 'algorithm up to four times.\\n', '• Engineered a portable device for vibration analysis, including designing the UI layout, developing the\\n', 'application architecture, and implementing the software for data collection and analysis.\\n', 'EDUCATION\\n', 'Orenburg State University\\nOrenburg, Russia\\n', 'Master of Science in Mathematics and Computer Science\\nSep. 2016 – Jun. 2018\\n', 'Orenburg State University\\nOrenburg, Russia\\n', 'Bachelor of Science in Mechanical Engineering\\nSep. 2012 – Jun. 2016\\n', 'TECHNICAL SKILLS\\n', 'Languages: C#, PowerShell, Python, SQL. Familiar with C/C++ Frameworks: .NET, .NET\\nFramework, WPF. Familiar with ASP.NET Core Developer Tools: Git, TFS, TeamCity,\\nAzure DevOps, Elasticsearch, Grafana Libraries: NUnit, xUnit, Serilog, NLog,\\n', 'Benchmark.NET, Dapper\\n']","David Samoylov

+7 (707) 000-76-27 | eaaanesmlv@gmail.com | linkedin.com/in/aaaenesmlv

ABOUT

A Software Engineer with 5 years of extensive experience in designing, developing, and maintaining robust backend
applications. Enthusiastic about enhancing my core skills while also keeping up with the latest industry trends and
best practices.

EXPERIENCE

Kaspersky
Moscow, Russia

Research Developer
Apr. 2021 – Aug. 2023

• Developed and maintained a development environment for anti-malware records, complemented by an

integrated version control system and support for distributed compilation across multiple platforms.

• Implemented a command-line tool to facilitate the creation of Visual Studio projects and the generation of C++

DLLs for debugging purposes, which significantly improved malware analysts workflow.

• Created a log analysis tool that helped to identify recurring problems and establish connections between

seemingly unrelated issues, which enhanced team troubleshooting capabilities.

• Collaborated with a team to employ an application metric collection system, integrating it with Grafana for

dashboards and alerts, resulting in reduced incident response time from hours to minutes.

• Accomplished the migration of the anti-malware records from Perforce to Git.

• Developed a plugin that performs static code analysis of a domain-specific programming language.

• Migrated a project CI pipeline from TeamCity to Azure DevOps.

Komdiagnostika
Orenburg, Russia

Software Engineer
Aug. 2018 – Apr. 2021

• Developed and maintained a software solution for vibration-based condition monitoring, automated

spectrum analysis and predictive maintenance.

• Implemented a database disk usage prediction system, enhancing monitoring capabilities.

• Participated in application profiling and optimization and accelerated spectrum harmonic analysis

algorithm up to four times.

• Engineered a portable device for vibration analysis, including designing the UI layout, developing the

application architecture, and implementing the software for data collection and analysis.

EDUCATION

Orenburg State University
Orenburg, Russia

Master of Science in Mathematics and Computer Science
Sep. 2016 – Jun. 2018

Orenburg State University
Orenburg, Russia

Bachelor of Science in Mechanical Engineering
Sep. 2012 – Jun. 2016

TECHNICAL SKILLS

Languages: C#, PowerShell, Python, SQL. Familiar with C/C++ Frameworks: .NET, .NET
Framework, WPF. Familiar with ASP.NET Core Developer Tools: Git, TFS, TeamCity,
Azure DevOps, Elasticsearch, Grafana Libraries: NUnit, xUnit, Serilog, NLog,

Benchmark.NET, Dapper

"
102,source/BOGDANOV NIKOLA.pdf,"['BOGDANOV NIKOLA \\n', ' +7(927)9067111 \\n a@bogbbbb.co \\n', 'EDUCATION \\n', 'Higher School of Economics, Moscow \\nSep 2019 - Expected Jun 2023 \\n', 'Bachelor in Applied Mathematics and Computer Science \\n \\nGPA: 8.68/10.0 \\n', 'WORK EXPERIENCE \\n', 'Software Engineering Intern \\nSept 2020 - Dec 2020 \\n', 'Sibur \\n \\nMoscow, Russia \\n', '· Improved path nding algorithm by implementing new rules and restrictions, which resulted in average \\n', 'commute time reduction by approximately 50% \\n', '· Researched the possibility of gRPC framework usage to transfer les larger than 500 MB \\n \\n', 'TECHNICAL SKILLS \\n', 'Programming Languages \\nC++, Python, JavaScript, C#, Java \\n', 'Technologies \\nJSON, REST, SQL, HTML, CSS, LaTeX \\n', 'Tools \\nGit, GitHub, Visual Studio, PyCharm, Docker, Linux \\n', 'PERSONAL  PROJECTS \\n', 'lksh-sport \\n', '· Implemented REST API for the sports site using Python and Flask, that processed approximately 200 \\n', 'teams and players registration requests \\n', '· Developed a telegram bot using Python allowing the administrator to approve or decline the requests \\n', 'Snake game \\n', '· Implemented a clone of the snake game in C++, using SDL2.0 \\n', 'RuzoomBot \\n', '· Developed a telegram bot using Python that sends noti cations about upcoming classes to subscribed \\n', 'chats \\n', 'Imaginarium (Dixit) \\n', '· Developed backend for the online version of a game Dixit using Python \\n· Created the UI design using HTML5 and CSS3, deployed the project using Heroku \\n', 'Flappy AI \\n', '· Created a clone of a appy bird game using HTML5 and JS \\n· Developed a self-playing mode using a single perceptron and a genetical algorithm to update the \\n', 'population \\n', ' \\n', 'ACHIEVEMENTS \\n', 'All Russian team programming Olympiad \\n2018 \\n', 'Finalist - 124th place of about 500 \\n', 'All Russian Olympics  Information Technologies \\n2018 \\n', 'Gold medalist - 17th place of about 1400 \\n', 'All Russian project contest Great Challenges \\n2018 \\n', 'Winner - member of one of 12 winning teams out of more than 40,000 participants \\n', 'GSOM-Hack Hackathon \\n2020 \\n', 'Winner \\n', '· Solved the given task as a Pickup and Delivery Problem with Time Windows using a genetic algorithm \\n', 'written in C++, showing results 3 times better than the next competitor \\n', '· As a result, the team was invited for the internship at Sibur \\n']","BOGDANOV NIKOLA 

 +7(927)9067111 
 a@bogbbbb.co 

EDUCATION 

Higher School of Economics, Moscow 
Sep 2019 - Expected Jun 2023 

Bachelor in Applied Mathematics and Computer Science 
 
GPA: 8.68/10.0 

WORK EXPERIENCE 

Software Engineering Intern 
Sept 2020 - Dec 2020 

Sibur 
 
Moscow, Russia 

· Improved path nding algorithm by implementing new rules and restrictions, which resulted in average 

commute time reduction by approximately 50% 

· Researched the possibility of gRPC framework usage to transfer les larger than 500 MB 
 

TECHNICAL SKILLS 

Programming Languages 
C++, Python, JavaScript, C#, Java 

Technologies 
JSON, REST, SQL, HTML, CSS, LaTeX 

Tools 
Git, GitHub, Visual Studio, PyCharm, Docker, Linux 

PERSONAL  PROJECTS 

lksh-sport 

· Implemented REST API for the sports site using Python and Flask, that processed approximately 200 

teams and players registration requests 

· Developed a telegram bot using Python allowing the administrator to approve or decline the requests 

Snake game 

· Implemented a clone of the snake game in C++, using SDL2.0 

RuzoomBot 

· Developed a telegram bot using Python that sends noti cations about upcoming classes to subscribed 

chats 

Imaginarium (Dixit) 

· Developed backend for the online version of a game Dixit using Python 
· Created the UI design using HTML5 and CSS3, deployed the project using Heroku 

Flappy AI 

· Created a clone of a appy bird game using HTML5 and JS 
· Developed a self-playing mode using a single perceptron and a genetical algorithm to update the 

population 

 

ACHIEVEMENTS 

All Russian team programming Olympiad 
2018 

Finalist - 124th place of about 500 

All Russian Olympics  Information Technologies 
2018 

Gold medalist - 17th place of about 1400 

All Russian project contest Great Challenges 
2018 

Winner - member of one of 12 winning teams out of more than 40,000 participants 

GSOM-Hack Hackathon 
2020 

Winner 

· Solved the given task as a Pickup and Delivery Problem with Time Windows using a genetic algorithm 

written in C++, showing results 3 times better than the next competitor 

· As a result, the team was invited for the internship at Sibur 

"
103,source/Pavel Prysiazhniuk.pdf,"['Pavel Prysiazhniuk\\n', 'FRONT END DEVELOPER\\n', 'Lynnwood, WA —taaay.pr401@gmail.com — (425) 000-6524 — Linkedin\\n', 'SUMMARY\\n', 'Skilled Front End engineer with 6 years of experience in architecting, building, and delivering scalable solutions in the fintech,\\ne-commerce, and entertainment industries. I have expertise in coaching, mentoring, and interviewing engineers. I’m looking for a\\nproject that will solve real problems and where I can see the value I bring to clients.\\n', 'EDUCATION\\n', 'College of Service and Design\\nBila Tserkva, Kyiv Oblast\\n', 'Bachelor’s degrees in Information Technology\\nSept. 2012 – June 2015\\n', 'Markup course\\nHTML & CSS, MUI, Ant Design\\nJuly 2016\\n', 'IT-INCUBATOR course\\nReact, Redux, TypeScript, JavaScript\\nAugust 2016\\n', 'EXPERIENCE\\n', 'Attract group\\nLas Vegas, NV\\n', 'Front end developer\\nMay 2019 - Present\\n', '• Boosted web-app rendering time 2x using Server-Side Rendering.\\n• Sped up rendering of detected objects in the play mode by 30x (up to 30fps with 5000 detected objects in each frame)\\n• Improved the velocity of displaying data of tracked object in real-time by 50%\\n• Increased the accuracy of audio and video processing from 100ms up to 17ms\\n• Created an API SDK with data normalization for 3 platforms (Web, Mobile, Desktop) which reduced time to develop a web\\n', 'application 4x.\\n', '• A go-to person in the company in the area of Server-Side Rendering.\\n• Built a solution for QA to quickly test on different users, which reduced time to log in from 1-2 min to 10 sec.\\n• Created reusable components for React and React Native apps, which reduced time to develop a mobile app by 20-30%.\\n', 'It-incubator\\nVilnius, LT\\n', 'Mentor of students\\nApril 2018 - May 2019\\n', '• The process of identifying common mistakes among students has been optimized, which has increased the speed and level of\\n', 'passing test tasks by 15%.\\n', '• Developed mentoring and training programs\\n• Implemented new approaches and technologies on the company level\\n• Conflict resolution, problem-solving\\n• Technical Support & Code Review\\n', 'Esverito\\nKrakow, PL\\n', 'Front end developer\\nMay 2017 - April 2018\\n', 'Project: CRM for a tourism company. Web and mobile apps for online tickets booking.\\n', '• Performance optimization for displaying and loading comments and replies for a video stream.\\n• Accelerated work and processing requests from users 5 times for operators, automating work processes within the company\\n', 'through the development of CRM.\\n', 'TECHNOLOGIES\\n', 'Languages: JavaScript, TypeScript, NodeJS\\nFrameworks/Libraries: React, NextJs, NestJs, D3.js, GraphQL, Axios, Apollo client, Express\\nState Managers: Redux, GraphQL, Apollo client\\nManagement and Deployment: Git, Google cloud, PostgreSQL, MongoDB, Redis, Amazon services, Docker, Jenkins, Google API,\\nDataDog, Elasticsearch, Kibana\\nHTML/CSS: HTML & CSS, MUI, Ant Design\\nTools/Utilities: PWA, NPM, SSG, REST API, Websockets, Gulp/Webpack, Storybook, Cypress, Jest testing, i18n, Stripe, PayPal, Square\\n']","Pavel Prysiazhniuk

FRONT END DEVELOPER

Lynnwood, WA —taaay.pr401@gmail.com — (425) 000-6524 — Linkedin

SUMMARY

Skilled Front End engineer with 6 years of experience in architecting, building, and delivering scalable solutions in the fintech,
e-commerce, and entertainment industries. I have expertise in coaching, mentoring, and interviewing engineers. I’m looking for a
project that will solve real problems and where I can see the value I bring to clients.

EDUCATION

College of Service and Design
Bila Tserkva, Kyiv Oblast

Bachelor’s degrees in Information Technology
Sept. 2012 – June 2015

Markup course
HTML & CSS, MUI, Ant Design
July 2016

IT-INCUBATOR course
React, Redux, TypeScript, JavaScript
August 2016

EXPERIENCE

Attract group
Las Vegas, NV

Front end developer
May 2019 - Present

• Boosted web-app rendering time 2x using Server-Side Rendering.
• Sped up rendering of detected objects in the play mode by 30x (up to 30fps with 5000 detected objects in each frame)
• Improved the velocity of displaying data of tracked object in real-time by 50%
• Increased the accuracy of audio and video processing from 100ms up to 17ms
• Created an API SDK with data normalization for 3 platforms (Web, Mobile, Desktop) which reduced time to develop a web

application 4x.

• A go-to person in the company in the area of Server-Side Rendering.
• Built a solution for QA to quickly test on different users, which reduced time to log in from 1-2 min to 10 sec.
• Created reusable components for React and React Native apps, which reduced time to develop a mobile app by 20-30%.

It-incubator
Vilnius, LT

Mentor of students
April 2018 - May 2019

• The process of identifying common mistakes among students has been optimized, which has increased the speed and level of

passing test tasks by 15%.

• Developed mentoring and training programs
• Implemented new approaches and technologies on the company level
• Conflict resolution, problem-solving
• Technical Support & Code Review

Esverito
Krakow, PL

Front end developer
May 2017 - April 2018

Project: CRM for a tourism company. Web and mobile apps for online tickets booking.

• Performance optimization for displaying and loading comments and replies for a video stream.
• Accelerated work and processing requests from users 5 times for operators, automating work processes within the company

through the development of CRM.

TECHNOLOGIES

Languages: JavaScript, TypeScript, NodeJS
Frameworks/Libraries: React, NextJs, NestJs, D3.js, GraphQL, Axios, Apollo client, Express
State Managers: Redux, GraphQL, Apollo client
Management and Deployment: Git, Google cloud, PostgreSQL, MongoDB, Redis, Amazon services, Docker, Jenkins, Google API,
DataDog, Elasticsearch, Kibana
HTML/CSS: HTML & CSS, MUI, Ant Design
Tools/Utilities: PWA, NPM, SSG, REST API, Websockets, Gulp/Webpack, Storybook, Cypress, Jest testing, i18n, Stripe, PayPal, Square

"
